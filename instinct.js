/*
Instinct made by Shark
- Code is public, if you want to reuse for private mods or learn 
using this script, feel free to. However, make sure to give 
credit to keep everyone happy. Using this code is a privilege, 
as it isn't obfuscated
*/
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
context = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
Button = android.widget.Button,
LinearLayout = android.widget.LinearLayout,
RelativeLayout = android.widget.RelativeLayout,
PopupWindow = android.widget.PopupWindow,
ScrollView = android.widget.ScrollView,
TextView = android.widget.TextView,
CheckBox = android.widget.CheckBox,
LayoutParams = android.view.ViewGroup.LayoutParams,
Typeface = android.graphics.Typeface,
Switch = android.widget.Switch,
Toast = android.widget.Toast,
Runnable = java.lang.Runnable,
SystemClock = android.os.SystemClock,
AlarmManager = android.app.AlarmManager,
AudioManager = android.media.AudioManager,
ToneGenerator = android.media.ToneGenerator,
Handler = android.os.Handler,
Looper = android.os.Looper,
System = java.lang.System,
DownloadManager = android.app.DownloadManager,
Dialog = android.app.Dialog,
ConnectivityManager = android.net.ConnectivityManager,
Notification = android.app.Notification,
PendingIntent = android.app.PendingIntent,
View = android.view.View,
ColorDrawable = android.graphics.drawable.ColorDrawable,
Color = android.graphics.Color,
Gravity = android.view.Gravity,
PorterDuff = android.graphics.PorterDuff,
Intent = android.content.Intent,
Uri = android.net.Uri,
activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
TranslateAnimation = android.view.animation.TranslateAnimation,
Animation = android.view.animation.Animation,
RotateAnimation = android.view.animation.RotateAnimation,
DecelerateInterpolator = android.view.animation.DecelerateInterpolator,
LinearInterpolator = android.view.animation.LinearInterpolator,
Environment = android.os.Environment,
FileInputStream = java.io.FileInputStream,
SharedPreferences = android.content.SharedPreferences,
numbers = android.text.InputType.TYPE_CLASS_NUMBER,
number = android.text.InputType.TYPE_NUMBER_FLAG_SIGNED,
ImageView = android.widget.ImageView,
EditText = android.widget.EditText,
CompoundButton = android.widget.CompoundButton,
SeekBar = android.widget.SeekBar,
ProgressBar = android.widget.ProgressBar,
ToggleButton = android.widget.ToggleButton,
FrameLayout = android.widget.FrameLayout,
BitmapFactory = android.graphics.BitmapFactory,
ViewGroup = android.view.ViewGroup,
GradientDrawable = android.graphics.drawable.GradientDrawable,
Bitmap = android.graphics.Bitmap,
Canvas = android.graphics.Canvas,
Paint = android.graphics.Paint,
Path = android.graphics.Path,
LinearGradient = android.graphics.LinearGradient,
Shader = android.graphics.Shader,
MotionEvent = android.view.MotionEvent,
BitmapDrawable = android.graphics.drawable.BitmapDrawable,
StateListDrawable = android.graphics.drawable.StateListDrawable,
ViewTreeObserver = android.view.ViewTreeObserver,
ClipDrawable = android.graphics.drawable.ClipDrawable,
LightingColorFilter = android.graphics.LightingColorFilter,
WindowManager = android.view.WindowManager,
DisplayMetrics = android.util.DisplayMetrics,
ScriptManager = net.zhuoweizhang.mcpelauncher.ScriptManager,
File = java.io.File,
FileOutputStream = java.io.FileOutputStream,
Base64 = android.util.Base64,
HardwareInformation = com.mojang.minecraftpe.HardwareInformation,
sdcard = new android.os.Environment.getExternalStorageDirectory(),
mcfontpath = sdcard + "/games/com.mojang",
pathnew = sdcard + "/games/com.mojang/minecraftpe/instinct",
path = sdcard + "/games/com.mojang/minecraftpe",
PathPix = "/games/com.mojang/minecraftpe/instinct",
AlertDialog = {
Builder: function() {
return android.app.AlertDialog.Builder;
}
},
DialogInterface = android.content.DialogInterface,
DataOutputStream = java.io.DataOutputStream,
BufferedReader = java.io.BufferedReader,
Thread = java.lang.Thread,
TypedValue = android.util.TypedValue,
Byte = java.lang.Byte,
Context = android.content.Context,
Handler = android.os.Handler,
TextWatcher = android.text.TextWatcher,
FileWriter = java.io.FileWriter,
InputStreamReader = java.io.InputStreamReader,
SpannableStringBuilder = android.text.SpannableStringBuilder,
ImageSpan = android.text.style.ImageSpan,
Spannable = android.text.Spannable,
StringBuffer = java.lang.StringBuffer,
Calendar = java.util.Calendar,
Html = android.text.Html,
ZipFile = java.util.zip.ZipFile,
ByteBuffer = java.nio.ByteBuffer,
MediaPlayer = android.media.MediaPlayer,
String = java.lang.String,
StringBuilder = java.lang.StringBuilder,
printWriter = java.io.printWriter,
serversicon = "",
blackbox = "iVBORw0KGgoAAAANSUhEUgAAAZAAAAGQAQMAAAC6caSPAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAANQTFRFAAAAp3o92gAAAAF0Uk5Tik2LslgAAAAqSURBVHic7cExAQAAAMKg9U/tbwagAAAAAAAAAAAAAAAAAAAAAAAAAIA3T7AAATkWl3gAAAAASUVORK5CYII=",
closeicon = "iVBORw0KGgoAAAANSUhEUgAAACsAAAAUCAMAAAAjrzSKAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAFdQTFRFyHVrv2JZvVxSv11UvFtRs0M5rTgsnRcJcxIImhkLlhYKmBcJmxYKlRUJnhgKmRgKnxkLoBoMkxcJkxgKoBoPbBAHu1pQoyEVoR8RYw0GqS8gnBgKhxYK2mKLRQAAAVRJREFUeJyNUotywiAQRNMK9whnJGlL2///zu4BptrRma4ZgbvlHnuE8ACHx4DnOE3TyxH714bTE8QUwkQsTCozEyk+ZaGcicjOC85uVF34kpwrRHIRY4tXONFJZ8WXcUEIEcA9shkX6W7cwL/TjbIuaqUwNTuTx8W6hyObZ6F2gBceXBUTXtcYtxDecF0ExngL1UxuHbWQLu/gnsBd7nju9AWVYsciJKWIOJc6GP2jY6VrSQ7P3QBJOtcrJ1cDS+61oHVDRJSQrZiniY2rq47Y8FPjIeC6QGpGqc6DpMW5mATkaRWcdZRz32jHFg4n0b9WI3UBpeCn91xPPToYXP14EtezZvWnAFml2zFUK66vzP4E0JEm52p7L+a6+5RQKu9vQ4V0SD642PloiK7t/SaeuQ0f80oV3AfK98N6Y10juJ8x/Q9bDV/fvt6g1m231N2aUq0/OukghQVChewAAAAASUVORK5CYII=",
pvpicon = "iVBORw0KGgoAAAANSUhEUgAAACsAAAAUCAMAAAAjrzSKAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAFdQTFRFdLW+Y6y0XamyX6u0XKixRZ6mOZWgGIGOE19oGX+LGHyIF32JGYCMF3uHGYKPGH6KGoOQG4SRF3mFGHmFHoiREVlhW6ewI4iUH4aSD1NZLo2bGYGNFnB6mCwjbQAAAVRJREFUeJyNUotywiAQRNMK9whnJGlL2///zu4BptrRma4ZgbvlHnuE8ACHx4DnOE3TyxH714bTE8QUwkQsTCozEyk+ZaGcicjOC85uVF34kpwrRHIRY4tXONFJZ8WXcUEIEcA9shkX6W7cwL/TjbIuaqUwNTuTx8W6hyObZ6F2gBceXBUTXtcYtxDecF0ExngL1UxuHbWQLu/gnsBd7nju9AWVYsciJKWIOJc6GP2jY6VrSQ7P3QBJOtcrJ1cDS+61oHVDRJSQrZiniY2rq47Y8FPjIeC6QGpGqc6DpMW5mATkaRWcdZRz32jHFg4n0b9WI3UBpeCn91xPPToYXP14EtezZvWnAFml2zFUK66vzP4E0JEm52p7L+a6+5RQKu9vQ4V0SD642PloiK7t/SaeuQ0f80oV3AfK98N6Y10juJ8x/Q9bDV/fvt6g1m231N2aUq0/OukghQVChewAAAAASUVORK5CYII=",
pvpdisable="iVBORw0KGgoAAAANSUhEUgAAACsAAAAUCAMAAAAjrzSKAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAE5QTFRFA2VzAFhkAFNhAFZkAFJfAENPADVGABcqAAAAABQmAA8hABEjABUnAA4gABgsABIkABotABsvAAsdACEvAFBeACEzAB4wACk+ABcpAAAMjY2iPwAAAUJJREFUeJyNUgmSgzAMo2WX4IO4hD3//9GVkvRgh85UMDlsxZHtDMMBTseA5zyO49sZ6/eK6QnSPAyjqKm4LSri+F1NchaRuKzY0+i+apnJNRErFhrpChJJujj+jAMmiADuWSO0WHPjBEbSQ7KvHqWoVLsK42K+hZNYFpO6gRceHLUw3bZEvR84bgZjeoR7Flq7FvH1E9wJ3HXHo5MTlGKlZsinGPVO0qDIHxm7XCURvLsCJWlcKhdWA1NuWpB6ICIk5CjBa1Ll+uY9NvxSeQi4rSi1Qip5KGkhF51AeaqCi3c5+0Qb5uE0mf+3hniqmvD5nsurewad619P4vLW7HwKKKs1O5oahfW1hU8AGflMrtf3Eqw7uwSpensbbuK95J2LFVsjck3vfvGitfnoV+UeVL5ttgfrlsD9xvAihp/fl7l/8iUdy+bHrjwAAAAASUVORK5CYII=",
logicon = "",
questionicon = "iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0AgMAAAC2uDcZAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAlQTFRFAAAAcHBwAAAAGqykUgAAAAN0Uk5TAP//RFDWIQAAAStJREFUeJzt2iEShDAMQFEMpqfDrOF0GExPubKimQ6docAu7/vk+UymSZIkSZKkP2n+9LbQ6XQ6nU6n0+l0Op1Op9Pp9FP1yFxzq705sdHpdDqdTqfT6XQ6nU6n0+n0QXq0q3+CTqfT6XQ6nU6n0+l0Op1Op9PpdDqdTqfT6XQ6nU6n0+n0X9NLKdeVXZFJp9PpdDqdTqfT6XQ6nU6n00fpUe3LYBSdTqfT6XQ6nU6n0+l0Op1Ov0c/U6LT6XQ6nU6n0+l0Op1Op9Ppx0u5jk6n0+l0Op1Op9PpdDqdTqdfqUfXwmWwSafT6XQ6nU6n0+l0Op1Op9OP62/5LaTT6XQ6nU6n0+l0Op1Op9OfppdSrqPT6XQ6nU6n0+l0Op1Op9Pp9+iSJEmSJF3WF4UdSU4HGwCuAAAAAElFTkSuQmCC",
boomicon = "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",
avoidicon = "",
phaseicon = "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",
booticon = "",
jetpackicon = "iVBORw0KGgoAAAANSUhEUgAAACYAAAAmCAMAAACf4xmcAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAW5QTFRFAAAAL0tLNEhKL0lXIi8xy8Ce0cWly72ZNkxQybF9zrB0ya13p4lPpIhSqYZQzLB6EBERIx8XAQMAHiIaBwgDHB0WAAIABwEApIlKHikpExkYHSQqEhUYAgAAFx8iEx0gqIZKz7B9IjdBI1RoI0hYAAAAHjpMOExO9v/+S2l5M0lNNUtXvbKWn5NxNUtTLlNbDBUSHjE6iopyp4dWmYtoMkhQFTRDAwICxbeNy695p4VToZNtMkpKLkpQpYlTnotaqYdLNEhMyLKKp5FnooxgoJBipY1dp49fpIxcpJt2uqyCmo1UN0pKybKGoopaxbV4OUA/lo5iL0tNzLFzp4lHpYlPoItQLkpcMExOK0tVOk9QJkpZNUpOM0dIK0hOM0lRMkhUNVBTLk1QLkxSL0tRK0xPAAAKAAgKAAAEAAMEAAIEMUdP//AA//8A//0AL0ZHOUZK//oA/8MAN0lI/70A/7YA/5YD/3IA/1YA/zsAWRI4nAAAAHp0Uk5TAP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9bcsYGAAACcklEQVR4nLWTiVPaQBTGF0hBLgUCGMJtWKgRREWKVOW21KJgURDltGDFIygoYP/7bjbgFJtxpjP2y5vZmff99u3uyy4A/0kSiXRWMjGK+CB/JQUhgs0pVepZqaSimEY7q3lRbEGnN5BGg8lgNhkN+kW9nhLFVCYLTVht1kU7aXMQTlLvEsXcdnqJ8VhsENosHsbrXJzFfFKfgJkI5uOy1wqh1bvMMMSk2hy7ghvh9wf4k6+6jQ5P0LuEqq2tM0HGYcTYit+/gTiZwu0ObYZ5zE4T3k+kLgJtznUvQeNFJVvR6OftHbCriMbimyw+ArlmoWmH2UzqaMuag0wgLJlaiIW2WR7TTrB0Jr2XSWe+ZLNfs/FMZt+Fsah2FhNt7z9j33y5HGs8WBXBkslk6jCYx1jhiPqOqolhfLWtIx4rKo5PQpt/Y1SpLBzh+EQbQNhpsXJ6xkbOZ7CNKlWru6T1SNJXqZw2WMDKFYHA/utqe4FEGjekJpcHtpEtU6D+8XtrKjWxF2k0+XJovg6ANKWO5dMsCDdbrdqFBP29H412B6tYbCN1OhWUvKw0KpKLFgDwZ/FqelkgDgCMOLDMV+ddfoyYD66n2A0OAK5xCDO7O/xMCO3oE1K34WY4jC5LjW3ehoXnB6HZDiHy7ziuN5l5X9BQObTN5KGKcj0IuT7HcXcADNDATbBHN1XKtQGoFtSlxKOQ421uIGDcE049uMvl+CVaVFkoawVsMMGGfNXeEOdWqg1Zq3EvaTfOdqu7ODXsIbuP7NETN5wetIt1g9UVcqOBYI9H/ZHIe5xqPOph+3l8N34De36e2r/eoP6w3xd7P/0G6x+ShoHpVFUAAAAASUVORK5CYII=",
spidericon = "",
autobridgeicon = "",
coordinatesicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAHlBMVEX///8WFhZkZGQeFAH/FBTAwMAvLy9/f39jY2M3NzfmTHofAAAAAXRSTlMAQObYZgAAAcBJREFUeF7t2cFpHEEUhGGlIJyBIxA4BaegBGxwAj4oAF981FXZGvb1DHo/3dU1YITN1nfb3Xn132cfHiIi4ro3H099XBJ46uOSwFMflwSe+rgk8NTHJYGnPi4JPPVxSeCpj0sCT31cEnjq45LAUx+XBJ76uCTw1Mclgac+Lgk8Vfrl7+Flrx/qZn80kUR2+mEiG/0wkY1+uIiMH4/Z8sM3Ws9Drb0mspBIIonsJfIXI32dt3tfm+PbSv78UhI5JXJJIpckcsk/F3l/55mvN98TOSVySSKXJHJJItq3z8VYHxJJJJFEpP8k8lj42HtHhN/P1NqnRBJJREgkkY+O1MuQl9EyktAPH+tNza9EFvphIhv9MJGNfpjIRj+8l8j4L3KalGoVElnh/k0iK9y/SWSF+zeJrHD/5owM42OPODhcau3pWE/kwPmSyALnSyILnC+JLHC+JLLA+TKPDKM1cHCmrZ642/RHOTiTyImDM4mcODiTyImDM3cd6XCp8NTHJYGnPi4JPPVxSeCpj0sCT31cEnjq45LAUx+XBJ76uCTw1Mclgac+Lgk89XFJ4KmPSwJPfVwSeOrjksDTiIi4L38AplBSw3DeRmcAAAAASUVORK5CYII=",
ncoordinatesicon = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcBAMAAACAI8KnAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAABhQTFRFAAAACgoOGhQnHhgrPDBWwMDA/8EAv1oAc0UspAAAAAh0Uk5TAP/////////VylQyAAAAWklEQVR4nIXQ0Q3AIAhFUVZ4K7ACK7ACK3SFrl8VNFGIvX+HDyMQ/YZRTWbRXgx2skRqSOx63hig4nLN6UzICpntcxNS0NQX9Kd2Emysp66T7TTOuMbB+yUvfYfBMpsp1mqbAAAAAElFTkSuQmCC",
fonticon="iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAMAAABHPGVmAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAEtQTFRFAAAAG5z+Iun/JMT/Irv/HZn/tOD+Gar/YM/7AgYHy+n/Zc34sO//7vj/hd3/auX/6PD1n6CgGpn/dHZ2JDEzz8/PICIjRkdHRXaAUTTrbgAAABl0Uk5TAA/yqFlCIssSG3xQzBWR1OnzcrdO9pnqZPaT6Q8AAAQiSURBVHic7djZtps6DAZgxgAhCXEww/s/6ZHkUR4S0qZrnQv+i6Y7pf62bAaLojhz5syZM2fO/I/TU8pEfm2klZ85/XvlJ441+obStu3vmcAwUPtbJoGkKvopUtcZ58hYuWV1MYjKK563vycgLVPAeYXlfEG0LP73HEHmdVDJjq/no23NZdLaWqqq6mw5PvPRMCM3zTiOD52rzgUD34+qlgrTdTHzlkDghalrPfztdruGIccpwHTEvFVCAv+7ETDPZwQhYxHNvFU4QXM8YTQAiWqBPEKlwzMgpzgjJihsQVx4LXExCcQRypg4cYkTIE5JIKwMOG5iRgaA9L1afKZ0acUrAw+qKh/BczdNXPSNzEdCJWF0yjDINOHplREu+gH2XgkQbagjnTGOfGhvktXFHyKk2MVnCBbijCpl3DPXVohUyVJiQylI4IzskEskYGSZKoUpPuLWwyJojLuUAwaPU3/ip/4Rs6eRLkaiQggBYhfLsggxzzDsPs+zxF+fPuWqs8eIX4qHhEaljHmhO8pzWeZhmMUiCBFCyEFu8CHmbZVppMsg/mFTjXUoACMAWZ4weDFI8RQrIJt4LtuWqyRC2hipEcE6YLxhnYWHrITAtxt8rrLsY6QihBQf6UKkgclCQ6273EME1h2RYe8zSPcRge3OKLGQedApQqRQSP8dwmer6QmRA55UkKiSHyCNReZw4RkilXEAic8ui6yEwNrkkTEu5AtE0JrIHc5Vg6zhwn+DhPNFCJ7CeBWuCtlh8G2FM9dURMiOz8aUESGqlAApqZQFrmqFSCxl27YZrkH4aUVkW9cmg4TXSVwK7thLOYjFXPKCLnV99UM9hdzwNgN/hcma8oUkbvUcKeGXp3HhHrXjSu+zul/RzWXdKCtuOo4hqNQRUsKsSHiYwO1e3+OlXOneD3NJ2Xfa2CSNGMFVSSj7UMTBWwkFN8SPKUQ6vxCOBIpGIDIg5KV3xoOMKWW8Eg95o3SRwnZod7dPcQZTuBFuvEixxdSeYo4M9o7YVISIqqOOdyuFv4X0lMYppSqBIQ9nOMUYcSGF2UORAtW4WtSh8K+hwQiDdKHBEZpoatMU05la2qShOpcpUOyau309W08IrSh1gy/XcCLTBwg2Jro58hFXRnpXT4hmqFl8eUjDEdX9mKbCIYqoWR0pRDvYcroOGnvTkQlX1xtZw3Xa+X7ufveZUfW2yhkNYpu4W4w44k3PeL9zRkOjvhpse82JW5LId79MudvGk3fw16vaUD6ZkSFSfXxaYXly4pYiPryRuH9gbiy6Rgu8wtcvSSNU/JUOu3cbLhx758WX/nJJQA7QJ6B9t8Ne3+UNzdjnhffcCOMPHr+HPPLurkykfZPvhSyTklIHHTWOvSNM5jDx58xXxCf8R4OdOXPmzJkzZ/5d/gP0W4XerTUPPQAAAABJRU5ErkJggg==",
jesusicon = "",
leveffect="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAAAAAA7VNdtAAAAiklEQVR4Ae3Whw3DIBCF4azCUJnzFmEWZogw5b+opZgOT4X6SQ81+zF2nl/mPwIwXwT0HzFfZn1yiN/T85KES86JhKvMSxK/cldEmFvrV+VIugRjVob4GZcgVLtLePg7Kk9SmQSh5Ykux14A94lHOtTz8aAMIbpQqlSQgAigONGZiTT4Ijf4uxg6L0+0Gm+Lm4H9AAAAAElFTkSuQmCC",
teleporticon = "",
survivalflyicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAKlBMVEUAAACPj7OIiJ6MjIyQkL2OjqSMjKKCgpiRkcOCgoJ4eHiRkcSIiIg1NTW11QINAAAAAXRSTlMAQObYZgAAAcFJREFUeF7tmbtNQ0EQRWmAACEaoAVKAEqgBSRSAtwCAREZJWDRAZRAgoT4yr0gz33Ib8cLM7uyJT7nhG/m3pONtHobGwAAAADwD5g14xsS+IoY35DAV8T4hgS+IsY3JPAVMb4hga+I8Q0JfEWMb0jgK2J8QwJfEeMbEviKGN+QwFfE+IYEviLGN9TZHEfujVtj/L3g3cZ32h0PfPUCJEiQfOKrFyD5SRJN3qZzrq8MBc+NSlJfXmx8oV3lrGNaSSBBggTJeiTPkzlnx8aRcWBUIvryaOND7SpnHZNKAgkSJEjWI9GBvNG52zNSkn3tKhcdSCRIkCBB4hNDRKf+dNfQ+d4yKhF9ebDxjnaVi049EiRIkKxYUjyxdfRSkm3t5p7YSJAgQbIyidCvDZ3JiR7MohLRl6fx1vg0jldLkAwgGUBSA8nAj5PoFk91U1OSk+X7O14tQYIECZK1SIYDqbes4l9KXm18ufzuHa+WIEGCBMlvlAipZqmbWtztYLcASbRbgCTaLUAS7Rb8OUlDpD3REWlPdETaEx2R9kRHpD3REWlPdETaEx2R9kRHpD3REWlPdETaEx2R9gQAAAAAwHd8AHrYC7W4jhzHAAAAAElFTkSuQmCC",
rainicon = "",
bedrockicon = "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",
bighitboxicon = "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",
bighitboxplusicon = "iVBORw0KGgoAAAANSUhEUgAAAKAAAACgCAYAAACLz2ctAAACJUlEQVR42u3cwY2FMAxAQVpIN3TCNfVzoAVoIUKJbPA8ievu2h5OX/u3TZIkSZIkSZIkSZLy1ft+Rzw2LwAFoAAEUAAKQAAFoAAEUAAKQAC1HtZ5HSEPqAACKAABBBBAAQgggAAKQAABBFAAAggggFoPK+qjOAABBFAAAggggAIQQAABFIAAAgigAAQQQAD1HmDUgQEEEEABCCCAAApAAAEEUAACCCCAAhBAAAGUFyT7R4UuCSCAAlAAAigABSCAAlAAAigABSCAYH0Plq+PAxBAAQgggAAKQAABBFAAAggggAIQwCKwzCEAAQTQHAACCCCA5gAQQAABBBBAAAEEEEAAAQTQQcwLIIAAOoh5AQQQQAcxL4AAAuggAAIIIIAOAiCAAIIFFlgOYl4AAQTQQcwLIIAAOoh5AQQQQAcxL4AAAuggtedtrd0jj0V/84VLPy+AAAIIIIAAAggggAACCCCAAAIIIIAAAggggACmgDX682b/3tmLjpqjXAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAvjLj9iqHRhUAAG0GAABBBBAiwEQQAABBBBAAAEEEEAAAQQQQAv8L1QAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEENQ8f1/2F440AAEEEEABCCCAAApAAAEEEEAAAQQQQAABBDDiINX+icjXuFm0vQAIIIAWbS8AAgigRdsLgAACaNH2AiCAAFq0vSTuAb+AccwxFvmeAAAAAElFTkSuQmCC",
bottleofenchant = "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",
milkbucketicon = "R0lGODlhrwCvAOMIADQ0NFBQUHFxcZSUlKampr+/v9XV1fz8/P///////////////////////////////yH5BAEKAAgALAAAAACvAK8AAAT+EMlJq7046827/2AojmRpnmiqrmzrvnAsz3Rt33iu73zv/8CgcEgsGo/IpHLJbDqf0Kh0Sq1ar9isdksBeL/gsHgcDpjP6LR6nebGyPC4mE2vq90wuT5u79fxL3uCc36FbYAtg4peho1miImLg46NkCySk5SFliuYgpqbnCmee6B+oqOkcqZ9qCiqq6x/rqoFtre4ubq7vL2+BsDBwgasUbW+yMnKvMPNxVDHy9LTzM3Cz0/R1NvU1temxqTc49PewdhO2uTr1eboTers8rfmwO9M8fPy9cTg0OL6Ahbgd29JPoHjCPrLBhDhvnoFf8hBxu+AxYsYM2rcyLGjx4/+/PjJ2THxV72PKFOqXHkgZL2ROkr2qsiypk2VLs3BzCGznbebQINqzOltJ46eu2gKXXqTqDWjN5DqUsq0Kk6nw6DakJqLqtWvHbFmjUMyDsWTYNNyFCtMaw2uuLyqncs2mFsacOmhncu3ZV0Dd2fktSW379e/gMnqsCPHsOObqnYwjvO48srIi+s0tszZI+Yck+F0Hr3xM47QZEirvmj6Buoxq1e3tvFaTGzVs2vUDnObdG4au8H0Hv17RvAvwzsXl3HcS3LOy2PYEUlKNikB2LNrFxCYeR3qnqx72k6+u/TvL6vjvk5eu3kY09OHXz++ffb3L+LrVO+bvX3uioH+ht5+8/VX33/4uaBfUfwR5599Cbaw4FMNKvdgexGyMGEzqoiHyX/YZbjChmMV6OCBEAZ42oAMmmghihiq6BqLiFEICyZCgQggHJLRWGOJNy6SI4giqkDij8AEiWNQOhaZwpFIKinJkAjKSJuPSCYppSJUpshjZnRkaeOWe3QZ45cChikmkGRuBlSTVuqGZZZtCmJmeXECN2eUdepx53ZOogDlj336ySSReRq3J6GFUnZolWiuqGZdQhFg6aWYZqrpppl+NMCnoIY6AJyRzjgpW5VyquqqnXok6qukktHjqWKlyuqtnHr6aqixjjErG4jZiuuwl+q666e9ivHrGsH+BkXss5Yae2yyYSyrRrNAQfustLtSC4a1aWB7k7bEcgsroqVeSStWwpK7qrmievsFuGiIa5O7uMLLK7qyggnsX+3iu6m+oMrrBb1n2FuTwKwSjCy/vhYxqAEg1cPwux4ZDEAUE1dszsWqfqQxx4tS7BE/IOeaMcTKQtHxyRanrKnILFfrcskeeyPzzCtD2u8TL4cV887F9uzlz04EvdbQRBNAs88RA40zzB83Ha3RZyLdhNIboWy101jjme4SXA/FNNFPHx110lMLXbXVaWe99tYlF4aR16oeq3e8NX9787pO5WwNq3sXPmrf8/79L6VU67yq4XuPrDizADc++OP+kE+L+MGTX1u5247nnXm3m2/cebifL/02p6OTDnXLUgNOlODNEN4636/bHPviqFpeO+a3F1w6ybLnRPswtgf/cO5+704546BfLrryhzOfuPOeQ6966KxTX73asLNdvEvHC5P8sXGLrTUTE9t9Ed7d650+oIki0f5e20sfP/ph0z+2EvczR/mCcb5dzc899TtCAH/iO+QBj38dkRz2UKe9rp1NU4U74H0SaIQFWmOAwCjgqzQYIg5KrG74s+DqNpXB/iHwf0nwYDNAaAARioqEO1of2VAowAaa74EGdOEGYWg/HjIwer+bHgQ5IsEsyNApNhxdoKbwRKJEMXNTlEL+FXNyRchlkXi8W1MNgXi7L56uXmIkIBlbZ8YJojGNY1Ri8NoovjCuqYuGoyPdxlcjPBZOj+wzolj8uDdA7pCPiCGk3gwJQEFiRZHHYmQM61A4xHgvjybUgh0q+ZdL/jGTTqTk3izpyUWCEgubHGUnSxnJU14hlXojJStfJcki0oGTdZnlrmqpQFHGcpW6DBUvO+jLY8kymJ8a5glvqcpcIhNUyiQCLI0JzGdGcwjT3NUxkXlNeDSqTq44wTfBGc4SjLNN5TTnObeUThKsk53tFME7pRRPec4zSPUMwT3xmc8P7PNG/fTnP6MT0AkMlKAFTahCF8rQhjr0oRCNqEQYJ0rRilr0ohjNqEY3ytGOevSjIA2pCSIAADs=",
optifineicon = "",
wallhackicon = "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",
scripticon="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",
updateicon="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",
diamondchest = "iVBORw0KGgoAAAANSUhEUgAAAEQAAABECAYAAAA4E5OyAAAETklEQVR4nO2cT0hUQRzHv5olHoKQivCwl7A/lIEhBZV0MIIiUKRbBQUidOha1CW6RHWsQxCBHYpCVDoURSD0j6gwAs2DkB2CoiKi6LCZlR3G3+68eb83+/7Mn7e4n8vsvDdvZvbj/N9dgRo1dNT5rsCVTszJ8f4nfuvkrXBVhIovMc4L5US0rxTh6y/h9K7FOCtMJ0LFpxjrhcQRsemSCMePBa/7EGMt8yQiVHyKMZ5pFhEqPsQYy8ykCBWXYjJnYlOEigsxqR92KULFppjED/kUoWJDTOzEeRKhYlJMxUR5FqFiQkzkzWoSoZJFTD13sZplAOG6cVuEqM0la6l/vUjcsVyfcV6lVGohFydF+OZb+P1rhRDVIqaSiMF3IvxUFGFqIURexcQVQRgTQuRFTFIRALCm+yge37oMgBfSoCtw24mB0utn54+UXo99FSGJoYqQGKqor5VqlIg4aIXIkByfYmyKILRdpvPkAQDA33+7QmlkMYStrmRKxOI/oquMDol44i5DNM6INz/TWO5CLlqMaRFxiN1lAHdifIggEgkhbInxKYJgx5CuFjGGHD4nxpCG4g324atnRHjo7EDoXpoxhrAtQjeGaIUQfaf5jEkIwEsBkolx0SIm76ZYmKlCAF6KLITIIoawJYJIvVKd/hG+J4vhhBBxxchSbIsAyjKAFEL2don4pRG+sNtTFwLxnrXHA/GdvUChQy+GpNcpNTEtAgDa20R476UIU69DjvWKUBUzPLwCANDd3Q0AGJrsw/4NzYE03IwElGel6VPhrqTKSDpryDJIQly0Qn5uPYilL66X4lFi7g8KCc9fARv3AW/uhPOKEqMiy0gigmYOYs8WPt2Ht/p8KrYQVQpQFvO90sMMJAbQy0k6hcqklQHE7DJFqdk1TYTvN02U0yx5X77+aARo1TRZWQ5RX8cUwBBXxO+CFDElRKYY8QabJoIybJFKRAJSLd0J7i+sQlNz1OIuLrZFEJmEEFNj8y+WRffTtGJciSCMCCHiDFqyGN3CzrUIIpMQboCV2d4GbG4tx+XpOkrGw5tPQ9dciCAyCSm26aXMrgrGo9YxQHBJTbgUQWTuMsU2AGMV7iMoTicG8COCMDKGFOYnG12do8SoUlQZrkQQRgfVOHBiAGBVUzDuWgThXAgxFdHNiqt3AAAWzYYHVxewn/4vZGpCFGpCFGpCFFgh0z/489SFgHaWuXZCHAxl3anmhfFvldPE6jK6TVi1wG0WOdgWMvpRnEbLn8+YOtdwDSeCO20ntF2mmsUkFUHEWqlWk5i0IohES/c8i8kqgki1l8mTGFMiiEybO59iTIsgjOx2XYqxJYIwuv23Kca2CMLKeYhJMa5EEE5+HMx9AWd3AXggfdJHX4dY1yMOiLjTd5siSvWwXYAMJ6ZUkfmacKfvLkSU6uGqIBlOzOdf4XQuRRBe/zWFLEYW4kNEruhqwdzGZv0vMGp44j/x2DZaxXZrtAAAADp0RVh0Q29tbWVudAAibWFkZV93aXRoX19wX2lfeF9lX2xfYV90X29fcl9fcGVyc29uYWxfXzd0aHNoYXJrIo3JLS0AAAAASUVORK5CYII=",
chesticon = "iVBORw0KGgoAAAANSUhEUgAAAIAAAAB4CAYAAAA6//q/AAADDUlEQVR42u3dT0tUURjAYT+FUagDqTNl5mhRm1QQmqBVLST6B6FBEEWLJMVVECVBUBn0BSJp0bdw72eatq7eFzkc7m3mWfyWc+85d57ZHOacO3Fn/dowauNWv9Gy8WUN1lbCat+/6a4vzYdNAAAAAAAAAAAAAAAAAAAAAADAqf7uXw37/bYX9udNJyz7fNa3l9OtrnT82eez7+fS3HQYAAAAAAAAAAAAAAAAAAAAAACcBUDbH/Cnp52wL9tzYdn8a/9ASu8PAAAAAAAAAAAAAAAAAAAAAACnAdxeXR5G/Xo1W1Q2wdI+PzofdnJyEnZ0dBSWXb/0+dR+vgvz02EAAAAAAAAAAAAAAAAAAAAAjBeAbCHo/bOLjfbz9VLY/sP5sOPj47CDg4OwzfXJsGz8P57Phn1/sVC1K91OGAAAAAAAAAAAAAAAAAAAAADjBSA7ICE7YOBmP2m5W7XFXicsW+jZ3d0NW+zNhJWOP3u+pXWmzoUBAAAAAAAAAAAAAAAAAAAAMF4AsoWgvcfLRe08WAorvf7W3V7Y4eFhWAZgcONC2LvNy2Gl8yuteCUQAAAAAAAAAAAAAAAAAAAAgJECMFjtD6OyPzR83eo22s69mbCtjcmi9u5PhTU9/w9P4tKNIQAAAAAAAAAAAAAAAAAAAACMFYDSgyJrlx2AkB0kWfugx9JKx5dtnKl+UigAAAAAAAAAAAAAAAAAAAAA/xWAbGNI0y+EqP0F1R5/6QshsutnB1QAAAAAAAAAAAAAAAAAAAAAAMBZFoLavhDS9hdX1i47KBIAAAAAAAAAAAAAAAAAAAAAAE4DyDaG1H4xZNMvVmy60vllG0eKdwYBAAAAAAAAAAAAAAAAAAAAMFIA2r4xpPQPI00vFJUuJGWAso0hxSeFAgAAAAAAAAAAAAAAAAAAADBSAAZrK8Oo2hsf2g6o7RtPso0hC92ZMAAAAAAAAAAAAAAAAAAAAADGC0C2EJQtNGQDKC27f+n4al8/27hRev+P2/2w4pVAAAAAAAAAAAAAAAAAAAAAAEYJwD8hxshY1DsQugAAAABJRU5ErkJggg==",
leadicon = "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",
aimboticon = "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",
espicon = "iVBORw0KGgoAAAANSUhEUgAAASIAAAEiBAMAAACvkMKFAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAC1QTFRFAAAAAQQFFKgZU/9ABhIEJnMZAgYIAM8A9fL/pv+y////fs+csP/QsP/SAAAAVrGpTgAAAA90Uk5TAP//////////////////5Y2epgAAAeJJREFUeJzt2mFNxDAYgGEsYAELZwELWMDCWcACFrCABSxgAQ2kJbmGpu3XHdttJM/7a+u2r8+/LZe7u1ul+9Q6o1aKKI4ojiiOKO5Qoox5SB2FRRRHFEcURxRHFEcURxRHFEcUdyhRwZwu7csiIiIiIloiekwRERERER1J1MLs+yohIiIiIiIiIiIi+teigumKbswiIiIiIlosqk6JiIiIiHYVjb/392AREREREcWiVkVUTomIiIiIdhB1XyCttaptWEREREREi0UTERERERHdTJQHPqXy/OrbvjT2rskiIiIiIpoUtXbvKomIiIiIbibqYsa7d2/+O4uIiIiIaFI06+jKiYiIiIg2EbVeILnnuDH1WhYRERER0aSo2vOcevldXpuwERERERGtKCqYlqP0msqYfFRdfW50LYuIiIiIaCgqY94uvafOcfm+8hgRERER0SaiClOJJlgVJveRqoZOs4iIiIiIhqLqN5o8cILVwhARERERbSIqmOrvJx+XWtuNK8+eevVZRERERESLRRVrUZ+pMqU1mYiIiIhokaiFqR4en155oazVLCIiIiKinugr9fC7iTHVzd21iatERERERBOifNia2h3YurBOPywiIiIioqHoSBHFEcURxRHFHU/0Def6P1qqq6hWAAAAAElFTkSuQmCC",
chesticon3 = "",
debugicon = "",
spamicon = "",
taptoseeicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAEUklEQVR42u3cv0vUcRzH8ZujVRKipQKHiDDu3AqqqcnBpTERKoV+GDX0D0RLy2nRP5BDNBlIS1FHCEXwxQgdLsE7PT0ak3DRe/e9OOlLa8lH8PGC5z/wfX8ffLdvqZRwy8vLp1dWVtabzeaOVGi+1WodKlmp1Gg0svyBhFSsXq/30QGIAAFEgAAiQAARIIAIEEAECCACBBABAogAAUQCBBABAogAAUSAACJAABEggAgQQAQIIAIEEAFigAgQQAQIIAIEEAECiAABRIAAIkAAESCACBBAJEAAESCACJB/3/r6etZutyN1a2trkWNVofw2ye4BSG+VSiUbGhqK1M3MzMTW1pZ6ra6uxsjISLJ7DA4OAtJblhepm56eDvuz7tdjYGAg5U0AAQQQQAABBBBAAAEEEEAAAcQAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBADBBAAAEEEEAAAQQQQAABBBADBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBJC93fXh49mN4RORupfTN2L5wzP1Wnj9OB5crSS7x+jlfkC6e1+9mNWmLkXq3lUv6K/y2yS7x1z1HCC7QN7nD0QqBgggAgQQAQKIAAFEgAAiQAARIIAIEEAECCACBBAJEEAECCACBBABAogAAUSAACJAABEggAgQQAQIIIAIEEAECCACBBABAogAAUSAACJAABEggAiQA7rZh+ezV4/Oh1TsxYNBQLp7cqecPZksh1SsevMkIL+BTJazp3fLIRUDBBABAogAAUSAACJAABEggAgQQAQIIAIEEAECiAQIIAIEEAECiAABRIAAIkAAESCACBBABAggAgQQQAQIIAIEEAECiAABRIAAIkAAESCACBBABAggEiCACBBABMj/WfXWmWzq9plI3t2zMXW/ot3ulZPeA5DeFj6+yb58ehup+3btSrSOHlav1VPH4uvs82T3qNXmAOmu0WhkzWYzUvdjdDSiVFKv7b6+aNVqye5Rr9cBAQQQQAABBBBAAAEEEEAAAUSAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAgggBggggAACCCCAAAIIIIAAAogAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAWRvt7GxkbXb7Ujdz7ExMP4C8n1+Ptk9AOltZ2cn63Q6kbzxcTAKdfr7o7O4mOwem5ubgHQXEVnsh01MgFEsBxJLSykvAggggAACCCCAAAIIIIAAAgggAgQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAADFAAAEEEEAAAQQQQAABBBBABAgggAACCCCAAAIIIIAAAsgBBfI5bzt54+Pb+Yuh3Y4c2Y7FxWT32C9/d/8Fg5mS0NfMx3EAAAAASUVORK5CYII=",
ipicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAEeElEQVR42u3cPWsUQQAG4PxCxVJLBUuxEvxqjM2pmEJIJRY2aqNRzIl2apMUWqhoExPEJkE4o39gzHsQwc2ubswFM+fzwgsh2Zstsg93M7s3MzMiIiIiIiIiIn1y8uxc0emtKxwQBQQQBQQQBQQQBaRyIJ++fNcKCwggCgggCgggCgggCgggCgggCggggAAigAAigAACCCAKCCAKCCAKCCAKCCAKCCC7+idp/wICiAICiAICCCCAAAIIIIDs6z9p4fk7bSkggAACCCCAAAIIIIAAAgggAgggAggggAACCCCAAAIIIIAAAkg93UsAAQQQQAABBBBAAAFEAAFEALGKBQgggAACCCCAAAIIIIAAAggggAACCCCAAAIIIAIIIAIIIIBUAUTtrAgIIIAAAggggAACiAACiFjFsoolgAACCCCAAAIIIIAAooAAAggggAACCCCAAAIIIIAIIIAIIHZWBAQQQAABBBBAAAEEEEAAAQQQq1hWsQABBBBAAAFEAAFEAAFEAAEEEEAAAQQQQAABRAEBBBBAALGzop0VAQEEEEAAAUQAAUQAAQQQq1hWsQABBBBAAAEEEEAUEEAAAQQQQAABBBBABBBABBBABBBAAAHEzoqAAAIIIIAAAggggAACCCCAAGIVyyoWIIAAIoAAIoAAAggggAACCCCAAAIIIIAoIIAAAggggAACiJ0V7awICCCACCCACCCAAAIIIIBUDET/XQEBRAEBRAEBRAEBRAEBRAEBRAEBBBBABBBABBBAAAFEAQFEAQFEAQFEAQFEAQHkwPfj+mZ5vLxWrt17XU7deFGOzT4rRy4Mx83P+V3+lmNyLCDyXwD58HlU5h++KUcvPS2Hzi32ao7Na/JaQGRqgdx/uTJ+d+gLo9m8NmMAIlMFZG3jWxncefXXMJrNWBkTEKkeyOrWhXzx1tLEcGw3Y65WhgQQQHZ0cLf7nePw+WE5MbdcztxeKbMP1stgcTRufs7v8rcc0/lOsjU2IIBUCyTzha6L+/j1pXJ5YaNcfbL52+aYHNs1Tk1zEkAA+WW1qmtCfvrm+3Jl+PWPOLabY/Oarol7LatbgADys/OP3nbi6Auj2S4kORcggFQDJDf22u5z5KPSbt452t5J2j5u5Vw13EwEBJBxc/e7bULeZ87RZ07SNnHPOQEBpAogeUSkeQFnRWqvOLabsZrj55yAAFIFkDxH1byAs2w7KSAZqzl+zgkIIFUAaVu9yr2NSQHJWG2rWYAAUgWQPJG746be4mhiQDJWc/ycExBAAAFEfMTyEUtM0k3SAbHMa5kXEEDcKAQEEI+aAAKIhxUBAcTj7oAA4gtTgADiK7e+cguITRts2iDTCsS2P4AAYuM4QACx9SgggNi8GhBAFBBAFBBAFBBAAAFEAAFEAAEEEEAUEEAUEEAUEEAUEEAUEEAUEEAAAUQAAUQAAcQVDogCAogCAogCAogCAogCAogCAogCAggggAgggAgggACyz0B0euoKB0QBAUQBAUQBAUQBEREREREREZEDlx8B7Oty45q5iQAAAABJRU5ErkJggg==",
colorchaticon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAACW9GRnMAAAvRAAAFeADgYhyrAAAACXBIWXMAAABIAAAASABGyWs+AAAACXZwQWcAAAyAAAAQqgCEDDS2AAAAElBMVEUAAACANlzLeKPbi7Ttp8v3tNaTCmDlAAAAAXRSTlMAQObYZgAAAAFiS0dEAIgFHUgAAAC5SURBVGje7dnBDYMgGIZhu4Gm6QDCBLbpBK0L2LL/Kib8l8+ABwkHie97MqDPDSTadURE1F7DXlhYWK1ZN30kxL7S5xXTm3osLKzqls08gmTP68jPLBez6ykjYmFhncHSTeGvu4IqmwkVvYgDFhZWdWtOV/hmCAsLqx3L5t+potaib2zrGUdGLCysKpaegO96W+YEravaiZI7k2NhYZ3Bynz/SrcDX/wtDQsL67DFPzAsrAtYRERU0gpf55zGZxmE5wAAAABJRU5ErkJggg==",
sneakchaticon = "",
chlogicon="iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAI3klEQVR4nO3dMUodUQCGUQ3iIuxClmDhgl5nZ+Eq0tu5oCwivM5FSMD0gRniU9+dO9857RS5EHjzceF3Li4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANiWy9EHYJi30QeAnfA7ypS+jT4AAHB+AgAAggQAAAQJAAAIEgAAECQAACDIfGXfFqd+N09WgPAZXu5Xf0b9xrJZbgAAIEgAAECQAACAIAEAAEECAACCBAAABJmozM/UDwZ6uF1+9nhnIsh2uQEAgCABAABBAgAAggQAAAQJAAAIEgAAEGSGMgdTP9iotRngGhNBRnMDAABBAgAAggQAAAQJAAAIEgAAECQAACDoavQBAIp+/lqe8D7eXa7te00E+RRuAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAEmQECbIyJIOfgBgAAggQAAAQJAAAIEgAAECQAACBIAABAkBkgwERMBPksbgAAIEgAAECQAACAIAEAAEECAACCBAAABJkBAuyEiSDv4QYAAIIEAAAECQAACBIAABAkAAAgSAAAQJAZIECAiSD/cgMAAEECAACCBAAABAkAAAgSAAAQJAAAIMgMECDORLDJDQAABAkAAAgSAAAQJAAAIEgAAECQAACAIDNAABaZCO6XGwAACBIAABAkAAAgSAAAQJAAAIAgAQAAQWYac1ic2tw8ra1wgJEebkefYJzHu9XXi3fPBrgBAIAgAQAAQQIAAIIEAAAECQAACBIAABBkijEHM0BgN17uTQS3wA0AAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIuhp9ADjV8fA6+ghwsu/P16OPQJwbAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCBfA2RavqYGcDo3AAAQJAAAIEgAAECQAACAIAEAAEECAACCBAAABAkAAAgSAAAQJAAAIEgAAECQAACAIAEAAEG+Bsi0jofX0UeAk/maJaO5AQCAIAEAAEECAACCBAAABAkAAAgSAAAQZAYIMMDajNVEkHNwAwAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJC/A8C01rbSvw9/zngSeL8fz35+GcsNAAAECQAACBIAABAkAAAgSAAAQJAAAIAgOxR2ycQKYJ0bAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCCfTGNax8Pr6CPAyb4/X48+AnFuAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIJ8DZBp+ZoawOncAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAT5GiDTOh5eRx+BD/JFRxjHDQAABAkAAAgSAAAQJAAAIEgAAECQAACAIDNANs3Ub9/W/n+/YiJ47n8PtswNAAAECQAACBIAABAkAAAgSAAAQJAAAICgy9EH4L+8LT24eVp8tHsmgvMzvWt6uV999XgvnYkbAAAIEgAAECQAACBIAABAkAAAgCABAABBvgbItEzIAE7nBgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBl6MPwIe9LT24eVp8BPClXu5XXy/ePRvgBgAAggQAAAQJAAAIEgAAECQAACBIAABAkCnGvpkIAl/G1G9ubgAAIEgAAECQAACAIAEAAEECAACCBAAABJlpdNkBAh/lHTIxNwAAECQAACBIAABAkAAAgCABAABBAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmM5fZuFiZ4E7UDUAAAA6dEVYdENvbW1lbnQAIm1hZGVfd2l0aF9fcF9pX3hfZV9sX2FfdF9vX3JfX3BlcnNvbmFsX183dGhzaGFyayKNyS0tAAAAAElFTkSuQmCC",
nearesticon = "",
crosshairicon = "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",
afkicon = "",
cringeicon = "",
surfaceicon="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",
tnticon="iVBORw0KGgoAAAANSUhEUgAAAF4AAABeCAMAAACdDFNcAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAY9QTFRFAAAAsx8A0CQA/y8AjIyMVVVVAAAAfBYAhxcAehUAhhcAlBkAohwAeBUAhRYAkxkAoBwA2CUAaBIAkRkAlRoApR0Ath8AxiIAZxIAihgAixgAnRwAhRcAwiIAZREAdxQAiBgAsh8A0iUAZBIAdhQAmxoAuCAAdBQAmhsA0CUAYxEAcxMAlhoAixkAlBoAzSQAYhEAchQAgxcAYBEAcRQAghYAySMAXxEAbxQAgRcAsB8AYBAAbhMAgBcAXhAAbRMAfxYAkBkArB4AaWlpcXFxfRYAcBMAmBoAb29vjRkAZ2dnbm5uqB4AZmZmbGxsbBMAlpaWZGRkY2NjjY2NlJSUioqKYWFhZWVlkZGRh4eHX19fXl5eampqhISEXV1dXFxcTU1Ng4ODWlpagYGBTExMf39/S0tLfX19e3t7eXl56SkAR0dHPgoASkpK+ywASA0AV1dX/y0AVA4AUlJSVA8AaxIAUg4AVQ8AeRQAXRAAfRUAaRIAUA4AWw8AWQ8ARgwAQwsATg0AVw8AWA4ASw0AVCi7pgAAAIV0Uk5TAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9bfSQoAAAs9SURBVHic7ZdpW1rJFoUB4TAogqgRxQEDES4hCiJBZFZwQMFoWg2aCBKDIirYDIbLbPjhd++qA5LEhnTf9Df380RBivesWmvVgXA4z/M8z/M8v2e4PN6/wuXx+rhcLl8gEPD5fTC/DctDLPzi8+FBn4CLw+eTi/wf3BZFIAAO0HkMDBf+wVPYA/4V//5PsfhurkCAUAH91RoC5vaRy/D/nlVCkYji++jbn8KTaV2e1cH7tX2IxZL+/gFe22A+sYRY0Sa3roZY+lLHhrvjpeJBmUwuFLb5BETi5bZ0o/M0C3wk4BN8e8dDQ13wCoV4eFgOe5D0j/Boa1qKyTxGSx4TbF8fG/PoixdjY13xSqV0fEIF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",
killauraicon="",
gamespeedicon = "",
lightningicon = "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",
safeicon = "",
portalicon = "",
stubbornicon = "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",
towericon = "",
turnicon = "",
hovericon = "",
aerialicon = "",
violatoricon = "",
blindnessicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAJFBMVEUAAABVVVUhISHBwcH///9SPYlgS5kgD009PT1HR0f51NT5traECq24AAAAhklEQVR42u3W3QqAIAyG4fJnK73/+23fDDwKhOXwwPdw9ICUWcfanYMZiIIwkCIDCYNt8kWOt3kEkxiTFKOyCaRdnjNJOTf2LwFICYAZc2ZBUkd20hcFcElAfXF20kDSiABuCYgIs1KAZpNaDcThjjk8ff+d7P9W2k+YfYzbic8X2eXvYukenHAQlQiyq7QAAAAASUVORK5CYII=",
nauseaicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAV1BMVEUAAADLyluGiCqWpDZSPYkzJBFolyiDnzBlfTR6jTXV11e5uFb///+5u0vMwWIhISGqqkqZmTPg3HB4fCHMzGaqqjN+gyIqHQ13aiNVVVVpbRdoZB5CKhInB6VlAAAAqklEQVR42u3WuQ6DMBBFUY/3jR2y//93ZmyoUAok9CSKXGk6n9Jji2v3PNgJUkF3oIpOkO5gf/KLiF0AwuC+ixGMGPPhkIQoxnGMXNMYgyEpESWu7+dZcRhClLPWxGmdc0oYsixEbfvmYrxxGDJwj61hkBJDXpz31jrnvZTThCCMOOeUsjaE9YoBSEUhuFoBSCKE90phSTlsbQEwUtE6AALe/PgXGf+7uHRf2gtzGcBEAyAAAAAASUVORK5CYII=",
newnightvisionicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAIVBMVEUAAAAmpyYzMzP5trYhISG7u7tG2EZVVVX///82wDb/zMxLldaLAAAAkUlEQVR42u3WSw6AIAxFUQHBlv0vWO+gceCEpDRi4hvZhpPQ4G9bO8dgPIRiHwjrPGQfzE/eJXRJHKGTUruSkrG5hEpEtTWuYCLG/MRArSIszJl+zqqgWkFzCFsieoUugdPrHTSTsMwInF4pXvIcX9XGh9v4cwihurcGtqN0kKg7Of6p/F99HyPxX+T4v4ulcwIoHSElqDEGHwAAAABJRU5ErkJggg==",
newjumpicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAFVBMVEUAAABVVVUhISGvr6/MzMzu7u7/AAAasMQuAAAAm0lEQVR42s3WwQqAIBBFUaux///kurh4OG6E3kAXIowOqAjV/t2x2RfC4NyI9z6QCbTUhCwEcKVATgKI6ClQBeEZEwTcNxfIRYjxOkE3IYGxyQAvESCBOiLmJQIsvPeI1oQ8ZByT8Xq8ceeJjwCYCGBaOgGsBLBusIto+cAErIRAOvZUSRTISISmOJp2AkrVkDUHqf8i1/9d/LoHGWYP6RxseQ8AAAAASUVORK5CYII=",
newhasteicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAIVBMVEUAAAD4tCBVMxEhISH/+YhAWVr/31YiREQ/Ig9rPyNVVVUeqn0bAAAAmklEQVR42s3WwQqAIBRE0bJM7f8/OCeQu6ggcIzuKo0D+jY1/bv9ZT1Ei+VFJ+ogbGut7lEfAWy1tQZzEtA8b2cwJwGJCcLcBNaOmDPIR6ihEQSQcylCGoKfAHR1oTEEoGeO5iQARu0mgLZm0A5yBSAH4WVKADcBxJgSAOQgT4C020803BAARA4SAsMdRYQAdjL+i/zJ38WvOwCFhR/FsRkSiQAAAABJRU5ErkJggg==",
miningfatigueicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAP1BMVEUAAACXmq+vscHR1OmChJaytcmHip0hISGGiJqytMR6fIy6vMyLjqGjpbe4vNR9f5CgorSjprm1t8XX2/VVVVXwjBeoAAAAl0lEQVR4Xs3WSQrEMAxE0ZLHzFP3/c/aKdoLLw1xQf7+gRYCCe/u29gTQpAbInpCcmMagpKSADFu2+cOUBHALKVwN01ECkJwHGbLMgwhKMk8/5GWeH9dRCnFqCPn6T2HW1eC/oRgHK1E0J8QOGdWrX5nUoNc6k9qoCI1UJEaqAiw786VFVSRggiUhBGoCdMR/UXWfxev7gdMf0FZiufscgAAAABJRU5ErkJggg==",
dup = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABsCAMAAACrb+cLAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAJxQTFRFAAAAAAAALSIA2LwA170AKyYA/80A/98A/+sA//IA5aMA/+MA/+kA//cA3LkAUTkA+rIA//kA7cwATUQA/8IA/9oA/+cA/+UA4aEA//gA2LcAIhkA1ZcA/8MA/9AA/9IA/9kAyLYAHx0ACQcANCUARDAAo3MA/+4A//8AnYEAQjcAMSwAeVYA//EAcGUAOSkAlmwAk3IAjYAANTEAf6OJVQAAADR0Uk5TAP///////////////////////////////////////////////////////////////////wcEN2IAAAEASURBVHic7dTJTkJBEEZhBgURmRRRnJllEBze/93IqQUVbmi5Bhbt5f+Wne46m0rnciK/ye+gSLYjNrCAIs5wjmOWFIk0UkIZF6jgSBFf12Dk8JIiUUV8wiWqG1eooY6DSopEFbEnDTRRDWnhGjf4W0mRqCK+K23cIhjpwJbtDqn3TJGoIn7nHsHRCRbp4gF7SopEFbHDRzzhedsLfKptko1+hd97Qw99JEuKRBoZYIjRtjE8MsE7pvB7M8xhoxSJP5L4VhIW8MgHLLJE8Nmev0uRk4oEwykiqQcqoogiiiiiiCKKKKKIIooooogiGYis8LnxhW/8QJHMRlJQ5L9F1gescJQmTypeAAAAAElFTkSuQmCC",
biomeicon = "",
jumprunicon = "",
laddericon = "iVBORw0KGgoAAAANSUhEUgAAAcAAAAIACAMAAAAi+0xoAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAACpQTFRFZE8qrIhSjnM8W0YlpIBKaVEvXEglZU0rRDMbSDcdbVMvTDkgQTIbAAAAF8sY/gAAAA50Uk5T/////////////////wBFwNzIAAAE+klEQVR42uzdSW7DMBAAQUle4mz//24+EKAPA8GJWX0XRbHsIzHbd3RE9+h78fboFtX6G0CAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECXBLwOuw9OoZN97efXL2/vu8tqvUBAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIEOCagNX0guf2z7sMq/Xrguf4AwACBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQ4EsC1oDB2mBd8Fx9AGSd3yMaT/AECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIBLAk4veK4OWAMcawAkQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIE+BtgvaDmD9YG9pM7Tq6+f7q/+gOkD0CAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECXBJwusECvJzcdnLT/dX53aLxBwAECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgwJcErAGDtcFHtPoAyLPPDyBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAvyt6QXF1QHPPj+AAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBLgm4DU6onu0Dzue3HVYfV+dX60PECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgAABAgQIECBAgADXBKxqgbfocnLbH296fk/fAECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAEC/JOAOWAweo9WHwBZP8BHNJ7gCRAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAlwSsAYa3aHXAuuA5/QMABAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIMA1AesFdcGzAI9oH/bs9ev86vl7lD4AAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECHBJwGq6gcuwj6ie306u3j+9IDveIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECBAgQIECAAAECfEnAHDAYfUarD4D8ih7ReIInQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQIECBAgQIAAAQJ8RcAfAQYAPnkFWlAm/x8AAAAASUVORK5CYII=",
saddleicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAwBQTFRFAAAANRcKfzkZmEYe2mYsyrKGtgAAAQB0Uk5T////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AFP3ByUAAAAZdEVYdFNvZnR3YXJlAFBhaW50Lk5FVCB2My41LjVJivzgAAAB9klEQVR4Xu2b23LCMAxEwyX//8kw03bQFjbdKIa2wPETQ0Qijtcr25jp9Li2s23V86ZVUduCSKvDDVrQ6hDoxKItaHUILMRaGR1sq9Afnnun4kNanb6FFrRuCDASv1zsXX1LXGEO7VitrF8+fy2uEW2R1kazohMjOLQVEUkAtKB1GHd5O/uUilIvvYPZUFmBXGe4sviQ1oe6oXWjL7R1ZCSeThjEUxmE3/AsIdsy4t9szKRj8SEtYQytBWe1MoUWtOYZ39JV2H+y08b6WCpKoz9TqDcI0vLcoJX0pNehBa1v8+AOjhD7rNqSjYG0RBg1/LgHIQxJC1qd0QktaK3wrw6kSyza6mDr0BLD31dLT0v7X5JB3TT+5uNXYaTlz0FA64C2ZCvLj1lGonLBt3Z/bqf+9IOtQ6kMWXHLF9wPH8Ijrc4hPGhBS4oyI3HBwN7Wt+wxQP+/DxXP5bWf8w67PGl1fAta0JKZlR+T43/WqvtiEPnEMLS2HSuzZcarOy1c7il50upIHlrQ0pO1jEQtyviWbnqJV9iZy2/Sak+dPmtctbqBvDk8OyWtjp1CC1rTxEjcJRngW7kqF8MH0UqdlK7bOjNefNJj03XSSoT0OrSg1SHQiUVbr0Wr+nN8Vd0h42JFW6QVYUIrIpIAaEGrQ6AT+yLaOgMNNDpeiHdwdgAAAABJRU5ErkJggg==",
smoothjesusicon = "",
jetskiicon = "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",
camicon = "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",
longjumpicon = "",
fastfallicon = "",
mapicon = "R0lGODlhrwCvAMIGAEVFMFBQAExMQImJYNPTlOfnxf///////yH5BAEKAAcALAAAAACvAK8AAAP+eLrc/jDKSau9OOvNu/9gKI5kaZ5oqq5s675wLM90bd94ru987//AoHBILBqPyKRyyWw6n9CodEqtWq/YrHbL7Xq/YFFhTC6bz4UwEs1Gq4/tOPltlMvpRXscT9S3+UN+bIBCgm6EQIZniImKZYw/jo+QMpKWZpQnl5tpmSWcl56foJKiJKSlpmKoiqqrrIKuIbCGsiC0sbYeuH66u7x2vhKbAMXGxwAEysvMBJu6xMjIzdTPttHSxtTN1rLY2cnby92u39ni46HXl+Da6M7q3uzt4ejkqubS7/CW0PPt++6ZyjftnUBRBI8FjMdl08I29CLWE3ewiUODcSTSe5j+SspFexk1guPoiMpHiiFF6sPYb8rJbXJUnmPZMcrLaillugPZ0uMlkmd0FuRZE8pNbjmFAq3l8idNNEIVPm3V1NLSMlF3ouxp0ylRqFknwmSo4+g+ZgPSql07QIDbt3AFRDxLd2tRF2brst0bt+/cuoDTcX2Rl+5etn3j/g0MuOKKwmcPr00MdzFjuo5VQN4nWS3lt5YvX+1Vyavozmk/uw0t+ivVGJvfoW6rmnXrsYPxmr48W7XcjbdH65kRG13v2sCDu2YKezfj459tKxd8t0VxcdApS5/Or7oFyNvphu8OFiD388uGOW82ft/4mMnRc1dv9V17+/Fxs7kvvy7+fUnu5cfYe0mt1N90/zkSoHmtEQiRgAeKlqAiC450m4P7QRghYxMaUuFMDWpIXXkWbnhbh4J8aKBoGJIIookSRgCeiOLRSF5QNsL4Dop+qDgUizbCx6COHMq4HjP8idMijkMSCZgEAUQp5ZQBBBcWAL7NZiU9vgVH5ZdgTgllmFFumVWWqJkJTpe3kemmlGOSqaZQaHY2pzRstvbmm3GGeadMdUr25zF5iranm32COahIgR62aDGFXnYomYl++ahEje51aaSMTRpmpVReGlGmbG2qmpeefgnqlKJyqZqWF7r6GaqpihnBm622Q+paps7aZq22QoBrrGe+miaxa57++iuwUa4qZa7JfgZriLoqqyezzXIwbIQRCRmVcHbwKcO2B3ZboEzgyiFuDOT2Z+6DWaUbx7owtCvfuxnGO5Uh9L5gL3r4uqiTvG3068K/5wXM5Lf7CmJwCwhzp7AZVxLMxsMsRDzdxFiFZTEaGK+gsXIck1Fxw36ErMLIl3qrFMp6qJwCy8hm4/LAMIeLaA80G4cap+wFOe/OR/SM3c/WKil0wUQbYfQ22SXmo1TLlSGzD09TE3VfU2ulH8hNF5F1M1vH1XUx4F7Ns5vBlQ3X2WLhxDSlSIyNFtK+orOkGWrzYPcybr8Fd9phE/G3MoG7NXjOfe9wOAGJC7B41WThNK7D45FPbhfYdEvx5nWSYhvAF58fyZ3oo3tRen0Rok66m6B3KvrrZMYemOuqw276dLh3sTqAG/bOxe8KBj977rXvrpzwWxBPofHY0h6m7YAxj8fj1guzAPbHa+8A99F7/z3byzIr/vhylg/s+Q2Abz7725N/bfjwH+D++vXbL7+h3cN/f63501/65ve+AN6qfwYkQfYSCIIFMtADDnygthAowQ9EsIIZuCAGL6DBDVaggx6cAAhDeED6kfCEKEyhClfIwha68IUwjKEMZ0jDGtrwhjjMoQ53yMMe+vCHK0gAADs=",
cflyicon="iVBORw0KGgoAAAANSUhEUgAAAE0AAABNCAMAAADU1xmCAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAJxQTFRFAAAAAAAApQAAxAAAygAApAAA/wAAwQAApwAAzQAA2HRQCwsLBwcHkU830m5KEhIS2gAAyQAAnYUAxgAAuAAA2QAAogAAnogAowAAvQAAAEzQvwAAvAAAADbkvgAA2AAAm4UAtQAAyAAA2wAAAE7QnYkAAIv/ugAAoQAA//YAAJL/AGP/j4EAAES+AFDUADLSdGQAADWVklxAUTMlRrtOHwAAADR0Uk5TAP///////////////////////////////////////////////////////////////////wcEN2IAAAJ5SURBVHic1djpbuIwEADgDmUToFxpQimQcgRo2OUO7/9uO4cNpe0f2yNtdyQUCYlP45mxQ/Lw8P8HAChB9KnVagoc5vQIjClo8IjxgzXQK5u2VlfToI6hV7YfroGJcAw1+IWhsqk4MR2NV4kXpdT0NVmp1nBEkUo7SYvjRqNBnoIWx0YL9wCiG0ZemBWJZrCo6c8BA6hdraa3BhB9iqa/9tnCwzdA+4ppaVg60eI4XIuNRtdQjTIiDUBBa4pG2zRAswPCWqtltLr3vD09Ga3dNpqcdL4aeW0K1jr1UK0t0W1Bp0Oa976/ab1et9uxmuexdNV6N4370vfhvtGky30f7ouWWMyH+6Ch0UkMxtqzBwekGYOx1GLP7hxEWXZ3KqWoDQaiOXPwkt1xqWgDxobDMM5iVnPnXrNsNBrd1ilan7Hh2HWOYTIhLr9LDWPI2njsxeV5zljU/6AhNn5z41Cb4GpJk+m4x96cuRG2YsoaQf3ZvebGAZaNuKnRZrMZY/O5B2a4xXQ6LV4Emy1Fm3tp2ILFwnKsLRmbr9wxy+Fqi/RVsOVyztrKQ2MuJy5ljrQ1Y6vV+7vzSQwlcSVp6Uaw9Zqx1e8/W2cPSvLKMkuLYrMRbU3Ybrff77dbNw+1krSyKJgj7HAgjLT98bh1TQ7LJlz9dBLtsBPtiOGm8f6ithZ4FyTuIJqkdnTf/MLR7T45nw437eiuEZfnVkvOZ8T4YdVPw1uO5RIMOB/AfA3gjtEPK56ShLWPQ+H3T6KqKmwrYZXCwyBqAKRV4RqwhpekCtfgcrmwQmioRhiGksYcN1JFsy8sQUcz5sXWTwuT+qlw1/ppeXrWP4m/KL1ev7pTIe4AAAAASUVORK5CYII=",
crouchicon = "",
stepicon = "",
fovicon = "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",
ironicon="iVBORw0KGgoAAAANSUhEUgAAANAAAADQCAMAAABBeh9GAAAAIVBMVEUAAAB/f3+CgoL///+oqKhoaGg1NTVycnKWlpZERETY2Nh6wwB4AAAAAXRSTlMAQObYZgAAARtJREFUeNrt2jsOwlAMRcHwD+x/wbTPhaXIiMh5mdO6udN7kSRJkiRJkiT16522HDOg7gF1D6h7QN0D6h5Qw6Whe1o3HRAQEBAQEBAQUENQZelt7LOtXAcEBAQEBAQEBDQ/6Oelldk/64CAgICAgICAgGYBhdM6FsbtNftR6DkGBAQEBAQEBAQ0CygsDbq9lq6FgICAgICAgICA5geFPVFXX1rvlQYEBAQEBAQEBDQlaOOXwGXsf0tjQEBAQEBAQEBAJwNd0wqg0uz8ASFvGQMCAgICAgICAjowqKILoFehytI8ICAgICAgICCgKUG5Lgc1WAoEBAQEBAQEBDQ9KNe1XgoE1DOg7gF1D6h7QN2bDiRJkiRJkiRJ5+kLNhxeJf3HNOYAAAAASUVORK5CYII=",
stackicon="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",
airjumpicon = "",
dupeicon = "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",
sunicon = "",
moonicon = "",
hideicon = "iVBORw0KGgoAAAANSUhEUgAAAKAAAACgCAYAAACLz2ctAAADmElEQVR4nO3dvWoUUQCG4fEHW1HEO0gRApYhUbEUBQlBTCVoI7aCF2KlnRYWVlqEICgpRVSC2ElAr0ARtBZXLW3mBM56dr79eZ5y3J1d5WXg26yTrgMAAAAAAABg3hyqfcLqxY0/tc/Z292pfh0Ww+H0G2CxCZAoARIlQKIESNQgK7jEOsYVkCgBEiVAogRIlACJEiBRzT4G8fEM43AFJEqARAmQKAESJUCiBlmbrRZyy3U8erLUbLW3cOT654Vc/q6ARAmQKAESJUCiBEhUdHm1Wsdvb+63OM3cmKVF7QpIlACJEiBRAiRKgERN5VqyjidjGtexKyBRAiRKgEQJkCgBEhVdRbXfSl5/vNzstS3kf5Lr2BWQKAESJUCiBEiUAIkaZP20+j+4v8/d7z1+7vaDFqfvuq7r9jbPNjvXpI2OP5ro+YdYx66ARAmQKAESJUCiBEiUAImK3u5stPWx6vEfvn3pPb62/aT3+Or2m9q3VPT929eqx39896r3+LGH91q8nQP9vHW36vFHnq5Uv0arj2hcAYkSIFECJEqARAmQqOolU1q7tYt2HC0XZKuFXFrHpRVc0vLvVruCx1FazrXr2BWQKAESJUCiBEiUAIk6WvqD5NodQmm9njh1uuo8pcevrF2oe0O3NuseH1bqYNSt9HZTWseugEQJkCgBEiVAogRIVHEFl1bLz61uqn7Rc2uTXse136yeNX4WzEwRIFECJEqARAmQqOIKLj7h5eXe478uvfjvNzOkz4WfvS493O49Pul1PGtKHdRyBSRKgEQJkCgBEiVAoga5O9akv0U9xB2nSuu4pOXaLd04fdL///egu2a5OxZzQYBECZAoARIlQKJm6h7RJUOs4FZa3rf69fNnTc7jHtEsLAESJUCiBEiUAIkSIFFT+RvTfTzzf97dGfUe//PjU9V5/MZ05p4AiRIgUQIkSoBEDbKCS8b5AkPV+Q9Y06mF/P7qjd7jZ06eKj7n/JVrTV777c393uNDrN0SV0CiBEiUAIkSIFECJCq6gksmvY7nxfrj5Sbn2dvdsYJZTAIkSoBECZAoARI1lSu41qKu5tLPcFcvbjT59xhiHbsCEiVAogRIlACJEiBRc7GCxzFty3mIbyW3Wsdd124huwISJUCiBEiUAIkSIFELu4L5J7mOXQGJEiBRAiRKgEQJkCgBEuVjGIrG+XjGxzDMFAESJUCiBEiUAAEAAAAAAACApv4CXJDMC5V/ccUAAAA6dEVYdENvbW1lbnQAIm1hZGVfd2l0aF9fcF9pX3hfZV9sX2FfdF9vX3JfX3BlcnNvbmFsX183dGhzaGFyayKNyS0tAAAAAElFTkSuQmCC",
tmiicon = "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",
launchicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAAKlBMVEX///8AAABtMReEOxurHBzS0tK+KCiEOxstFAnS0tL09PRtMRerHByZSykKmlkJAAAABnRSTlMAAAAAAABupgeRAAAAw0lEQVR42u3YOQrDQBREQY8X7b7/dZ11ID4GgQ0aUe8ElXbfJO1rRWNqh8PCwsLCOidrTO+0JiwsLCysHlkVZixaExYWFhbWVVhrwsLCwsLqkfVISxrSlu4JCwsLC6sfVktD0ZxawsLCwsLqm7UkLCwsLKyrsJaiLWFhYWFhXYU1JCwsLCysH7McSVhYWFhY/i0sLCwsrEOsuej7xJiKsLCwsLDOyXqlKT1ThamoWFhYWFhnZNVNqcJgYWFhYf2PJWnXB+tyttEkK5UTAAAAAElFTkSuQmCC",
diamondDicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAACW9GRnMAAAWeAAACQQBFmERwAAAACXBIWXMAAABIAAAASABGyWs+AAAACXZwQWcAAAyAAAALigAB+1yFAAAAIVBMVEUAAAAMNzAbe2sglYEszbEw271K7dGM9OKi9ufR+vP///+xzQ9PAAAAAXRSTlMAQObYZgAAAAFiS0dEAIgFHUgAAADzSURBVGje7dqxDYJAFIBh3EALLSzVBZTE3sACFg5goSu4gnEDFjDKlIb3invieeDlrPj/ikD4upfjgCz72sRfFhMWFlaspTfV/uTaGAsLy9vIKNd2lXRo2vcQsbCwYi1V5qLoTUa5yemz64iFhRWwFJDDZ9VOrJOZSiwsrISWUR5OqS/+8qatmXAsLKy2pYPXbelUvr1OwcLCSmbpclhKIWuzcGFhYTnrbvZ1ub/SVcgJLCyshJbZ881E0Zkt/cm1lRzugvtHLKwhWlN5auy2ljKJaywsrL9YVvxYCG1G6fOdDwtrWFbwby3Tr/+uYGFh9bBejGeR4Gwo+z4AAAAASUVORK5CYII=",
diamondChestPicon = "",
invisicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAIVBMVEUAAAAmIVsqHQ1GOqUAr6+qiGYAZmaWX0FmZmZVVVUhISFAy85pAAAAlklEQVR42s3W2wqFMAxE0e1dz/9/8GEYJNAnwQwYSJraLBBfKt+O62G8Idr8HoTm3pDxEJQwPu8kMM9K1TQBrxli5LptKQI1ChkC6+p0ry5DVO+deTepsSSB41CtT6E+QWDfAbR630uMYFmckCEa0fBNp8mgk4wvZtxNHDUukCFGTrEUgfOsTBODAAneYvkbOf938en4A+sBOaHYylDuAAAAAElFTkSuQmCC",
discordbanner = "iVBORw0KGgoAAAANSUhEUgAAAW8AAABvCAMAAAAUlbGSAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAfJQTFRFAAAAGz+aTE/IJjO2H0KdMFCtRWK/VG/NYHnXL1CsYXnYVXDOR2TBM1OvIEOeH0KeOlm2WXPRc4nogJT0ipz9jJ7/WnTSi53+gZX1dYvqXHbUPVy4KEqlUGvJcIbmhZj5fpLyY3vaLk+rSWbDZX3cgJT1hpn6cYjnUWzKKEqmI0WhSmfEeY7ueI3tK02pHkKdHECbH0OeI0ahJUijJ0mlLU6qRGK/O1q3IUSfLE6pPFu4Z3/edIrqeo/vfZLygpb2PFu3Q2G+HkGcboXki57/SmbEa4Lih5r6QmC9bYTjKkynRmPAg5f3h5r7XHXUJUejKkunTmrHdozshpn5V3HPg5b3XXbViJv8fJHxOFe0N1ezZX7dhJf4NFSxNVWxa4LhPl26cojoaYDgcIfmRWLAZHzbd4zsiZz9iJv7HUGcWnTTf5PzTmnHK0yoJ0mkbIPiIkWgU27MTGjGSGXCNlWye5DwhJj4aoHgP166T2vJHUCcO1q2YnvaJEaifpLzS2fFLE2pOlm1YXrZN1azUGzJfZHxdovrJkikgpX2WHLRQ2C+QF67TmrIQV+8TWnHaYHgXnfWXXfVVnHPPly5Um7LOVi1RGG+OVi0MlOve4/vaIDfMlKvIEOfMVKuiZv8WXPSSmbDYnvZJEeibYPjUW3LMlKupnD5xQAAAKZ0Uk5TAP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////36060YAAAZwSURBVHic7d37W9NWGMBxMrmMecHahhZ1FBkCU4S2tK5AATcqbkA3UNZ2gKIiF6cIigLWoSJewcumjqmIt+n/uQTa5CQnOUmpvOF59n5/4yQnefIh9JIGyMpKxq1zUPvZqGWpgtrfeu9no4besKE3bOgNG3rDht6woTds6uP/Yp2D2s9GLcWO3jChN2zo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",
filtericon = "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",
suicideicon = "",
clipicon = "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",
clearinvicon = "iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAYAAAB5fY51AAAVd0lEQVR42u3dW2zU5b7GcS72hduLHQ+JRi/wxqyLtfBqJWgpgWJLiweOIlQTqMRTtUIN3aFRVFCwgFKgnA+hpVgoh4AttqV1WqBTKgVKgYKIgCKgNyYGs6ulQO27+7zZ03QRcEsX7zun75M8EVeW/fE/zGf+M/Ofvv36EUIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIdGSv3W3rbudlFJ6k17v7mORgNXH99577xcVFRVXv/zyS0Mpjd4GAoGe3smfW1VV9T/9+/ev6fbik7BeWXVjtSs1NdVcuXLFEELIrTJ8+HDz4IMPNvzfK7L/CgdYbZWVlR3t7e2mq6uLI0IIuWnkw6FDh0xBQYFeGv7e3RfDAVanLvdCWOmfnZ2d5scffzQ//PADpZSa8+fP23+uWrXKTJ8+3QwYMKDrgQce+Lzbj//u7n96BysUYaWXhkeOHDFfffUVpZT29I033jDPP/+87SOPPGK6/TjX3XvDBpaurJqbmzk4lNLIB0uXfRwYSilgUUoBC7AopYDVq8Fg0Hz++edm586dtvqzi+pn7969296oFprlcl4sN7TfdANhQ0MDDzgaP2DpxH/88cfNwIEDbfVnV33rrbfMxx9/7HRGvDQhIcF8+umnprKykgccjT+w0tPTLSguqyuDw4cP23mPPvqouf/++2kf+9BDD5mTJ0+agwcP8oCj8QeWQNEztst+/fXX5rfffrPzHn74Ye0U2sfedddd9rhqn/KAo4AFWIBFAQuwAAuwKGABFmBRCliABVgUsAALeACLAhZgARalgAVYgEUBC7AoYFHAAizAohSwAAuwKGABFgUsCliABViUAhZgARYFLMCigEUBC7AAi1LAAizAooAFWBSwKGABFmBRCliABVgUsACLAhYFLMACLEqjE6xPPvkEsACLAhZg6WfrwdXW1gZYgEUBq29gVVVV9SxyqpPfZS9fvswVFmBRwOo7WIFAwOTl5dkVmYWJy7a3t5tffvkFsMIM1p49e7w0GAza+py3f/9+AIqHl4Q+qis54QhY4QXL1/HWsdbbAb7maVZZWRkAxQNYY8eONVOmTHHaDRs2mLq6OsCKALCGDBni/Hjv3bvXXvFo3qRJk5zPa2xstAWgGAdr4MCBXm5rOHnyJO9hRQhYqampPR+GuDreHR0dpqury86bO3eu80+hNevbb78FoHi4wsrKyvICFp8SRg5YrgG5ESzX55dy5swZAOLGUe7DitUrLJe9evWq/TsCFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABFmABD2ABFmABFmABVjja0NBg9u3bZ1tfX++0mqUvlt+pL3sDFmABVpyBVVhYaJ577jnb8ePHO+uLL75oCgoKTGlpKVdYgAVY8Q5W719TcztXMCtWrLDbmpaWZsaMGXPHq18BpQqsTZs22d8WDFiABVhcYfUZLP2qpmnTpjndzpUrV9rH0c8//8xLQsACLK6wGk1RUZH9tct9ucLKzs4GLMCigOUPLP28iooKi1Ykg8VLQsACLMD6l9/GCliABViAFRVgqfo0rveV1q1+dzxgARYFrLCDpT9XV1cDFmABD2BF/kvC3r/7/s/e5AYswKKAFTawblate6il6gALsChgRTxYf7ZYK2B5AEtL1euSV0tw+QhghR8snfTFxcXOj7WW+FJ1frW3t9s/u07vdQm3bdvmDA1t043vZQGWB7D0ZmJubq7ZuXOnOXr0qNOePXvWnlCAFV6wdLznzZt328evpaXF9q/+/y9cuGAuXbpk5zU1NTk/vzRL//QFlr4a0/vTQ8Dy+JLQdfWVBS3WmpeXB1gR8JLQR3Ws9cDWsfcxT7N6v1zrK1i9Px38/9r7C8iA5REsYeJ6JWCWqmflZ59L1bu6wgrttxs/MQQsT2DpGVBvugMWYLkAS+eXrzfde4OltzmEyO12+fLlfzpnyZIl9v/Hm+58Skj5lJBPCQELsAALsO4EWKHf9AlYgEUBK2LB0svApUuX8uVnwKKAFT3fJbzV9wgBC7AoYEUEWMIqGAwCFmABD2BFLliLFi0yixcv5vdhARZgAVbkg1VTU3PLN9gBC7AoYEUMWDt27LDr/93OfwdYgEUBK2rWJQQswKKABViABViABVh3uloabOLEiWbVqlX2k8U7Xb2npu7du9d+7QmwAAuwAKvPLS8vt7dBnD592svvGgMswAIswOpzdeWza9cuc+jQIfPNN98477Fjx257dWrAAizAAqyoL2ABFmABFmABFgUswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswIoTsLQCyNChQ82MGTPsd6BcVl9ZAKzwg6XjPXr0aOfHO7TMl+bpd6LrS7su5wFWHIAVCAR61gzUyeXyu09KW1sbYIUZLB3v4uJip8e7dzSvvb3dyyzAioMrrJSUFDNmzBj7TXOXnTNnjn0mBKzwglVbW2u/99bS0mKOHj3qtJqhec3NzV5mNTU1AVA8vIeVkJBgEhMTzeDBg51UP3v69OkmPz8fsMIMFqVRD1ZWVpbTN0T1azf0spOXhIBFASviwQq9TwZYgEUBi9saAItSwAIswKKABViABVgUsAALsCgFLMACLApYgEUBiwIWYAEWpYAFWIBFAQuwKGBRwAIswKIUsAALsChgARYFLApYgAVYlAIWYAEWBSzAooBFAQuwAItSwAIswKKABVgUsChgARZgUQpYgAVYFLAAiwIWBSzAAiwKWFEClhZRzc7ONosWLTKLFy921lOnTlmwNE87RQ862rfec889gEXjD6xAINCzyGlXV5dxldDP7ujosPMaGxsN+ff3J2DRuAIrGAyaqqoqc/DgQYuWHgAuGvrZJ06csPMElqtZ8VQdNx5wNG7AopRSwKKUAhZgUUoBi1IKWIAVH9WHCOwH9itgOQarrq7OLFu2zEs3bdpk7/vyNa+8vNxs3brVy6yVK1faeatWrfK6fWvXrvUyq6ioyM4rLCz0Mm/dunWmrKzMFBcXe5m3Zs0ar8dvy5Ytdp6vc6WkpMTOi5k73X1Ud9Pn5eV5m6e763Nzc73MGjp0qJ2XkpLiZZ5uvtW8kSNHepn3wgsv2HkTJkzwMk/bpfv1MjIyvMwbMWKE3b5hw4Z5mZeTk2Pn+XosZGZm2nl8NaePX82ZMmWK83nK0aNHe/ByWT0zKxMnTjSDBw92Pk/fHFB03J544gn7ROByXuhc+uijj8xTTz1lMXE5b9u2beaPP/6w+1VPBvPmzXM677PPPrPbN3r0aLs/XR+/8+fP23k6N998803n844dO2bnARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZgARZg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83Jycuy87OxsL/N0H52On49ZOh/nz59v50U1WPqLh+50T0pKMqmpqU47a9Yss3btWjtvyJAhzudt2LDB3nCoea5n6YZDzUtLS/MyTzdvat64cePsvOHDhzudp5sbNW/y5Mlm0KBBzrcvIyPDPsD0QNKNnK63Lz093W5fcnKyl+On81Lzbuexp3Mr1NudN3PmTDsv6q+wQmDpL6yd6LK6l+by5ct2nk581/N0s6Huw9I817OWLVtm502YMMHe6e56nq5WNU+Q6AGtKxGX8yorK+282bNnmxEjRtg7613O27x5s70Zdvny5fZO97lz5zqdp6srbV/oTnfXx+/MmTN2ns5NXQW5ntfc3Gzn8V1CvkvIdwn5LiFfzQEswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswAIswIo9sMrLy+0JOGfOHFNSUuK03333nfn999/tPK3s63qecuLECTvP9awdO3aYrq4u8+qrr5pRo0Y5n1daWmq375133jFPP/20XVfP5bympiY7Lz8/30yaNMk+wF3Oq6urs/sztFis/ulynlZAV7SAq/an6+P3008/2Xk6Nz/88MO/9N9s2rSpp7c7T+sgKjdbRDWqwKqtrTULFiwwra2tprOz02n1jKnFMTUvGAw6n6dcvHjRznM9S9UDbN26dWbJkiVe5ilbtmyxz6B6IvAxTwuqbty40Vy/ft3L/qyvrzcrVqwwV65c8bJ9uqLT1aOPbVN0bupVgI/HXkyAtW/fPrN9+3a7MqwuU1333Llzdp52nI95glgvL3zMUnft2mV27tzpbV51dbXdn9qvPubt2bPHXo18//33XuY1NDSYsrIye3XuY55ecWh/+jp+Oje1OrmveVEPFqWUAhalFLAAi1IKWJRSwAIsSmmkVrenvPbaayY9PT3sYB2bP39+3enTp01bW5s5fvy4+eKLLyilUVp9Ah3qnfqZBQUFPVCFGyylun///vajaN3vMX78eNsb/4KU0vhubxfCCdY/ujvmsccea09OTgYsSulNsVJTUlLMfffd13X33XfP7nbjn939j35hyN+62zZgwIA2wKKU3qpJSUkd3VZc7+6kfhGQed01lFJ6i+7rF0H5e3dHU/pvdFSvsj9ib/8n9iOEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBDiNP8LZdXLMxiV1Z4AAAAASUVORK5CYII=",
bridgeicon = "iVBORw0KGgoAAAANSUhEUgAAAEEAAABBCAYAAACO98lFAAAIkUlEQVR4nO2aTYwcRxXHf1XV07Mzs7PZzUy8NrKS2CEHhxxQRCBZbGFFECtRkLgggRRyACGEIjgghAIcwg3xIXICTuSQ+BBAHCKLjwRiLdhyCESWIkE2cUISJ0u8m+wSr9c7s9PTVY9DT/d0z8zu2vFsjyPt/zLd1dXvvf7Xe69eVQ3sYAc72MEOMlCjNiBB+GkxCz72e+ej+8dO5Wabl5eirVB+wtB4eonSSQdAM0fdo/WEBw8JQGXOsnb8FIc7zbPdHrnYNxISykePSOPpVQAq82QISGM2J/t0Hkp6ERMQ4/AojEghdxLM/L1C1eStdlPkGg5m/l6xuwPMgk9x1gKRV1Tm4fbjp/r6//OuGdYOGPj5iW21M9+c8OAhKd9ZpvEFm2muf0dz+3yV5m9+l7TN3n8H9V0TPLTvPr79jW8mdv7q6G8lvv7K/Z8fiv35kfDAjGTuHy1nbs2Cz9TPQgCWWk3qxRIP7buPmTs/xdxLZ/rEBWvn8SuTQyFidHXClxvRb9VgvlvF7g5Y+nH8sMiXfnIPAH/+/ZNY0ezZM41fmQQiAtK/V4qRzA4xSicDKnMW+8NVyk90k6VZ8AF45sRf+fu/X+D1xbd5Z+Et3nvvXN+Hp8Pj/WJknlA6GfCJ156H1+C5Nz5GY9XCs4bynWXA8vi7f4S9Ud/b56PffeJDDSp+CeADGA5VA6vdhNg86DM7cwelU2FCBsDs6gwADaBeH8+IeH3xbfZLBepNpqb2fAATI/Qnx7heWG1x+LF/ADD7wEzfa/X6OPc0P5zcP/7LXwzV7pEuoOLp0ixUma0egpU2pZMBzYN+t1PVcMvkTZydFG44p4ZOAIyQhPLd1aResHv/kHyYOnpEuP+pzIf+jRPbastIZwcAvL9kPrjRQ0AeyI+EzrL5akRu4VCZs6gXawDILcvw6Cr10+Ms5WXAJsiNhLUDhgrLeam7LOSaGNf2pm6qhlKeyjdBfiSsZleOlTnL+ovF3NRvhnwSY2+RlML47s+OPGFuOwnlo0dG/pFbYdtJaDzb2LLPqL0h/4oxPlS5a+MQyRvb6gn1b90tmYSYOlVaO549YRqlN2wbCeWjR2SplTpHGnCsdnHh2FVxDLh9JJyWvmlxK4zKG7aNhIwXXOXYvpywQS64GrF9JKS31DdYQZ45c0Z+8P3PdI0J/gsgea84r3iETj3/gtQnSpQqkahWWzP38lk+95GfJn0++egNfHH6Nr7+ta8m+l594z8C8NKLr/LrY0+ytLzIbTffyt7r97L3xpuo1Wr0ygUoFlzm+lLQXBOWLkThWZ8oof3uznax4K6chGNPHZfYYO0b5l4+mzxbWVllcnwMMQVWVqJD2P37b2RXzwaqC6LQ6X0foFarZfqn+14qCRARASRkxKhPlK6chHjff/raCcQUkvaVlVVaQdDXv+j7XHNNdUu577wbLbuDtfNUp3Yl79RqNZaX3/+SXNk2i/+7kMiGIVSMb74yj6g13hRFGAZ4no+oKwtp225n7k8/8yduu/lWTKGAb6AdqsvSoQGlHEqBVhrrHNZ2vWgoZXOl4jCqjAqjHQJdvLx8K9Lv1s5Fba1Wi3ptmqmpKsZ4A/sq1a/P2vASdQ+JBLdukUJIs1lk3HOEEiBq43gVEZREkRiPqMZk3hGJ2oNOSLVaLYzZ+sOUUogIzjmUEkSyER/Ljfo6RPRwSAicQKsBFGkGDbBCj26Uio2IrguFQuZ5O8zmDycOHIQhLC0v0rpuF35BMs/6dAiXNOkbYwhDi4hDJBwOCb5W4BusF1BslAlVG6f6S2bVYSL+TUObrPUaIQy7o2aMTvooUShPJXLi0U3L7dURe4c4QZzgeQalFM6q4ZCgxwwFMx7F5jh4DP47jrUh7Z6klzZaa50y3sP3NUo1qdemKZfLeN7gnDAIzrkkryR2ap0JB60LiJHh5YT22EXEVjBtcJ7FcXmLJ6DPaOccYRjlgWazge4kQKU7HuA2niG0EUQ6/TuxH113PSRsR7KHQkI78MAKVjRj3nmCQAaKTntob06AKPn1Is4J1197HZ5no4+w2QQXyc66v3IaiON+MFlx0hwKCQU/RBVKmLYDJtBjYU8WVn1GOuf6+oyNjWWeR+0h9do0E+MVTKE/68UiBqQZRLLTr4hk7HDOoYY1OxQKBu37iAYcoM2Wsau1xlqbXEN3NOMQADCdZ9rrEqCcxqn+0OmtF3ptiKfPzHvYIYVD24I0WV8vM+45rAtxuIGzQDQa3blMRLDWopxGdH8eCdohS8uLNHbvxvdNjyzVec91ZG6OuH8aTrkh1glBCyjTDBpYHY3kIOa3QrHYPZBptVp0nIUgsANGVidtsRcoAUe2bbO8AEPKCUppKmMeIFiKQP/JUtqgXohIMo9rrTuurSgWSygVEVqpFPE8b2CJHENLxys64bKVrniQhpMTihrllVFKo/E37SvSP39H7aA6BZYxXbfXOOq1aYreGHpgYuzKE9UhkXiPoL+/UtE7abKHEw7rIQQrqMIEzrWxtlsQKVQyr6ehJfpQp2xUxTHYXVtty9LyIhd2XZchJw2lFArVJ2NQG2RniaF5AkR5wTXXMcp2kmI8CkInRKNprHNtsUnt75zNLHQGLXzCEMyAaTDWpSRar6RzsSDJNKnRhAM8EIZVJxTK+DrAGouxENK/aVLQKiEg8xFtITRdz/EkKqJC1caTAhfVOgDjpRK+t3moAYMXUK6jx9ugZN9a6qXhkUd+JGFo8Lw0r3EFWBzQlrJxg/WENj7NVou5t87x0X0fQqerTLeF6bobBhvJjzG0cFi72CawbaqmlFlFKuWAACggkq0DoqrREg2fS7XHO0EhrZakckJ2P+FSF1MbQURHeq5ISg8efvgRif6LWt6yb4QGYdi/DxnD8yYJw/OcfuVffPzAwSFYuLm+HexgBzvYQQf/B4i65MztvqKcAAAAOnRFWHRDb21tZW50ACJtYWRlX3dpdGhfX3BfaV94X2VfbF9hX3Rfb19yX19wZXJzb25hbF9fN3Roc2hhcmsijcktLQAAAABJRU5ErkJggg==",
elevateicon="iVBORw0KGgoAAAANSUhEUgAAAZAAAAGQCAYAAACAvzbMAAAG8UlEQVR4nO3dsY6bUBRFUYj82S75b6dIGXmk2RieH6zVWyZjpK3bnKzLsryW4tk+BsCX2db0sT8ffgwAbkJAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgGRdni+zugD8mgsEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgeQ751W4d8LcBlPc//nzlcIAAkAgJAIiAAJAICQCIgACQCAkAiIAAkAgJAIiAAJAICQCIgACQCAkAiIAAkY9Z4OzO+wNWdP6sbuUAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASA5DH6AfjPa8B3rgO+k/l5V2/OBQJAIiAAJAICQCIgACQCAkAiIAAkAgJAIiAAJAICQCIgACQCAkAiIAAkAgJAYo33OG2p9Dlg4HRb65daRr0G7yqJCwSAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAxBrvz/rc6Iil0qo+q2VUuDUXCACJgACQCAgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQ3GXOvc2OzzTJPoIZeLg1FwgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQCAgAyWxrvFZ1r+D8Fd9lseQLH+cCASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASCZa43Xqu697fn9+5KvFV94wwUCQCIgACQCAkAiIAAkAgJAIiAAJAICQCIgACQCAkAiIAAkAgJAIiAAJAICQDLXGu9MtjjiOmJxuD5rZVUZLsEFAkAiIAAkAgJAIiAAJAICQCIgACQCAkAiIAAkAgJAIiAAJAICQCIgACQCAkAiIAAk5tx/cvbM+XzaH2hb2577XDPwex7Wi3cNU72whQsEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgGSuNd7z13H3fOHllzh3OHfFd8931t9xz3Jw/3da8T3Gue/ARCvgLhAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAkrnWeK2N3t09fv++4moB+r3+t9mzrHxxLhAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIJltzh14p8/Af/Y5vpFJ9kO4QABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIrPHCz9pU7bb2+dezl2NnWqqd6VlvsHLsAgEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgscYLx+hTrHXJd6al2pn0Vd36wWl+SBcIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAIk1Xvg+bcXViu97fVF3WfYsK1+cCwSAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASMy5w3Vcfwa+z7KbZD+ACwSAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASAxBrvcc5dRt3HUum9eVdJXCAAJAICQCIgACQCAkAiIAAkAgJAIiAAJAICQCIgACQCAkAiIAAkAgJAIiAAJNZ4v4+1UWbhXb05FwgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQCAgAiYAAkAgIAImAAJAICACJgACQPEY/wC+9Rj8AAP+4QABIBASAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIxqzxPo3qAszOBQJAIiAAJAICQCIgACQCAkAiIAAkAgJAIiAAJAICQCIgACQCAkAiIAAkAgJAIiAAJOuyLG1b3SQ7wDVsa/qYCwSAREAASAQEgERAAEgEBIBEQABIBASAREAASAQEgERAAEgEBIBEQABIBASA5C+Xn2G+qMmJrQAAADp0RVh0Q29tbWVudAAibWFkZV93aXRoX19wX2lfeF9lX2xfYV90X29fcl9fcGVyc29uYWxfXzd0aHNoYXJrIo3JLS0AAAAASUVORK5CYII=",
discordicon = "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",
structureicon="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",
hudicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAAn1BMVEUAAAAAAACZAJllAGWZAJllAGVlAGWZAJkAAADkAOQ2ADZHAEcAAAAeAB7TANMXABcAAADkAORWAFZlAGVvAG9lAGWZAJkeAB4uAC5HAEdrAGsJAAkGAAY5ADlhAGGFAIWLAIsEAAQmACYtAC04ADhFAEVUAFRcAFxzAHOTAJOrAKvEAMSAAIAqACo8ADw/AD/kAORyAHLWANYOAA4AAAAMxtzbAAAAFXRSTlMAmcxNmZnMTczMTU2KTcyZTU2ZiorBbQogAAADIElEQVR42u3b2VJTURCFYXAMCghq4oAjzooK5Lz/s5m7/2LF6qq9ep/elcr/BF91920f7HrnR0fnA6KuNwEbCAVsIBSwwVDABkMBGwwFbDgUsHpUPQyUAatBAatC1cNAGbB6FLACVCEM1GCwk9Nrs9OTdNTZYlrf3Dqo25v1tDjLRm0C1obaBCwLBawZBSwLZcBAActEATNQwHyUwgwUMB+lMAMFzEcpzEAB81EKM1DAfJTCDBQwH6UwAwXMRynMQAHzUQozUMB8lMIcFDAfpTBQPsxHAQOVB3t+OXmtr65QNXYsrHur75fesNhhc4dbWCtgDSguPpsFrAkFLJcFrA0FLJUFzEABS2MBM1DA8ljADBSwPBYwBwXMZwnMQAHzWQozUMB8lsIMFDCfpTADBcxnKcxAActlAQNlwnwWMFA+zGcB+w2qFXZhs7TXb396rF/vX/RgTROwFtRy2YkFrAXVjQWsAdWPBawB1ZelsBjVnaWwGDUbC1iMmo0FLEYVsAQmqAKWwARVxgKmqDoWMEXVs4CBqmcBA1XPAgaqkqUwUIUsbbln7Vl71o6ynnz9Uc36+OmpsA6nNbA5WaC+Le9vYU3A5mSBWm5nAZuRBep/LGCzsUAFLGD9WaAiFrD+LFAxC1h/FqiYBaw3C1TMUlg+C1QDC1guC1QDC1guC5TBApbDAmWwgCWxQFksYDksUCYLWAYLlMkC9veNy3r3B5TJopcfvgSwAPX54tWyA2u1CmABapo6sQJYgOrGCmABqhsrgAWobqwAFqC6sQJYgOrGCmABqhsrgAWoeVgKE1QFS2GCqmApTFAVLIUJqpIFDFQhS2GgClkKA1XIUhioQpY27Vl71p7lso5HYD0Lnh5KWA/uohFYAUtQAithKUphBSxQAWw+FqgY1otloIDlswwUsHyWgQKWz7JQwLJZNgpYPguUActmgTJhqSxQPiyLBSoJlsMClQbLYIFK6/Edl7V4dNCjhwHMeFLuCYtRJbAIVQQLUFWwAFUFC1BVsABVBQtQVbAAVQVT1BAwQY0BE9QYsKFQwEANBQM1FAzUrvYPRkRUspH6WaAAAAAASUVORK5CYII=",
offhandicon = "",
particleIcon="iVBORw0KGgoAAAANSUhEUgAAAB4AAAAaCAMAAACXfxyGAAAAAXNSR0IB2cksfwAAAAlwSFlzAAAXEgAAFxIBZ5/SUgAAANhQTFRFAAAA/wAAxAAN/wAA/wAAxAAN/wAA/wAA/wAA/wAA6AAF/wAA/wAAxAANxAANxAANxAANxAAN/wAA/wAA/wAAxQANxQAN8wAD/wAAxAAN/wAAxAANxAAN/wAA/wAA/wAA/wAAxAAN/wAA/wAA/wAAxAAN+AACxwAN/wAA/wAAxAANxAAN/wAA/wAA+AAC6AAG7gAE9gAC5gAG/wAA/wAA6gAFxAAN6AAG6AAF4wAGxAAN/wAA8wADxAAN/wAA/wAAygAM8wADxAANxAAN/wAA6AAGxwANxwANKwh0MAAAAEh0Uk5TAP//GATosIiAqP+4YBy4gKBIIGwkBFH/VPvP4HhoEHzgiOjXvzz//+MwGDVCHbEEgxn2mCyFFeByCdIJ6AihjnqA5A0NiOCICaZd/AAAAOFJREFUeJyl0GtbgjAYBuBxGDKYKYcAKyBD4qB0UDtompVm//8f9e5DfBjsuoqeT3uue3sHQwihSFGUCAnzmiTJTswTSZLIX7ifpulUzBcjWcY/heq6Hoi5mXbe9iH38JtvHxivGzw9gdxomnbneZ7VYEuGXMOH9tS2Kzvzy4xS+jyEzA3DeOBZ0eCQyVYYJgz4uZ35sSzLvZjPoY9XdlEULqsb3/ffeT6t6xWM0X/PxyzLvng+BGEYLll/gnf4vK15QQgJkH0GuxzWL9te8X9cmXmeU7Zy4jie8axWrutG6BvbTBOVGg1WOAAAAABJRU5ErkJggg==",
enchanticon = "",
statsicon = "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAEZUlEQVR4nO3bMW4TURRAUQ9yiVLQZC1ZBh1LpGMZrIWGIkKKoDENRTJRGBvi/G/fc7ogF48RXL3/PVl2wGOH0QOc2fL4h3ejpgDGEwAIEwAIW7Y/Alftr2f+H58u+0rg/ee//xe3AUCYAECYAECYOwDqnhzyL/3Mv2V9J2ADgDABgDABgLD96AHgjV33If9ENgAIEwAIEwAI8x4ANanv/bfYACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBMACBsP3oAGOnXz9ETjGUDgDABgDABgDABgDABgDABgDABgDABgDABgDABgDABgDC/CzC/w+gB/tMyegBeZgOAMAGAMAGAMHcA4510xj/c3p5rjlexfPu2/qP138+dwERsABAmABAmABDmDmAys5/xt6zndycwNxsAhAkAhAkAhLkDeHuX/m7/SY64E2AgGwCECQCECQCEuQMY7NK/938F3gsYyAYAYQIAYQIAYe4AeFPeC5iLDQDCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADCBADC9kd85nD2Kc5rGT0AzMoGAGECAGECAGH73aln/K+TXwncPTvyrwd2JwB/2AAgTAAgTAAg7Pl7ALOf8bes53cnAC+yAUCYAECYAEDYMb8LcNm27wQgywYAYQIAYQIAYfuL/94f+Gc2AAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAjbjx4g7+Fh9ASE2QAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgTAAgbD96AFqW+/vRI6R9+LI8+dkGAGECAGECAGH73d3TM8Hu62HMJFHrM/Hh5mbQJMMs2x85n/WZ+PvH1r9/GwCECQCECQCEXf97AOs7jvHWA131oXPC7/1Tz3+LDQDCBADCBADClt2pZ6DZ3xPYPvPPdilw0gOd/T2BI878F/38Z39PYP1ewxYbAIQJAIQJAIQdc2CY+9CzbbYz56k8/7Gu+vnbACBMACBMACDsN85QUe4F1VPqAAAAOnRFWHRDb21tZW50ACJtYWRlX3dpdGhfX3BfaV94X2VfbF9hX3Rfb19yX19wZXJzb25hbF9fN3Roc2hhcmsijcktLQAAAABJRU5ErkJggg==",
fasteaticon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAA5FBMVEUAAACMaTKZeUKynni3onqhe0WzjUxfTyeZfVG8pHTayaS5oXPPuoGumF8TEw6nlXHMuI/Dr33FsH3gzqjaxZilkFjFrne7onPg0arRvZTLtoHMt4LCsIW2oXSulWHIsnncy6bSwJXErnzWxJnezqjCrXq3nm+Mcz3Pu5DMt4/BqnvFr33KtIDWwpfbyaWxm2mpjl/k1K7JsoHJs4HGsX7ezabSvZPBqHmxl2WJcDywmGbey5/l1K3ayqS8pXK4oG7XxJjGr4GKckbFrXfFrnTItom3oG+QbjeBYCtwXzWQbDSZeT/OElVjAAAAD3RSTlMA/////////////////wNRhiCRAAAA/ElEQVR42u3ZtUEAQQAF0dvF3UMyXCMawKVytJmLyND5Ee4yr4I5XWskSZIkfbESNVCieUZtfhCzzDLL/5b/rYIa0YGu6IGvvFnXzDLLrBI96H6dHvgQ/3qWWWaZNRwNCoaj9418iDDLrC9lllnDaKNiCr3P8C9vlllmmdViOqL/4/gQzfoCZpn1rSoWYhFLmIllrMQq1rAenpCZ9S3MMsvfacUa+p4wGv2v82/eLbPMMsus/o9zjIu4hA/RLLPMMutbbGIrtrGBndjFXuyjBz8+y3fLLLPM+ngHOIyKOIqCnvihWb5bZpll1rfreQkf4gPMMssssyRJkiRdAeAQmFMcg18HAAAAAElFTkSuQmCC",
totemicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAGFBMVEUAAABpTifq24SydUPYvGb47qX9++4Au0ZYoP4KAAAAAXRSTlMAQObYZgAAAMNJREFUeF7t2UEKwkAMQFFXrjseYewFRC8g9gRidV+wNxCvb6JkIAguO2P4f9VC83bpJqvlIiKiWbqP1iAdk9RFtrCwVLgWcC/tmrSwsJ7SQ5mbPrVrYWENrvAWFtaoZas371TA+hYW1nqW8nfKHAqoXhfCwsJSZnoP2vcbZbburfd//xoWFpYbTFnz0wVsycLC+myBFdXCwkqWvwVc3A5ZxixrYWH5vHX+sTV1LSwsfzuZAlhYWNwCgllYyeWYf7awsF5n+DqG9ibnWAAAAABJRU5ErkJggg==",
absorpicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAPFBMVEUAAAAQDgARDwT0zgD/ExMREA3qExO0Eg3xExOsEg3/WlqnEg1kFRL/2AXOrgAhISH/2hNDEQT/ZmZVVVXH90/fAAAAsklEQVR4XtXWyQrDMAxF0UqeMw79/39tHl2ogi4CeYTkgsEOHLBWzuvevQ92hgDMBwI6Q+aDPYt8v/gTlwCEsOwBAWAfAhCPAKimpAoEkJLsATGIgWHYthhFxnFZREppbV1FpgmIQ3ARgBhrFQGoNcbW2ES16wB+VylsIgLgF5d4lDOAG55GQhDJ2Q/PJYb+ASaxeTzgEkN9b4BPDBngE0MG+MSQATbxkcg1L/Ilfxe37gP6OVylNAmgQAAAAABJRU5ErkJggg==",
worldicon="iVBORw0KGgoAAAANSUhEUgAAABUAAAAXCAYAAADk3wSdAAACtUlEQVR4nNXVz2vcRRjH8dfsd80vu3YDNYG0xLYIxZqLh16EIl76D1T0oB4sIoJ48iqIZ49epAcPYg8FtXhQD9aKJ/HiD4otpmnR2gRRaJO0STab/e7jYabZmETtTRwYdub7PM975vM8M7P81+1IV9yLX7onUM1MxYfvBMvF8Hr629jdDQsPhPFluvg0CKxiCOv594XnkhrvVTsZgw+nI7SYOpEsXCoq96LGPPbjevGdQXByOlnqc37kr+A8WRUSTzUZTaz2SYmLPeqKud+DDqcOJt3gt5p+4sLF4ArulMVfzinJ0LcjvJi0E88O59Vu1XSDCzW3gpiNga4lDky/4cY3b9KR+3qxvZpSkyzF+6H3THIGxxLtlJfcl7j5ZWg9mVRY7OfYG58HY3Let7UGeBBHufNJmGxkJd/hgyunzH4VDhdgLzjSxMdBVQhNtDCC4a3Qo8XQyrmZrjjYx6F36XLtfIjIcXD2OB4pfU/J53AZb0Lh/mxcSIxVpKCVyk5KYY43uNzse3p/iRkqG2njvoH85iawwiFu17keB4YY6uGJXJ1m5BynlEQEIyk7NsqOv9gO3ZCTPpY/rtRslCL1EYmJRi5eRDjXTXl3gcNYK7TOVvndYki4GuaL/fEqQ2Gi5uvltsYPycmb5WNd4lYGwAH01zJbwfV8vTvlFEw2mEgMlzM69WjKoDX0StycwXndlA+XB6tf6uWizAWzH+UrO7sH+xY9dGw8y+7KMlblg5+2Q78vo5nstHGbxfEM32wrmG/75efIFX+s6PxRvqYdmzcuy7/7jF3LwZ1zMQBeLf2PMp/+1sMnUoasbll0CpN5uPPpOx0Be59Plko6rGMsO7cxUbHWY7RZ3tnPggW8tPVB2Q18N/GvpB1e7QaTgYqfhv7pPd2tvVXgr21xSxj993+M/0f7E9bw7yrEBZaiAAAAOnRFWHRDb21tZW50ACJtYWRlX3dpdGhfX3BfaV94X2VfbF9hX3Rfb19yX19wZXJzb25hbF9fN3Roc2hhcmsijcktLQAAAABJRU5ErkJggg==",
healthicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAALVBMVEUAAABVVVUhISERDwYREA0RDwQQDgBkFRL/Zmb/ExO0Eg2sEg1DEQTxExP/Wlruoi9fAAAAxUlEQVR42s3W0QrDIBBE0dboxmrM/39uHYfFPgqZhlxIqLAnaCi0r2f3XuwCGSAsNNAFEhbTkW2LMfV8HaONVIRg33P+9DhkVkrtHYeZjsQIgFozA2gNq1qVJKXzxDgGeXFVipLYaG5soJ6acJgXXvU8vIYQ5J4DHhvb0hF8bg13f7kcJlAQAIxwHHfEjQEoCAGOjbAdPsCBjvx+DUEmUJJSJgJxoCSOJuC4mhARhECgJ0QETE88gP8SJif3/CLf8u/i0X0BhG8eORwZ3vUAAAAASUVORK5CYII=",
wrenchicon="iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAYAAACohjseAAAD3klEQVR4nO2aP2sbSRiHnz2fwFwQcXsplELGXDBbTufgzir8Bcx2uW7dJZWEa+P9AMZb5PAWhsVfIVe7U5cpcoiksApZ6qwsMQIVk8KSkM6a/a9dHecHFoad2dn56Z155513Bc8880yZGDn0oXLuL1eyDEgBCCFmN9rtdl5950baQSjTNNnd3eWg0ViocC8ugAWxpQpNLfDs7IxqtcpvL15oG7Xb7ang0kT+kvZB3/d5eHjg4ccPbRshBPbxMSyu00LJtAZN08SyLF5ubbG5ualtWKYls75QATSbTX5/9Ypqtapt+O3rV05PT/N4ZyJST9EJBmA4jsNdr8doNNI2rG9vc3JyAgVP16wCpxiO4zC8vw9dk/Xt7em2UpjIvAQC8RzPxOkURphARbJf2pBScnV1RRAEodO1SCvqBCohBEdHR0kHYkgpabVadG9vs48uB7QWrNfrHDQaqUQyWZODwSDr+DKzTKASQsxCsINGI/Vm3e12s40uB2I5mbmAOpHI+UC8LGJ70UvPS2JJVbS31LFUoM4DJnE862A9WC7QkFIiP39e+kCE41GAmtRrKdK62il6c3Ojfehfjmd22cfHXHrekzPiMoo6ZfyqqxiPx4zHYyqVytJ6IQTC82YH26RTUgiB+1hUrDAAD+tYWZbF3tu3oUehrKz6KBXmRQ3f9+ne3oaGXVlJGTHFJmqbmJ0SxuPxKt4PRDquTMTeB4Pv31cuchVBeJx5r0zTpFarsb+/T6VS4eXWVp5jWODPd+/ijisWcTtSAIeHh+zt7VGpVNjY2NA2zvoDTEQmGZ+WpB0oAMuyME0ztGFUIioK9+JiugVlEpnm4YU1YlnWrOz7/qwcJxEVxd+fPnF9fQ0ZRK7y24RqNpvUXr8u1ZKrTuHFyoBHkcXx5Jp0WkacRFQUl54HyXNEwOoFLiSihvf3qTu69LxU+2RRWWYFYNs2f7x5U6jjWfkUnWAAhuu63PV6BEGQuqOkEU8Zn7WUbdvs7OxkCgjiOp6iLDiP4bouo9EoL8cTShkCAWi1Wokcz6DfZ9DvL9yLkxUoS6ABjyI7nU7kmhz0+wyHQ4bD4YJIIUTkeizNgsR0PIN+HykljuPgOA5SyieWDKNMgVMMx3H458uXpdPV9/1pjGswyTLMx7xRrINACHE87z98mBZnkczcvUjWRSCgdzwTj/mkHIe1+LPOHIkiniAI+OvjR6SUoNGyVhZkiePRZfSCIOCu1wsVF1qxBijbtqnVagBPzpSdTgfXdSFCw7pZcB5jIgB4/CA0f8URB+stEIDz8/NY93Ss8xSdootS/gtjf+aZ/z0/AfoKu8ayPfzOAAAAOnRFWHRDb21tZW50ACJtYWRlX3dpdGhfX3BfaV94X2VfbF9hX3Rfb19yX19wZXJzb25hbF9fN3Roc2hhcmsijcktLQAAAABJRU5ErkJggg==",
diamondicon="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",
withericon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAYFBMVEUAAAApGRpTMzQyHyExHSFoQEVjPT1aODt3SViuoqbHwcFrQUhmPktyRlI5IinIwsQhISFBKSnY2NhKLjJHKy9dOUCQbnlvQ1IhFRV8VGGIZnFiPEaBXWRJSUlVVVWPj48LiYDrAAAA3ElEQVR4XtXW2WqFMBiF0WaenIczn/b937JulFByJbiR0w9EI1l3PyRfn933zo4QgG5HQEdIt7P/RdY/xYpKAKrKLwEB4LuqgHgE4HIJ4fEAAgjB++sViEQyuN+9x8btWXo+pQTikLoGaIqMmedx5JGUXq+6bpq2HbbaVqmUnJsmHjHIaD38SSlrpex7FgGy1jmlsADAW+sMaERKa4XA9p8lMDLJSOsY31sxCpEBjQAJoZTeEuJ2A2ATIOcwisbkQeGTjKRcR55LSlQCPgHKgEzKSOScE/mU28VH9wtuhXqhb6f3IgAAAABJRU5ErkJggg==",
poisonicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAWlBMVEUAAABOMwBeQgBwVACuOQAyGgDKEwDCGwCmGwDESyaZMwC8KACyMgCHOwOmQgCuEACZKAG4GgCMIQDMmZnIT0LHKBO+EgCQegCGbgB7IwEhISF3JQFmMwBVVVXE2c2VAAAA4ElEQVR4AdXWZULEYAwEUD53X9/l/tekg+UnFmzqbV7d7v527t+ZzxECl3eE0OfI5Z35X+RpDk0hvAQlrdktKMMUxlsjxEEAdru1QgACWMvawwGIhxDY761F4VM3hnPezwnEQ5wjIKUQAEjv5zMfSSkEt2UMa5USAuV5S4zXKx/ROj8mJSmVAvJebynlduMiQLXGiCIpTycQ7BQBLlIKkBBKHY9KSWlMrbyE0AsRwhgCfAQIJ0AIKQHoIvISoN5zNoYANyGk9Zwvtzw/IUSAnxAC+G6CMJGf+SL/yN/Fn84Dse2awamO3doAAAAASUVORK5CYII=",
weaknicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAIVBMVEUAAABVVVWJjsQhISFfIh22ucqnqr1wMi05ExCEOyPLzt1aE+PXAAAAjklEQVR42s3W3QqAIBiD4WU/Wvd/wTFiBB4J+UI7CD/cAxKB6d9ZBvOFeFgH4t4Xsg6GIxJNvFuKxBDpeV6X5DVBcphQhqSaNUVSzSEZkhccyhCDUo4jdYB0YDaRejCfSNvmad8D5pOg1gI40pqRAUWkWs/TiCIBtXo2YoiLBvlwGOLiWyUIfyPzfxe/zg3ZZBNND/pGdgAAAABJRU5ErkJggg==",
hungericon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAYFBMVEUAAAAzAADdwTcuMRNaWjJANxW2jVRfDQ16Vh/u3peKSTF7Yy+qERHu5sDftn1GSB+ZZjNrek9VZkRVAACFbzndyXJWQRdrVSaRExMhISGghzdBBgZmZjN4EBBnRBRVVVUnwN+0AAAAuUlEQVR4XtXWxwrDQAxF0enNvdck//+XGWwe2RozAueClge0k9iz+1zsLgFYLgR0lywXS0UYi3NEQQCMYazrqkpKoHQEIISyDMFazpXSGiglATJm2+a5bbEcBbF22/Kc86apYlSE89eL8yzre6WwWnoyjlmsP6Ijzk1TXU+xfVcqPQHS2rkT0RAgKd8xraVcVwoCdLau3gsBlJr8qPdFAURBgIQAoiJAw0BJgACoCPofQn+R6b+LR/cFElum8Z2AUlMAAAAASUVORK5CYII=",
waterbreicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAJFBMVEUAAABVVVUhISEdZ5BqnrsTVHkEK0IyORpETSdKXUNVZlVmmWZZM1PtAAAAuElEQVR42s2W2wrDIBBE27Sumvz//3aHNYzUF8FBMpDgSeaAhtxez857MisK4JgIeivKMRmVAiaRFQoLHw9LZIXCwteD0sAChYXkidI/qxScito9IosULjZKnp51CheLEfZkndIv21pu1ikxBTMIucUsjuqUEErBVj3neV0gSDoFp1DPGfVIrSGplHFiFFLSKLxh4iKXFl5kgbL5HgPzESbrlPGVR9YoSP/6RsgYLSg7vshb/i4enR+/2xPtjZEW8QAAAABJRU5ErkJggg==",
fireresicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAPFBMVEUAAAC2bg/kmxOdPw+LHA/02RmnUw/KgRDqtRW7YRHQnBPvxRbVjBHHfQ+9axCiSQ/BchAhISH///9VVVXuHWsCAAAA4ElEQVR4Xs3WbYuDMBAE4MxuEt9te/f//+tlWEvOOwqlDKUDIqLPh0lYNX12vp/M6yTA7YkEep2cQUqPkIbEdc48BdYTPuyekjtZx3oCuAM589g2IJiSEK3rsszzNJVyuQyDGbGSRF2z0vJ1xAyolW00hDV5CyBIR4jcCTSkLzHBvS4RwC4qQmQtf0kp7kpC/r+LWbTRkJgW4FF9DYkutZr93sphqJVASXLe9+uVKGJ2H2odiTacEGAcSwurB1CS/loiiiYEWkJERoqWGC89CdZpAD05UwF5zxf5LX8XH50frDhc9S59Ce8AAAAASUVORK5CYII=",
resicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAATlBMVEUAAABLVWt3f49ian6Jj5tZYncMDxQ/SF8ICxBFTmVCTGJKT1xHUGdocYQ7RVshISExNkNQWXAQEhY5PUlKVGpvdolcYW5VVVV8gpJYXWvVTyqCAAAAxklEQVR4Xs3WyQ6DMAxFUTKHeabt//9o8+rKbJGwJe4CiaCzcIgE1bN7XewOARgvBHSHjBeTIXTPgFfkCMD8q+LOFVkSSvNsTF0yhu7lyV6ydv/X986FUNfSBMD7tgXDs5y1CNboGuM06ZBlAWlbgHV1Tp50HWY5jorLedt0iPc0OohzOoQ24FMCAklJlqQUAoi171KMOJZNMwxihKcpiI8/XiRNIkgYETmBMGGEGAgTRqWUaHO1CBACUCScJNH/Iuv/XTy6L5dyZbGXHeB4AAAAAElFTkSuQmCC",
strngthicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAKlBMVEUAAABfIh2JjsQhISFVVVWiEx+2ucq+IC2nqr1wMi05ExDPMT7Lzt2EOyOkB/+HAAAAl0lEQVR42s3WuwrAIBQD0PRxa7Xt//9uCQ4ZXITeQLMFchYRFP/OPpkvhGWbCHdfyDYZJ+HGTYD7jgBcRMBFBNY1ohQPEThPwEcEgOuKALKJAIcOMoIIBxHorZRMAoyAnRcmiwDLwnYcAkLsGaSj1gQU9jzSGpGAkkWAWp+HyEc6qJWdyEM4JNCROgiHmjqI/0X2/y5+nRfBBRkl+KIqeQAAAABJRU5ErkJggg==",
slownesicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAA3NCSVQICAjb4U/gAAAAOVBMVEUAAAAoKDMhISFVVVUXFyBXV2k3N0OJiZNAQEozMzNERFMgICowMDtPT1kkJC8+PkwzMzMhISskJDGaHVIpAAAACXBIWXMAAAsSAAALEgHS3X78AAAAHHRFWHRTb2Z0d2FyZQBBZG9iZSBGaXJld29ya3MgQ1M26LyyjAAAAMhJREFUSInN1usKgzAMBeB001jstPj+LzsPNSSDKV5S8UB/KP0gja1K9Oi8d+YKwcVrRww6Rf5PkSos8iZEnyWKvAkAc57DrMiXFNB1bdv3OWtxnuQXoLAQmgbIm+QsgDmEekQAykqpDsFjFDDN8Sd2S46jAm9SEJqbkizdj9hjS9Qs2TxihwlRjPbYyutio7DDBAvGVYz2NST3/QgmywQdw7C6/BNEtklpKziGbYcP0bZiogzbCh+iVEc9spZr5I4v8j1/F4/MF2IWGRUdx15uAAAAAElFTkSuQmCC",
encrypticon="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",
swifticon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAAAAAA7VNdtAAAAqElEQVR4Ac3W4Q0BURQFYa0oSrW3ltcKTCYXLMB5yZ5fMB+wsFn3dh/udyLYfjDRr2QJ+v6XKEPM67RxGihPAMSH80A0WWJALByDc1WgJJExEQSYJsRExObSHDFkVXlyeUjMFCTOEhBrdCFjJMkFGkvT5ILIL6RqHiFmWULa6xwoyBBD1nG/oYAEAVyyji8PKUVAzJCUAbLELdM8uSxN5v8iz/93seodAcr5iodDhn8gAAAAAElFTkSuQmCC",
healicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAGlQTFRFAAAAurm5wx4d0s3N4+Pj8yMioxkY3CEgzKujuo+NpT4htkk4zpKMr6+vu7q6xVRB6kVElJSUo6GhfHx8wL28sV5Xr6+v0Hhw1tLSn1dPwcHB1GxL0M/P39/f09PTJCQkso6IlT4gtG5uNMOSPwAAACN0Uk5TAf3///3////+/////1Ju//8VPxC9/77/1Fxc/3ZVQAaySvvHVT5DAAABV0lEQVR4nOWV65KCMAxGKQhUW6AFBOWi4Ps/pF+kO+Igwo6wOrPnT4z2TJpSomUNOZZlGQkhdqB98vtHlAPgUsrcwJAXE8pms3H4HQd5tY4iO7aAlBkb46Z9gjuOM0eJouh2XICU8BuUU13XKU6qadtjg/bDoiji1woRUstnS6eMsRnL/7mSaK0flAS8VuhRHuI41mcrQYgzaMG00r/syyt0WQ7oI0WMjx0NXZ4gCEaOoUaFUiklEXMzLhTl45VIUa7r5qT4vm8Dn/KllOQEKvRBG8kRy77COQvRjn5QdGVeLZoqEtE2kKKEiLaDSp2CJTRRpH2HFCr3KSWhqyj7iud5v1S8NRT9RhXXLPlRaOkenxdR9J9U+Vplqv3diMLwf+L3yJHvMQMuiOz5xhx8LcwTJ2hMCFS7sI73lSAFWZbt8RJH6kbJqQ9srMk6RmZZxoZMDNh1lCuBViuOnU6COQAAAABJRU5ErkJggg==",
christmasBack = "",
paypalicon="iVBORw0KGgoAAAANSUhEUgAAAQMAAAEDCAYAAAAx0WHLAAAEiElEQVR4nO3dLY8dBRSA4XcJXwWFIcEgwCIQqwoGEioof4KfBRbDrwCDxGARiPUkKAgtzWKOAMJM2+3uvTP3Po+d3PS02X17kpPZLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDtuDj2ADt1fewBqHz93qqXjj0AsA1iAFRiAAwxACoxAIYYAJXTzJrl8+Hl1QHHYNGP7970k77u/4fNAKjEABhiAFRiAAwxACoxAIYTyzKnxVO1fpI82+8JmwFQiQEwxACoxAAYYgBUYgCMsz2jjOXz4f2V8+GjO5iEbTjjs6PNAKjEABhiAFRiAAwxACoxAMZJn0qewfJp8YNflj/1+st3MAqbd+JnR5sBUIkBMMQAqMQAGGIAVGIADDeyJc6HnBmbAVCJATDEAKjEABhiAFRiAAwxACoxAIYYAJUYAEMMgEoMgCEGQOWtxdP260/HnmCbLpZ/Dm5vvn+4OTbGZgBUYgAMMQAqMQCGGACVGADDaXHvnA+f3/XKr0X87eflZ9+vnCQ/WbtX7uP3MNoMgEoMgCEGQCUGwBADoBIDYDgtwj89uL/87JWVz323cln8dB9nR5sBUIkBMMQAqMQAGGIAVGIAjHM4LS6fdS6vDjgGu/Dl2zf73Ku3O8Yx2AyASgyAIQZAJQbAEAOgEgNgnMNpcf/80FMOwGYAVGIADDEAKjEAhhgAlRgAw2mR8/PNF8eeYJNsBkAlBsAQA6ASA2CIAVCJATCcFjlN366cDx8fbow9sRkAlRgAQwyASgyAIQZAJQbAcFpkv9bePnQ+fG42A6ASA2CIAVCJATDEAKjEABhOixzGvdeWn3392eHmYJHNAKjEABhiAFRiAAwxACoxAMbFsQe4JdeLTy6vDjjGC3iy8prdV+/d/p+3/C+2/uyv2x7kRHy8+q20i+8zmwFQiQEwxACoxAAYYgBUYgAMby1uxcOV8+Gjw43BihP/r/PE/3rAsxIDoBIDYIgBUIkBMMQAqJwWt+PhyrMnB5uC31eePdj/m4lrbAZAJQbAEAOgEgNgiAFQiQEwnBa3wvnwcNZ/eOma3Z8P19gMgEoMgCEGQCUGwBADoBIDYDgtchh/rDx7Y+XZR3dyzTvpE+FN2QyASgyAIQZAJQbAEAOgEgNgOC0e0p+Pjz3Bi7v5G3835Qx4IDYDoBIDYIgBUIkBMMQAqMQAGHs6LV4vPvnw6oBjvIC37h17grvmDLhjNgOgEgNgiAFQiQEwxACoxAAYezotLrtYvjpu6tr1+TvHngAW2QyASgyAIQZAJQbAEAOgEgNgnMhpcUPnwzWXxx7gGT069gAcg80AqMQAGGIAVGIADDEAKjEAxk5uck+19tridvywjzGf8vsUT+Vrhv+wGQCVGABDDIBKDIAhBkAlBsA4jbcWt3Xu2sn9EP7NZgBUYgAMMQAqMQCGGACVGABDDIBKDIAhBkAlBsAQA6ASA2CIAVBt622/c7CXNxp9XZwhmwFQiQEwxACoxAAYYgBUYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbNDfUs9CGw2HvUEAAAA6dEVYdENvbW1lbnQAIm1hZGVfd2l0aF9fcF9pX3hfZV9sX2FfdF9vX3JfX3BlcnNvbmFsX183dGhzaGFyayKNyS0tAAAAAElFTkSuQmCC",
realmicon="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",
heartIcon="iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAa1QTFRFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQIBrwMCvwICgQQDSwQDvgICvAMCIwIBAAAADAIB3gIB/gAAigQDSwQD/gEA8wIBIQIBAAAAAAAAJAQDlAICmAkI7YOD+5WV+yYlzgICswMC+gEBogICXQQDAAAAIQMD/AsL/d/f////+kFAYAMC/AgI+J6e+bW1+bW0+i4tIAMD9QEB/QAA9gEB9AEBXQMCEwIDjwECjgAAkwEC8AEC+QEBnAECjwABNwICAAAAEwIDiQECiAEBjQEC6wEC+QAB+QAAlgECOQICAAAAAAAAIAMDEgEBGAICiwEDnAAB5QEC9gECnAEBlwECJAICHwEBAAAABwECfQECjgAB4gED9QECEwECDQICNQICNgICmAIDuAEC2AEC6gECrgIDNQICNwICHwECAQEBbAEDwQID3QIDgwEDAQECAQEBSQICTQIChwIDygECywECpgIDUAIDAQECAAAAAAAAAAEBQgIDZgIDAAAAAAAAAAAAAAEBQQIDawEBXAIDAQEBAAAAAAAAAAAAAAAAoUerFQAAAI90Uk5TALHVPiO6Cf9LK98Lqqzy/8m9//awFf//////////IICE////////////llX//////////////////////////////////0ri/////////+YlBA3///////////8sAv///////yLc/////////+Ys////////S8j//////9hLQQP///+/Y5WVvf/MlXB1OU77aSo+AAABXElEQVR4nGNgGAVUB4xMIMDMwMACZrCy4VLIxA4CHAwMnGAGFzdlCnl4ePn4QUCAh0dQCMQQFuHhEcVUyM4uJi4BApLs7FLSIIaMLDu7HJkKOeXlFRQVlZRVVFQlJNQUFdXBOjQ0FRW15OWRbddmZ9eRltDV09c3kEAFhuzsnOQrNDI2MTUjRiE2QIFCcwsLC0s0VVYW1jYYCm3t7B0cUdU5Odu7uJKp0I2Ly93D08vbxwdhu6+PhZ+nhz8XVwCSwkBu7qDg4JDQsLBwmLqIyLCo6ODgGG7uWIy4jou3T0iEKUxKsPdIxpEoiFQoJ5eSmpaWnpGRKSGRlZGRnZOWmycnF4ipkAGUwvML7O0LJSSKEuyLS/BmBSIVMnOUlpWXV1RWVZeX19Ry1NXjUggEPOwNjQn2TfnszXgUkaSwpbWtvaOjs6u1m4BCBnDE9xBWRYrCXh6ePqIU0gsAAOVbX0H5bVuBAAAAAElFTkSuQmCC",
compassback="iVBORw0KGgoAAAANSUhEUgAAADMAAAAzCAYAAAA6oTAqAAABVElEQVR4nO2a0RrDEAxGw/u/s90s/SIVQnUScy67lv8UXYsAE0gA6WkZASBMKGMMSaCnQOkOjIoNXURFHt/OvNyLEaGuC3hrzBQhdWT0SKlPRJE3BCp1wrdOVbVRWejPRWh92gdMNd9bY6MX7VgSW8aKCK+/1krNbrZaBNHkKMqsGiMtWmPoJmNVBKkJZTLWRRBJ6NYy1kWQUs5LZsbL4gpo7sgPeATzZ93MSxdDeN4o/eAFmjt672JIAkiqF00v7CfjdbwgmH+/ltmFI2OVI2OVI2OVI2MV/DhzDebfr2V2Ic5YsbJAAAh0dsYlNDefBHQFz4sfZ667GuaP/IA3aO7SxLkLSjn5JGCQTrSEtNZZmjg3LVRbtC3+aVoVaq0+N98ArAhpcogy1H61kHa1WfU4Xrmi1rOxQfWiuWoM9e7Q+M+9M6xC/7uaWMV77DfjWNkJ+AFSk1NcqL17XAAAADp0RVh0Q29tbWVudAAibWFkZV93aXRoX19wX2lfeF9lX2xfYV90X29fcl9fcGVyc29uYWxfXzd0aHNoYXJrIo3JLS0AAAAASUVORK5CYII=",
compasshand="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",
reviveicon="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",
boosticon="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",
mgcicon="iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAC0klEQVR4nO2XuW7UUBSGP29jW7NkVSSgTkFBQUqaVGkihcdAaRAFz0FBhyh5hCChSFQ0lFBFFNSAEhIyWUYeL9emsM4d23FGs0VK4b/ytc+557tnsWegUaNGjRrdaxkL3Cu7i70XsUkG8P5hzhdkQwBe/fEXEmMeZw2WWQpDWUAOuLLu8Pd4AMDrk6W5Ys3iVMpYqGJSU+EbXgkQIOhDFKUAvDxuzRRzGuMM4MOTRGcHoGX4RFlA1+7lRpYiilKWNkyCPjqzAFfJ5dQZncRIZ0z6SzJ0cZKW4ERi59kOUZTiWo6+l6iIluFPnNFxDzOANxsXAHTtHkE2xEwtljZMAIZn5eyInVy3DD0opKbSgKKu3ePFb41Qy1J3swQG0HHbulRXySUdt507F8oXqpgoC2pP2nHbXIcDunaPzFJch4MbNreVvrjIAN4+yINUT6qNLFU+YQVSVAdrWy18w9NTXz1UXUYNCs0Po7JJmYqAVTjJCuR959mOhpZhEQDbynvOsx393F/O9ykOnUgyauyvHmQAm/Z2qXTemtKOcn+YxKUgRRWHQIBW1h2C/shPnrcMH9dyCFWs+7n4SkpNxY/wMwCmOP5MvuhNQhVzfhrTcdsaDkbTW4WTwBJc1sMzq9ZWsupaDuenOby/nK+P4kMNB4US768elDaRjFYD1JVe7slh/OVR2aTvALw1pbNlKKu0VzFBAO/+PdeAolrQLW+vtA6yYSlTruXoQNJnvuHhrakbL2oY9bEMyVF8WAtGYUiqqgV99miXoI9u7IuTVANC3hZ116LiITzb4fvg01iw2sUkoI/dHf2FKH6DpeGDPvo9J8MAo/J+/TUZ2CSAY0G3vL0b5Qb0VMpnUHrw2/DjVGDTAI4F3bS3S/1Y7LGr5PLW5p809sw/t6qgT9u7+vo6HMwNNg+gqBa0qlnB5nKqqBZ0XrCFOFd0J3+aGjVq1KjRPdd/X26O+LeI1FIAAAA6dEVYdENvbW1lbnQAIm1hZGVfd2l0aF9fcF9pX3hfZV9sX2FfdF9vX3JfX3BlcnNvbmFsX183dGhzaGFyayKNyS0tAAAAAElFTkSuQmCC",
bannericon="",
helmetDiamond="iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAABVQTFRF////Hop3Hg4IGRkZM+vLLS0tAAAA0Cj/BAAAAAd0Uk5T////////ABpLA0YAAACkSURBVGje7di7DcIwFEBRFyxgsQFMAJaoQcAC/BZAsP8IxAqRILgJuCDSuaXld9onO9zrFVgsFovFYrFYLFZF63Yud2GxfrSyc9p9tokxTlNKLNa3VuesQ9ukZ+VS0WOxhlklh8WqYeX2Lzv22MwvWKxKVnYOs/fmT4/FYrH+2do295csVmWr8/JuXfXOr6lt6LuWNX7LHzKLxWKxWCwWizVG6wF/G8ImxoIZqgAAAABJRU5ErkJggg==",
bloodoverlay="",
chestDiamond="iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAABJQTFRF////LS0tGRkZHop3M+vLAAAA8rosnwAAAAZ0Uk5T//////8As7+kvwAAAORJREFUeNrs1zsOwyAQQEEnkPtfOQ1uNkHCeP2RNa+0YJkKmeVzyxYsLCwsLCwsLCwsLCys+7NeoY3rsbCwHsUKc2urtHrnxfWt9fO7hYWFhZXH6syNrN78nduxsLCw0lm1c08ObsPCwsI6jtX2r/OWUN1WCWFhYWHlsQIvsuo+T9arGgsLC+u3tr+EaxULCwvrtqy512yPNcLBwsLCSmGt8064RrGwsLBSWaO/g+V/WFhYWJexJsPCwnoiay9vAwcLCwsrlRV5o00cgYWFhZXKOiEsLCwsLCwsLCwsLCysi/oKMABmmXVeFvA3MwAAAABJRU5ErkJggg==",
buffzom="iVBORw0KGgoAAAANSUhEUgAAACIAAAAkCAYAAADsHujfAAAIUUlEQVR4nKWYe4wdVR3HP+fMzJ2Ze/c+9tFNdxfa0iJUW1RCqkGoMaCkIvE/H4kxQUGoCo3wh6R/2KZEovgI2kKoqFjxEQwxMZD4jBCkJEaDCi60obg8Snfpdrd3773zuPM8/nFm9+52N9slfP+ZO3POmfP9fX+vM1ewBjRuQskMDAdEDOqU4MyflFjL2rVi1Zet242ybEhr4FQgew38BNRJMGxI2qBM8B6Z1Asqw1A3QAHtDGqG3uH4q/DuzavuJc/HNIn09cJ8mMYQNEaAAHK/N2fTT0ZhtAY1g5F7BLz1IlQjED60Mrjra+fbZnUiG0ZqbBipcXltdOFZ3OmNGwYYEUQGDO/rg3bG1BfH2fTj7dCxgQrs+QJEKVx7jVptL3P1QUnagZbXxaxmNAsSogRZpolIEzKpXbfpeyZyGia+k2oXAZycgmoZ0tV2Wk0R5amXfzjIxMODmNWMF38wRPiLLYxYDWQFshKoGBIDygnICLBg4o6JHgmADRupnXocxoZWJbJyAM2lCn+abQ+OUlcNTjw/x+hVZaaCgHgSxBRECVgh2NdD9SRk6yFIYfpu1QvWW2+GmTc0CXsINlwI39i74p4rK1LvwsgIzQ68MjVHVoeT4wG0oKQ0CceB8i49PZQQWDB9QMHklA7SW28Gx4A/PwGb3gtWBrPTjNzOirGynEjmK6iAgO4MpFFvyPD0vVXYZJnQ9xpM3u9h5MDUlB7oFq5pnoF7vw9Oru+H+5ka/taKti+V6dSkQpyF8laoGQzvFxh2b9NuDvabYAwAVqHCXgXdLpxt6omVYfjMtTB4AZgSBoZgcBhePg6WhIsvgsxa5iK5jASAP83wtwVlUxMAsF7X1qejYMzCa/s8pvd6bPmK0H4CaHf1NbbAK1KsNggVCwYHQBTKzE6fR5FbblGIEJQLMqb6tyMIVw+pEISrs1Aa4F3yKaovPQZd6Fx2I9gZ2BJON3vv8z34xPXQDbQK85idZii9j5n7e/svjZGHHhJkEjwfsjKdHTehIr256uuVgjwDyv1kAjIXyq8cgbIBhoDREVjXryeame4JRhWMRD8zEsa69yHPic7lwWoKKJvgt8CJ6Vz1JYJLP4fwigUGBNs+T/m5hxaWBDtu1OQXiUEnALsOScbA0TsWSJBZhF1IBKz/ci+DlhM5fERQckDGEEagBFgOnQ/figmakChhqB4xsEE62j1tD0QFZK5d8+oJzl7+TS76x71s+fc9rJ/ci1kDNwWxKCNXLC67Do6pP750AzQjsAMouVqpyIGoQ/WFX9H50C269RoZZAYoH+IiGG0JUQinZgDYMvCsdmmiI39uo4+Tg0x0ps8+gFixoPlGF7yz0G/rXFWF1bYCp0Rn243QilkQ1sp6JqU5xEWq5RIqfQsEpJUirZRypMMHNP8VXbPzgUFVyRyues/TfHDkN8WsCuRKk5MuWD6UHTADiATMRpC6moSMwYmhrwjYxx8Xi9UAKL1V4cLNNaTU4g3dhjLPJRHMJKTDXQKh6B+oUX3yMJ2nC3vvvU8x3A8lC96chtePa0cbCdiAWddkuglYXd11C0ir137HPi6ZeKGNKsqOJc45BgQzCaVhSdWSxHHO8799C5ktmjBPYt4dG7f2np0uyvt/ntdmyhI06gC8+jtfXH13Xcl1koRYexAwgKxPt44F11z5YEUBVKVLHDqUhyyUhNbRXkBvvLOooHHSIzNPLCn6y+lZaAsaj7RpPBYvcbvruTjSoS+qgaFJJEIXygVFKrmLPWAiI0lkzTH+qL9UjQKX7Nm67NnLB49rZQrsfOZnHJN7mPEPCYCPHFqvml6bPlsQzxow2IVMx74pIKIgsuvgmGrJOey8SsvycaSDKXyai9TYOaqUUYHMhzdCHcS2fJdW6jYDW2qC08EfOCb3LCGamxHlhoAE0iTGyAWmCXkEVtti8teJkDsfGFTNps6hyOwi/Jx//nR2QenFyHwo3zHGpd/drefnJ4jyEwu/Ad5/waPL1qV+RtWy8Ow2ACqXJBGEXQgd7Wbzma/Oiqvvrqu+pAGAF3gIFzp/7alx3Y9GlGiPofoDgn1N/tv8LKZ8ljSf5rL+R5lXav56LuyyC5nEIiYk4X/H5rABWYa0yBwT4Oi+loAWVxyoqYmn2stjwwhJ1wlAkN1Zx/pLhzBVOH+/HYDSXf2QuYQHJjEqQAvSXLf6Kx9sKKvocOXUpTzk8vrZNkkAtgOxu4jIPJ7b316x5J9+JaXZ8Gg+AsZ6sMogTLjkwM8pDf0SUgjwEMD45B7yaw4x94RW1JEGAR71VKdyy2xRC8EDQgusIrHO+4E1j/qEy9YbaggX/AgcAeOH2zh+hcwUlA0Dd/8o2Y5DJHlvnWVkWFmZwAwJzBCRlgCIBchFjW/V75p5uFkJn5A8lxgXg3UMugo2frTGmyfnFtRyNs9R3QXhU4JO0YiCLMPMBKkR6/phpniW7r6Lq8yaFIljRaXuEnk5G60GoqjWRiOnlEtGZwfY/Mk+ugpaTwJW76BeT+ukJZ8szwmsADvVtpsOOBnQ9zaIJGEXr9PrFZkLRghmamKo5aKm+dL7elrHokR+phgIoRNpRaYP6lhak2uU7J03LSExQhCO/j0PNythAjksNLMrDtRUIBK6IsI4o7CGHP51/BSqBCVDn53msSYi44d1Nm3fXVOZSJl7sqgx23pHvThWmAK6FpgF7+f2t0V1e1u979N1lGmTGAEqhpqAjqHPVG+LyLmE5pGJlLgwq2RrdUwFzd/3imFnHHF0vEXtYk1alcD6GNgJeHbvXe/4X5/tu2vKrUEsc954wVtCYjVUt6P6PgBTD79zDkuw4+s1Vb9u5e/ateD/H09YMBwEbLAAAAA6dEVYdENvbW1lbnQAIm1hZGVfd2l0aF9fcF9pX3hfZV9sX2FfdF9vX3JfX3BlcnNvbmFsX183dGhzaGFyayKNyS0tAAAAAElFTkSuQmCC",
legsDiamond="iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAABJQTFRF////Hop3GRkZLS0tM+vLAAAAB/4v4QAAAAZ0Uk5T//////8As7+kvwAAAKlJREFUeNrs2TsOgCAURUFA3f+WLdSGhPgHNHPqG970hKnLAhYWFhYWFhYWFhYWFlb/rOFeWFhYf2Rt744Xi0tpDQsLC6s6K2RhYWFhfYUVd8LCwsLqhZWfT1lYWFhYvbJKdwp7LCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCysJ1ilf8SDeywsLKzqrFTo5B4LCwvrdVaDsLCwsLCwsLCwsLCwsBo1CzAAykRy5lfiBq4AAAAASUVORK5CYII=",
stonebrickback="iVBORw0KGgoAAAANSUhEUgAAACYAAAAVCAYAAAAq05ytAAAKMGlDQ1BJQ0MgUHJvZmlsZQAAeJydlndUVNcWh8+9d3qhzTAUKUPvvQ0gvTep0kRhmBlgKAMOMzSxIaICEUVEBBVBgiIGjIYisSKKhYBgwR6QIKDEYBRRUXkzslZ05eW9l5ffH2d9a5+99z1n733WugCQvP25vHRYCoA0noAf4uVKj4yKpmP7AQzwAAPMAGCyMjMCQj3DgEg+Hm70TJET+CIIgDd3xCsAN428g+h08P9JmpXBF4jSBInYgs3JZIm4UMSp2YIMsX1GxNT4FDHDKDHzRQcUsbyYExfZ8LPPIjuLmZ3GY4tYfOYMdhpbzD0i3pol5IgY8RdxURaXky3iWyLWTBWmcUX8VhybxmFmAoAiie0CDitJxKYiJvHDQtxEvBQAHCnxK47/igWcHIH4Um7pGbl8bmKSgK7L0qOb2doy6N6c7FSOQGAUxGSlMPlsult6WgaTlwvA4p0/S0ZcW7qoyNZmttbWRubGZl8V6r9u/k2Je7tIr4I/9wyi9X2x/ZVfej0AjFlRbXZ8scXvBaBjMwDy97/YNA8CICnqW/vAV/ehieclSSDIsDMxyc7ONuZyWMbigv6h/+nwN/TV94zF6f4oD92dk8AUpgro4rqx0lPThXx6ZgaTxaEb/XmI/3HgX5/DMISTwOFzeKKIcNGUcXmJonbz2FwBN51H5/L+UxP/YdiftDjXIlEaPgFqrDGQGqAC5Nc+gKIQARJzQLQD/dE3f3w4EL+8CNWJxbn/LOjfs8Jl4iWTm/g5zi0kjM4S8rMW98TPEqABAUgCKlAAKkAD6AIjYA5sgD1wBh7AFwSCMBAFVgEWSAJpgA+yQT7YCIpACdgBdoNqUAsaQBNoASdABzgNLoDL4Dq4AW6DB2AEjIPnYAa8AfMQBGEhMkSBFCBVSAsygMwhBuQIeUD+UAgUBcVBiRAPEkL50CaoBCqHqqE6qAn6HjoFXYCuQoPQPWgUmoJ+h97DCEyCqbAyrA2bwAzYBfaDw+CVcCK8Gs6DC+HtcBVcDx+D2+EL8HX4NjwCP4dnEYAQERqihhghDMQNCUSikQSEj6xDipFKpB5pQbqQXuQmMoJMI+9QGBQFRUcZoexR3qjlKBZqNWodqhRVjTqCakf1oG6iRlEzqE9oMloJbYC2Q/ugI9GJ6Gx0EboS3YhuQ19C30aPo99gMBgaRgdjg/HGRGGSMWswpZj9mFbMecwgZgwzi8ViFbAGWAdsIJaJFWCLsHuxx7DnsEPYcexbHBGnijPHeeKicTxcAa4SdxR3FjeEm8DN46XwWng7fCCejc/Fl+Eb8F34Afw4fp4gTdAhOBDCCMmEjYQqQgvhEuEh4RWRSFQn2hKDiVziBmIV8TjxCnGU+I4kQ9InuZFiSELSdtJh0nnSPdIrMpmsTXYmR5MF5O3kJvJF8mPyWwmKhLGEjwRbYr1EjUS7xJDEC0m8pJaki+QqyTzJSsmTkgOS01J4KW0pNymm1DqpGqlTUsNSs9IUaTPpQOk06VLpo9JXpSdlsDLaMh4ybJlCmUMyF2XGKAhFg+JGYVE2URoolyjjVAxVh+pDTaaWUL+j9lNnZGVkLWXDZXNka2TPyI7QEJo2zYeWSiujnaDdob2XU5ZzkePIbZNrkRuSm5NfIu8sz5Evlm+Vvy3/XoGu4KGQorBToUPhkSJKUV8xWDFb8YDiJcXpJdQl9ktYS4qXnFhyXwlW0lcKUVqjdEipT2lWWUXZSzlDea/yReVpFZqKs0qySoXKWZUpVYqqoypXtUL1nOozuizdhZ5Kr6L30GfUlNS81YRqdWr9avPqOurL1QvUW9UfaRA0GBoJGhUa3RozmqqaAZr5ms2a97XwWgytJK09Wr1ac9o62hHaW7Q7tCd15HV8dPJ0mnUe6pJ1nXRX69br3tLD6DH0UvT2693Qh/Wt9JP0a/QHDGADawOuwX6DQUO0oa0hz7DecNiIZORilGXUbDRqTDP2Ny4w7jB+YaJpEm2y06TX5JOplWmqaYPpAzMZM1+zArMus9/N9c1Z5jXmtyzIFp4W6y06LV5aGlhyLA9Y3rWiWAVYbbHqtvpobWPNt26xnrLRtImz2WczzKAyghiljCu2aFtX2/W2p23f2VnbCexO2P1mb2SfYn/UfnKpzlLO0oalYw7qDkyHOocRR7pjnONBxxEnNSemU73TE2cNZ7Zzo/OEi55Lsssxlxeupq581zbXOTc7t7Vu590Rdy/3Yvd+DxmP5R7VHo891T0TPZs9Z7ysvNZ4nfdGe/t57/Qe9lH2Yfk0+cz42viu9e3xI/mF+lX7PfHX9+f7dwXAAb4BuwIeLtNaxlvWEQgCfQJ3BT4K0glaHfRjMCY4KLgm+GmIWUh+SG8oJTQ29GjomzDXsLKwB8t1lwuXd4dLhseEN4XPRbhHlEeMRJpEro28HqUYxY3qjMZGh0c3Rs+u8Fixe8V4jFVMUcydlTorc1ZeXaW4KnXVmVjJWGbsyTh0XETc0bgPzEBmPXM23id+X/wMy421h/Wc7cyuYE9xHDjlnIkEh4TyhMlEh8RdiVNJTkmVSdNcN24192Wyd3Jt8lxKYMrhlIXUiNTWNFxaXNopngwvhdeTrpKekz6YYZBRlDGy2m717tUzfD9+YyaUuTKzU0AV/Uz1CXWFm4WjWY5ZNVlvs8OzT+ZI5/By+nL1c7flTuR55n27BrWGtaY7Xy1/Y/7oWpe1deugdfHrutdrrC9cP77Ba8ORjYSNKRt/KjAtKC94vSliU1ehcuGGwrHNXpubiySK+EXDW+y31G5FbeVu7d9msW3vtk/F7OJrJaYllSUfSlml174x+6bqm4XtCdv7y6zLDuzA7ODtuLPTaeeRcunyvPKxXQG72ivoFcUVr3fH7r5aaVlZu4ewR7hnpMq/qnOv5t4dez9UJ1XfrnGtad2ntG/bvrn97P1DB5wPtNQq15bUvj/IPXi3zquuvV67vvIQ5lDWoacN4Q293zK+bWpUbCxp/HiYd3jkSMiRniabpqajSkfLmuFmYfPUsZhjN75z/66zxailrpXWWnIcHBcef/Z93Pd3Tvid6D7JONnyg9YP+9oobcXtUHtu+0xHUsdIZ1Tn4CnfU91d9l1tPxr/ePi02umaM7Jnys4SzhaeXTiXd272fMb56QuJF8a6Y7sfXIy8eKsnuKf/kt+lK5c9L1/sdek9d8XhyumrdldPXWNc67hufb29z6qv7Sern9r6rfvbB2wGOm/Y3ugaXDp4dshp6MJN95uXb/ncun572e3BO8vv3B2OGR65y747eS/13sv7WffnH2x4iH5Y/EjqUeVjpcf1P+v93DpiPXJm1H2070nokwdjrLHnv2T+8mG88Cn5aeWE6kTTpPnk6SnPqRvPVjwbf57xfH666FfpX/e90H3xw2/Ov/XNRM6Mv+S/XPi99JXCq8OvLV93zwbNPn6T9mZ+rvitwtsj7xjvet9HvJ+Yz/6A/VD1Ue9j1ye/Tw8X0hYW/gUDmPP8uaxzGQAACBJJREFUeJxVlsmPncUVxX81fsMb2t3tbo/YBowBG4MNmDEJCIgCiGxCIgUpWWSXfylRltmwQAghsnBiCCAlCEgAEQO2wRiDidu03W/8ppqyeC1LKalUJZWq7tGtc+49Yt+h1aTLFuP2AEDvGsYoTLsfpRRKaWp7AW0k6Ia8J3FVRl4YiuY4IoEbngNAT++EmEgCUkqMxcckVWEzRTOPlM1J2uIL5OR2XPElvlXEEEjz3XjnAKjdjcVbWgt2D44hhKDNvgZy9g1OoaTicnuaAGShRGtJsZwjr53kxIn7SDFRNw3j4m1SGiJEZHe6h09++BMAeVngr0ukLZDXTnLq7rs5v3maw9kLXNn5FqHrE51gKR2naVq+Gb2L0gI9UQtgS+VerrdfYIxiqT2ClJLxeIy2ljXzBBvuHVb2dMRqmR3zk0zFnOgDn229ghaWvd0zAIToGIkxB80v+bp5jVT3KZcm9MdPsSVGeO9ZU6e4NPsLw+5RgnN03jHxM9x2tnxjsWVLV2m0UIrCH0ALjbIabQ1SSjJj0dZwa/ksRSxIeaKezdFak+U5a/FJpBDYTLPBGXaJBUCAo8Wv2cr/zs7uea5ONxZ3sox5XbPUPoy2mi3eZ8hJog9Ya1nnQareBXR1hMZ0yOg9WZaTZRmRxCR+hkSQUiQlmNgPGZl/kkIgkhZnMTIYDBgMh8SU2MXTbKS/QUqQEjfK0wBs2jdJcXEHoGsa+sMhKSWWeYiJ+QilFCklKn0BgEpdghiRWZajtUJKSZkXrOcniCRMlmG1Ysmdot+cYpJ/gFSKsP4pSmvKssBqzdJwiJKSI0u/IC9y8iJnpf4ZSXYs1U8gpCCsf4qQkv5gQGYt/bJECthtHl/EMoYi3EHEUfhD+PwK4ujRoynPc5RagBNCoJTGGIPWensq+sMhmcnYiG+ztLNkuf4RMSZCDCDETVUBxJRQSuHall6vz+X6r9jMoraOYZSiqiq8DzRNg3OOEDzeB2IMN/mmu+2NUopW/EBf70XbRYCUEhPOsYOjjEejBcl3djSX7uO63QJgLD4CYEU+iNj+suvxA5bSSVKMzKprhEGH+/4uulhRAzf82e3g+/ExEn1g0n1LltYIIdA5h15dWUFrgzGGcbrG3sFejDE0bUt/MMCY/Rit0cbwXXgVHYY89sjDjCZTlBB8WX3KseWXFpza3KTs9zkYD9A0DUIKLlR/Rld9Hrj/fq7fuEHnHN30LHvUj3HO4Zxja2vEUB6laRpijHRdh+y6jlE4R+cd6/kJvA+4EGiH/yGzi9QJIfi+O4MMQ6puRFXVfF2/yryuOLb8EtPZjG/Vy9S7zlDmOUJKrLVoqWjnlqob0TlHXddcac5woHiaum5wYRErDC6ClGhrEUpRq0voEMKiIFqLC4Gm+ASjLQqo5hXGaDbUPwitRmWe0u5Aaw3AsD+gahpGS2/c5Ne8qgjeo7TmknudQb9HPbdYY+icQyjw3lP1PqJznpAguA65jWMSzhNai1ZKUaTbaLoO3z/HenoYS4aOCtvL0FqzVS+ArIufMBqPAdgVfspkNmW+evomqNvVb+jKBWe/v3qVtumxpu5nY3INHwLWGFb942zqtwgB1tLjODxdanHWMRqNcPV25Z+mi+xId6JipN8dxyVHEhLnHS4EiBEy2JM/Rl1VSCnx3hNCQEjJyvTn1FXFYDDgutsixUhd1wz6fa42MJ/PkFISY2Qjvs1yeowV9yTTyYRWO3zXUbctdV1jrYUaCrUHcfiOO5I2BqMUtbqMzjuKJYhesBQeQqxcJJ/fjVv+fKFeGymnp5BSIhFs2jfJC3kza8P504TVj7GjB/DOMS//hU8devNeUky44NlK/14oPNVIneim2SJL9a24tqWzV9Bi6VvQAtkTZLXFDsCM7+P4Pffw7ewdbl95gQ3OYLJFo75z8CtCCHx8/Y/sWC0orpTorCO3Jaf2/p73zr/CIwd/R7VW89/sFfRmzp2D31Ktz/nw6h8WfB738C5grCRdu4cjBw9S1TXz2YytcBbtCsS9996bKvkNWW7RvTm9+gSd9xw+fJjoPRv+PdbNo2il0UZvWyHFl7NXWF1eo1xpcPMB/ekjHDp4kHlV8XXzOq51rKWn8M4RYiSEgHeei7PXKIeCWC2jJkeYTCbs272Hy+P36NpI4Q/RdS1Sa81A3EYMgV59gtp8tfBUIdA2LTvFQ1yu3+Cb6RlCCIQQKLKMw/0X8Z2gd/15Dujn2LLvAlBXFWvuSVI75IvRyzdBFVlOlln2m2cZzp9hp3iIGechJiKJfjyCqxQ/VJ8z9heRLgSEEOSlwRiLbQ4R40K6SmuquuKW7Dn6vSFSCEIIzKoKgHIoya1lVlUU4wfx3iOkZDyd0uvu4nD/RZSUhBCo6oqmbRFSkBlD6zqy9uBNbjZNQ0/tYTU/grEKSYx47+lcS9PUOOdo84s0XUfwnrIoUVLSc8dRUtM0DWm7OndNYDSa8IN+g6ZpFz3QOZYGA7IswyiFkoqmafAh4J3DtR3T2Ywb6X2cc9T2Am3TkOc5yhgAbLdvoUoAawxKKcqyZCYu0usX6OYA/bIkhIjWanvVCClQUmKMIYZI0e+hlWKSfYDaOkae5TjX4byna1tSTHjvSSlt08GjlCalxGZ7FiUVutm7ANo0i26z79BqAijMykKyxiB6VzHt/oWzsJZGXgJgIA4j5cJ9VPor+hxBCMH/jZhQShJCZCrOk/vbSNtVPcbENH1J5m5ZiMF7XPYdab4bAO/cTc//P4dDTselSJKPAAAAAElFTkSuQmCC",
bootsDiamond="",
teamicon="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",
handDiamond="",
redChest="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",
paintingicon="iVBORw0KGgoAAAANSUhEUgAAAK8AAACvCAYAAACLko51AAAC6ElEQVR4nO3bsW0UURRAUYOIHVACgUUBDmiAlIYQkTvBZdAAQo4IHZBYIkSyG8AVmJ1h1+N3d8+JR39m5199rfQ0Z2cAAAAAAADAcq9e+gGOxeXl5d+l197c3HjvB/D6pR8A/pd4yRIvWeIlS7xkiZcs8ZIlXrLES5Z4yTKm/Ic1I9+Hh4fF656fny++1ij5aU5essRLlnjJEi9Z4iVLvGSJlyzxkiVessRL1smNHp9r5Ht7e7v4XV5cXCx+BqPkpzl5yRIvWeIlS7xkiZcs8ZIlXrLES5Z4yRIvWXuPEz9/PFs86uT43d0vv/brj/36c/KSJV6yxEuWeMkSL1niJUu8ZImXLPGSJV6y3mx9w/efvmx9SzZ0d3212b02PXmFyyH520CWeMkSL1niJUu8ZImXLPGSJV6yxEvW5uPhNd6++7Dzmj+/vlt32LpbGXvyLnmxa66z7jbrbmlsvLCLeMkSL1niJUu8ZImXLPGSJV6yxsY7ebJzSibvw+jx8NIXt2YKtGYzrDvb2JMXdhEvWeIlS7xkiZcs8ZIlXrLES5Z4yRIvWaPHw0vHnRNGqMe67uQx8tiTd/JXq6dk8j6MjRd2ES9Z4iVLvGSJlyzxkiVessRL1th4J092TsnkfRg9Hvb18Ix1pxp78sIu4iVLvGSJlyzxkiVessRLlnjJEi9Z4iVr9HjY18Mvv+7kMfLYk3fyV6unZPI+jI0XdhEvWeIlS7xkiZcs8ZIlXrLES9bYeCdPdk7J5H0YPR729fCMdacae/LCLuIlS7xkiZcs8ZIlXrLES5Z4yRIvWUcR79Jp0dqpknVnGz0eXuO5NsS6cx3FyctpEi9Z4iVLvGSJlyzxkiVessRLlnjJEi8H8+36atP77T0evrtfce3GP47j5uQlS7xkiZcs8ZIlXrLES5Z4yRIvWeIlS7xk7T0e/vn7EI8B6zl5yRIvWeIlS7xkiZcs8ZIlXrLES5Z4yRIvAAAAAAAAADDZI3ZMtLZ4xxbzAAAAOnRFWHRDb21tZW50ACJtYWRlX3dpdGhfX3BfaV94X2VfbF9hX3Rfb19yX19wZXJzb25hbF9fN3Roc2hhcmsijcktLQAAAABJRU5ErkJggg==",
mobheadicon="iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACzElEQVR4nO2VPW8cVRSGn3Pvnbuz2bAbOw6RA4KGLiSInipKidLxP6ihp6PiF1BR8BP4ECIFfZAVBclRJDsEHMdmba935t6591CM7cWeXccuaBCvNM2Zc973fM0Z+B//Ju5+tqyXjZGLOn7w+ZICVFWgLD1VFXjy5eRC8a91eu/TUgGWVgsAQpXxpSFUGYJHVXj0xc65PAtfHmfuhw0AcWrRKBSDxN4O9HsWgMlkCoAmZf2rei5fx3hMPq0TxrS2nKH0hipkchMYDPon/sciAKNpjyvVkIdfb5ziNWdFdtenJG0Frl6DN1pNqpDbAOfxw+bk+Sf+8hVrj190KnFnDarC+HGiKJTxuxbR08WObsyWK9WWwcChSdn4boLY+YvXESHMijv4rSFXDaM7bXtGSzOSsNeSP//hkJzzXPLFIkeIUeiPDLVr2F+LuNJQ3i4QFZqobD8MSBERmSXlGoMWApxuY0fk5ug6lGCtZWB7bF5/Co1Sb8L410j9StCk5JzJU8EYxRhzUk3S1Em4M3gVxWVDmrTON8Nb3Mi3MEAgg8skSagoKrP2FYXQuPlt64gUheXJt2Pq/UgcTxi/ald0uOzpjywiitZKrmaZGwPnTaUjsn3wglsfOTZ/rKDXZiqaqaoAQKxbm+0JkgRNQm7MucPviKRoGKx63v9kwPONXYbLJWvfjGkOoUiK8wbbs4hVsotIEuycOZwrArC19yfrv28R9muePdrk7XslOz95hn4F58CVDWITmUzpPQDu6DxY6V6WznbtH82gvOIZrrS2/qpw7UHFy3FNKpRmL574217icAK+hKKnxLo5S7n4QL553yjAylXD9kHGLxviNBF3wWQh50zRs/jsUUk0wB8/h7l8Cz/Gre+zAPiPnR7vTqEF9WEgG8U4MBiipIXkr63kLN554DWEhmorIyI4b3j5S7pw/KUw+lAu/fv97+BvvalF0NojewkAAAA6dEVYdENvbW1lbnQAIm1hZGVfd2l0aF9fcF9pX3hfZV9sX2FfdF9vX3JfX3BlcnNvbmFsX183dGhzaGFyayKNyS0tAAAAAElFTkSuQmCC",
mcfont64="",
removeicon = "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";
var themeBtn = "blue";
var themeId = 2;


var themeStroke = Color.parseColor("#360200");
var modTextColor = Color.parseColor("#ffff54");
var zcramps;
var zcrampss = false;
var zcramped = false;
var themeRedNotClicked = new android.graphics.drawable.GradientDrawable();
themeRedNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeRedNotClicked.setStroke(0, themeStroke);
themeRedNotClicked.setCornerRadius(0);
themeRedNotClicked.setAlpha(80);
var themeRedClicked = new android.graphics.drawable.GradientDrawable();
themeRedClicked.setColor(Color.parseColor("#21ff00"));
themeRedClicked.setStroke(1, Color.parseColor("#21ff00"));
themeRedClicked.setCornerRadius(0);
themeRedClicked.setAlpha(80);
var themeBackgroundRed = Color.parseColor("#360200");
var themeForegroundRed = Color.parseColor("#730000");
var themeStrokeRed = android.graphics.Color.RED;
var themeTextRed = Color.parseColor("#ff0000");
var modTextColorRed = Color.parseColor("#ffffff");
var themeGreenNotClicked = new android.graphics.drawable.GradientDrawable();
themeGreenNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeGreenNotClicked.setStroke(0, themeStroke);
themeGreenNotClicked.setCornerRadius(0);
themeGreenNotClicked.setAlpha(80);
var themeGreenClicked = new android.graphics.drawable.GradientDrawable();
themeGreenClicked.setColor(Color.parseColor("#21ff00"));
themeGreenClicked.setStroke(2, Color.parseColor("#21ff00"));
themeGreenClicked.setCornerRadius(0);
themeGreenClicked.setAlpha(80);
var themeBackgroundGreen = Color.parseColor("#003603");
var themeForegroundGreen = Color.parseColor("#017300");
var themeStrokeGreen = android.graphics.Color.GREEN;
var themeTextGreen = Color.parseColor("#32ff00");
var modTextColorGreen = Color.parseColor("#ffffff");
var themeBlueNotClicked = new android.graphics.drawable.GradientDrawable();
themeBlueNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeBlueNotClicked.setStroke(0, themeStroke);
themeBlueNotClicked.setCornerRadius(0);
themeBlueNotClicked.setAlpha(80);
var themeBlueClicked = new android.graphics.drawable.GradientDrawable();
themeBlueClicked.setColor(Color.parseColor("#21ff00"));
themeBlueClicked.setStroke(1, Color.parseColor("#21ff00"));
themeBlueClicked.setCornerRadius(0);
themeBlueClicked.setAlpha(80);
var themeBackgroundBlue = Color.parseColor("#050036");
var themeForegroundBlue = Color.parseColor("#001a73");
var themeStrokeBlue = android.graphics.Color.BLUE;
var themeTextBlue = Color.parseColor("#0043ff");
var modTextColorBlue = Color.parseColor("#ffffff");
var themeOrangeNotClicked = new android.graphics.drawable.GradientDrawable();
themeOrangeNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeOrangeNotClicked.setStroke(0, themeStroke);
themeOrangeNotClicked.setCornerRadius(0);
themeOrangeNotClicked.setAlpha(80);
var themeOrangeClicked = new android.graphics.drawable.GradientDrawable();
themeOrangeClicked.setColor(Color.parseColor("#21ff00"));
themeOrangeClicked.setStroke(1, Color.parseColor("#21ff00"));
themeOrangeClicked.setCornerRadius(0);
themeOrangeClicked.setAlpha(80);
var themeBackgroundOrange = Color.parseColor("#442500");
var themeForegroundOrange = Color.parseColor("#d15500");
var themeStrokeOrange = Color.parseColor("#ffaa00");
var themeTextOrange = Color.parseColor("#ffaa00");
var modTextColorOrange = Color.parseColor("#ffffff");
var themeWhiteNotClicked = new android.graphics.drawable.GradientDrawable();
themeWhiteNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeWhiteNotClicked.setStroke(0, themeStroke);
themeWhiteNotClicked.setCornerRadius(0);
themeWhiteNotClicked.setAlpha(80);
var themeWhiteClicked = new android.graphics.drawable.GradientDrawable();
themeWhiteClicked.setColor(Color.parseColor("#108200"));
themeWhiteClicked.setStroke(1, Color.parseColor("#21ff00"));
themeWhiteClicked.setCornerRadius(0);
themeWhiteClicked.setAlpha(80);
var themeBackgroundWhite = Color.parseColor("#f7f7f7");
var themeForegroundWhite = Color.parseColor("#ffffff");
var themeStrokeWhite = Color.parseColor("#000000");
var themeTextWhite = Color.parseColor("#ffffff");
var modTextColorWhite = Color.parseColor("#000000");
var themeMagentaNotClicked = new android.graphics.drawable.GradientDrawable();
themeMagentaNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeMagentaNotClicked.setStroke(0, themeStroke);
themeMagentaNotClicked.setCornerRadius(0);
themeMagentaNotClicked.setAlpha(80);
var themeMagentaClicked = new android.graphics.drawable.GradientDrawable();
themeMagentaClicked.setColor(Color.parseColor("#21ff00"));
themeMagentaClicked.setStroke(1, Color.parseColor("#21ff00"));
themeMagentaClicked.setCornerRadius(0);
themeMagentaClicked.setAlpha(80);
var themeBackgroundMagenta = Color.parseColor("#70005b");
var themeForegroundMagenta = Color.parseColor("#d600d2");
var themeStrokeMagenta = Color.parseColor("#ff00fa");
var themeTextMagenta = Color.parseColor("#ffccf8");
var modTextColorMagenta = Color.parseColor("#ffffff");
var themeDarkNotClicked = new android.graphics.drawable.GradientDrawable();
themeDarkNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeDarkNotClicked.setStroke(0, themeStroke);
themeDarkNotClicked.setCornerRadius(0);
themeDarkNotClicked.setAlpha(80);
var themeDarkClicked = new android.graphics.drawable.GradientDrawable();
themeDarkClicked.setColor(Color.parseColor("#21ff00"));
themeDarkClicked.setStroke(1, Color.parseColor("#0280e8"));
themeDarkClicked.setCornerRadius(0);
themeDarkClicked.setAlpha(80);
var themeBackgroundDark = Color.parseColor("#161616");
var themeForegroundDark = Color.parseColor("#303030");
var themeStrokeDark = Color.parseColor("#0280e8");
var themeTextDark = Color.parseColor("#0280e8");
var modTextColorDark = Color.parseColor("#0280e8");
var themeBlackNotClicked = new android.graphics.drawable.GradientDrawable();
themeBlackNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeBlackNotClicked.setStroke(0, themeStroke);
themeBlackNotClicked.setCornerRadius(0);
themeBlackNotClicked.setAlpha(80);
var themeBlackClicked = new android.graphics.drawable.GradientDrawable();
themeBlackClicked.setColor(Color.parseColor("#21ff00"));
themeBlackClicked.setStroke(1, Color.parseColor("#0280e8"));
themeBlackClicked.setCornerRadius(0);
themeBlackClicked.setAlpha(80);
var themeBackgroundBlack = Color.parseColor("#000000");
var themeForegroundBlack = Color.parseColor("#000000");
var themeStrokeBlack = Color.parseColor("#0280e8");
var themeTextBlack = Color.parseColor("#ffffff");
var modTextColorBlack = Color.parseColor("#ffffff");
var themeXmasNotClicked = new android.graphics.drawable.GradientDrawable();
themeXmasNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeXmasNotClicked.setStroke(0, themeStroke);
themeXmasNotClicked.setCornerRadius(0);
themeXmasNotClicked.setAlpha(80);
var themeXmasClicked = new android.graphics.drawable.GradientDrawable();
themeXmasClicked.setColor(Color.parseColor("#21ff00"));
themeXmasClicked.setStroke(1, Color.parseColor("#fafefd"));
themeXmasClicked.setCornerRadius(0);
themeXmasClicked.setAlpha(80);
var themeBackgroundXmas = Color.parseColor("#3c0105");
var themeForegroundXmas = Color.parseColor("#e7161b");
var themeStrokeXmas = Color.parseColor("#fafefd");
var themeTextXmas = Color.parseColor("#fafefd");
var modTextColorXmas = Color.parseColor("#fafefd");
var themedOrange = false;
var themedWhite = false;
var themedRed = false;
var themedBlue = false;
var themedGreen = false;
var themedMagenta = false;
var themedBlack = false;
var themedXmas = false;
var themedDark = false;
var betToastUi = new android.graphics.drawable.GradientDrawable();
betToastUi.setColor(android.graphics.Color.BLACK);
betToastUi.setStroke(2, themeStroke);
betToastUi.setCornerRadius(10);
var of = new android.graphics.drawable.GradientDrawable(); of .setStroke(1, themeStroke); of .setColor(android.graphics.Color.BLACK); of .setCornerRadius(10);
var ofLong = new android.graphics.drawable.GradientDrawable(); ofLong .setStroke(1, themeStroke); ofLong .setColor(android.graphics.Color.BLACK); ofLong .setCornerRadius(10);

var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(0);

function themeFinish() {
if (themeBtn == "red") {
themeBtnClicked = themeRedClicked;
themeBtnNotClicked = themeRedNotClicked;
themeBackground = themeBackgroundRed;
themeForeground = themeForegroundRed;
themeStroke = themeStrokeRed;
themeText = themeTextRed;
seekProgressTheme = Color.parseColor("#ff9696");
seekThumbTheme = Color.parseColor("#ff4242");
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorRed;
}
if (themeBtn == "green") {
themeBtnClicked = themeGreenClicked;
themeBtnNotClicked = themeGreenNotClicked;
themeBackground = themeBackgroundGreen;
themeForeground = themeForegroundGreen;
themeStroke = themeStrokeGreen;
themeText = themeTextGreen;
seekProgressTheme = Color.parseColor("#96ffa4");
seekThumbTheme = Color.parseColor("#04ff00");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = true;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorGreen;
}
if (themeBtn == "blue") {
themeBtnClicked = themeBlueClicked;
themeBtnNotClicked = themeBlueNotClicked;
themeBackground = themeBackgroundBlue;
themeForeground = themeForegroundBlue;
themeStroke = themeStrokeBlue;
themeText = themeTextBlue;
seekProgressTheme = Color.parseColor("#96a2ff");
seekThumbTheme = Color.parseColor("#0094ff");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = true;
themedGreen = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorBlue;
}
if (themeBtn == "orange") {
themeBtnClicked = themeOrangeClicked;
themeBtnNotClicked = themeOrangeNotClicked;
themeBackground = themeBackgroundOrange;
themeForeground = themeForegroundOrange;
themeStroke = themeStrokeOrange;
themeText = themeTextOrange;
seekProgressTheme = Color.parseColor("#ffe196");
seekThumbTheme = Color.parseColor("#ff8800");
themedOrange = true;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorOrange;
}
if (themeBtn == "white") {
themeBtnClicked = themeWhiteClicked;
themeBtnNotClicked = themeWhiteNotClicked;
themeBackground = themeBackgroundWhite;
themeForeground = themeForegroundWhite;
themeStroke = themeStrokeWhite;
themeText = themeTextWhite;
seekProgressTheme = Color.parseColor("#b7b7b7");
seekThumbTheme = Color.parseColor("#262626");
themedOrange = false;
themedWhite = true;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedBlack = false;
themedDark = false;
themedMagenta = false;
themedXmas = false;
modTextColor = modTextColorWhite;
}
if (themeBtn == "magenta") {
themeBtnClicked = themeMagentaClicked;
themeBtnNotClicked = themeMagentaNotClicked;
themeBackground = themeBackgroundMagenta;
themeForeground = themeForegroundMagenta;
themeStroke = themeStrokeMagenta;
themeText = themeTextMagenta;
seekProgressTheme = Color.parseColor("#ff96f8");
seekThumbTheme = Color.parseColor("#ff00ff");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = true;
themedDark = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorMagenta;
}
if (themeBtn == "dark") {
themeBtnClicked = themeDarkClicked;
themeBtnNotClicked = themeDarkNotClicked;
themeBackground = themeBackgroundDark;
themeForeground = themeForegroundDark;
themeStroke = themeStrokeDark;
themeText = themeTextDark;
seekProgressTheme = Color.parseColor("#aad1ed");
seekThumbTheme = Color.parseColor("#0094ff");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = true;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorDark;
}
if (themeBtn == "black") {
themeBtnClicked = themeBlackClicked;
themeBtnNotClicked = themeBlackNotClicked;
themeBackground = themeBackgroundBlack;
themeForeground = themeForegroundBlack;
themeStroke = themeStrokeBlack;
themeText = themeTextBlack;
seekProgressTheme = Color.parseColor("#aad1ed");
seekThumbTheme = Color.parseColor("#0094ff");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = true;
themedXmas = false;
modTextColor = modTextColorBlack;
}
if (themeBtn == "xmas") {
themeBtnClicked = themeXmasClicked;
themeBtnNotClicked = themeXmasNotClicked;
themeBackground = themeBackgroundXmas;
themeForeground = themeForegroundXmas;
themeStroke = themeStrokeXmas;
themeText = themeTextXmas;
seekProgressTheme = Color.parseColor("#ff6e74");
seekThumbTheme = Color.parseColor("#3fc100");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = true;
modTextColor = modTextColorXmas;
}
of .setStroke(2, themeStroke); of .setColor(android.graphics.Color.BLACK); of .setCornerRadius(10);
betToastUi.setStroke(3, themeStroke);
telebtn.setStroke(2, themeStroke);
};
themeFinish();
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var bg2 = new android.graphics.drawable.GradientDrawable();
bg2.setColor(android.graphics.Color.CYAN);
bg2.setStroke(4, android.graphics.Color.WHITE);
bg2.setCornerRadius(0);
var xbgs = new android.graphics.drawable.GradientDrawable();
xbgs.setStroke(1, android.graphics.Color.WHITE);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
xbg2.setCornerRadius(120);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var xbg = new android.graphics.drawable.GradientDrawable();
xbg.setColor(android.graphics.Color.CYAN);
xbg.setStroke(4, android.graphics.Color.WHITE);
xbg.setCornerRadius(0);
var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var closebtnBackground = new android.graphics.drawable.GradientDrawable();
closebtnBackground.setColor(themeForeground);
closebtnBackground.setCornerRadius(0);
closebtnBackground.setAlpha(255);
closebtnBackground.setStroke(2, themeStroke);
var bgClicked = new android.graphics.drawable.GradientDrawable();
bgClicked.setColor(themeBackground);
bgClicked.setStroke(0, themeStroke);
bgClicked.setCornerRadius(0);
bgClicked.setAlpha(255);
var bgNotClicked = new android.graphics.drawable.GradientDrawable();
bgNotClicked.setColor(themeForeground);
bgNotClicked.setStroke(2, themeStroke);
bgNotClicked.setCornerRadius(5);
var sideMenuStroke = new android.graphics.drawable.GradientDrawable();
sideMenuStroke.setStroke(2, themeStroke);
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setStroke(2, themeStroke);
var settingNotClickedH = new android.graphics.drawable.GradientDrawable();
settingNotClickedH.setColor(themeBackground);
settingNotClickedH.setStroke(0, themeStroke);
settingNotClickedH.setCornerRadius(0);
settingNotClickedH.setAlpha(255);
var settingClickedH = new android.graphics.drawable.GradientDrawable();
settingClickedH.setColor(themeBackground);
settingClickedH.setStroke(2, Color.parseColor("#21ff00"));
settingClickedH.setCornerRadius(0);
settingClickedH.setAlpha(255);
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(3, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(2, themeStroke);
title.setCornerRadius(0);
var xbgGS = new android.graphics.drawable.GradientDrawable();
xbgGS.setStroke(0, android.graphics.Color.CYAN);
var xbgWP = new android.graphics.drawable.GradientDrawable();
xbgWP.setStroke(0, android.graphics.Color.YELLOW);
var xbgAW = new android.graphics.drawable.GradientDrawable();
xbgAW.setStroke(0, android.graphics.Color.BLUE);
var sleekUI = new android.graphics.drawable.GradientDrawable();
sleekUI.setColor(Color.parseColor("#000000"));
sleekUI.setStroke(2, themeStroke);
sleekUI.setCornerRadius(3);
var sleekUIbtn = new android.graphics.drawable.GradientDrawable();
sleekUIbtn.setColor(Color.parseColor("#000000"));
sleekUIbtn.setStroke(1, themeStroke);
sleekUIbtn.setCornerRadius(0);
sleekUIbtn.setAlpha(0);
var sleekTitle = new android.graphics.drawable.GradientDrawable();
sleekTitle.setColor(themeForeground);
sleekTitle.setStroke(2, themeStroke);
sleekTitle.setCornerRadius(0);
sleekTitle.setAlpha(90);
var sleekUIbtnSet1 = new android.graphics.drawable.GradientDrawable();
sleekUIbtnSet1.setColor(themeForeground);
sleekUIbtnSet1.setStroke(2, themeStroke);
sleekUIbtnSet1.setCornerRadius(0);
sleekUIbtnSet1.setAlpha(180);
var sleekUIbtnSet2 = new android.graphics.drawable.GradientDrawable();
sleekUIbtnSet2.setColor(themeForeground);
sleekUIbtnSet2.setStroke(0, themeStroke);
sleekUIbtnSet2.setCornerRadius(0);
sleekUIbtnSet2.setAlpha(0);
var addX = false;
var addZ = false;
var subtractX = false;
var subtractZ = false;
var way = "x+";
var thous = 1000;
var currentX = 0;
var currentZ = 0;
var goalX = 0;
var goalZ = 0;
var entry = getPlayerEnt(),
serverNames = ["", ""],
serverIps = ["", ""],
serverPorts = ["", ""],
siteUrl = "",
tmiList = "",
canOpenT = "no",
FAQ = "Connect to Internet",
publicVer = "",
confirmed = false,
wName = "Name",
useLegal = false,
serverSelect = false,
enchantPicker = false,
xrrayin=false,
colorPicker = false,
coordtimer = 2,
crosshairOn = false,
mopenCount = 20,
crosshairDimension = 150,
avoidX = 20,
avoidY = 20,
avoidZ = 20,
avoidplayerdo = false,
phaseBlockss = false,
phaseBlocksd = false,
avoidRange = 15,
avoidplayers = false,
snowIt=false,
tmiId = 1,
tmiAmount = 64,
tmiDamage = 0,
tmiRepeat = false,
effectIn = false,
waila=false,
totemSp = false,
incTog = false,
eAimbot = false,
grappless = false,
airjumpcounter = 0,
signedits = true,
FovsbpProgress = 20,
fovsbp = false,
stepss = false,
crouchtpss = false,
destroyingWood=false,
fastfalls = false,
fastfalld = false,
openMenu8Status = false,
openMenu9Status = false,
openMenu10Status = false,
openMenu11Status = false,
canPreset = false,
lstUrlTran="",
jetskiss = false,
jetskisd = false,
smoothjesuss = false,
lavajes=false,
smoothjesusd = false,
longjumps = false,
longjumpd = false,
boostKBBo=false,
warnState = false,
tapRiderd = false,
treeSw=false,
treecs=false,
tapRider = false,
eTog = false,
fastbridger=false,
filterHueN = 0,
rgbesp=false,
strokeesp=false,
rgbticked=0,
tapMorphd = false,
tapMorphs = false,
curBiomes = false,
trydelete=false,
antispammer=false,
deathX=0,
deathY=0,
deathZ=0,
entry2,
acrashchnks=false,
espOnsave=false,
espOnTsave=false,
espOnBsave=false,
curBiomed = false,
jumpsprints = false,
jumpsprintd = false,
htmltxtcolor = "#fffff",
spammsg1="",
deathcOM=false,
elytrad = false,
blockEspTracer = false,
elytras = false,
miningfs = false,
effectb = false,
preTranslatedChat="",
moving = false,
chatLogtxt="",
fontid="mc",
disSpeed=false,
dx = 0,
dy = 0,
mPosX = 0,
mPosY = 0,
cs_script="",
cs_title="",
nevvhun=false,
effectn = false,
rgbspeed=7,
rgbtick=rgbspeed,
violatord = false,
invCheck = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],
violators = false,
hoveraurad = false,
zomS=false,
hoverauras = false,
playerStats=false,
twerkit=false,
twe=0,
effectRemove=false,
effectAdd=false,
espmenus=false,
aerialauras = false,
aimbotRange = 16,
freeSpeed = 1,
spamMsg = "§cInstinct is the best client. §eDownload at §binstinctmods.com",
creator = "this guy",
TIPstart="1. If this client is laggy, go to the settings tab and disable the icons.\n\n 2. Make sure you read how to use the Xrays\n\n 3. If the Set Offhand interface is too laggy for your device, enable the Use Old TMI GUI setting.",
filterHue = android.graphics.Color.RED,
curTip=2,
atotemd = false,
atotems = false,
datalogging=true,
blocksToReplaceX = [],
blocksToReplaceY = [],
blocksToReplaceZ = [],
blocksReplacedX = [],
blocksReplacedY = [],
blocksReplacedZ = [],
blocksToSkip = [],
fasteats = false,
fasteatd = false,
effectSat=false,
effectAbs=false,
chatTranslator=false,
armorB=false,
discordUrl="",
checkedno=true,
effectHealth=false,
effectWither=false,
effectPois=false,
effectWeak=false,
effectHunger=false,
effectWater=false,
effectFireRes=false,
effectDmgRes=false,
effectHarm=false,
effectHeal=false,
effectStrgth=false,
effectSlow=false,
effectSwift=false,
aerialaurad = false,
swordSlot = 0,
invId = 0,
checking = false,
showGradient=true,
modFlyState=false,
webviewList=undefined,
lstUrl="",
windowOpen=false,
bowSlot = 0,
huds = false,
hbS=false,
hudd = false,
noclipd = false,
lockedaxis=false,
lockedx=false,
lockedy=false,
lockedz=false,
noclips = false,
playersHitbox = Server.getAllPlayers(),
gp, tick1 = 0,
gps = false,
gped = false,
time = 0,
safe, safes = false,
safed = false,
GUI, menu, exitUI, VERSION = " 1.0.0",
NAME = "Instinct",
DEVELOPERS = creator,
cBtn = "Instinct",
pvpBtn, aim, aimbot = false,
aimed = false,
spam2=false,
sf = false,
gmcc1 = false,
im = false,
ims = false,
hsfind=false,
gmLans=false,
hj = false,
hjs = false,
malf = 0,
nearestHud=false,
esp = false,
canOpen = false,
esps = false,
espd = false,
espbtn = false,
defaultDestroyTime = [null, 1.5, 0.6, 0.5, 2, 2, 0, -1, null, null, null, null, 0.5, 0.6, 3, 3, 3, 2, 0.2, 0.6, 0.3, 3, 3, null, 0.8, null, 0.2, 0.7, null, null, 4, 0, 0, null, null, 0.8, null, 0, 0, 0, 0, 3, 5, 2, 2, 2, 0, 1.5, 2, 50, 0, 0, null, 2, 2.5, null, 3, 5, 2.5, 0, 0.6, 3.5, 3.5, 1, 3, 0.4, 0.7, 2, 1, null, null, 5, null, 3, 3, null, null, null, 0.1, 0.5, 0.2, 0.4, 0.6, 0, null, 2, 1, 0.4, 0.3, null, 1, 0.5, null, null, -1, 3, null, 1.5, null, null, 5, 0.3, 1, 0, 0, null, 2, 2, 1.5, null, null, 2, null, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, 0.8, null, null, null, null, null, 2, 2, 2, null, null, 2, null, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, 0.8, 0.8, 2, 2, null, null, null, null, null, null, null, null, null, null, null, 0.5, 0.1, 5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 3.5, 50, 5, 0.6, 0.6, 5, null, null, null, null, 0],
playerDir = [0, 0, 0],
DEG_TO_RAD = Math.PI / 180,
playerFlySpeed = 50,
falling = 0,
next = 0,
colors = ["§c","§6","§e","§a","§b","§9"],
/*
0:  c0
1:  61
2:  e2
3:  a3
4:  b4
5:  95
6:  c0
7:  61
8:  e2
9:  a3
10: b4
11: 95
12: c0
13: 61
14: a2
15: b3
*/
banslist = [],
px, py, pz, lx, ly, lz, vel, freecamSon = false,
saver, host, cd = 0,
s = 0,
Xdiff, Zdiff, Xpos, Zpos, can = 1,
canGetHP = 1,
HP, gravity = -0.07840000092983246,
Entities = [],
counter = 0,
far, farbot = false,
mcps, mcpss = false,
espTicker=0,
mcped = false,
currentselecti=0,
fared = false,
spee = false,
armorE=false,
radius, radiuss = false,
themeAlpha = 180,
radiused = false,
afks, afkss = false,
numbers = android.text.InputType.TYPE_CLASS_NUMBER,
number = android.text.InputType.TYPE_NUMBER_FLAG_SIGNED,
gamespeedset = 1,
afked = false,
tipMessage = "",
aurRan=12,
tipList = ["Customize with THEMES in the Settings tab","Customize with THEMES in the Settings tab","Best PVP setup: Auto Reach, Aimbot, & Blast Aura","Set HOMES using Waypoints!","Check the FAQ's in Settings!","Join the Discord server to help grow the mod menu!","Over 9,000 downloads and counting!","The button to open the menu is movable!","Dupe items on realms using the Dupe mod!","You'll be nofitied when an update is available!","Don't get banned on servers, be smart","Phase and noclip are very similar, but different!","These messages are random!","Mod suggestions are welcome!","Don't like thunderstorms? Enable clear weather mod","Wallhack is good for finding mineshafts!","The crosshair size is adjustable!","Want to be incognito? Hide the menu in the MISC. tab!","Biome ID might be the most useless mod","Now with Keybinds!","Rainbow chat is hidden in the color chat mod!","Join the Discord server to access Instinct Betas!"],
tick = 0,
espRed=0.129,
espGreen=0.078,
espBlue=1,
sfs = false,
bright = false,
god = false,
chlog=false,
chlogAlways=false,
backOpen = false,
spamss = false,
spamed = false,instinctChat = false,
blockEspTracer = false,
spamTime = 0,
autoBlockB = 20,
spamDelay = 35,
wallhacks, wallhackss = false,
wallhacked = false,
nvS=false,
translatelang="googtrans(auto|en)",
ctrlzooms, ctrlzoomed = false,
ctrlzoomtoggle = false,
zoomed = false,
heals, GUIy, mopen = false,
jetpacks, jetpackss = false,
jetpacked = false,
pvp, pvpd = false,
pvps = false,
minerd=false,
xphits, xphitss = false,
xphited = false,
CoordsBtn = ("Launch World"),
boom, boomed = false,
booms = false,
potion, potions = false,
potioned = false,
coordds = false,
xrrayin2=false,
coordd, autoBridges, autoBridgess = false,
autoBridged = false,
hjj, hjjs = false,
swis = false,
chatSplit=[],
sbS=false,
ride, rides = false,woodticker=60,
firstLoad = true,
canSplit=false,
espBlock = 54,
espBlock2 = 0,
espBlock3 = 0,
espBlock4 = 0,
espBlock5 = 0,
espBlock6 = 0,
espBlock7 = 0,
espBlock8 = 0,
espBlocks = [],
espBlocks2 = [],
espBlocks3 = [],
espBlocks4 = [],
espBlocks5 = [],
espBlocks6 = [],
espBlocks7 = [],
espBlocks8 = [],
espB2 = false,
espB3 = false,
espB4 = false,
espB5 = false,
espB6 = false,
espB7 = false,
espB8 = false,
rided = false,
muteUpdate = false,
pitchtrigger=40,
starter, starters = false,
starterd = false,
tpaur=false,
elevating=false,
ntnts = false,
faimed=false,
faimbot=false,
faimbotBtn=false,
ntnt, ntnted = false,
lantntS = false,
gunChecked = false,
tntcanOn = false,
playerNameStat=false,
entityType = "65",
entityName = "Primed TNT",
GUIz, jesus, jesused = false,
jesuss = false,
lankillaura=false,
walks, walkss = false,
clipsBls = false,
clipBtn = false,
rendering=false,
offhandKB=false,
walked = false,
tapjumps, tapjumpss = false,
wwv,urlNow,
url="http://instinctmods.com/htmlmodlist/index.html#",
minus = 2,
ticker = 0,
blastau = false,
blastaurS,
tapjumped = false,
spider, spiders = false,
spiderd = false,
snipers, sniperss = false,
snipered = false,
antikbs, antikbss = false,
antikbed = false,
aos, aoss = false,
aoed = false,
chestesp, chestespd = false,
chestesps = false,
storageESPrange = 25,
codetalker, codetalkers = false,
codetalkered = false,
colormychat, colormychatss = false,
dimensionIn=0,
useCustom = false,
colormychatd = false,
spamTime=4,
colorchat, colorchatss = false,
colorchatdpfss = false,
clearweather = false,
dispro=150,
allday = false,
allRight=false,
nearestHudTsave=false,
allnight = false,
bedrocke = false,
chatcolor = "§b",
quickturn, quickturns = false,
quickturnd = false,
waypointd = false,
translateWindowIsOpen=false,
friendList = [],
waypoint, waypoints = false,
waypointNameAdd = "Waypoint",
numberOfWaypoints = 0,
kbWay, kbWayd = false,
GUIkbw, kbWays = false,
indiW,
ncoordds = false,
openMenu1Status = false,
pfss=false,
pfsd=false,
nOffs=false,
checkedBlock=0,
destroyNextWood=false,
freeX=0,
freeY=0,
freeZ=0,
openMenu2Status = false,
backgroundIsOpen = false,
openMenu3Status = false,
openMenu4Status = false,
openMenu5Status = false,
pointedX = 0,
pointedY = 0,
combatESP=false,
pointedZ = 0,
tapPart=false,
hiddenMenu = false,
digurl=false,
checkdownload=false,
idurl="http://instinctmods.com/idlist.html",
updateNotifier = false,
openMenu6Status = false,
openMenu7Status = false,
canStat=true,
oldTMI=false,
debugUic, debugUicd = false,
aimbotBtn=false,
filterOn = false,
taptosee, taptoseed = false,
showAllMenu = true,
sleekMenuOn = false,
showSleekMenuOn=false,
showHTMLMenu=false,
windowOpen=false,
animations = true,
iconsB=true,
helpB=false,
realmnfd=false,
levs=false,
x933q=true,
magiccarpetParent=false,
magiccarpets=false,
showAllMenuStatus = true,
showAllMenuStatusOpposite = false,
spaceholderWidth = icon_dimensions*.74,
spaceholderHeight = icon_dimensions,
reachDistanceSlider, reachDistance = "20",
autoReachs = false,
autoReachd = false,
foilits=false,
autoReach, maximalrange = 7,
aimplayer = true,
chatlinks=false,
friendName="",
aimmobs = false,
espt = false,
crack = false,
indiSta=false,
safewalkswitchs = false,
safewalkswitchd = false,
taptpswitchs = false,
taptpswitchd = false,
betterladss = false,
EntityName = {"-1":"Unknown","10":"Chicken","11":"Cow","12":"Pig","13":"Sheep","14":"Wolf","15":"Villager","16":"Mooshroom","17":"Squid","18":"Rabbit","19":"Bat","20":"Iron Golem","21":"Snow Golem","22":"Ocelot","23":"Horse","24":"Donkey","25":"Mule","26":"Skeleton Horse","27":"Zombie Horse","28":"Polar Bear","29":"Llama","32":"Zombie","33":"Creeper","34":"Skeleton","35":"Spider","36":"Zombie Pigman","37":"Slime","38":"Enderman","39":"Silverfish","40":"Cave Spider","41":"Ghast","42":"Magma Cube","43":"Blaze","44":"Zombie Villager","45":"Witch","46":"Stray","47":"Husk","48":"Wither Skeleton","49":"Guardian","50":"Elder Guardian","52":"Wither","53":"Ender Dragon","54":"Shulker","55":"Endermite","57":"Vindicator","63":"Player","104":"Evoker","105":"Vex",},
vmb=false,
betterladsd = false,
speedTick=10,
speedometerS=false,
swapForeground=false,
menuFailed1=false,
menuFailed2=false,
menuFailed3=false,
menuFailed4=false,
menuFailed5=false,
menuFailed6=false,
menuFailed8=false,
menuFailed9=false,
menuFailed10=false,
menuFailed11=false,

swifta=30,
swiftd=999999,
slowa=2,
slowd=999999,
strengta=200,
strengthd=999999,
resa=200,
resd=999999,
fresa=200,
fresd=999999,
waterba=200,
waterbd=999999,
hungera=200,
hungerd=999999,
weaka=200,
weakd=999999,
poisona=200,
poisond=999999,
withera=200,
witherd=999999,
healboa=200,
healbod=999999,
absoa=200,
sbsod=999999,
invisa=200,
invisd=999999,
blinda=200,
blindd=999999,
nausa=8,
nausd=999999,
jumpa=8,
jumpd=999999,
leva=3,
levd=999999,
mina=200,
mind=999999,
hasta=200,
hastd=999999,
niva=200,
nivd=999999,


build_Ocean_Monument=false,
build_Stronghold=false,
build_Village_House_Big=false,
build_Blacksmith=false,
build_Church=false,
build_Farm_Small=false,
build_Village_House_Small_1=false,
build_Village_House_Small_2=false,
build_Village_Well=false,
build_Farm_Big=false,

cs_directory = android.os.Environment.getExternalStorageDirectory ().getPath () +"/games/Instinct",
sniperss = false,
snipersd = false,
bowaimbot = false,
mGLSurfaceView=false,
namestore = "",
immunity=["",""],
customName=["",""],
customNameC=["",""],
particleEffect=["",""],
donators=["",""],
supportclicks=0,
currentSelect=[0],
savedg="",
bowaimbotd = false,
swordaimbot = false,
swordaimbotd = false,
textures=[0],
playerIsFriend=false,
gpsZ=0,
gpsX=0,
tblock = 54,
autoSword = false,
autoBow = false,
surfacing=false,
updateMod,noclip2s=false,
sleekLeft = false,

density = ctx.getResources().getDisplayMetrics().density,

useGIF = false,
backOpen=false,
giflink="https://i.pinimg.com/originals/51/b3/5b/51b35b069fdabf0f5f07eaf8d0829c88.gif",
gif2="https://i.pinimg.com/originals/b5/5e/3b/b55e3bafe484a0ead34d5e3849bd1e11.gif",
gif1="https://i.pinimg.com/originals/51/b3/5b/51b35b069fdabf0f5f07eaf8d0829c88.gif",
gif3="http://1.bp.blogspot.com/-r5Aj9YbCQQk/UF80dyv17SI/AAAAAAAAEZU/aXoSQPybltI/s1600/Beautiful+3D+hd+nature+wallpaper+mobile+phones++Download++animated+gif+pictures+and+wallpapers++smartphone+phone+wallpapers+backgrounds+images+photos+gif+pictures++moon+water+reflexive.gif",
/*Roughly 100px*/
icon_dimensions=ctx.getWindowManager().getDefaultDisplay().getHeight()/19,
tabWidth = 8.5,
fullheight = ctx.getWindowManager().getDefaultDisplay().getHeight(),
fullwidth = ctx.getWindowManager().getDefaultDisplay().getWidth(),
left_width = ctx.getWindowManager().getDefaultDisplay().getWidth() / tabWidth,
btntextsize= 6,
switchfontsize = 6,
menuWidth = .28,
menuIcon = 1.6,
tpQuickwidth = 3,
spaceHold = .5,
closemenuWidth = 8.5,
colorWidth = 6,
titleSize = 15,
pvpmenuWidth = 7,
pvpmenuHeight = 2.3,
pvptextsize = 9,
switchWidth = icon_dimensions*6.5,
modPadL = 0,
modPadT = icon_dimensions/4,
modPadR = 0,
modPadB = icon_dimensions/4,

tab_width = 60*density,
tab_height = 1.3,
title_width = 80*density,
list_width_var=200,
list_width = list_width_var*density,
icon_dimensions = list_width/9,
close_width = 110*density,
gap_width = 10*density,
switch_width = (list_width/1.42),
wayNameWidth = list_width-(icon_dimensions*4),
help_width = icon_dimensions,
left_width = tab_width;

var language="English";
var langMsg=[""]; 
var cs_functionarr = {};
var mpelang = ModPE.getLanguage();
var m3=mpelang;
if(m3=="es_MX"||m3=="es_ES"){language="Spanish";}
if(m3=="id_ID"){language="Indonesian";}
if(m3=="en_US"||m3=="en_GB"){language="English";}/*
if(m3=="da_DK"){language="Danish";}
if(m3=="de_DE"){language="German";}
if(m3=="fr_CA"||m3=="fr_FR"){language="French";}
if(m3=="it_IT"){language="Italian";}
if(m3=="ja_JP"){language="Japan";}
if(m3=="zh_CN"){language="Chinese";}
if(m3=="ko_KR"){language="Korean";}
if(m3=="ru_RU"){language="Russian";}
if(m3=="bg_BG"){language="Bulgarian";}
if(m3=="el_GR"){language="Greek";}*/
langMsg["English"]={
"Close Menu":"Close Menu",
"Enable PVP Menu":"Enable PVP Menu",
"Survival":"Survival",
"PVP":"PVP",
"Waypoints":"Waypoints",
"Waypoint":"Waypoint",
"Friends":"Friends",
"Potions":"Potions",
"Movement":"Movement",
"Discord":"Discord",
"Misc.":"Misc.",
"Presets":"Presets",
"Settings":"Settings",
"Disable PVP Menu":"Disable PVP Menu",
"Survival Menu":"Survival Menu",
"LAN Only Mods":"LAN Only Mods",
"PVP Menu":"PVP Menu",
"Hitboxes":"Hitboxes",
"Potions Menu":"Potions Menu",
"Movement Menu":"Movement Menu",
"Quick TP":"Quick TP",
"Misc Menu":"Misc Menu",
"Theme":"Theme",
"Tip: These mods only work on LAN worlds, not realms or most servers":"Tip: These mods only work on LAN worlds, not realms or most servers",
"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data":"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data",
"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added":"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added",
"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.":"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.",
"You are a donator and chose:":"You are a donator and chose:",
"- Particle Effect":"- Particle Effect",
"- Immunity":"- Immunity",
"- Custom Name: ":"- Custom Name: ",
"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices":"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices",
"Enchants the item in your hand":"Enchants the item in your hand",
"Increases hitbox size of victim you hit":"Increases hitbox size of victim you hit",
"Adds button to zoom in":"Adds button to zoom in",
"Double Tap jump":"Double Tap jump",
"Fly in survival just like in creative":"Fly in survival just like in creative",
"Xray Stone - See ores from the bottom up - USE WHILE MINING":"Xray Stone - See ores from the bottom up - USE WHILE MINING",
"Xray Stone - See ores from the top down - DON'T USE WHILE MINING":"Xray Stone - See ores from the top down - DON'T USE WHILE MINING",
"Indicates what biome you're in":"Indicates what biome you're in",
"Indicates your coordinates, location":"Indicates your coordinates, location",
"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld":"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld",
"Shows direction to where you died":"Shows direction to where you died",
"Made by MxGoldo, implemented and fixed by ":"Made by MxGoldo, implemented and fixed by ",
"Shows a minimap of your area":"Shows a minimap of your area",
"Walk next to a wall":"Walk next to a wall",
"Allows you to see through walls, go walk next to one.":"Allows you to see through walls, go walk next to one.",
"Always clear weather":"Always clear weather",
"Forces time to day":"Forces time to day",
"Forces time to night":"Forces time to night",
"Sets time to day on single player worlds":"Sets time to day on single player worlds",
"Sets time to night on single player worlds":"Sets time to night on single player worlds",
"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices":"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices",
"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it":"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it",
"Move item to crafting table":"Move item to crafting table",
"Duplicates item in hand, move to crafting table in inventory after.":"Duplicates item in hand, move to crafting table in inventory after.",
"Only for single player, kits you with diamond gear":"Only for single player, kits you with diamond gear",
"Teleports you to the void, killing you.":"Teleports you to the void, killing you.",
"Erases everything in your inventory":"Erases everything in your inventory",
"Adds crosshair to the center of the screen":"Adds crosshair to the center of the screen",
"Adjusts crosshair size":"Adjusts crosshair size",
"Enable FOV":"Enable FOV",
"Adjusts FOV":"Adjusts FOV",
"Displays armor durabilty in top left":"Displays armor durabilty in top left",
"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.":"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.",
"Don't get knocked back when hit":"Don't get knocked back when hit",
"Easier to see where everyone is, even the invisible":"Easier to see where everyone is, even the invisible",
"Easier to see where everyone is, even the invisible":"Easier to see where everyone is, even the invisible",
"Displays health of nearest player above their head":"Displays health of nearest player above their head",
"Eat food instantly, good for Pvp battles":"Eat food instantly, good for Pvp battles",
"Adds a totem of undying when hit":"Adds a totem of undying when hit",
"Teleports to the nearest people over and over":"Teleports to the nearest people over and over",
"Teleports to the victim":"Teleports to the victim",
"Use with aimbot and reach, hard to get killed":"Use with aimbot and reach, hard to get killed",
"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better":"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better",
"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.":"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.",
"Teleports above player within 4 blocks. Combine with aimbot.":"Teleports above player within 4 blocks. Combine with aimbot.",
"Sticks to a player":"Sticks to a player",
"Disable Regular aimbot first!":"Disable Regular aimbot first!",
"Disable Body Aimbot first!":"Disable Body Aimbot first!",
"Range: ":"Range: ",
"Good for easy pillaring":"Good for easy pillaring",
"Replaces nametag with stats":"Replaces nametag with stats",
"Get XP by hitting mobs":"Get XP by hitting mobs",
"Get XP when you hit someone":"Get XP when you hit someone",
"Adds button to quickly turn around":"Adds button to quickly turn around",
"Teleports away when anyone is near. Impossible to kill":"Teleports away when anyone is near. Impossible to kill",
"Adjust how far you teleport away from a player":"Adjust how far you teleport away from a player",
"Quickly adjust how close players can get near you while using Untouchable":"Quickly adjust how close players can get near you while using Untouchable",
"Sets players hitbox to large once you hit them":"Sets players hitbox to large once you hit them",
"Distance: ":"Distance: ",
"Automatically increases nearest players hitbox":"Automatically increases nearest players hitbox",
"Resets nearest player's hitbox size":"Resets nearest player's hitbox size",
"Removed all effects":"Removed all effects",
"Added experience":"Added experience",
"Effects can only be applied in-game!":"Effects can only be applied in-game!",
"Enabled Nightvision":"Enabled Nightvision",
"Enabled InstaMine":"Enabled InstaMine",
"Enabled Mining Fatigue":"Enabled Mining Fatigue",
"Healed":"Healed",
"Fly in any direction":"Fly in any direction",
"Fly in survival just like in creative":"Fly in survival just like in creative",
"Activated only when you look up and jump":"Activated only when you look up and jump",
"Gravity is increased":"Gravity is increased",
"Quickly ascend/descend":"Quickly ascend/descend",
"Quickly ascend/descend to surfaces":"Quickly ascend/descend to surfaces",
"Climb anything":"Climb anything",
"Crouch and glide to anywhere":"Crouch and glide to anywhere",
"Jump in the air":"Jump in the air",
"Step over anything, similar to Spider":"Step over anything, similar to Spider",
"Fly around without player moving. Permission to use by TimmYCode.":"Fly around without player moving. Permission to use by TimmYCode.",
"Jump far":"Jump far",
"Sprint and jumping at the same time":"Sprint and jumping at the same time",
"Boost forward":"Boost forward",
"Walk around on a carpet":"Walk around on a carpet",
"Builds a bridge underneath you.":"Builds a bridge underneath you.",
"Change Auto Bridge block":"Change Auto Bridge block",
"Quickly build bridges or pillars.":"Quickly build bridges or pillars.",
"Walk on water":"Walk on water",
"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack":"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack",
"Walk on water and go fast":"Walk on water and go fast",
"Always crouching but can still sprint":"Always crouching but can still sprint",
"Teleport anywhere you look":"Teleport anywhere you look",
"Can't take fall damage":"Can't take fall damage",
"Crouch and glide through any block":"Crouch and glide through any block",
"Go through any block":"Go through any block",
"Go through blocks - Much more dangerous than the original NoClip":"Go through blocks - Much more dangerous than the original NoClip",
"Climb ladders super fast":"Climb ladders super fast",
"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.":"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.",
"Launches you into the sky":"Launches you into the sky",
"You haven't died yet!":"You haven't died yet!",
"Teleports to the nearest person within range":"Teleports to the nearest person within range",
"Teleport anywhere":"Teleport anywhere",
"Speed: Default":"Speed: Default",
"Speed: ":"Speed: ",
"Sends hundreds of messages to the server at once":"Sends hundreds of messages to the server at once",
"Edit message to spam":"Edit message to spam",
"Prevents spam/duplicated messages from being shown":"Prevents spam/duplicated messages from being shown",
"Disable Medium Encryption first":"Disable Medium Encryption first",
"Makes messages trickier to read, but still readable":"Makes messages trickier to read, but still readable",
"Disable Lite Encryption first":"Disable Lite Encryption first",
"Only people using Instinct can read your messages":"Only people using Instinct can read your messages",
"Crouch and select first hotbar slot to open menu":"Crouch and select first hotbar slot to open menu",
"Never get booted for AFK'ing":"Never get booted for AFK'ing",
"Can break bedrock":"Can break bedrock",
"Sets break time to .1, mine most blocks quickly":"Sets break time to .1, mine most blocks quickly",
"Sets friction to .1":"Sets friction to .1",
"Makes all blocks bright":"Makes all blocks bright",
"Walk around whilst dead, restart to disable. Works only for realms":"Walk around whilst dead, restart to disable. Works only for realms",
"Shows who the nearest player is":"Shows who the nearest player is",
"Colors your messages":"Colors your messages",
"Particle effects when someone is hit":"Particle effects when someone is hit",
"Valuable information on your screen, like block ID's":"Valuable information on your screen, like block ID's",
"Ride anything you touch":"Ride anything you touch",
"Ride the nearest player":"Ride the nearest player",
"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests":"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests",
"Change what block to show on ESP":"Change what block to show on ESP",
"Shows ui elements":"Shows ui elements",
"Open links received in chat in a popup window":"Open links received in chat in a popup window",
"Chat log is always logging chat":"Chat log is always logging chat",
"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player":"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player",
"See what the nearest person sees":"See what the nearest person sees",
"List of servers to join":"List of servers to join",
"Shows the server's IP address":"Shows the server's IP address",
"Chat while crouching":"Chat while crouching",
"Applies filter to screen":"Applies filter to screen",
"Dim":"Dim",
"Cool":"Cool",
"Yellow":"Yellow",
"Red":"Red",
"Vivid":"Vivid",
"White":"White",
"Romantic":"Romantic",
"Cyan":"Cyan",
"Adjusts filter hue":"Adjusts filter hue",
"Disable other preset":"Disable other preset",
"Must be in a world to activate":"Must be in a world to activate",
"Basic modules":"Basic modules",
"Basic modules for PVP":"Basic modules for PVP",
"Everything for mining":"Everything for mining",
"Block Found":"Block Found",
"Coordiantes Error, Format as such: ":"Coordiantes Error, Format as such: ",
" added to external_servers.txt. Restart game to take effect.":" added to external_servers.txt. Restart game to take effect.",
"Server ":"Server ",
"Could not connect to the internet. Enable Wi-Fi or Mobile Data":"Could not connect to the internet. Enable Wi-Fi or Mobile Data",
"Failed Update":"Failed Update",
"Name is too long":"Name is too long",
"Enter a name":"Enter a name",
"Access has been locked, connect to WiFi and restart game.":"Access has been locked, connect to WiFi and restart game.",
" has locked this client":" has locked this client",
"Update available, update to version ":"Update available, update to version ",
"Your account is banned from using this client, request access on Discord at v7thSharkv#0101":"Your account is banned from using this client, request access on Discord at v7thSharkv#0101",
"Tap the arrow to move":"Tap the arrow to move",
"Can't go farther down":"Can't go farther down",
"Free Cam Speed: ":"Free Cam Speed: ",
"Black":"Black",
"Dark Blue":"Dark Blue",
"Dark Green":"Dark Green",
"Dark Aqua":"Dark Aqua",
"Dark Red":"Dark Red",
"Dark Purple":"Dark Purple",
"Orange":"Orange",
"Grey":"Grey",
"Dark Grey":"Dark Grey",
"Indigo":"Indigo",
"Green":"Green",
"Aqua":"Aqua",
"Pink":"Pink",
"White":"White",
"Rainbow":"Rainbow",
"Close":"Close",
"Choose Enchants":"Choose Enchants",
"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.":"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.",
"32k Sword":"32k Sword",
"32k Pickaxe":"32k Pickaxe",
"32k Axe":"32k Axe",
"32k Bow":"32k Bow",
"32k Armor":"32k Armor",
"Use Legal Enchant Lvls":"Use Legal Enchant Lvls",
"Use Custom Name":"Use Custom Name",
"Protection":"Protection",
"Fire Protection":"Fire Protection",
"Feather Falling":"Feather Falling",
"Blast Protection":"Blast Protection",
"Projectile Protection":"Projectile Protection",
"Thorns":"Thorns",
"Respiration":"Respiration",
"Aqua Affinity":"Aqua Affinity",
"Depth Strider":"Depth Strider",
"Sharpness":"Sharpness",
"Smite":"Smite",
"Bane of Anthropods":"Bane of Anthropods",
"Knockback":"Knockback",
"Fire Aspect":"Fire Aspect",
"Looting":"Looting",
"Efficiency":"Efficiency",
"Silk Touch":"Silk Touch",
"Unbreaking":"Unbreaking",
"Fortune":"Fortune",
"Power":"Power",
"Punch":"Punch",
"Flame":"Flame",
"Infinity":"Infinity",
"Luck of the Sea":"Luck of the Sea",
"Lure":"Lure",
"Cancel":"Cancel",
" ID:":" ID:",
" Amount:":" Amount:",
" Damage/Meta:":" Damage/Meta:",
" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.":" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.",
"LAN Only Potions":"LAN Only Potions",
"Presets":"Presets",
"Tip: Enter waypoint name and coordinates.":"Tip: Enter waypoint name and coordinates.",
"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers.":"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers."
}; 
langMsg["Indonesian"]={
"Close Menu":"Tutup Menu",

"Enable PVP Menu":"Aktifkan Menu PVP",

"Survival":"Bertahan hidup",

"PVP":"PVP",

"Waypoints":"Titik lewat",

"Friends":"Teman",

"Potions":"Ramuan",

"Movement":"Gerakan",

"Discord":"Discord",

"Misc.":"Lain",

"Presets":"Preset",

"Settings":"Pengaturan",

"Disable PVP Menu":"Nonaktifkan Menu PVP",

"Survival Menu":"Menu Survival",

"LAN Only Mods":"Modifikasi LAN Saja",

"PVP Menu":"Menu PVP",

"Hitboxes":"Kotak hit",

"Potions Menu":"Menu Ramuan",

"Movement Menu":"Menu Gerakan",

"Quick TP":"TP cepat",

"Misc Menu":"Menu Lain",

"Theme":"Tema",

"Tip: These mods only work on LAN worlds, not realms or most servers":"Kiat: Mod ini hanya berfungsi di dunia LAN, bukan ranah atau sebagian besar server",

"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data":"Tip: Jika menu ini kosong setelah menambahkan titik arah, buka tab Pengaturan dan klik Hapus Data",

"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added":"Kiat: Pemain ini tidak ditargetkan oleh Aimbot, dan tidak dapat dipukul. \n Ada akan ada teman kosong, dan hanya dapat dihapus setelah teman baru ditambahkan",

"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.":"Tip: Hanya satu preset yang dapat diaktifkan sekaligus. Preset mengaktifkan mod tertentu di klien.",

"You are a donator and chose:":"Anda adalah donator dan memilih",

"- Particle Effect":"- Efek Partikel",

"- Immunity":"- Kekebalan",

"- Custom Name: ":"- Nama Khusus: ",

"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices":"TMI untuk ranah. Meretas item apa pun ke ranah. Pindahkan item dari Anda yang sebelumnya ke inventaris Anda. Aktifkan 'GUI TMI Lama' di Pengaturan untuk perangkat kelas bawah",

"Enchants the item in your hand":"Mempesona item di tangan Anda",

"Increases hitbox size of victim you hit":"Meningkatkan ukuran hitbox korban yang Anda tekan",

"Adds button to zoom in":"Menambahkan tombol untuk memperbesar",

"Double Tap jump":"Ketuk ganda, lompat",

"Fly in survival just like in creative":"Terbang dalam kelangsungan hidup seperti dalam kreatif",

"Xray Stone - See ores from the bottom up - USE WHILE MINING":"Xray Stone - Lihat bijih dari bawah ke atas - GUNAKAN WHILE MINING",

"Xray Stone - See ores from the top down - DON'T USE WHILE MINING":"Xray Stone - Lihat bijih dari atas ke bawah - JANGAN GUNAKAN SAAT MINING",

"Indicates what biome you're in":"Menunjukkan bioma yang Anda jalani",

"Indicates your coordinates, location":"Menunjukkan koordinat Anda, lokasi",

"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld":"Mengonversi koordinat bawah ke dunia luar. Gunakan saat berada di bawah untuk melihat di mana Anda berada dalam hubungannya dengan dunia luar",

"Shows direction to where you died":"Menunjukkan arah ke tempat Anda meninggal",

"Made by MxGoldo, implemented and fixed by ":"Dibuat oleh MxGoldo, diimplementasikan dan diperbaiki oleh ",

"Shows a minimap of your area":"Menunjukkan minimap area Anda",

"Walk next to a wall":"Berjalan di sebelah tembok",

"Allows you to see through walls, go walk next to one.":"Memungkinkan Anda melihat menembus dinding, berjalan di sebelahnya.",

"Always clear weather":"Cuaca selalu cerah",

"Forces time to day":"Memaksa waktu ke hari",

"Forces time to night":"Pasukan waktu untuk malam",

"Sets time to day on single player worlds":"Tetapkan waktu untuk hari di dunia pemain tunggal",

"Sets time to night on single player worlds":"Tetapkan waktu untuk malam di dunia pemain tunggal",

"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices":"Menambahkan item apa saja ke inventaris Anda di dunia pemain tunggal. Aktifkan 'GUI TMI Lama' di Pengaturan untuk perangkat kelas bawah",

"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it":"Mengganti nama item di tangan Anda. Pindahkan item ke tabel kerajinan di inventaris Anda untuk menerapkan nama dan menggandakannya",

"Move item to crafting table":"Pindahkan item ke tabel kerajinan",

"Duplicates item in hand, move to crafting table in inventory after.":"Duplikat item di tangan, pindah ke tabel kerajinan di inventaris setelah.",

"Only for single player, kits you with diamond gear":"Hanya untuk pemain tunggal, kit Anda dengan gigi berlian",

"Teleports you to the void, killing you.":"Teleport Anda ke kekosongan, membunuh Anda.",

"Erases everything in your inventory":"Hapus semua yang ada di inventaris Anda",

"Adds crosshair to the center of the screen":"Menambahkan crosshair ke tengah layar",

"Adjusts crosshair size":"Menyesuaikan ukuran crosshair",

"Enable FOV":"Aktifkan FOV",

"Adjusts FOV":"Menyesuaikan FOV",

"Displays armor durabilty in top left":"Menampilkan daya tahan lapis baja di kiri atas",

"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.":"Menampilkan statistik dan kesehatan armor musuh. Terima kasih kepada DanCuber untuk membuat pengembangan berjalan lebih cepat.",

"Don't get knocked back when hit":"Jangan sampai terlempar ke belakang saat dipukul",

"Easier to see where everyone is, even the invisible":"Lebih mudah untuk melihat di mana semua orang berada, bahkan yang tidak terlihat",

"Easier to see where everyone is, even the invisible":"Lebih mudah untuk melihat di mana semua orang berada, bahkan yang tidak terlihat",

"Displays health of nearest player above their head":"Menampilkan kesehatan pemain terdekat di atas kepala mereka",

"Eat food instantly, good for Pvp battles":"Makan makanan secara instan, bagus untuk pertarungan Pvp",

"Adds a totem of undying when hit":"Menambahkan totem dari kematian saat dipukul",

"Teleports to the nearest people over and over":"Teleport ke orang-orang terdekat berulang-ulang",

"Teleports to the victim":"Teleport ke korban",

"Use with aimbot and reach, hard to get killed":"Gunakan dengan aimbot dan jangkauan, sulit terbunuh",

"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better":"Gunakan dengan aimbot dan jangkauan, benar-benar mematikan. Mirip dengan aura petir tetapi lebih baik",

"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.":"Teleport tepat di atas seseorang setiap kali Anda menabraknya. Kombinasikan dengan aimbot untuk mematikan.",

"Teleports above player within 4 blocks. Combine with aimbot.":"Teleports pemain di atas dalam 4 blok. Kombinasikan dengan aimbot.",

"Sticks to a player":"Menempel pemain",

"Disable Regular aimbot first!":"Nonaktifkan aimbot Biasa dulu!",

"Disable Body Aimbot first!":"Nonaktifkan Tubuh Aimbot dulu!",

"Range: ":"Jarak: ",

"Good for easy pillaring":"Bagus untuk pilar mudah",

"Replaces nametag with stats":"Mengganti tag nama dengan statistik",

"Get XP by hitting mobs":"Dapatkan XP dengan memukul monster",

"Get XP when you hit someone":"Dapatkan XP saat Anda menekan seseorang",

"Adds button to quickly turn around":"Tambahkan tombol untuk berbalik dengan cepat",

"Teleports away when anyone is near. Impossible to kill":"Teleport pergi ketika ada orang yang dekat. Tidak mungkin membunuh",

"Adjust how far you teleport away from a player":"Sesuaikan seberapa jauh Anda teleport dari pemain",

"Quickly adjust how close players can get near you while using Untouchable":"Sesuaikan dengan cepat seberapa dekat pemain bisa mendekati Anda saat menggunakan Untouchable",

"Sets players hitbox to large once you hit them":"Mengatur pemain hitbox menjadi besar setelah Anda menekan mereka",

"Distance: ":"Jarak: ",

"Automatically increases nearest players hitbox":"Secara otomatis meningkatkan hitbox pemain terdekat",

"Resets nearest player's hitbox size":"Mereset ukuran hitbox pemain terdekat",

"Removed all effects":"Menghapus semua efek",

"Added experience":"Pengalaman yang ditambahkan",

"Effects can only be applied in-game!":"Efek hanya dapat diterapkan dalam game!",

"Enabled Nightvision":"Diaktifkan Nightvision",

"Enabled InstaMine":"Diaktifkan InstaMine",

"Enabled Mining Fatigue":"Diaktifkan Mining Fatigue",

"Healed":"Sembuh",

"Fly in any direction":"Terbang ke segala arah",

"Double Tap jump":"Ketuk ganda, lompat",

"Fly in survival just like in creative":"Terbang dalam kelangsungan hidup seperti dalam kreatif",

"Activated only when you look up and jump":"Diaktifkan hanya ketika Anda melihat ke atas dan melompat",

"Gravity is increased":"Gravitasi meningkat",

"Quickly ascend/descend":"Cepat naik / turun",

"Quickly ascend/descend to surfaces":"Dengan cepat naik / turun ke permukaan",

"Climb anything":"Panjat apa saja",

"Crouch and glide to anywhere":"Crouch dan meluncur ke mana saja",

"Jump in the air":"Langsung di udara",

"Step over anything, similar to Spider":"Melangkah apa pun, mirip dengan Spider",

"Fly around without player moving. Permission to use by TimmYCode.":"Terbang berkeliling tanpa pemain bergerak. Izin untuk digunakan oleh TimmYCode.",

"Jump far":"Lompat jauh",

"Sprint and jumping at the same time":"Berlari cepat dan melompat pada saat bersamaan",

"Boost forward":"Dorong maju",

"Walk around on a carpet":"Berjalanlah di atas karpet",

"Builds a bridge underneath you.":"Bangun jembatan di bawah Anda.",

"Change Auto Bridge block":"Ubah blok Auto Bridge",

"Quickly build bridges or pillars.":"Cepat membangun jembatan atau pilar.",

"Walk on water":"Walk on water",

"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack":"Berjalanlah di atas air yang lebih halus, terkadang susah untuk keluar dari air tidak seperti retakan Yesus lainnya",

"Walk on water and go fast":"Berjalanlah di atas air dan lakukan dengan cepat",

"Always crouching but can still sprint":"Selalu berjongkok tetapi masih bisa berlari",

"Teleport anywhere you look":"Teleportasi ke mana pun Anda melihat",

"Can't take fall damage":"Tidak bisa menerima kerusakan akibat jatuh",

"Crouch and glide through any block":"Crouch dan meluncur melewati blok apa pun",

"Go through any block":"Pergi melalui blok apa pun",

"Go through blocks - Much more dangerous than the original NoClip":"Pergi melalui blok - Jauh lebih berbahaya daripada NoClip asli",

"Climb ladders super fast":"Naiki tangga dengan sangat cepat",

"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.":"Tetapkan koordinat Anda 150 blok di atas pemain terdekat, mereka tidak dapat melihat Anda dari bawah.",

"Launches you into the sky":"Meluncurkan Anda ke langit",

"You haven't died yet!":"Anda belum mati!",

"Teleports to the nearest person within range":"Teleport ke orang terdekat dalam jangkauan",

"Teleport anywhere":"Teleportasi ke mana saja",

"Speed: Default":"Kecepatan: Default",

"Speed: ":"Kecepatan: ",

"Sends hundreds of messages to the server at once":"Mengirim ratusan pesan ke server sekaligus",

"Edit message to spam":"Edit pesan ke spam",

"Prevents spam/duplicated messages from being shown":"Mencegah ditampilkannya pesan spam / digandakan",

"Disable Medium Encryption first":"Nonaktifkan Enkripsi Medium terlebih dahulu",

"Makes messages trickier to read, but still readable":"Membuat pesan lebih sulit untuk dibaca, tetapi masih dapat dibaca",

"Disable Lite Encryption first":"Nonaktifkan Enkripsi Lite terlebih dahulu",

"Only people using Instinct can read your messages":"Hanya orang yang menggunakan Insting yang dapat membaca pesan Anda",

"Crouch and select first hotbar slot to open menu":"Crouch dan pilih slot hotbar pertama untuk membuka menu",

"Never get booted for AFK'ing":"Jangan pernah di-boot karena AFK'ing",

"Can break bedrock":"Dapat merusak batuan dasar",

"Sets break time to .1, mine most blocks quickly":"Atur waktu istirahat ke .1, menambang sebagian besar blok dengan cepat",

"Sets friction to .1":"Setel gesekan ke .1",

"Makes all blocks bright":"Membuat semua blok cerah",

"Walk around whilst dead, restart to disable. Works only for realms":"Jalan-jalan sambil mati, mulai ulang untuk menonaktifkan. Hanya bekerja untuk ranah",

"Shows who the nearest player is":"Menunjukkan siapa pemain terdekat",

"Colors your messages":"Warna pesan Anda",

"Particle effects when someone is hit":"Efek partikel ketika seseorang dipukul",

"Valuable information on your screen, like block ID's":"Informasi berharga di layar Anda, seperti ID blokir",

"Ride anything you touch":"Naik apa pun yang Anda sentuh",

"Ride the nearest player":"Naik pemain terdekat",

"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests":"Menunjukkan di mana blok berada, ESP untuk blok. Ubah ID untuk menemukan blok selain dari Peti",

"Change what block to show on ESP":"Ubah blok apa yang akan ditampilkan pada ESP",

"Shows ui elements":"Menunjukkan elemen ui",

"Open links received in chat in a popup window":"Buka tautan yang diterima dalam obrolan di jendela sembulan",

"Chat log is always logging chat":"Log obrolan selalu mencatat obrolan",

"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player":"Menyetel kamera ke mata korban, jatuh jika korban bergerak terlalu jauh dari pemain",

"See what the nearest person sees":"Lihat apa yang dilihat orang terdekat",

"List of servers to join":"Daftar server untuk bergabung",

"Shows the server's IP address":"Menunjukkan alamat IP server",

"Chat while crouching":"Mengobrol sambil berjongkok",

"Applies filter to screen":"Terapkan filter ke layar",

"Dim":"Redup",

"Cool":"Keren",

"Yellow":"Kuning",

"Red":"Merah",

"Vivid":"Jelas",

"White":"putih",

"Romantic":"Romantis",

"Cyan":"Cyan",

"Adjusts filter hue":"Menyesuaikan rona filter",

"Disable other preset":"Nonaktifkan preset lainnya",

"Must be in a world to activate":"Harus ada di dunia untuk diaktifkan",

"Basic modules":"Modul dasar",

"Basic modules for PVP":"Modul dasar untuk PVT",

"Everything for mining":"Semuanya untuk penambangan",

"Block Found":"Blokir Ditemukan",

"Coordiantes Error, Format as such: ":"Kesalahan Koordinat, Format seperti itu: ",

" added to external_servers.txt. Restart game to take effect.":" ditambahkan ke external_servers.txt. Mulai ulang game agar mulai berlaku.",

"Server ":"Server ",

"Could not connect to the internet. Enable Wi-Fi or Mobile Data":"Tidak dapat terhubung ke internet. Aktifkan Wi-Fi atau Data Seluler",

"Failed Update":"Pembaruan Gagal",

"Name is too long":"Nama terlalu panjang",

"Enter a name":"Masukkan nama",

"Access has been locked, connect to WiFi and restart game.":"Akses telah dikunci, terhubung ke WiFi dan mulai ulang game.",

" has locked this client":" telah mengunci klien ini",

"Update available, update to version ":"Pembaruan tersedia, perbarui ke versi ",

"Your account is banned from using this client, request access on Discord at v7thSharkv#0101":"Akun Anda dilarang menggunakan klien ini, meminta akses pada Discord at v7thSharkv#0101",

"Tap the arrow to move":"Ketuk panah untuk bergerak",

"Can't go farther down":"Tidak bisa turun lebih jauh",

"Free Cam Speed: ":"Kecepatan Cam Gratis: ",

"Black":"Hitam",

"Dark Blue":"Biru tua",

"Dark Green":"Hijau tua",

"Dark Aqua":"Aqua Gelap",

"Dark Red":"Merah gelap",

"Dark Purple":"Ungu tua",

"Orange":"Jeruk",

"Grey":"Abu-abu",

"Dark Grey":"Abu-abu gelap",

"Indigo":"Nila",

"Green":"hijau",

"Aqua":"Aqua",

"Pink":"Berwarna merah muda",

"White":"putih",

"Rainbow":"Pelangi",

"Close":"dekat",

"Choose Enchants":"Pilih Enchants",

"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.":"Tip: Letakkan item di tangan Anda, pilih pesona, lalu masukkan item ke dalam tabel kerajinan.",

"32k Sword":"Pedang 32k",

"32k Pickaxe":"32k Beliung",

"32k Axe":"Kapak 32k",

"32k Bow":"Busur 32k",

"32k Armor":"32k Armor",

"Use Legal Enchant Lvls":"Gunakan Level Enchant Legal",

"Use Custom Name":"Gunakan Nama Kustom",

"Protection":"Perlindungan",

"Fire Protection":"Proteksi Kebakaran",

"Feather Falling":"Bulu Jatuh",

"Blast Protection":"Perlindungan Ledakan",

"Projectile Protection":"Perlindungan Proyektil",

"Thorns":"Duri",

"Respiration":"Pernafasan",

"Aqua Affinity":"Aqua Affinity",

"Depth Strider":"Kedalaman Strider",

"Sharpness":"Ketajaman",

"Smite":"Memukul",

"Bane of Anthropods":"Kutukan Arthropoda",

"Knockback":"Knockback",

"Fire Aspect":"Aspek Kebakaran",

"Looting":"Penjarahan",

"Efficiency":"Efisiensi",

"Silk Touch":"Sentuhan sutra",

"Unbreaking":"Tidak pecah",

"Fortune":"Nasib",

"Power":"Kekuasaan",

"Punch":"Meninju",

"Flame":"Api",

"Infinity":"Infinity",

"Luck of the Sea":"Keberuntungan Laut",

"Lure":"Memikat",

"Cancel":"Membatalkan",

" ID:":" ID:",

" Amount:":" Jumlah:",

"Presets":"Preset",

" Damage/Meta:":" Kerusakan / Meta::",

" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.":"Kiat: Ramuan hanya bisa diaktifkan dalam gim. \nKiat 2: Penangkal spam membersihkan efek negatif.",

"LAN Only Potions":"Ramuan Hanya LAN",

"Tip: Enter waypoint name and coordinates.":"Kiat: Masukkan nama titik koordinat dan koordinat.",

"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers.":"Tip: Ramuan ini hanya berfungsi di dunia LAN, bukan ranah. Mungkin beberapa akan berfungsi di server."
}; 
langMsg["Spanish"]={
"Close Menu":"Cerrar menú",

"Enable PVP Menu":"Habilitar el menú de PVP",

"Waypoint":"Waypoint",
"Survival":"Supervivencia",

"PVP":"PVP",

"Waypoints":"Puntos de referencia",

"Friends":"Amigos",

"Potions":"Pociones",

"Movement":"Movimiento",

"Discord":"Discord",

"Misc.":"Otro",

"Presets":"Presets",

"Settings":"Ajustes",

"Disable PVP Menu":"Desactivar el menú de PVP",

"Survival Menu":"Menú de supervivencia",

"LAN Only Mods":"Mods de LAN solamente",

"PVP Menu":"Menú PVP",

"Hitboxes":"Hitboxes",

"Potions Menu":"Menú de pociones",

"Movement Menu":"Menú de movimiento",

"Quick TP":"Rápido TP",

"Misc Menu":"Otro menú",

"Theme":"Tema",

"Tip: These mods only work on LAN worlds, not realms or most servers":"Consejo: estos mods solo funcionan en mundos LAN, no en reinos o en la mayoría de los servidores",

"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data":"Consejo: si este menú está en blanco después de agregar puntos de ruta, vaya a la pestaña Configuración y haga clic en Borrar datos",

"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added":"Consejo: Aimbot no apunta a estos jugadores y no puede ser golpeado. \nHabrá un amigo en blanco, y solo se podrá eliminar una vez que se agregue un nuevo amigo.",

"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.":"Consejo: solo se puede habilitar un preajuste a la vez. Los presets habilitan ciertos mods en el cliente.",

"You are a donator and chose:":"Eres un donador y elegiste:",

"- Particle Effect":"- Efecto particula",

"- Immunity":"- Inmunidad",

"- Custom Name: ":"- Nombre personalizado: ",

"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices":"TMI para reinos. Hackea cualquier objeto a un reino. Mueve el objeto de tu mano a tu inventario. Habilitar 'Old TMI GUI' en la configuración para dispositivos de gama baja",

"Enchants the item in your hand":"Encanta el objeto en tu mano.",

"Increases hitbox size of victim you hit":"Aumenta el tamaño de hitbox de la víctima que golpeas.",

"Adds button to zoom in":"Agrega botón para acercar",

"Double Tap jump":"Doble toque de salto",

"Fly in survival just like in creative":"Vuela en supervivencia como en creativo.",

"Xray Stone - See ores from the bottom up - USE WHILE MINING":"Piedra de rayos X - vea minerales de abajo hacia arriba - USE MIENTRAS QUE MINERA",

"Xray Stone - See ores from the top down - DON'T USE WHILE MINING":"Xray Stone - vea minerales de arriba hacia abajo - NO USE MIENTRAS QUE MINERA",

"Indicates what biome you're in":"Indica en qué bioma estás",

"Indicates your coordinates, location":"Indica tus coordenadas, ubicación",

"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld":"Convierte coordenadas nether a overworld. Use mientras está en el interior para ver dónde se encuentra en relación con el mundo terrenal",

"Shows direction to where you died":"Muestra dirección a donde moriste",

"Made by MxGoldo, implemented and fixed by ":"Hecho por MxGoldo, implementado y arreglado por ",

"Shows a minimap of your area":"Muestra un minimapa de tu área.",

"Walk next to a wall":"Caminar al lado de una pared",

"Allows you to see through walls, go walk next to one.":"Te permite ver a través de las paredes, camina junto a una.",

"Always clear weather":"Siempre clima despejado",

"Forces time to day":"Fuerzas del día a día",

"Forces time to night":"Fuerzas de tiempo a la noche",

"Sets time to day on single player worlds":"Establece el tiempo del día en los mundos de un solo jugador.",

"Sets time to night on single player worlds":"Establece el tiempo para la noche en mundos de un solo jugador",

"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices":"Agrega cualquier artículo a tu inventario en los mundos de un solo jugador. Habilitar 'Old TMI GUI' en la configuración para dispositivos de gama baja",

"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it":"Renombra el objeto en tu mano. Mueva el artículo a la tabla de elaboración en su inventario para aplicar el nombre y duplicarlo",

"Move item to crafting table":"Mueve el objeto a la mesa de elaboración",

"Duplicates item in hand, move to crafting table in inventory after.":"Duplica el elemento en la mano, luego pasa a la tabla de elaboración en el inventario.",

"Only for single player, kits you with diamond gear":"Solo para un jugador, te equipa con equipo de diamante.",

"Teleports you to the void, killing you.":"Te teletransporta al vacío, matándote.",

"Erases everything in your inventory":"Borra todo en tu inventario",

"Adds crosshair to the center of the screen":"Añade punto de cruz al centro de la pantalla.",

"Adjusts crosshair size":"Ajusta el tamaño de la cruz.",

"Enable FOV":"Habilitar FOV",

"Adjusts FOV":"Ajusta FOV",

"Displays armor durabilty in top left":"Muestra la durabilidad de la armadura en la parte superior izquierda.",

"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.":"Muestra las estadísticas de armadura enemiga y la salud. Gracias a DanCuber por hacer que el desarrollo sea más rápido.",

"Don't get knocked back when hit":"No vuelvas a caer cuando te golpean",

"Easier to see where everyone is, even the invisible":"Más fácil de ver donde están todos, incluso lo invisible.",

"Easier to see where everyone is, even the invisible":"Más fácil de ver donde están todos, incluso lo invisible.",

"Displays health of nearest player above their head":"Muestra la salud del jugador más cercano por encima de su cabeza.",

"Eat food instantly, good for Pvp battles":"Comer comida al instante, bueno para batallas Pvp.",

"Adds a totem of undying when hit":"Añade un tótem de no morir cuando se golpea.",

"Teleports to the nearest people over and over":"Teletransportarse a las personas más cercanas una y otra vez.",

"Teleports to the victim":"Teletransportarse a la víctima.",

"Use with aimbot and reach, hard to get killed":"Usar con aimbot y alcance, difícil de matar",

"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better":"Usar con aimbot y alcance, absolutamente letal. Similar al aura del rayo pero mejor",

"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.":"Teletransporta justo encima de alguien cada vez que los golpeas. Combínalo con aimbot para la letalidad.",

"Teleports above player within 4 blocks. Combine with aimbot.":"Teletransporta al jugador por encima de 4 cuadras. Combinar con aimbot.",

"Sticks to a player":"Se pega a un jugador",

"Disable Regular aimbot first!":"¡Deshabilita el aimbot regular primero!",

"Disable Body Aimbot first!":"¡Desactiva el cuerpo Aimbot primero!",

"Range: ":"Distancia: ",

"Good for easy pillaring":"Bueno para facilitar el pilar",

"Replaces nametag with stats":"Reemplaza la tarjeta de identificación con estadísticas",

"Get XP by hitting mobs":"Consigue XP golpeando mobs",

"Get XP when you hit someone":"Obtén XP cuando golpeas a alguien",

"Adds button to quickly turn around":"Agrega un botón para dar vuelta rápidamente",

"Teleports away when anyone is near. Impossible to kill":"Teletransportarse lejos cuando alguien está cerca. Imposible matar",

"Adjust how far you teleport away from a player":"Ajusta la distancia a la que te teletransportas lejos de un jugador.",

"Quickly adjust how close players can get near you while using Untouchable":"Ajusta rápidamente cómo los jugadores cercanos pueden acercarse a ti mientras usas Untouchable",

"Sets players hitbox to large once you hit them":"Establece los jugadores en hitbox en grande una vez que los golpeas",

"Distance: ":"Distancia: ",

"Automatically increases nearest players hitbox":"Aumenta automáticamente el hitbox de los jugadores más cercanos.",

"Resets nearest player's hitbox size":"Restablece el tamaño del hitbox del jugador más cercano",

"Removed all effects":"Eliminado todos los efectos.",

"Added experience":"Experiencia añadida",

"Effects can only be applied in-game!":"¡Los efectos solo se pueden aplicar en el juego!",

"Enabled Nightvision":"Habilitado Nightvision",

"Enabled InstaMine":"Habilitado InstaMine",

"Enabled Mining Fatigue":"Habilitado Mining Fatigue",

"Healed":"Sanado",

"Fly in any direction":"Vuela en cualquier direccion",

"Double Tap jump":"Doble toque de salto",

"Fly in survival just like in creative":"Vuela en supervivencia como en creativo.",

"Activated only when you look up and jump":"Se activa solo cuando miras hacia arriba y saltas.",

"Gravity is increased":"La gravedad aumenta",

"Quickly ascend/descend":"Rápidamente ascender / descender",

"Quickly ascend/descend to surfaces":"Rápidamente ascender / descender a superficies",

"Climb anything":"Subir cualquier cosa",

"Crouch and glide to anywhere":"Agacharse y deslizarse a cualquier lugar",

"Jump in the air":"Saltar en el aire",

"Step over anything, similar to Spider":"Paso sobre cualquier cosa, similar a la araña",

"Fly around without player moving. Permission to use by TimmYCode.":"Vuela sin que el jugador se mueva. Permiso de uso por TimmYCode.",

"Jump far":"Saltar lejos",

"Sprint and jumping at the same time":"Sprint y salto al mismo tiempo.",

"Boost forward":"Impulsar hacia adelante",

"Walk around on a carpet":"Caminar alrededor de una alfombra",

"Builds a bridge underneath you.":"Construye un puente debajo de ti.",

"Change Auto Bridge block":"Cambiar bloque de Auto Bridge",

"Quickly build bridges or pillars.":"Construye rápidamente puentes o pilares.",

"Walk on water":"Caminar sobre el agua",

"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack":"Camina sobre el agua con más suavidad, a veces es difícil salir del agua, a diferencia de otros trucos de Jesús",

"Walk on water and go fast":"Camina sobre el agua y ve rápido",

"Always crouching but can still sprint":"Siempre en cuclillas, pero todavía puede correr",

"Teleport anywhere you look":"Teletransportarse a donde quiera que mire",

"Can't take fall damage":"No puedo recibir daño de caída",

"Crouch and glide through any block":"Agacharse y deslizarse a través de cualquier bloque",

"Go through any block":"Ir a través de cualquier bloque",

"Go through blocks - Much more dangerous than the original NoClip":"Ir a través de bloques - mucho más peligroso que el NoClip original",

"Climb ladders super fast":"Subir escaleras super rapido",

"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.":"Establece tus coordenadas 150 cuadras sobre el jugador más cercano, no pueden verte desde abajo.",

"Launches you into the sky":"Te lanza al cielo",

"You haven't died yet!":"¡Aún no has muerto!",

"Teleports to the nearest person within range":"Teletransporta a la persona más cercana dentro del rango",

"Teleport anywhere":"Teletransportarse a cualquier lugar",

"Speed: Default":"Velocidad: Defecto",

"Speed: ":"Velocidad: ",

"Sends hundreds of messages to the server at once":"Envía cientos de mensajes al servidor a la vez.",

"Edit message to spam":"Editar mensaje a spam",

"Prevents spam/duplicated messages from being shown":"Evita que se muestren mensajes spam / duplicados",

"Disable Medium Encryption first":"Desactivar el cifrado medio primero",

"Makes messages trickier to read, but still readable":"Hace que los mensajes sean más difíciles de leer, pero aún así legibles",

"Disable Lite Encryption first":"Deshabilite el cifrado Lite primero",

"Only people using Instinct can read your messages":"Solo las personas que usan Instinct pueden leer tus mensajes.",

"Crouch and select first hotbar slot to open menu":"Agacharse y seleccionar la primera ranura de hotbar para abrir el menú",

"Never get booted for AFK'ing":"Nunca ser botado por AFK'ing",

"Can break bedrock":"Puede romper la roca",

"Sets break time to .1, mine most blocks quickly":"Establece el tiempo de descanso en .1, mina la mayoría de los bloques rápidamente",

"Sets friction to .1":"Establece la fricción en .1",

"Makes all blocks bright":"Hace que todos los bloques brillen.",

"Walk around whilst dead, restart to disable. Works only for realms":"Camina por ahí muerto, reinicia para deshabilitar. Funciona solo para reinos",

"Shows who the nearest player is":"Muestra quién es el jugador más cercano.",

"Colors your messages":"Colorea tus mensajes",

"Particle effects when someone is hit":"Efectos de partículas cuando alguien es golpeado",

"Valuable information on your screen, like block ID's":"Información valiosa en su pantalla, como ID de bloque",

"Ride anything you touch":"Montar cualquier cosa que toques",

"Ride the nearest player":"Monta al jugador más cercano",

"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests":"Muestra dónde están los bloques, ESP para bloques. Cambiar ID para encontrar bloques que no sean cofres",

"Change what block to show on ESP":"Cambia qué bloque mostrar en ESP",

"Shows ui elements":"Muestra elementos de la interfaz de usuario.",

"Open links received in chat in a popup window":"Abrir enlaces recibidos en el chat en una ventana emergente",

"Chat log is always logging chat":"El registro de chat siempre está registrando chat",

"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player":"Coloca la cámara en los ojos de la víctima y se bloquea si la víctima se aleja demasiado del jugador.",

"See what the nearest person sees":"Vea lo que ve la persona más cercana",

"List of servers to join":"Lista de servidores para unirse",

"Shows the server's IP address":"Muestra la dirección IP del servidor.",

"Chat while crouching":"Chat mientras agachado",

"Applies filter to screen":"Aplica filtro a pantalla.",

"Dim":"Oscuro",

"Cool":"Guay",

"Yellow":"Amarillo",

"Red":"rojo",

"Vivid":"Vívido",

"White":"Blanco",

"Romantic":"Romántico",

"Cyan":"Cian",

"Adjusts filter hue":"Ajusta el matiz del filtro.",

"Disable other preset":"Deshabilitar otro preset",

"Must be in a world to activate":"Debe estar en un mundo para activar.",

"Basic modules":"Modulos basicos",

"Basic modules for PVP":"Módulos básicos para PVP",

"Everything for mining":"Todo para la mineria",

"Block Found":"Bloque encontrado",

"Coordiantes Error, Format as such: ":"Error de Coordiniantes, Formato como tal.: ",

" added to external_servers.txt. Restart game to take effect.":" añadido a external_servers.txt. Reinicia el juego para que tenga efecto.",

"Server ":"Servidor ",

"Could not connect to the internet. Enable Wi-Fi or Mobile Data":"No se pudo conectar a internet. Habilitar Wi-Fi o datos móviles",

"Failed Update":"Actualización fallida",

"Name is too long":"El nombre es demasiado largo",

"Enter a name":"Ingresa un nombre",

"Access has been locked, connect to WiFi and restart game.":"El acceso ha sido bloqueado, conectarse a WiFi y reiniciar el juego.",

" has locked this client":" ha bloqueado este cliente",

"Update available, update to version ":"Actualización disponible, actualización a versión ",

"Your account is banned from using this client, request access on Discord at v7thSharkv#0101":"Su cuenta tiene prohibido el uso de este cliente, solicite acceso en Discord at v7thSharkv#0101",

"Tap the arrow to move":"Toca la flecha para moverte.",

"Can't go farther down":"No puedo ir mas abajo",

"Free Cam Speed: ":"Velocidad de cámara libre: ",

"Black":"Negro",

"Dark Blue":"Azul oscuro",

"Dark Green":"Verde oscuro",

"Dark Aqua":"Aqua oscuro",

"Dark Red":"Rojo oscuro",

"Dark Purple":"Morado oscuro",

"Orange":"naranja",

"Grey":"Gris",

"Dark Grey":"Gris oscuro",

"Indigo":"Índigo",

"Green":"Verde",

"Aqua":"Agua",

"Pink":"Rosado",

"White":"Blanco",

"Rainbow":"Arco iris",

"Close":"Cerrar",

"Choose Enchants":"Elegir encantadores",

"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.":"Consejo: ponga el objeto en su mano, elija el encantamiento y luego colóquelo en una mesa de elaboración.",

"32k Sword":"Espada 32k",

"32k Pickaxe":"Piqueta 32k",

"32k Axe":"Hacha 32k",

"32k Bow":"Arco 32k",

"32k Armor":"Armadura 32k",

"Use Legal Enchant Lvls":"Usa niveles de encantamiento legal",

"Use Custom Name":"Usar nombre personalizado",

"Protection":"Proteccion",

"Fire Protection":"Protección contra incendios",

"Feather Falling":"Pluma cayendo",

"Blast Protection":"Protección contra explosiones",

"Projectile Protection":"Protección antiproyectiles",

"Thorns":"Espinas",

"Respiration":"Respiración",

"Aqua Affinity":"Afinidad al agua",

"Depth Strider":"Strider de profundidad",

"Sharpness":"Nitidez",

"Smite":"Herir",

"Bane of Anthropods":"Perdición de los antrópodos",

"Knockback":"Knockback",

"Fire Aspect":"Aspecto de fuego",

"Looting":"Saqueo",

"Efficiency":"Eficiencia",

"Silk Touch":"Toque de seda",

"Unbreaking":"Rompiendo",

"Fortune":"Fortuna",

"Power":"Poder",

"Punch":"Puñetazo",

"Flame":"Llama",

"Infinity":"infinito",

"Luck of the Sea":"Suerte del Mar",

"Lure":"Señuelo",

"Cancel":"Cancelar",

" ID:":" carné de identidad:",

" Amount:":" Cantidad:",

"Presets":"Presets",

" Damage/Meta:":" Daño / Meta:",

" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.":"Consejo: las pociones solo se pueden habilitar en el juego. \nConsejo 2: Antidote spam elimina los efectos negativos.",

"LAN Only Potions":"LAN solo pociones",

"Tip: Enter waypoint name and coordinates.":"Consejo: introduzca el nombre del punto de referencia y las coordenadas.",

"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers.":"Consejo: estas pociones solo funcionan en mundos LAN, no en reinos. Tal vez algunos funcionen en servidores."
}; 

langMsg["TEST"]={
"Close Menu":"translation",

"Enable PVP Menu":"translation",

"Waypoint":"Waypoint",
"Survival":"translation",

"PVP":"translation",

"Waypoints":"translation",

"Friends":"translation",

"Potions":"translation",

"Movement":"translation",

"Discord":"translation",

"Misc.":"translation",

"Presets":"translation",

"Settings":"translation",

"Disable PVP Menu":"translation",

"Survival Menu":"translation",

"LAN Only Mods":"translation",

"PVP Menu":"translation",

"Hitboxes":"translation",

"Potions Menu":"translation",

"Movement Menu":"translation",

"Quick TP":"translation",

"Misc Menu":"translation",

"Theme":"translation",

"Tip: These mods only work on LAN worlds, not realms or most servers":"translation",

"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data":"translation",

"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added":"translation",

"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.":"translation",

"You are a donator and chose:":"translation",

"- Particle Effect":"- translation",

"- Immunity":"- translation",

"- Custom Name: ":"- translation: ",

"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices":"translation",

"Enchants the item in your hand":"translation",

"Increases hitbox size of victim you hit":"translation",

"Adds button to zoom in":"translation",

"Double Tap jump":"translation",

"Fly in survival just like in creative":"translation",

"Xray Stone - See ores from the bottom up - USE WHILE MINING":"translation",

"Xray Stone - See ores from the top down - DON'T USE WHILE MINING":"translation",

"Indicates what biome you're in":"translation",

"Indicates your coordinates, location":"translation",

"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld":"translation",

"Shows direction to where you died":"translation",

"Made by MxGoldo, implemented and fixed by ":"translation ",

"Shows a minimap of your area":"translation",

"Walk next to a wall":"translation",

"Allows you to see through walls, go walk next to one.":"translation",

"Always clear weather":"translation",

"Forces time to day":"translation",

"Forces time to night":"translation",

"Sets time to day on single player worlds":"translation",

"Sets time to night on single player worlds":"translation",

"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices":"translation",

"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it":"translation",

"Move item to crafting table":"translation",

"Duplicates item in hand, move to crafting table in inventory after.":"translation",

"Only for single player, kits you with diamond gear":"translation",

"Teleports you to the void, killing you.":"translation",

"Erases everything in your inventory":"translation",

"Adds crosshair to the center of the screen":"translation",

"Adjusts crosshair size":"translation",

"Enable FOV":"translation",

"Adjusts FOV":"translation",

"Displays armor durabilty in top left":"translation",

"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.":"translation",

"Don't get knocked back when hit":"translation",

"Easier to see where everyone is, even the invisible":"translation",

"Easier to see where everyone is, even the invisible":"translation",

"Displays health of nearest player above their head":"translation",

"Eat food instantly, good for Pvp battles":"translation",

"Adds a totem of undying when hit":"translation",

"Teleports to the nearest people over and over":"translation",

"Teleports to the victim":"translation",

"Use with aimbot and reach, hard to get killed":"translation",

"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better":"translation",

"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.":"translation",

"Teleports above player within 4 blocks. Combine with aimbot.":"translation",

"Sticks to a player":"translation",

"Disable Regular aimbot first!":"translation",

"Disable Body Aimbot first!":"translation",

"Range: ":"translation: ",

"Good for easy pillaring":"translation",

"Replaces nametag with stats":"translation",

"Get XP by hitting mobs":"translation",

"Get XP when you hit someone":"translation",

"Adds button to quickly turn around":"translation",

"Teleports away when anyone is near. Impossible to kill":"translation",

"Adjust how far you teleport away from a player":"translation",

"Quickly adjust how close players can get near you while using Untouchable":"translation",

"Sets players hitbox to large once you hit them":"translation",

"Distance: ":"translation: ",

"Automatically increases nearest players hitbox":"translation",

"Resets nearest player's hitbox size":"translation",

"Removed all effects":"translation",

"Added experience":"translation",

"Effects can only be applied in-game!":"translation",

"Enabled Nightvision":"translation Nightvision",

"Enabled InstaMine":"translation InstaMine",

"Enabled Mining Fatigue":"translation Mining Fatigue",

"Healed":"translation",

"Fly in any direction":"translation",

"Double Tap jump":"translation",

"Fly in survival just like in creative":"translation",

"Activated only when you look up and jump":"translation",

"Gravity is increased":"translation",

"Quickly ascend/descend":"translation",

"Quickly ascend/descend to surfaces":"translation",

"Climb anything":"translation",

"Crouch and glide to anywhere":"translation",

"Jump in the air":"translation",

"Step over anything, similar to Spider":"translation",

"Fly around without player moving. Permission to use by TimmYCode.":"translation",

"Jump far":"translation",

"Sprint and jumping at the same time":"translation",

"Boost forward":"translation",

"Walk around on a carpet":"translation",

"Builds a bridge underneath you.":"translation",

"Change Auto Bridge block":"translation",

"Quickly build bridges or pillars.":"translation",

"Walk on water":"translation",

"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack":"translation",

"Walk on water and go fast":"translation",

"Always crouching but can still sprint":"translation",

"Teleport anywhere you look":"translation",

"Can't take fall damage":"translation",

"Crouch and glide through any block":"translation",

"Go through any block":"translation",

"Go through blocks - Much more dangerous than the original NoClip":"translation",

"Climb ladders super fast":"translation",

"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.":"translation",

"Launches you into the sky":"translation",

"You haven't died yet!":"translation",

"Teleports to the nearest person within range":"translation",

"Teleport anywhere":"translation",

"Speed: Default":"translation: translation",

"Speed: ":"translation: ",

"Sends hundreds of messages to the server at once":"translation",

"Edit message to spam":"translation",

"Prevents spam/duplicated messages from being shown":"translation",

"Disable Medium Encryption first":"translation",

"Makes messages trickier to read, but still readable":"translation",

"Disable Lite Encryption first":"translation",

"Only people using Instinct can read your messages":"translation",

"Crouch and select first hotbar slot to open menu":"translation",

"Never get booted for AFK'ing":"translation",

"Can break bedrock":"translation",

"Sets break time to .1, mine most blocks quickly":"translation",

"Sets friction to .1":"translation",

"Makes all blocks bright":"translation",

"Walk around whilst dead, restart to disable. Works only for realms":"translation",

"Shows who the nearest player is":"translation",

"Colors your messages":"translation",

"Particle effects when someone is hit":"translation",

"Valuable information on your screen, like block ID's":"translation",

"Ride anything you touch":"translation",

"Ride the nearest player":"translation",

"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests":"translation",

"Change what block to show on ESP":"translation",

"Shows ui elements":"translation",

"Open links received in chat in a popup window":"translation",

"Chat log is always logging chat":"translation",

"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player":"translation",

"See what the nearest person sees":"translation",

"List of servers to join":"translation",

"Shows the server's IP address":"translation",

"Chat while crouching":"translation",

"Applies filter to screen":"translation",

"Dim":"translation",

"Cool":"translation",

"Yellow":"translation",

"Red":"translation",

"Vivid":"translation",

"White":"translation",

"Romantic":"translation",

"Cyan":"translation",

"Adjusts filter hue":"translation",

"Disable other preset":"translation",

"Must be in a world to activate":"translation",

"Basic modules":"translation",

"Basic modules for PVP":"translation",

"Everything for mining":"translation",

"Block Found":"translation",

"Coordiantes Error, Format as such: ":"translation: ",

" added to external_servers.txt. Restart game to take effect.":" translation external_servers.txt. translation",

"Server ":"translation ",

"Could not connect to the internet. Enable Wi-Fi or Mobile Data":"translation",

"Failed Update":"translation",

"Name is too long":"translation",

"Enter a name":"translation",

"Access has been locked, connect to WiFi and restart game.":"translation",

" has locked this client":" translation",

"Update available, update to version ":"translation ",

"Your account is banned from using this client, request access on Discord at v7thSharkv#0101":"translation v7thSharkv#0101",

"Tap the arrow to move":"translation",

"Can't go farther down":"translation",

"Free Cam Speed: ":"translation: ",

"Black":"translation",

"Dark Blue":"translation",

"Dark Green":"translation",

"Dark Aqua":"translation",

"Dark Red":"translation",

"Dark Purple":"translation",

"Orange":"translation",

"Grey":"translation",

"Dark Grey":"translation",

"Indigo":"translation",

"Green":"translation",

"Aqua":"translation",

"Pink":"translation",

"White":"translation",

"Rainbow":"translation",

"Close":"translation",

"Choose Enchants":"translation",

"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.":"translation",

"32k Sword":"translation",

"32k Pickaxe":"translation",

"32k Axe":"translation",

"32k Bow":"translation",

"32k Armor":"translation",

"Use Legal Enchant Lvls":"translation",

"Use Custom Name":"translation",

"Protection":"translation",

"Fire Protection":"translation",

"Feather Falling":"translation",

"Blast Protection":"translation",

"Projectile Protection":"translation",

"Thorns":"translation",

"Respiration":"translation",

"Aqua Affinity":"translation",

"Depth Strider":"translation",

"Sharpness":"translation",

"Smite":"translation",

"Bane of Anthropods":"translation",

"Knockback":"translation",

"Fire Aspect":"translation",

"Looting":"translation",

"Efficiency":"translation",

"Silk Touch":"translation",

"Unbreaking":"translation",

"Fortune":"translation",

"Power":"translation",

"Punch":"translation",

"Flame":"translation",

"Infinity":"translation",

"Luck of the Sea":"translation",

"Lure":"translation",

"Cancel":"translation",

" ID:":" translation:",

" Amount:":" translation:",

"Presets":"translation",

" Damage/Meta:":" translation:",

" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.":"translation",

"LAN Only Potions":"translation",

"Tip: Enter waypoint name and coordinates.":"translation",

"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers.":"translation"
}; 
/*
langMsg[language]["Ok"]
*/
fontscript = ["\x67\x65\x74", "\x63\x75\x72\x72\x65\x6E\x74\x4D\x61\x69\x6E\x41\x63\x74\x69\x76\x69\x74\x79", "\x4D\x61\x69\x6E\x41\x63\x74\x69\x76\x69\x74\x79", "\x6D\x69\x6E\x65\x63\x72\x61\x66\x74\x70\x65", "\x6D\x6F\x6A\x61\x6E\x67", "\x42\x75\x74\x74\x6F\x6E", "\x77\x69\x64\x67\x65\x74", "\x4C\x69\x6E\x65\x61\x72\x4C\x61\x79\x6F\x75\x74", "\x52\x65\x6C\x61\x74\x69\x76\x65\x4C\x61\x79\x6F\x75\x74", "\x50\x6F\x70\x75\x70\x57\x69\x6E\x64\x6F\x77", "\x53\x63\x72\x6F\x6C\x6C\x56\x69\x65\x77", "\x54\x65\x78\x74\x56\x69\x65\x77", "\x43\x68\x65\x63\x6B\x42\x6F\x78", "\x53\x77\x69\x74\x63\x68", "\x54\x6F\x61\x73\x74", "\x52\x75\x6E\x6E\x61\x62\x6C\x65", "\x6C\x61\x6E\x67", "\x56\x69\x65\x77", "\x76\x69\x65\x77", "\x43\x6F\x6C\x6F\x72\x44\x72\x61\x77\x61\x62\x6C\x65", "\x64\x72\x61\x77\x61\x62\x6C\x65", "\x67\x72\x61\x70\x68\x69\x63\x73", "\x43\x6F\x6C\x6F\x72", "\x47\x72\x61\x76\x69\x74\x79", "\x49\x6E\x74\x65\x6E\x74", "\x63\x6F\x6E\x74\x65\x6E\x74", "\x55\x72\x69", "\x6E\x65\x74", "\x67\x65\x74\x56\x65\x6C\x58", "\x70\x6F\x77", "\x67\x65\x74\x56\x65\x6C\x5A", "\x73\x71\x72\x74", "\x67", "\x72\x65\x70\x6C\x61\x63\x65", "\x67\x65\x74\x58", "\x67\x65\x74\x59", "\x67\x65\x74\x5A", "\x69\x73\x4C\x69\x71\x75\x69\x64", "\x42\x6C\x6F\x63\x6B", "\x63\x61\x6C\x63\x75\x6C\x61\x74\x65\x53\x70\x65\x65\x64", "\x56\x65\x6C\x6F\x63\x69\x74\x79", "\x69\x73\x4C\x61\x64\x64\x65\x72", "\x72\x6F\x75\x6E\x64", "\x67\x65\x74\x44\x65\x73\x74\x72\x6F\x79\x54\x69\x6D\x65", "\x41\x41\x45\x41\x41\x41\x41\x4E\x41\x49\x41\x41\x41\x77\x42\x51\x52\x6B\x5A\x55\x54\x56\x2F\x4A\x41\x49\x67\x41\x41\x45\x63\x67\x41\x41\x41\x41\x48\x45\x64\x45\x52\x55\x59\x42\x41\x77\x41\x6B\x41\x41\x42\x47\x2B\x41\x41\x41\x41\x43\x68\x50\x55\x79\x38\x79\x5A\x73\x4D\x7A\x64\x77\x41\x41\x41\x56\x67\x41\x41\x41\x42\x67\x59\x32\x31\x68\x63\x47\x36\x65\x74\x63\x6B\x41\x41\x41\x55\x49\x41\x41\x41\x42\x6F\x6D\x64\x68\x63\x33\x44\x2F\x2F\x77\x41\x44\x41\x41\x42\x47\x38\x41\x41\x41\x41\x41\x68\x6E\x62\x48\x6C\x6D\x77\x67\x6C\x53\x61\x51\x41\x41\x43\x46\x67\x41\x41\x44\x64\x59\x61\x47\x56\x68\x5A\x50\x6B\x39\x63\x71\x4D\x41\x41\x41\x44\x63\x41\x41\x41\x41\x4E\x6D\x68\x6F\x5A\x57\x45\x49\x67\x77\x48\x55\x41\x41\x41\x42\x46\x41\x41\x41\x41\x43\x52\x6F\x62\x58\x52\x34\x4F\x4A\x30\x41\x41\x41\x41\x41\x41\x62\x67\x41\x41\x41\x4E\x4F\x62\x47\x39\x6A\x59\x61\x56\x6C\x6C\x34\x49\x41\x41\x41\x61\x73\x41\x41\x41\x42\x71\x6D\x31\x68\x65\x48\x41\x41\x33\x77\x41\x71\x41\x41\x41\x42\x4F\x41\x41\x41\x41\x43\x42\x75\x59\x57\x31\x6C\x4A\x2F\x46\x44\x4C\x67\x41\x41\x50\x37\x41\x41\x41\x41\x55\x54\x63\x47\x39\x7A\x64\x4E\x6D\x62\x6C\x47\x6B\x41\x41\x45\x54\x45\x41\x41\x41\x43\x4B\x77\x41\x42\x41\x41\x41\x41\x41\x51\x41\x41\x2B\x39\x32\x6C\x76\x6C\x38\x50\x50\x50\x55\x41\x43\x77\x51\x41\x41\x41\x41\x41\x41\x4D\x74\x50\x46\x74\x4D\x41\x41\x41\x41\x41\x79\x30\x38\x57\x30\x2F\x2B\x41\x2F\x77\x41\x45\x41\x41\x55\x41\x41\x41\x41\x41\x43\x41\x41\x43\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x55\x41\x2F\x77\x41\x41\x41\x41\x53\x41\x2F\x34\x44\x39\x67\x41\x51\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x44\x54\x41\x41\x45\x41\x41\x41\x44\x55\x41\x43\x67\x41\x43\x67\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x67\x4B\x70\x41\x5A\x41\x41\x42\x51\x41\x45\x41\x67\x41\x43\x41\x41\x41\x41\x2F\x38\x41\x43\x41\x41\x49\x41\x41\x41\x41\x43\x41\x41\x41\x7A\x41\x4D\x77\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x41\x41\x41\x43\x67\x41\x41\x41\x48\x51\x41\x41\x41\x43\x67\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x52\x6C\x4E\x55\x55\x67\x42\x41\x41\x43\x44\x37\x41\x67\x4F\x41\x2F\x34\x41\x41\x41\x41\x55\x41\x41\x51\x41\x41\x41\x41\x48\x37\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x41\x41\x67\x41\x41\x45\x42\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x4B\x4F\x41\x41\x41\x43\x6A\x67\x41\x41\x41\x51\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x45\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x45\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4F\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x59\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x45\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x34\x41\x41\x41\x41\x45\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x34\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x67\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x42\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x53\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x67\x41\x41\x41\x41\x47\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x67\x41\x41\x67\x41\x49\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x44\x2F\x67\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x47\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x51\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x34\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x47\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x59\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4F\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x48\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x63\x41\x41\x4D\x41\x41\x51\x41\x41\x41\x42\x77\x41\x42\x41\x43\x41\x41\x41\x41\x41\x48\x41\x41\x51\x41\x41\x4D\x41\x44\x41\x42\x2B\x41\x50\x38\x42\x65\x42\x36\x65\x49\x42\x51\x67\x48\x69\x41\x67\x49\x43\x49\x67\x4A\x69\x41\x36\x49\x4B\x77\x68\x49\x76\x73\x43\x2F\x2F\x38\x41\x41\x41\x41\x67\x41\x4B\x45\x42\x65\x42\x36\x65\x49\x42\x51\x67\x47\x43\x41\x67\x49\x43\x49\x67\x4A\x69\x41\x35\x49\x4B\x77\x68\x49\x76\x73\x42\x2F\x2F\x2F\x2F\x34\x2F\x2F\x42\x2F\x30\x6E\x69\x4A\x4F\x43\x76\x34\x4B\x7A\x67\x71\x2B\x43\x71\x34\x4B\x66\x67\x6C\x65\x41\x6B\x33\x36\x38\x46\x30\x51\x41\x42\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x51\x59\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x51\x49\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x77\x51\x46\x42\x67\x63\x49\x43\x51\x6F\x4C\x44\x41\x30\x4F\x44\x78\x41\x52\x45\x68\x4D\x55\x46\x52\x59\x58\x47\x42\x6B\x61\x47\x78\x77\x64\x48\x68\x38\x67\x49\x53\x49\x6A\x4A\x43\x55\x6D\x4A\x79\x67\x70\x4B\x69\x73\x73\x4C\x53\x34\x76\x4D\x44\x45\x79\x4D\x7A\x51\x31\x4E\x6A\x63\x34\x4F\x54\x6F\x37\x50\x44\x30\x2B\x50\x30\x42\x42\x51\x6B\x4E\x45\x52\x55\x5A\x48\x53\x45\x6C\x4B\x53\x30\x78\x4E\x54\x6B\x39\x51\x55\x56\x4A\x54\x56\x46\x56\x57\x56\x31\x68\x5A\x57\x6C\x74\x63\x58\x56\x35\x66\x59\x47\x45\x41\x68\x59\x61\x49\x69\x70\x4B\x58\x6E\x61\x4B\x68\x6F\x36\x57\x6B\x70\x71\x69\x71\x71\x61\x75\x73\x72\x71\x32\x76\x73\x4C\x4B\x30\x73\x37\x57\x33\x74\x72\x75\x36\x76\x4C\x33\x4C\x63\x57\x4E\x6B\x61\x4D\x78\x33\x6F\x47\x39\x71\x30\x58\x56\x70\x41\x49\x65\x5A\x41\x48\x49\x41\x41\x47\x5A\x32\x41\x41\x41\x41\x41\x41\x42\x72\x65\x77\x43\x6E\x75\x59\x42\x69\x62\x51\x41\x41\x41\x41\x42\x73\x66\x4D\x30\x41\x67\x59\x53\x57\x41\x41\x41\x41\x77\x38\x6A\x4A\x78\x4D\x57\x34\x41\x4D\x44\x42\x41\x4E\x44\x4F\x7A\x39\x4C\x54\x41\x48\x6A\x47\x79\x67\x43\x44\x69\x34\x4B\x4D\x69\x59\x36\x50\x6B\x49\x32\x55\x6C\x51\x43\x54\x6D\x35\x79\x61\x41\x41\x41\x41\x63\x41\x41\x41\x41\x48\x6B\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x77\x41\x44\x41\x41\x4D\x41\x41\x77\x41\x48\x67\x41\x38\x41\x47\x77\x41\x6D\x67\x44\x4D\x41\x51\x77\x42\x48\x67\x46\x43\x41\x57\x59\x42\x69\x67\x47\x69\x41\x61\x34\x42\x75\x67\x48\x47\x41\x65\x67\x43\x47\x41\x49\x75\x41\x6D\x41\x43\x6C\x41\x4B\x34\x41\x74\x34\x44\x42\x67\x4D\x6B\x41\x31\x6F\x44\x68\x67\x4F\x61\x41\x36\x34\x44\x33\x41\x50\x77\x42\x42\x77\x45\x53\x41\x52\x75\x42\x49\x77\x45\x73\x67\x54\x57\x42\x50\x41\x46\x42\x67\x55\x61\x42\x54\x77\x46\x56\x41\x56\x6F\x42\x59\x41\x46\x72\x67\x57\x38\x42\x65\x41\x47\x42\x41\x59\x6B\x42\x6B\x41\x47\x62\x41\x61\x4F\x42\x72\x6F\x47\x7A\x41\x62\x6D\x42\x77\x34\x48\x4D\x67\x64\x73\x42\x35\x41\x48\x75\x41\x66\x4B\x42\x2F\x49\x49\x42\x41\x67\x6D\x43\x44\x49\x49\x52\x67\x68\x6D\x43\x49\x6F\x49\x72\x67\x6A\x51\x43\x50\x41\x4A\x44\x41\x6B\x77\x43\x56\x41\x4A\x59\x67\x6D\x43\x43\x61\x77\x4A\x76\x67\x6E\x69\x43\x66\x67\x4B\x47\x41\x6F\x2B\x43\x6D\x49\x4B\x67\x67\x71\x6B\x43\x73\x41\x4B\x31\x67\x72\x36\x43\x78\x51\x4C\x54\x41\x74\x73\x43\x34\x77\x4C\x73\x67\x76\x47\x43\x2B\x77\x4D\x43\x67\x77\x63\x44\x45\x34\x4D\x64\x67\x79\x73\x44\x4F\x41\x4D\x39\x41\x30\x6F\x44\x54\x6F\x4E\x5A\x41\x31\x34\x44\x62\x59\x4E\x78\x67\x33\x53\x44\x66\x6F\x4F\x42\x67\x34\x6B\x44\x6B\x49\x4F\x58\x67\x35\x34\x44\x6F\x6F\x4F\x70\x67\x37\x49\x44\x74\x51\x4F\x37\x67\x37\x2B\x44\x78\x77\x50\x57\x41\x2B\x4D\x44\x38\x59\x50\x2F\x42\x41\x6B\x45\x45\x34\x51\x64\x68\x43\x6B\x45\x4D\x67\x51\x38\x68\x45\x61\x45\x54\x77\x52\x63\x68\x47\x57\x45\x62\x67\x52\x34\x42\x49\x45\x45\x68\x77\x53\x4E\x42\x4A\x53\x45\x6D\x6F\x53\x6A\x68\x4B\x34\x45\x75\x59\x54\x45\x68\x4E\x43\x45\x32\x6F\x54\x6D\x42\x50\x51\x46\x41\x41\x55\x4A\x68\x52\x4D\x46\x47\x77\x55\x6B\x68\x54\x43\x46\x4F\x49\x56\x43\x42\x55\x77\x46\x56\x59\x56\x66\x42\x57\x69\x46\x63\x34\x57\x41\x42\x59\x73\x46\x6D\x49\x57\x69\x68\x61\x77\x46\x74\x59\x58\x41\x68\x63\x57\x46\x79\x67\x58\x51\x42\x64\x65\x46\x34\x59\x58\x6F\x68\x66\x4B\x46\x2F\x49\x59\x48\x68\x68\x47\x47\x48\x51\x59\x6B\x42\x69\x34\x47\x4E\x51\x59\x38\x42\x6B\x4D\x47\x53\x77\x5A\x57\x42\x6C\x32\x47\x61\x49\x5A\x30\x68\x6E\x30\x47\x67\x41\x61\x45\x68\x6F\x6B\x47\x6A\x59\x61\x53\x68\x70\x6F\x47\x6F\x59\x61\x70\x42\x71\x38\x47\x74\x41\x61\x36\x42\x73\x4B\x47\x79\x77\x62\x55\x42\x74\x71\x47\x34\x34\x62\x72\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x34\x41\x44\x67\x41\x41\x44\x41\x41\x41\x78\x45\x53\x45\x52\x41\x34\x41\x44\x67\x50\x79\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x49\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x41\x44\x45\x31\x4D\x78\x55\x44\x45\x54\x4D\x52\x67\x49\x43\x41\x67\x49\x41\x42\x41\x41\x4B\x41\x2F\x59\x41\x41\x41\x41\x51\x41\x41\x41\x49\x41\x41\x67\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x41\x41\x52\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x52\x4D\x78\x45\x7A\x45\x54\x4D\x52\x67\x49\x43\x41\x2F\x77\x43\x41\x67\x49\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x42\x38\x41\x41\x41\x45\x31\x49\x78\x55\x44\x45\x53\x4D\x31\x4D\x7A\x55\x6A\x4E\x54\x4D\x52\x4D\x78\x45\x7A\x45\x54\x4D\x52\x4D\x78\x55\x6A\x46\x54\x4D\x56\x49\x78\x45\x6A\x45\x53\x4D\x52\x41\x59\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x2F\x6F\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x50\x38\x41\x67\x49\x43\x41\x2F\x77\x41\x42\x41\x50\x38\x41\x41\x41\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x73\x41\x41\x43\x45\x31\x49\x54\x55\x68\x46\x53\x4D\x56\x45\x7A\x55\x7A\x46\x53\x55\x31\x49\x52\x55\x6C\x4E\x54\x4D\x56\x50\x51\x45\x7A\x4E\x54\x4D\x56\x49\x52\x55\x42\x41\x50\x38\x41\x41\x67\x43\x41\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x67\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x41\x44\x45\x31\x4D\x78\x55\x68\x45\x54\x4D\x52\x4A\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x55\x31\x45\x54\x4D\x52\x4A\x52\x45\x7A\x45\x53\x55\x31\x4D\x78\x57\x41\x41\x59\x43\x41\x2F\x67\x43\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x49\x41\x42\x41\x50\x38\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x73\x41\x48\x77\x41\x6A\x41\x43\x63\x41\x41\x44\x4D\x31\x49\x52\x55\x7A\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x42\x4E\x53\x4D\x31\x49\x7A\x55\x7A\x4E\x54\x4D\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x41\x51\x43\x41\x67\x50\x32\x41\x67\x41\x47\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x67\x49\x43\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x44\x2F\x41\x50\x38\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x67\x41\x42\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x45\x54\x55\x7A\x46\x54\x55\x52\x4D\x78\x47\x41\x67\x41\x49\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x49\x54\x55\x68\x46\x53\x55\x31\x4D\x78\x55\x6C\x45\x54\x4D\x5A\x41\x54\x55\x7A\x46\x54\x30\x42\x49\x52\x55\x42\x41\x41\x45\x41\x2F\x6F\x43\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x54\x55\x68\x46\x54\x30\x42\x4D\x78\x55\x31\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x53\x55\x31\x49\x52\x55\x42\x41\x49\x43\x41\x2F\x77\x43\x41\x2F\x6F\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x51\x41\x41\x41\x51\x41\x43\x41\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x45\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x57\x41\x41\x51\x43\x41\x2F\x6F\x41\x42\x41\x50\x36\x41\x67\x41\x45\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x49\x41\x43\x67\x41\x4D\x41\x41\x41\x73\x41\x41\x43\x55\x52\x49\x54\x55\x68\x45\x54\x4D\x52\x49\x52\x55\x68\x45\x51\x45\x41\x2F\x77\x41\x42\x41\x49\x41\x42\x41\x50\x38\x41\x67\x41\x45\x41\x67\x41\x45\x41\x2F\x77\x43\x41\x2F\x77\x41\x41\x41\x51\x41\x41\x2F\x34\x41\x41\x67\x41\x45\x41\x41\x41\x4D\x41\x41\x42\x55\x52\x4D\x78\x47\x41\x67\x41\x47\x41\x2F\x6F\x41\x41\x41\x51\x41\x41\x41\x59\x41\x43\x67\x41\x49\x41\x41\x41\x4D\x41\x41\x42\x45\x31\x49\x52\x55\x43\x67\x41\x47\x41\x67\x49\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x67\x41\x45\x41\x41\x41\x4D\x41\x41\x44\x45\x52\x4D\x78\x47\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x54\x55\x7A\x46\x54\x55\x52\x4D\x78\x6B\x42\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x57\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x38\x41\x46\x77\x41\x62\x41\x41\x41\x7A\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x51\x45\x52\x4D\x78\x45\x7A\x46\x53\x4D\x56\x49\x52\x45\x6A\x4E\x54\x4D\x31\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x77\x43\x41\x2F\x6F\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x41\x47\x41\x67\x49\x44\x2F\x41\x41\x4B\x41\x2F\x6F\x43\x41\x67\x41\x47\x41\x67\x49\x44\x39\x67\x41\x4B\x41\x67\x49\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x43\x77\x41\x41\x4D\x54\x55\x68\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x45\x53\x45\x56\x41\x51\x43\x41\x67\x49\x41\x42\x41\x49\x41\x43\x41\x49\x43\x41\x2F\x51\x43\x41\x41\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x47\x77\x41\x41\x4D\x52\x45\x7A\x46\x53\x45\x31\x4D\x78\x45\x42\x4E\x54\x4D\x56\x50\x51\x45\x68\x46\x51\x45\x31\x4D\x78\x55\x46\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x67\x49\x44\x2B\x41\x49\x41\x42\x41\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x41\x42\x41\x49\x43\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x43\x41\x67\x41\x41\x41\x41\x41\x41\x48\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x47\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x31\x4D\x78\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x31\x4D\x78\x55\x46\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x36\x41\x41\x51\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x45\x77\x41\x41\x45\x7A\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x54\x45\x53\x45\x52\x4D\x78\x55\x68\x45\x53\x4D\x31\x49\x52\x47\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x41\x51\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x2F\x59\x41\x42\x41\x41\x45\x41\x67\x41\x47\x41\x67\x50\x79\x41\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x52\x4D\x78\x45\x42\x45\x53\x45\x56\x49\x52\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x32\x41\x41\x6F\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x41\x42\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4E\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x55\x68\x46\x53\x45\x5A\x41\x54\x55\x7A\x46\x54\x30\x42\x49\x52\x57\x41\x41\x59\x43\x41\x2F\x59\x43\x41\x41\x59\x44\x2B\x67\x49\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x43\x41\x49\x43\x41\x2F\x77\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x44\x77\x41\x41\x49\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x55\x31\x45\x53\x45\x56\x49\x78\x45\x68\x45\x51\x45\x41\x67\x49\x44\x2B\x67\x49\x41\x43\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x41\x45\x41\x67\x41\x45\x41\x2F\x6F\x41\x41\x41\x41\x63\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x54\x41\x42\x63\x41\x41\x44\x4D\x31\x49\x52\x55\x39\x41\x54\x4D\x56\x41\x52\x45\x7A\x45\x51\x45\x31\x49\x54\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x41\x49\x44\x2B\x41\x49\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x41\x59\x41\x42\x41\x50\x38\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x2F\x67\x41\x43\x41\x49\x43\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x43\x41\x41\x77\x41\x41\x41\x77\x41\x48\x41\x41\x41\x78\x45\x54\x4D\x52\x41\x78\x45\x7A\x45\x59\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x43\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x2F\x34\x41\x41\x67\x41\x4D\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x46\x52\x45\x7A\x45\x51\x4D\x52\x4D\x78\x47\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x4B\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x41\x41\x63\x41\x41\x41\x41\x41\x41\x67\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x41\x41\x68\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x41\x59\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x49\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x50\x51\x45\x68\x46\x51\x45\x31\x49\x52\x55\x43\x67\x50\x32\x41\x41\x6F\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x63\x41\x41\x41\x41\x41\x41\x67\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x41\x41\x78\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x67\x49\x43\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x47\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x43\x45\x31\x4D\x78\x55\x44\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x51\x45\x31\x4D\x78\x55\x46\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x41\x67\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x44\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x4E\x78\x45\x68\x45\x54\x4D\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x49\x41\x2F\x59\x43\x41\x67\x41\x45\x41\x67\x49\x44\x39\x67\x41\x49\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x49\x41\x42\x67\x50\x38\x41\x41\x59\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x4C\x41\x41\x38\x41\x41\x44\x45\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x49\x78\x45\x68\x47\x51\x45\x31\x49\x52\x57\x41\x41\x59\x43\x41\x67\x50\x36\x41\x41\x59\x41\x44\x41\x50\x38\x41\x41\x51\x44\x39\x41\x41\x47\x41\x2F\x6F\x41\x44\x41\x49\x43\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x45\x77\x41\x41\x4A\x52\x45\x7A\x45\x51\x4D\x31\x4D\x78\x55\x42\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x49\x52\x55\x43\x41\x49\x43\x41\x67\x50\x32\x41\x41\x67\x44\x2B\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x41\x42\x67\x50\x36\x41\x41\x67\x43\x41\x67\x50\x32\x41\x41\x34\x43\x41\x67\x49\x44\x2B\x67\x49\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4A\x54\x55\x68\x46\x59\x41\x42\x67\x49\x44\x39\x67\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x43\x67\x50\x32\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x41\x41\x43\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4C\x41\x41\x41\x6C\x45\x54\x4D\x52\x42\x52\x45\x68\x46\x53\x45\x52\x49\x52\x55\x43\x41\x49\x44\x39\x67\x41\x49\x41\x2F\x6F\x41\x42\x67\x49\x41\x43\x67\x50\x32\x41\x67\x41\x4F\x41\x67\x50\x32\x41\x67\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x73\x41\x41\x44\x45\x52\x49\x52\x55\x68\x46\x53\x45\x56\x49\x52\x45\x68\x46\x51\x4B\x41\x2F\x67\x41\x42\x41\x50\x38\x41\x41\x67\x41\x44\x67\x49\x43\x41\x67\x50\x36\x41\x67\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x43\x51\x41\x41\x4D\x52\x45\x68\x46\x53\x45\x56\x49\x52\x55\x68\x45\x51\x4B\x41\x2F\x67\x41\x42\x41\x50\x38\x41\x41\x34\x43\x41\x67\x49\x44\x2B\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x51\x41\x4E\x41\x42\x45\x41\x41\x44\x4D\x31\x49\x52\x55\x31\x45\x53\x45\x31\x49\x52\x45\x68\x45\x54\x4D\x5A\x41\x54\x55\x68\x46\x59\x41\x42\x67\x50\x38\x41\x41\x59\x44\x39\x67\x49\x41\x43\x41\x49\x43\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x67\x49\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x43\x77\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x6A\x45\x53\x45\x52\x67\x41\x47\x41\x67\x49\x44\x2B\x67\x41\x4F\x41\x2F\x77\x41\x42\x41\x50\x79\x41\x41\x67\x44\x2B\x41\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x47\x41\x41\x34\x41\x41\x43\x77\x41\x41\x4D\x54\x55\x7A\x45\x53\x4D\x31\x49\x52\x55\x6A\x45\x54\x4D\x56\x67\x49\x41\x42\x67\x49\x43\x41\x67\x41\x4B\x41\x67\x49\x44\x39\x67\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x52\x4D\x78\x47\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x4D\x41\x2F\x51\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x42\x4D\x41\x46\x77\x41\x41\x49\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x44\x4E\x54\x4D\x56\x41\x52\x45\x7A\x45\x53\x45\x56\x49\x52\x45\x42\x4E\x54\x4D\x56\x41\x67\x43\x41\x2F\x77\x43\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x41\x50\x38\x41\x41\x59\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x41\x42\x41\x49\x43\x41\x2F\x59\x41\x44\x67\x50\x38\x41\x67\x50\x34\x41\x41\x77\x43\x41\x67\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x42\x51\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x56\x67\x41\x49\x41\x41\x34\x44\x39\x41\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x77\x41\x54\x41\x41\x41\x42\x4E\x54\x4D\x56\x41\x52\x45\x7A\x46\x54\x4D\x56\x49\x78\x45\x68\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x45\x51\x45\x41\x67\x50\x36\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x49\x41\x43\x41\x49\x43\x41\x2F\x67\x41\x44\x67\x49\x43\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x2F\x49\x41\x41\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x77\x41\x54\x41\x41\x41\x42\x4E\x54\x4D\x56\x41\x52\x45\x7A\x46\x54\x4D\x56\x49\x78\x45\x68\x45\x53\x4D\x31\x4D\x78\x45\x7A\x45\x51\x45\x41\x67\x50\x36\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x49\x41\x43\x41\x49\x43\x41\x2F\x67\x41\x44\x67\x49\x43\x41\x2F\x59\x41\x42\x67\x49\x41\x42\x67\x50\x79\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x41\x41\x45\x31\x4D\x78\x55\x42\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x41\x67\x43\x41\x2F\x59\x41\x43\x41\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x4B\x41\x67\x49\x44\x39\x67\x41\x4F\x41\x67\x49\x43\x41\x2F\x67\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x45\x54\x4D\x52\x4A\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x57\x41\x41\x51\x43\x41\x67\x50\x38\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x49\x41\x43\x41\x50\x34\x41\x41\x67\x43\x41\x67\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x45\x51\x41\x41\x49\x52\x45\x7A\x45\x51\x4D\x31\x4D\x78\x55\x42\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x41\x67\x43\x41\x67\x49\x44\x39\x67\x41\x49\x41\x2F\x6F\x41\x42\x67\x50\x36\x41\x41\x67\x44\x2B\x41\x41\x4B\x41\x67\x49\x44\x39\x67\x41\x4F\x41\x67\x49\x43\x41\x2F\x67\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x67\x43\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x48\x41\x41\x41\x68\x45\x53\x45\x31\x49\x52\x55\x68\x45\x51\x45\x41\x2F\x77\x41\x43\x67\x50\x38\x41\x41\x77\x43\x41\x67\x50\x30\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x41\x77\x44\x39\x41\x41\x4D\x41\x2F\x51\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x68\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x45\x42\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x42\x41\x41\x49\x41\x2F\x67\x41\x43\x41\x50\x34\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x73\x41\x45\x77\x41\x41\x41\x54\x55\x7A\x46\x51\x45\x52\x4D\x78\x45\x7A\x46\x53\x4D\x56\x49\x54\x55\x6A\x4E\x54\x4D\x52\x4D\x78\x45\x42\x41\x49\x44\x2B\x67\x49\x43\x41\x67\x41\x47\x41\x67\x49\x43\x41\x41\x51\x43\x41\x67\x50\x38\x41\x41\x34\x44\x39\x67\x49\x43\x41\x67\x49\x41\x43\x67\x50\x79\x41\x41\x41\x41\x41\x41\x41\x6B\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x42\x38\x41\x49\x77\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x50\x34\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x49\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x55\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x55\x41\x43\x51\x41\x4E\x41\x42\x45\x41\x46\x77\x41\x41\x4D\x52\x45\x7A\x46\x53\x45\x56\x41\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x50\x51\x45\x68\x4E\x53\x45\x52\x67\x41\x48\x2F\x2F\x67\x47\x41\x67\x49\x44\x2B\x41\x41\x4B\x41\x41\x51\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2F\x41\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x47\x41\x41\x34\x41\x41\x42\x77\x41\x41\x4D\x52\x45\x68\x46\x53\x45\x52\x49\x52\x55\x42\x67\x50\x38\x41\x41\x51\x41\x44\x67\x49\x44\x39\x67\x49\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x68\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x6C\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x51\x49\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x59\x41\x44\x67\x41\x41\x48\x41\x41\x41\x78\x4E\x53\x45\x52\x49\x54\x55\x68\x45\x51\x45\x41\x2F\x77\x41\x42\x67\x49\x41\x43\x67\x49\x44\x38\x67\x41\x41\x41\x41\x41\x55\x41\x41\x41\x49\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x42\x45\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x50\x34\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x51\x41\x41\x41\x41\x41\x43\x67\x41\x43\x41\x41\x41\x4D\x41\x41\x44\x45\x31\x49\x52\x55\x43\x67\x49\x43\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x67\x41\x42\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x45\x7A\x55\x7A\x46\x53\x55\x52\x4D\x78\x47\x41\x67\x50\x38\x41\x67\x41\x49\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x41\x50\x51\x45\x7A\x48\x51\x45\x31\x49\x54\x55\x68\x4E\x53\x45\x31\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x42\x45\x41\x41\x43\x55\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x52\x45\x7A\x45\x54\x4D\x56\x49\x78\x45\x68\x46\x51\x49\x41\x67\x50\x36\x41\x41\x51\x44\x2B\x41\x49\x43\x41\x67\x41\x47\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x2F\x67\x41\x44\x67\x50\x36\x41\x67\x50\x38\x41\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4A\x54\x55\x68\x46\x59\x41\x42\x67\x49\x44\x39\x67\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x42\x45\x41\x41\x44\x55\x52\x4D\x78\x6B\x42\x4E\x53\x45\x56\x41\x54\x55\x68\x45\x53\x4D\x31\x4D\x78\x45\x7A\x45\x59\x41\x42\x41\x50\x38\x41\x41\x59\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x41\x49\x41\x42\x67\x50\x79\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x55\x68\x4E\x54\x4D\x52\x49\x52\x55\x52\x4E\x53\x45\x56\x67\x41\x49\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x49\x43\x41\x67\x41\x47\x41\x67\x49\x44\x2F\x41\x49\x41\x42\x67\x49\x43\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x49\x41\x41\x34\x41\x41\x43\x77\x41\x50\x41\x41\x41\x7A\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x46\x53\x45\x56\x49\x52\x6B\x42\x4E\x53\x45\x56\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x41\x49\x41\x67\x49\x43\x41\x67\x50\x34\x41\x41\x77\x43\x41\x67\x41\x41\x41\x41\x41\x4D\x41\x41\x50\x2B\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x63\x41\x45\x51\x41\x41\x46\x54\x55\x68\x46\x51\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x31\x49\x52\x45\x68\x4E\x53\x45\x52\x41\x67\x44\x2B\x41\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x49\x41\x67\x49\x43\x41\x41\x59\x41\x42\x41\x50\x38\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x67\x50\x32\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x44\x77\x41\x41\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x45\x54\x4D\x52\x4D\x78\x55\x6A\x45\x51\x49\x41\x67\x50\x36\x41\x41\x51\x44\x2B\x41\x49\x43\x41\x67\x41\x49\x41\x2F\x67\x41\x43\x41\x49\x43\x41\x2F\x67\x41\x44\x67\x50\x36\x41\x67\x50\x36\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x43\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x78\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x59\x43\x41\x67\x41\x4B\x41\x2F\x59\x41\x44\x41\x49\x43\x41\x41\x41\x41\x45\x41\x41\x44\x2F\x67\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x41\x46\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x43\x67\x50\x32\x41\x41\x77\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x46\x77\x41\x41\x49\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x44\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x51\x45\x52\x4D\x78\x45\x7A\x46\x53\x4D\x52\x41\x59\x43\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x41\x41\x4F\x41\x2F\x67\x43\x41\x2F\x77\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x42\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x4D\x7A\x55\x7A\x46\x53\x55\x52\x4D\x78\x47\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x4D\x41\x2F\x51\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4E\x41\x42\x45\x41\x41\x41\x45\x52\x4D\x78\x45\x54\x45\x54\x4D\x52\x49\x52\x45\x68\x46\x53\x4D\x52\x41\x54\x55\x7A\x46\x51\x45\x41\x67\x49\x43\x41\x2F\x59\x41\x42\x41\x49\x41\x42\x41\x49\x41\x42\x41\x41\x45\x41\x2F\x77\x44\x2F\x41\x41\x49\x41\x2F\x67\x41\x43\x67\x49\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x41\x41\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x43\x51\x41\x41\x49\x52\x45\x7A\x45\x53\x45\x52\x49\x52\x55\x68\x45\x51\x49\x41\x67\x50\x32\x41\x41\x67\x44\x2B\x67\x41\x49\x41\x2F\x67\x41\x43\x67\x49\x44\x2B\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x41\x41\x41\x77\x41\x41\x2F\x34\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x44\x77\x41\x54\x41\x41\x41\x42\x45\x54\x4D\x52\x41\x52\x45\x7A\x46\x54\x4D\x56\x49\x78\x55\x68\x46\x53\x45\x52\x45\x7A\x55\x68\x46\x51\x49\x41\x67\x50\x32\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x49\x41\x42\x41\x41\x45\x41\x41\x51\x44\x2F\x41\x50\x36\x41\x41\x77\x43\x41\x67\x49\x43\x41\x2F\x77\x41\x43\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x50\x2B\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x63\x41\x45\x77\x41\x41\x47\x51\x45\x7A\x47\x51\x45\x31\x49\x52\x55\x54\x45\x53\x45\x31\x49\x54\x55\x6A\x4E\x54\x4D\x31\x4D\x78\x47\x41\x41\x51\x43\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x41\x45\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x44\x39\x67\x41\x45\x41\x67\x49\x43\x41\x67\x50\x30\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x73\x41\x44\x77\x41\x41\x41\x54\x55\x7A\x46\x51\x45\x52\x4D\x78\x55\x7A\x46\x53\x4D\x52\x45\x7A\x55\x68\x46\x51\x49\x41\x67\x50\x32\x41\x67\x49\x43\x41\x67\x41\x45\x41\x41\x59\x43\x41\x67\x50\x36\x41\x41\x6F\x43\x41\x67\x50\x36\x41\x41\x67\x43\x41\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x78\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x55\x31\x49\x52\x55\x6C\x4E\x54\x4D\x56\x50\x51\x45\x68\x46\x51\x49\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x41\x49\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x59\x41\x44\x67\x41\x41\x44\x41\x41\x38\x41\x41\x43\x45\x31\x4D\x78\x55\x6C\x45\x53\x4D\x31\x4D\x78\x45\x7A\x45\x54\x4D\x56\x49\x78\x45\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x59\x43\x41\x41\x51\x44\x2F\x41\x49\x44\x2B\x67\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x43\x51\x41\x41\x4E\x52\x45\x7A\x45\x52\x55\x31\x49\x52\x45\x7A\x45\x59\x41\x42\x67\x49\x43\x41\x41\x67\x44\x2B\x41\x49\x43\x41\x41\x67\x44\x39\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x68\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x41\x43\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x4E\x41\x41\x41\x31\x45\x54\x4D\x52\x46\x54\x55\x7A\x45\x54\x4D\x52\x4D\x78\x45\x7A\x45\x59\x43\x41\x67\x49\x43\x41\x67\x41\x49\x41\x2F\x67\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x43\x41\x50\x32\x41\x41\x41\x41\x41\x43\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x6A\x41\x41\x41\x78\x4E\x54\x4D\x56\x49\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x57\x41\x41\x59\x43\x41\x2F\x67\x43\x41\x67\x49\x44\x2F\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x4D\x41\x41\x50\x2B\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x63\x41\x44\x77\x41\x41\x46\x54\x55\x68\x46\x51\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x31\x49\x52\x45\x7A\x45\x51\x49\x41\x2F\x67\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x41\x47\x41\x41\x59\x44\x2B\x67\x50\x38\x41\x67\x49\x41\x42\x67\x50\x32\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x42\x77\x41\x4C\x41\x42\x4D\x41\x41\x44\x45\x31\x4D\x7A\x55\x7A\x46\x53\x45\x56\x41\x54\x55\x7A\x46\x54\x30\x42\x49\x54\x55\x68\x46\x53\x4D\x56\x67\x49\x41\x42\x67\x50\x36\x41\x67\x50\x36\x41\x41\x6F\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x49\x54\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x47\x51\x45\x31\x49\x52\x55\x42\x41\x41\x45\x41\x2F\x6F\x43\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x49\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x41\x44\x45\x52\x4D\x78\x45\x44\x45\x54\x4D\x52\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x49\x41\x41\x59\x44\x2B\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x49\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x78\x4E\x53\x45\x56\x4E\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x55\x6C\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x41\x67\x49\x44\x2F\x41\x49\x44\x2B\x67\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x6F\x41\x44\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x42\x45\x31\x4D\x78\x55\x68\x4E\x53\x45\x56\x4A\x54\x55\x68\x46\x53\x45\x31\x4D\x78\x57\x41\x41\x51\x41\x42\x41\x50\x34\x41\x41\x51\x41\x42\x41\x49\x41\x43\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x41\x67\x41\x4D\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x4D\x52\x45\x7A\x45\x51\x4D\x31\x4D\x78\x57\x41\x67\x49\x41\x43\x41\x50\x34\x41\x41\x6F\x43\x41\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x42\x38\x41\x41\x41\x45\x31\x4D\x78\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x51\x45\x31\x49\x7A\x55\x7A\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x46\x54\x4D\x56\x49\x78\x45\x7A\x46\x53\x4D\x56\x41\x67\x43\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x6F\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x45\x41\x67\x49\x44\x2B\x41\x49\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x2F\x6F\x43\x41\x67\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x41\x4D\x54\x55\x7A\x45\x53\x4D\x31\x4D\x78\x45\x7A\x45\x53\x45\x56\x49\x52\x45\x68\x46\x51\x4D\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x67\x49\x43\x41\x2F\x6F\x41\x42\x41\x49\x41\x42\x41\x49\x41\x42\x41\x50\x38\x41\x67\x50\x38\x41\x67\x41\x4B\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x43\x41\x41\x41\x41\x49\x41\x43\x41\x41\x4D\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x41\x50\x51\x45\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x57\x41\x41\x51\x43\x41\x2F\x6F\x41\x42\x41\x50\x36\x41\x67\x41\x45\x41\x67\x50\x36\x41\x41\x51\x44\x2B\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x42\x38\x41\x49\x77\x41\x41\x49\x54\x55\x6A\x4E\x54\x4D\x31\x49\x7A\x55\x7A\x4E\x54\x4D\x56\x4D\x78\x55\x6A\x46\x54\x4D\x56\x49\x78\x55\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x41\x51\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x43\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x43\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x78\x45\x54\x4D\x52\x41\x78\x45\x7A\x45\x59\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x43\x41\x41\x47\x41\x2F\x6F\x41\x41\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x41\x4D\x54\x55\x68\x46\x54\x30\x42\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x49\x52\x55\x42\x67\x49\x44\x2B\x67\x41\x45\x41\x2F\x6F\x43\x41\x41\x51\x43\x41\x2F\x6F\x41\x42\x41\x50\x36\x41\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x43\x41\x41\x41\x44\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x52\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x51\x45\x41\x67\x41\x45\x41\x41\x77\x43\x41\x67\x49\x43\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x6F\x41\x41\x44\x51\x41\x52\x41\x42\x73\x41\x41\x44\x4D\x31\x49\x78\x45\x7A\x45\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x54\x4D\x56\x4E\x52\x45\x7A\x45\x53\x55\x52\x49\x7A\x55\x68\x46\x53\x4D\x56\x49\x78\x57\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x34\x41\x67\x41\x49\x41\x67\x49\x43\x41\x41\x59\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x42\x41\x41\x41\x43\x41\x41\x47\x41\x41\x34\x41\x41\x43\x51\x41\x41\x45\x54\x55\x7A\x4E\x53\x4D\x31\x49\x52\x55\x7A\x45\x59\x43\x41\x41\x51\x43\x41\x41\x67\x43\x41\x67\x49\x43\x41\x2F\x77\x41\x41\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x6A\x41\x43\x63\x41\x41\x43\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x42\x41\x49\x43\x41\x67\x50\x34\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x6F\x41\x42\x67\x41\x41\x46\x41\x41\x41\x68\x45\x53\x45\x31\x49\x52\x45\x43\x41\x50\x34\x41\x41\x6F\x41\x42\x41\x49\x44\x2B\x67\x41\x41\x41\x41\x51\x41\x41\x41\x67\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x41\x42\x45\x31\x49\x52\x55\x43\x67\x41\x49\x41\x67\x49\x41\x41\x41\x77\x41\x41\x41\x51\x41\x44\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x5A\x41\x41\x41\x42\x4E\x53\x4D\x56\x49\x52\x45\x7A\x45\x52\x55\x31\x4D\x78\x45\x7A\x4E\x53\x45\x31\x49\x52\x55\x6A\x46\x54\x4D\x31\x4D\x78\x45\x6A\x46\x51\x49\x41\x67\x50\x36\x41\x67\x49\x43\x41\x2F\x77\x41\x43\x41\x49\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x50\x36\x41\x67\x41\x41\x42\x41\x41\x41\x44\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x41\x45\x54\x55\x68\x46\x51\x4B\x41\x41\x77\x43\x41\x67\x41\x41\x45\x41\x41\x41\x43\x41\x41\x47\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x41\x45\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x59\x43\x41\x2F\x77\x43\x41\x67\x49\x44\x2F\x41\x49\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x34\x41\x41\x41\x77\x41\x50\x41\x41\x41\x78\x4E\x53\x45\x56\x41\x52\x45\x68\x4E\x53\x45\x52\x49\x52\x45\x68\x46\x53\x45\x52\x41\x77\x44\x2B\x41\x50\x38\x41\x41\x51\x41\x42\x41\x41\x45\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x41\x51\x43\x41\x41\x51\x44\x2F\x41\x49\x44\x2F\x41\x41\x41\x42\x41\x41\x41\x42\x41\x41\x49\x41\x41\x34\x41\x41\x45\x51\x41\x41\x47\x51\x45\x7A\x4E\x54\x4D\x31\x49\x54\x55\x68\x46\x54\x4D\x56\x49\x78\x55\x6A\x46\x53\x45\x56\x67\x49\x44\x2F\x41\x41\x47\x41\x67\x49\x43\x41\x41\x51\x41\x42\x41\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x45\x41\x41\x41\x45\x41\x41\x67\x41\x44\x67\x41\x41\x50\x41\x41\x41\x52\x4E\x53\x45\x31\x49\x7A\x55\x7A\x4E\x53\x45\x31\x49\x52\x55\x7A\x45\x53\x4D\x56\x41\x51\x43\x41\x67\x50\x38\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x6F\x43\x41\x41\x41\x41\x43\x41\x41\x41\x43\x41\x41\x45\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x52\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x59\x43\x41\x41\x67\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x41\x41\x42\x41\x41\x41\x41\x67\x41\x4F\x41\x41\x34\x41\x41\x44\x77\x41\x41\x50\x51\x45\x7A\x45\x53\x45\x52\x49\x52\x45\x68\x45\x53\x4D\x56\x49\x52\x55\x6A\x46\x59\x41\x42\x41\x41\x45\x41\x41\x51\x43\x41\x2F\x6F\x43\x41\x67\x49\x41\x43\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x42\x41\x41\x44\x67\x41\x41\x44\x41\x42\x45\x41\x41\x41\x45\x52\x49\x78\x45\x54\x45\x53\x45\x31\x49\x78\x45\x7A\x4E\x53\x45\x52\x49\x52\x45\x6A\x45\x51\x47\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x41\x34\x44\x2F\x41\x49\x41\x43\x41\x41\x45\x41\x2F\x77\x44\x2B\x41\x41\x47\x41\x67\x41\x45\x41\x67\x50\x79\x41\x41\x77\x44\x39\x41\x41\x41\x41\x41\x51\x41\x41\x41\x51\x41\x42\x41\x41\x47\x41\x41\x41\x4D\x41\x41\x42\x45\x31\x49\x52\x55\x42\x41\x41\x45\x41\x67\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x42\x67\x41\x49\x41\x41\x41\x4D\x41\x42\x77\x41\x4E\x41\x41\x41\x78\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x55\x31\x4D\x7A\x55\x7A\x45\x51\x45\x41\x67\x50\x36\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x38\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x49\x41\x41\x51\x41\x44\x67\x41\x41\x46\x41\x41\x41\x54\x45\x53\x4D\x31\x49\x52\x47\x41\x67\x41\x45\x41\x41\x67\x41\x42\x41\x49\x44\x2B\x67\x41\x41\x41\x42\x41\x41\x41\x41\x67\x41\x42\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x42\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x6A\x41\x43\x63\x41\x41\x44\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x57\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x67\x49\x44\x2B\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4E\x41\x42\x45\x41\x46\x51\x41\x5A\x41\x42\x30\x41\x41\x44\x45\x31\x4D\x78\x55\x31\x45\x54\x4D\x52\x42\x54\x55\x6A\x45\x53\x45\x52\x41\x54\x55\x7A\x46\x54\x55\x52\x4D\x78\x45\x6C\x45\x54\x4D\x52\x4A\x54\x55\x7A\x46\x59\x43\x41\x41\x51\x43\x41\x41\x51\x44\x2B\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x49\x43\x41\x41\x51\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x49\x41\x42\x41\x50\x38\x41\x67\x49\x43\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4A\x41\x41\x30\x41\x45\x51\x41\x56\x41\x42\x6B\x41\x48\x51\x41\x68\x41\x41\x41\x78\x4E\x54\x4D\x56\x49\x52\x45\x7A\x46\x54\x4D\x56\x4A\x52\x45\x7A\x45\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x53\x55\x52\x4D\x78\x45\x6C\x4E\x54\x4D\x56\x67\x41\x45\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x41\x49\x44\x2B\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x49\x41\x42\x41\x50\x38\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x6B\x41\x44\x51\x41\x62\x41\x42\x38\x41\x41\x44\x45\x31\x4D\x78\x55\x68\x4E\x53\x4D\x52\x49\x52\x45\x42\x45\x54\x4D\x52\x41\x52\x45\x6A\x4E\x54\x4D\x31\x49\x78\x45\x68\x45\x54\x4D\x56\x49\x78\x45\x42\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x41\x45\x41\x2F\x77\x43\x41\x2F\x6F\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2B\x67\x41\x49\x41\x41\x51\x44\x2F\x41\x50\x36\x41\x41\x51\x43\x41\x67\x41\x45\x41\x2F\x6F\x43\x41\x2F\x77\x41\x43\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x41\x4D\x7A\x55\x68\x46\x54\x30\x42\x4D\x78\x55\x68\x45\x54\x4D\x5A\x41\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x44\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x50\x32\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x41\x51\x43\x41\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x55\x41\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x44\x45\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x49\x78\x45\x68\x47\x51\x45\x31\x49\x52\x55\x42\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x59\x41\x42\x67\x49\x43\x41\x2F\x6F\x41\x42\x67\x50\x38\x41\x67\x50\x38\x41\x67\x41\x4D\x41\x2F\x77\x41\x42\x41\x50\x30\x41\x41\x59\x44\x2B\x67\x41\x4D\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x55\x41\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x44\x45\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x49\x78\x45\x68\x47\x51\x45\x31\x49\x52\x55\x42\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x59\x41\x42\x67\x49\x43\x41\x2F\x6F\x41\x42\x67\x50\x38\x41\x67\x49\x41\x44\x41\x50\x38\x41\x41\x51\x44\x39\x41\x41\x47\x41\x2F\x6F\x41\x44\x41\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x51\x41\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x41\x41\x78\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x53\x4D\x52\x49\x52\x6B\x42\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x49\x44\x2B\x67\x41\x47\x41\x2F\x6F\x43\x41\x67\x49\x44\x2F\x41\x49\x41\x44\x41\x50\x38\x41\x41\x51\x44\x39\x41\x41\x47\x41\x2F\x6F\x41\x44\x41\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x67\x41\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x6A\x45\x53\x45\x5A\x41\x54\x55\x68\x46\x51\x45\x31\x49\x52\x57\x41\x41\x59\x43\x41\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x41\x77\x44\x2F\x41\x41\x45\x41\x2F\x51\x41\x42\x67\x50\x36\x41\x41\x77\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x67\x41\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x78\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x53\x4D\x52\x49\x52\x6B\x42\x4E\x53\x45\x56\x41\x54\x55\x68\x46\x54\x4D\x31\x49\x52\x57\x41\x41\x59\x43\x41\x67\x50\x36\x41\x41\x59\x44\x2B\x41\x41\x45\x41\x67\x41\x45\x41\x41\x77\x44\x2F\x41\x41\x45\x41\x2F\x51\x41\x42\x67\x50\x36\x41\x41\x77\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x67\x41\x41\x4C\x41\x42\x4D\x41\x46\x77\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x6A\x45\x53\x45\x5A\x41\x6A\x4D\x56\x4D\x7A\x55\x7A\x45\x51\x45\x31\x4D\x78\x57\x41\x41\x59\x43\x41\x67\x50\x36\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x77\x44\x2F\x41\x41\x45\x41\x2F\x51\x41\x42\x67\x50\x36\x41\x41\x77\x41\x42\x41\x49\x43\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x42\x55\x41\x41\x44\x45\x52\x4D\x78\x55\x7A\x4E\x53\x4D\x31\x49\x52\x55\x68\x46\x54\x4D\x56\x49\x78\x45\x68\x46\x53\x45\x52\x49\x78\x47\x41\x67\x49\x41\x43\x41\x50\x38\x41\x67\x49\x41\x42\x41\x50\x36\x41\x67\x41\x4D\x41\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x6F\x43\x41\x41\x67\x44\x2B\x41\x41\x41\x41\x41\x41\x41\x48\x41\x41\x44\x2F\x41\x41\x4B\x41\x41\x34\x41\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x41\x41\x54\x55\x6A\x4E\x53\x45\x56\x4D\x78\x55\x44\x4E\x54\x4D\x56\x4A\x54\x55\x68\x46\x54\x30\x42\x4D\x78\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x53\x55\x31\x49\x52\x55\x42\x67\x49\x41\x42\x41\x49\x43\x41\x67\x50\x34\x41\x41\x59\x43\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x43\x41\x50\x34\x41\x41\x59\x43\x41\x67\x49\x43\x41\x67\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x51\x41\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x45\x52\x49\x52\x55\x68\x46\x53\x45\x56\x49\x52\x45\x68\x46\x51\x45\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x41\x6F\x44\x2B\x41\x41\x45\x41\x2F\x77\x41\x43\x41\x50\x36\x41\x67\x50\x38\x41\x67\x41\x4F\x41\x67\x49\x43\x41\x2F\x6F\x43\x41\x42\x41\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x51\x41\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x45\x52\x49\x52\x55\x68\x46\x53\x45\x56\x49\x52\x45\x68\x46\x51\x45\x31\x4D\x78\x55\x39\x41\x54\x4D\x56\x41\x6F\x44\x2B\x41\x41\x45\x41\x2F\x77\x41\x43\x41\x50\x36\x41\x67\x49\x41\x44\x67\x49\x43\x41\x67\x50\x36\x41\x67\x41\x51\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x46\x41\x41\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x78\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x49\x52\x55\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x43\x67\x50\x34\x41\x41\x51\x44\x2F\x41\x41\x49\x41\x2F\x67\x43\x41\x67\x49\x44\x2F\x41\x49\x41\x44\x67\x49\x43\x41\x67\x50\x36\x41\x67\x41\x51\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x78\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x49\x52\x55\x42\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x51\x4B\x41\x2F\x67\x41\x42\x41\x50\x38\x41\x41\x67\x44\x39\x67\x41\x45\x41\x67\x41\x45\x41\x41\x34\x43\x41\x67\x49\x44\x2B\x67\x49\x41\x45\x41\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x42\x41\x41\x51\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x41\x7A\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x6F\x44\x39\x67\x41\x4D\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x77\x43\x41\x41\x41\x41\x42\x67\x41\x51\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x41\x7A\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x54\x30\x42\x4D\x78\x57\x41\x67\x49\x43\x41\x67\x41\x4B\x41\x2F\x59\x41\x44\x41\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x42\x67\x41\x51\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x44\x4D\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x6F\x44\x39\x67\x41\x4D\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x42\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x41\x7A\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x57\x41\x67\x50\x38\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4D\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x76\x2B\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x45\x77\x41\x41\x4A\x52\x45\x7A\x45\x51\x55\x52\x49\x7A\x55\x7A\x45\x53\x45\x56\x49\x52\x45\x68\x46\x53\x45\x52\x49\x52\x55\x43\x41\x49\x44\x39\x67\x49\x43\x41\x41\x67\x44\x2B\x67\x41\x45\x41\x2F\x77\x41\x42\x67\x49\x41\x43\x67\x50\x32\x41\x67\x41\x47\x41\x67\x41\x47\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x43\x77\x41\x54\x41\x42\x63\x41\x41\x41\x45\x31\x4D\x78\x55\x42\x45\x54\x4D\x56\x4D\x78\x55\x6A\x45\x53\x45\x52\x49\x7A\x55\x7A\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x41\x67\x50\x36\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x49\x44\x2B\x41\x41\x47\x41\x41\x67\x43\x41\x67\x50\x34\x41\x41\x34\x43\x41\x67\x50\x32\x41\x41\x59\x43\x41\x41\x59\x44\x38\x67\x41\x51\x41\x67\x49\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x55\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x47\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x51\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x55\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x46\x51\x41\x5A\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x41\x7A\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x67\x49\x41\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x41\x43\x67\x50\x32\x41\x41\x6F\x44\x39\x67\x41\x4F\x41\x67\x49\x44\x2F\x41\x49\x41\x42\x41\x50\x36\x41\x41\x59\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x50\x32\x41\x41\x6F\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x41\x47\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x49\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x41\x41\x45\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x6B\x41\x41\x41\x43\x41\x41\x6F\x41\x44\x41\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x42\x38\x41\x49\x77\x41\x41\x50\x51\x45\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x50\x34\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x38\x41\x46\x77\x41\x62\x41\x41\x41\x7A\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x51\x45\x52\x4D\x78\x45\x7A\x46\x53\x4D\x56\x49\x52\x45\x6A\x4E\x54\x4D\x31\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x77\x43\x41\x2F\x6F\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x41\x47\x41\x67\x49\x44\x2F\x41\x41\x4B\x41\x2F\x6F\x43\x41\x67\x41\x47\x41\x67\x49\x44\x39\x67\x41\x4B\x41\x67\x49\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x49\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x36\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x4D\x41\x2F\x51\x41\x44\x41\x50\x30\x41\x41\x77\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x67\x49\x43\x41\x67\x49\x43\x41\x41\x77\x44\x39\x41\x41\x4D\x41\x2F\x51\x41\x44\x41\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x49\x43\x41\x67\x41\x4D\x41\x2F\x51\x41\x44\x41\x50\x30\x41\x41\x34\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x49\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x32\x41\x41\x51\x43\x41\x41\x51\x43\x41\x67\x49\x41\x44\x41\x50\x30\x41\x41\x77\x44\x39\x41\x41\x4F\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x77\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x41\x43\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x36\x41\x67\x49\x41\x43\x67\x50\x32\x41\x41\x6F\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x44\x77\x41\x41\x41\x52\x45\x7A\x45\x51\x45\x52\x4D\x78\x55\x68\x46\x53\x45\x52\x49\x52\x55\x68\x46\x51\x47\x41\x67\x50\x34\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x50\x38\x41\x41\x51\x41\x42\x67\x50\x36\x41\x2F\x77\x41\x44\x67\x49\x43\x41\x2F\x6F\x43\x41\x67\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x46\x41\x41\x6B\x41\x44\x51\x41\x54\x41\x41\x41\x68\x4E\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x51\x45\x52\x49\x52\x55\x68\x45\x51\x45\x41\x41\x51\x43\x41\x2F\x77\x43\x41\x67\x50\x32\x41\x41\x67\x44\x2B\x67\x49\x41\x42\x41\x50\x36\x41\x41\x59\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x2F\x67\x41\x44\x67\x49\x44\x39\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x49\x54\x55\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x67\x41\x49\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x34\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x38\x41\x41\x51\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x39\x41\x54\x4D\x64\x41\x54\x55\x68\x4E\x53\x45\x31\x49\x54\x55\x7A\x45\x51\x45\x31\x49\x52\x55\x44\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4E\x41\x42\x45\x41\x46\x51\x41\x41\x50\x51\x45\x7A\x48\x51\x45\x31\x49\x54\x55\x68\x4E\x53\x45\x31\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x59\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x67\x41\x43\x41\x49\x43\x41\x41\x51\x43\x41\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x44\x51\x41\x52\x41\x42\x55\x41\x41\x44\x30\x42\x4D\x78\x30\x42\x4E\x53\x45\x31\x49\x54\x55\x68\x4E\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x56\x41\x42\x6B\x41\x41\x44\x30\x42\x4D\x78\x30\x42\x4E\x53\x45\x31\x49\x54\x55\x68\x4E\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x6F\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x34\x41\x41\x67\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x47\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4E\x41\x42\x45\x41\x46\x51\x41\x5A\x41\x42\x30\x41\x41\x44\x30\x42\x4D\x78\x30\x42\x4E\x53\x45\x31\x49\x54\x55\x68\x4E\x54\x4D\x52\x41\x54\x55\x68\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x4A\x54\x55\x68\x46\x59\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x34\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x46\x51\x41\x5A\x41\x42\x30\x41\x41\x44\x30\x42\x4D\x78\x30\x42\x4E\x54\x4D\x31\x49\x7A\x55\x7A\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x45\x53\x45\x56\x49\x52\x55\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x59\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2F\x41\x41\x45\x41\x2F\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x67\x41\x49\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x67\x41\x41\x50\x38\x41\x41\x6F\x41\x44\x41\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x42\x38\x41\x41\x42\x45\x31\x49\x52\x55\x39\x41\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x55\x31\x49\x52\x55\x39\x41\x54\x4D\x56\x49\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x41\x51\x41\x42\x41\x49\x44\x2B\x41\x41\x47\x41\x67\x50\x32\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x46\x53\x45\x31\x4D\x78\x45\x68\x46\x52\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x67\x41\x49\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x34\x41\x41\x51\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x44\x51\x41\x52\x41\x42\x55\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x56\x49\x54\x55\x7A\x45\x53\x45\x56\x45\x54\x55\x68\x46\x51\x4D\x31\x49\x52\x57\x41\x41\x67\x44\x39\x67\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x50\x38\x41\x67\x41\x47\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x46\x53\x45\x31\x4D\x78\x45\x68\x46\x52\x45\x31\x49\x52\x55\x42\x4E\x54\x4D\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x47\x41\x67\x49\x44\x2F\x41\x49\x41\x42\x67\x49\x43\x41\x41\x51\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4E\x41\x42\x45\x41\x46\x51\x41\x5A\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x46\x53\x45\x31\x4D\x78\x45\x68\x46\x52\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x41\x41\x45\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x50\x38\x41\x67\x41\x47\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x41\x41\x67\x41\x41\x41\x41\x41\x42\x41\x41\x51\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x4D\x78\x45\x7A\x45\x51\x45\x52\x4D\x78\x47\x41\x67\x50\x38\x41\x67\x41\x4B\x41\x2F\x59\x41\x44\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x51\x41\x45\x41\x41\x41\x44\x41\x41\x63\x41\x41\x44\x45\x52\x4D\x78\x6B\x43\x4D\x78\x47\x41\x67\x41\x4B\x41\x2F\x59\x41\x44\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x49\x41\x45\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x41\x4D\x52\x45\x7A\x45\x51\x4D\x31\x4D\x78\x55\x44\x4E\x54\x4D\x56\x67\x49\x43\x41\x67\x49\x41\x43\x67\x50\x32\x41\x41\x77\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x59\x41\x45\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x41\x41\x7A\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x51\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x67\x49\x43\x41\x67\x50\x38\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4D\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x41\x41\x41\x44\x41\x41\x63\x41\x46\x77\x41\x41\x4E\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x55\x44\x4E\x53\x45\x52\x49\x54\x55\x68\x4E\x53\x45\x31\x4D\x7A\x55\x7A\x46\x54\x4D\x52\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x4D\x41\x67\x49\x44\x38\x67\x49\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x49\x41\x41\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x51\x41\x4E\x41\x41\x41\x68\x45\x54\x4D\x52\x49\x52\x45\x68\x46\x53\x45\x5A\x41\x54\x55\x68\x46\x51\x49\x41\x67\x50\x32\x41\x41\x67\x44\x2B\x67\x41\x47\x41\x41\x67\x44\x2B\x41\x41\x4B\x41\x67\x50\x34\x41\x41\x77\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x54\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x41\x41\x45\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x41\x51\x43\x41\x67\x41\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x44\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x49\x41\x42\x41\x49\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x55\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x54\x55\x68\x46\x54\x4D\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x67\x41\x42\x41\x49\x41\x42\x41\x49\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x41\x43\x45\x52\x49\x52\x45\x42\x4E\x53\x45\x56\x41\x52\x45\x68\x45\x51\x45\x41\x41\x51\x44\x2B\x41\x41\x4D\x41\x2F\x67\x41\x42\x41\x41\x45\x41\x2F\x77\x41\x42\x67\x49\x43\x41\x41\x51\x41\x42\x41\x50\x38\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x30\x41\x46\x77\x41\x41\x41\x54\x55\x7A\x46\x51\x45\x31\x49\x78\x45\x7A\x45\x54\x4D\x56\x49\x52\x55\x31\x45\x53\x4D\x31\x49\x54\x55\x68\x46\x54\x4D\x52\x41\x51\x43\x41\x2F\x77\x43\x41\x67\x49\x41\x42\x41\x49\x44\x2F\x41\x41\x47\x41\x67\x41\x45\x41\x67\x49\x44\x2F\x41\x49\x41\x42\x67\x50\x38\x41\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x44\x2B\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x51\x41\x4E\x41\x41\x41\x31\x45\x54\x4D\x52\x46\x54\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x67\x49\x44\x39\x67\x41\x45\x41\x67\x41\x49\x41\x2F\x67\x43\x41\x67\x41\x49\x41\x2F\x59\x41\x44\x41\x49\x43\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4A\x41\x41\x30\x41\x41\x44\x55\x52\x4D\x78\x45\x56\x4E\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x67\x50\x38\x41\x41\x51\x43\x41\x41\x67\x44\x2B\x41\x49\x43\x41\x41\x67\x44\x39\x67\x41\x4D\x41\x67\x49\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x6B\x41\x44\x51\x41\x41\x4E\x52\x45\x7A\x45\x52\x55\x31\x49\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x57\x41\x41\x59\x43\x41\x2F\x6F\x43\x41\x67\x41\x49\x41\x2F\x67\x43\x41\x67\x41\x49\x41\x2F\x59\x41\x44\x41\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x51\x41\x4E\x41\x42\x45\x41\x41\x44\x55\x52\x4D\x78\x45\x56\x4E\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x59\x41\x42\x67\x49\x44\x2B\x41\x49\x43\x41\x67\x49\x41\x43\x41\x50\x34\x41\x67\x49\x41\x43\x41\x50\x32\x41\x41\x77\x43\x41\x67\x49\x43\x41\x41\x41\x55\x41\x41\x50\x2B\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x42\x55\x31\x49\x52\x55\x42\x45\x54\x4D\x52\x41\x54\x55\x68\x4E\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x51\x49\x41\x2F\x67\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x50\x36\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x41\x47\x41\x2F\x6F\x44\x2F\x41\x49\x43\x41\x41\x59\x44\x39\x67\x41\x4B\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x43\x41\x41\x44\x2F\x67\x41\x47\x41\x41\x77\x41\x41\x41\x77\x41\x50\x41\x41\x41\x42\x4E\x54\x4D\x56\x41\x52\x45\x7A\x45\x54\x4D\x56\x49\x78\x55\x7A\x46\x53\x4D\x52\x41\x51\x43\x41\x2F\x6F\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x44\x2B\x67\x41\x4F\x41\x2F\x77\x43\x41\x67\x49\x44\x2F\x41\x41\x41\x41\x41\x41\x41\x46\x41\x41\x44\x2F\x67\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x56\x4E\x53\x45\x56\x41\x52\x45\x7A\x45\x51\x45\x31\x49\x54\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x43\x41\x50\x34\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x44\x2B\x41\x49\x43\x41\x67\x49\x43\x41\x67\x41\x47\x41\x41\x59\x44\x2B\x67\x50\x38\x41\x67\x49\x41\x42\x67\x50\x32\x41\x41\x77\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x77\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x41\x43\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x41\x54\x55\x68\x46\x54\x4D\x31\x49\x52\x55\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x32\x41\x41\x51\x43\x41\x41\x51\x41\x43\x67\x50\x32\x41\x41\x6F\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x77\x41\x52\x41\x41\x41\x68\x4E\x53\x45\x56\x4E\x52\x45\x6A\x4E\x54\x4D\x52\x4D\x78\x45\x46\x45\x53\x45\x56\x49\x52\x45\x42\x41\x41\x45\x41\x67\x49\x43\x41\x2F\x59\x41\x43\x41\x50\x36\x41\x67\x49\x43\x41\x41\x51\x43\x41\x41\x51\x44\x39\x67\x49\x41\x44\x67\x49\x44\x39\x41\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x42\x67\x41\x4B\x41\x41\x67\x41\x41\x41\x77\x41\x41\x45\x54\x55\x68\x46\x51\x4B\x41\x41\x59\x43\x41\x67\x41\x41\x43\x41\x41\x41\x43\x41\x41\x45\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x52\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x59\x43\x41\x41\x67\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x41\x41\x43\x41\x41\x41\x43\x41\x41\x45\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x52\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x59\x43\x41\x41\x67\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x45\x41\x41\x59\x41\x41\x41\x77\x41\x48\x41\x41\x41\x78\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x59\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x41\x41\x41\x43\x41\x41\x41\x43\x41\x41\x45\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x54\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x59\x43\x41\x2F\x77\x43\x41\x41\x67\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x67\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x42\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x47\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x41\x49\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x42\x41\x41\x41\x41\x67\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x42\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x47\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x41\x49\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x41\x41\x47\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x44\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x47\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x73\x41\x41\x43\x45\x52\x49\x54\x55\x68\x45\x54\x4D\x52\x49\x52\x55\x68\x45\x51\x45\x41\x2F\x77\x41\x42\x41\x49\x41\x42\x41\x50\x38\x41\x41\x67\x43\x41\x41\x51\x44\x2F\x41\x49\x44\x2B\x41\x41\x41\x41\x41\x51\x41\x41\x41\x51\x41\x42\x67\x41\x4B\x41\x41\x41\x73\x41\x41\x42\x4D\x31\x49\x7A\x55\x7A\x4E\x54\x4D\x56\x4D\x78\x55\x6A\x46\x59\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x42\x41\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x41\x4D\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x45\x7A\x45\x54\x4D\x52\x67\x49\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x55\x41\x41\x41\x43\x41\x41\x59\x41\x44\x41\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x43\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x41\x51\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x42\x51\x41\x41\x41\x49\x41\x42\x67\x41\x4D\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x50\x51\x45\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x67\x49\x44\x2F\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x46\x77\x41\x41\x49\x54\x55\x6A\x4E\x53\x4D\x52\x4D\x7A\x55\x7A\x4E\x53\x45\x56\x49\x52\x55\x6A\x46\x53\x45\x56\x49\x52\x55\x7A\x46\x53\x45\x56\x41\x51\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2F\x41\x49\x41\x42\x67\x50\x36\x41\x67\x41\x45\x41\x67\x49\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x43\x41\x41\x4D\x41\x41\x34\x41\x41\x44\x77\x41\x41\x45\x78\x45\x6A\x4E\x53\x45\x56\x4D\x7A\x55\x7A\x46\x54\x4D\x52\x49\x54\x55\x6A\x46\x59\x43\x41\x41\x59\x43\x41\x67\x49\x44\x2F\x41\x49\x41\x43\x41\x41\x45\x41\x67\x49\x43\x41\x67\x50\x38\x41\x67\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x7A\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x46\x53\x45\x52\x49\x78\x45\x68\x47\x51\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x67\x49\x43\x41\x67\x41\x47\x41\x67\x50\x38\x41\x67\x49\x43\x41\x41\x67\x43\x41\x67\x49\x44\x39\x67\x41\x49\x41\x2F\x67\x41\x44\x41\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x73\x41\x45\x51\x41\x41\x4D\x78\x45\x6A\x4E\x54\x4D\x31\x4D\x78\x55\x7A\x46\x53\x4D\x52\x49\x52\x45\x68\x4E\x53\x45\x52\x67\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x47\x41\x41\x67\x43\x41\x67\x49\x43\x41\x2F\x67\x41\x44\x41\x49\x44\x38\x67\x41\x41\x41\x41\x41\x41\x65\x41\x57\x34\x41\x41\x51\x41\x41\x41\x41\x41\x41\x41\x41\x41\x57\x41\x43\x34\x41\x41\x51\x41\x41\x41\x41\x41\x41\x41\x51\x41\x4C\x41\x46\x30\x41\x41\x51\x41\x41\x41\x41\x41\x41\x41\x67\x41\x48\x41\x48\x6B\x41\x41\x51\x41\x41\x41\x41\x41\x41\x41\x77\x41\x4C\x41\x4A\x6B\x41\x41\x51\x41\x41\x41\x41\x41\x41\x42\x41\x41\x54\x41\x4D\x30\x41\x41\x51\x41\x41\x41\x41\x41\x41\x42\x51\x41\x4C\x41\x50\x6B\x41\x41\x51\x41\x41\x41\x41\x41\x41\x42\x67\x41\x4C\x41\x52\x30\x41\x41\x51\x41\x41\x41\x41\x41\x41\x43\x41\x41\x4D\x41\x55\x4D\x41\x41\x51\x41\x41\x41\x41\x41\x41\x43\x51\x41\x4D\x41\x57\x6F\x41\x41\x51\x41\x41\x41\x41\x41\x41\x43\x67\x41\x42\x41\x58\x73\x41\x41\x51\x41\x41\x41\x41\x41\x41\x43\x77\x41\x61\x41\x62\x4D\x41\x41\x51\x41\x41\x41\x41\x41\x41\x44\x41\x41\x61\x41\x67\x51\x41\x41\x51\x41\x41\x41\x41\x41\x41\x44\x51\x41\x6F\x41\x6E\x45\x41\x41\x51\x41\x41\x41\x41\x41\x41\x44\x67\x41\x75\x41\x76\x67\x41\x41\x51\x41\x41\x41\x41\x41\x41\x45\x77\x41\x70\x41\x33\x73\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x41\x41\x41\x73\x41\x41\x41\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x41\x51\x41\x57\x41\x45\x55\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x41\x67\x41\x4F\x41\x47\x6B\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x41\x77\x41\x57\x41\x49\x45\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x42\x41\x41\x6D\x41\x4B\x55\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x42\x51\x41\x57\x41\x4F\x45\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x42\x67\x41\x57\x41\x51\x55\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x43\x41\x41\x59\x41\x53\x6B\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x43\x51\x41\x59\x41\x56\x41\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x43\x67\x41\x43\x41\x58\x63\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x43\x77\x41\x30\x41\x58\x30\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x44\x41\x41\x30\x41\x63\x34\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x44\x51\x42\x51\x41\x68\x38\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x44\x67\x42\x63\x41\x70\x6F\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x45\x77\x42\x53\x41\x79\x63\x41\x51\x77\x42\x76\x41\x48\x41\x41\x65\x51\x42\x79\x41\x47\x6B\x41\x5A\x77\x42\x6F\x41\x48\x51\x41\x49\x41\x42\x42\x41\x47\x34\x41\x5A\x41\x42\x79\x41\x47\x55\x41\x64\x77\x41\x67\x41\x46\x51\x41\x65\x51\x42\x73\x41\x47\x55\x41\x63\x67\x41\x41\x51\x32\x39\x77\x65\x58\x4A\x70\x5A\x32\x68\x30\x49\x45\x46\x75\x5A\x48\x4A\x6C\x64\x79\x42\x55\x65\x57\x78\x6C\x63\x67\x41\x41\x54\x51\x42\x70\x41\x47\x34\x41\x5A\x51\x42\x6A\x41\x48\x49\x41\x59\x51\x42\x6D\x41\x48\x51\x41\x61\x51\x42\x68\x41\x41\x42\x4E\x61\x57\x35\x6C\x59\x33\x4A\x68\x5A\x6E\x52\x70\x59\x51\x41\x41\x55\x67\x42\x6C\x41\x47\x63\x41\x64\x51\x42\x73\x41\x47\x45\x41\x63\x67\x41\x41\x55\x6D\x56\x6E\x64\x57\x78\x68\x63\x67\x41\x41\x54\x51\x42\x70\x41\x47\x34\x41\x5A\x51\x42\x6A\x41\x48\x49\x41\x59\x51\x42\x6D\x41\x48\x51\x41\x61\x51\x42\x68\x41\x41\x42\x4E\x61\x57\x35\x6C\x59\x33\x4A\x68\x5A\x6E\x52\x70\x59\x51\x41\x41\x54\x51\x42\x70\x41\x47\x34\x41\x5A\x51\x42\x6A\x41\x48\x49\x41\x59\x51\x42\x6D\x41\x48\x51\x41\x61\x51\x42\x68\x41\x43\x41\x41\x55\x67\x42\x6C\x41\x47\x63\x41\x64\x51\x42\x73\x41\x47\x45\x41\x63\x67\x41\x41\x54\x57\x6C\x75\x5A\x57\x4E\x79\x59\x57\x5A\x30\x61\x57\x45\x67\x55\x6D\x56\x6E\x64\x57\x78\x68\x63\x67\x41\x41\x56\x67\x42\x6C\x41\x48\x49\x41\x63\x77\x42\x70\x41\x47\x38\x41\x62\x67\x41\x67\x41\x44\x45\x41\x4C\x67\x41\x77\x41\x41\x42\x57\x5A\x58\x4A\x7A\x61\x57\x39\x75\x49\x44\x45\x75\x4D\x41\x41\x41\x54\x51\x42\x70\x41\x47\x34\x41\x5A\x51\x42\x6A\x41\x48\x49\x41\x59\x51\x42\x6D\x41\x48\x51\x41\x61\x51\x42\x68\x41\x41\x42\x4E\x61\x57\x35\x6C\x59\x33\x4A\x68\x5A\x6E\x52\x70\x59\x51\x41\x41\x51\x51\x42\x75\x41\x47\x51\x41\x63\x67\x42\x6C\x41\x48\x63\x41\x49\x41\x42\x55\x41\x48\x6B\x41\x62\x41\x42\x6C\x41\x48\x49\x41\x41\x45\x46\x75\x5A\x48\x4A\x6C\x64\x79\x42\x55\x65\x57\x78\x6C\x63\x67\x41\x41\x51\x51\x42\x75\x41\x47\x51\x41\x63\x67\x42\x6C\x41\x48\x63\x41\x49\x41\x42\x55\x41\x48\x6B\x41\x62\x41\x42\x6C\x41\x48\x49\x41\x41\x45\x46\x75\x5A\x48\x4A\x6C\x64\x79\x42\x55\x65\x57\x78\x6C\x63\x67\x41\x41\x43\x67\x41\x41\x43\x67\x41\x41\x61\x41\x42\x30\x41\x48\x51\x41\x63\x41\x41\x36\x41\x43\x38\x41\x4C\x77\x42\x33\x41\x48\x63\x41\x64\x77\x41\x75\x41\x47\x45\x41\x62\x67\x42\x6B\x41\x48\x49\x41\x5A\x51\x42\x33\x41\x48\x51\x41\x65\x51\x42\x73\x41\x47\x55\x41\x63\x67\x41\x75\x41\x47\x34\x41\x5A\x51\x42\x30\x41\x41\x42\x6F\x64\x48\x52\x77\x4F\x69\x38\x76\x64\x33\x64\x33\x4C\x6D\x46\x75\x5A\x48\x4A\x6C\x64\x33\x52\x35\x62\x47\x56\x79\x4C\x6D\x35\x6C\x64\x41\x41\x41\x61\x41\x42\x30\x41\x48\x51\x41\x63\x41\x41\x36\x41\x43\x38\x41\x4C\x77\x42\x33\x41\x48\x63\x41\x64\x77\x41\x75\x41\x47\x45\x41\x62\x67\x42\x6B\x41\x48\x49\x41\x5A\x51\x42\x33\x41\x48\x51\x41\x65\x51\x42\x73\x41\x47\x55\x41\x63\x67\x41\x75\x41\x47\x34\x41\x5A\x51\x42\x30\x41\x41\x42\x6F\x64\x48\x52\x77\x4F\x69\x38\x76\x64\x33\x64\x33\x4C\x6D\x46\x75\x5A\x48\x4A\x6C\x64\x33\x52\x35\x62\x47\x56\x79\x4C\x6D\x35\x6C\x64\x41\x41\x41\x51\x77\x42\x79\x41\x47\x55\x41\x59\x51\x42\x30\x41\x47\x6B\x41\x64\x67\x42\x6C\x41\x43\x41\x41\x51\x77\x42\x76\x41\x47\x30\x41\x62\x51\x42\x76\x41\x47\x34\x41\x63\x77\x41\x67\x41\x45\x45\x41\x64\x41\x42\x30\x41\x48\x49\x41\x61\x51\x42\x69\x41\x48\x55\x41\x64\x41\x42\x70\x41\x47\x38\x41\x62\x67\x41\x67\x41\x46\x4D\x41\x61\x41\x42\x68\x41\x48\x49\x41\x5A\x51\x41\x67\x41\x45\x45\x41\x62\x41\x42\x70\x41\x47\x73\x41\x5A\x51\x41\x41\x51\x33\x4A\x6C\x59\x58\x52\x70\x64\x6D\x55\x67\x51\x32\x39\x74\x62\x57\x39\x75\x63\x79\x42\x42\x64\x48\x52\x79\x61\x57\x4A\x31\x64\x47\x6C\x76\x62\x69\x42\x54\x61\x47\x46\x79\x5A\x53\x42\x42\x62\x47\x6C\x72\x5A\x51\x41\x41\x61\x41\x42\x30\x41\x48\x51\x41\x63\x41\x41\x36\x41\x43\x38\x41\x4C\x77\x42\x6A\x41\x48\x49\x41\x5A\x51\x42\x68\x41\x48\x51\x41\x61\x51\x42\x32\x41\x47\x55\x41\x59\x77\x42\x76\x41\x47\x30\x41\x62\x51\x42\x76\x41\x47\x34\x41\x63\x77\x41\x75\x41\x47\x38\x41\x63\x67\x42\x6E\x41\x43\x38\x41\x62\x41\x42\x70\x41\x47\x4D\x41\x5A\x51\x42\x75\x41\x48\x4D\x41\x5A\x51\x42\x7A\x41\x43\x38\x41\x59\x67\x42\x35\x41\x43\x30\x41\x63\x77\x42\x68\x41\x43\x38\x41\x4D\x77\x41\x75\x41\x44\x41\x41\x4C\x77\x41\x41\x61\x48\x52\x30\x63\x44\x6F\x76\x4C\x32\x4E\x79\x5A\x57\x46\x30\x61\x58\x5A\x6C\x59\x32\x39\x74\x62\x57\x39\x75\x63\x79\x35\x76\x63\x6D\x63\x76\x62\x47\x6C\x6A\x5A\x57\x35\x7A\x5A\x58\x4D\x76\x59\x6E\x6B\x74\x63\x32\x45\x76\x4D\x79\x34\x77\x4C\x77\x41\x41\x52\x67\x42\x70\x41\x48\x59\x41\x5A\x51\x41\x67\x41\x47\x49\x41\x61\x51\x42\x6E\x41\x43\x41\x41\x63\x51\x42\x31\x41\x47\x45\x41\x59\x77\x42\x72\x41\x47\x6B\x41\x62\x67\x42\x6E\x41\x43\x41\x41\x65\x67\x42\x6C\x41\x48\x41\x41\x61\x41\x42\x35\x41\x48\x49\x41\x63\x77\x41\x67\x41\x47\x6F\x41\x62\x77\x42\x73\x41\x48\x51\x41\x49\x41\x42\x74\x41\x48\x6B\x41\x49\x41\x42\x33\x41\x47\x45\x41\x65\x41\x41\x67\x41\x47\x49\x41\x5A\x51\x42\x6B\x41\x41\x42\x47\x61\x58\x5A\x6C\x49\x47\x4A\x70\x5A\x79\x42\x78\x64\x57\x46\x6A\x61\x32\x6C\x75\x5A\x79\x42\x36\x5A\x58\x42\x6F\x65\x58\x4A\x7A\x49\x47\x70\x76\x62\x48\x51\x67\x62\x58\x6B\x67\x64\x32\x46\x34\x49\x47\x4A\x6C\x5A\x41\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x41\x41\x41\x59\x67\x41\x7A\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x31\x41\x41\x41\x41\x51\x49\x42\x41\x77\x41\x44\x41\x41\x51\x41\x42\x51\x41\x47\x41\x41\x63\x41\x43\x41\x41\x4A\x41\x41\x6F\x41\x43\x77\x41\x4D\x41\x41\x30\x41\x44\x67\x41\x50\x41\x42\x41\x41\x45\x51\x41\x53\x41\x42\x4D\x41\x46\x41\x41\x56\x41\x42\x59\x41\x46\x77\x41\x59\x41\x42\x6B\x41\x47\x67\x41\x62\x41\x42\x77\x41\x48\x51\x41\x65\x41\x42\x38\x41\x49\x41\x41\x68\x41\x43\x49\x41\x49\x77\x41\x6B\x41\x43\x55\x41\x4A\x67\x41\x6E\x41\x43\x67\x41\x4B\x51\x41\x71\x41\x43\x73\x41\x4C\x41\x41\x74\x41\x43\x34\x41\x4C\x77\x41\x77\x41\x44\x45\x41\x4D\x67\x41\x7A\x41\x44\x51\x41\x4E\x51\x41\x32\x41\x44\x63\x41\x4F\x41\x41\x35\x41\x44\x6F\x41\x4F\x77\x41\x38\x41\x44\x30\x41\x50\x67\x41\x2F\x41\x45\x41\x41\x51\x51\x42\x43\x41\x45\x4D\x41\x52\x41\x42\x46\x41\x45\x59\x41\x52\x77\x42\x49\x41\x45\x6B\x41\x53\x67\x42\x4C\x41\x45\x77\x41\x54\x51\x42\x4F\x41\x45\x38\x41\x55\x41\x42\x52\x41\x46\x49\x41\x55\x77\x42\x55\x41\x46\x55\x41\x56\x67\x42\x58\x41\x46\x67\x41\x57\x51\x42\x61\x41\x46\x73\x41\x58\x41\x42\x64\x41\x46\x34\x41\x58\x77\x42\x67\x41\x47\x45\x41\x6F\x77\x43\x45\x41\x49\x55\x41\x76\x51\x43\x57\x41\x4F\x67\x41\x68\x67\x43\x4F\x41\x49\x73\x41\x6E\x51\x43\x70\x41\x4B\x51\x42\x42\x41\x43\x4B\x41\x4E\x6F\x41\x67\x77\x43\x54\x41\x51\x55\x42\x42\x67\x43\x4E\x41\x51\x63\x41\x69\x41\x44\x44\x41\x4E\x34\x42\x43\x41\x43\x65\x41\x4B\x6F\x41\x39\x51\x44\x30\x41\x50\x59\x41\x6F\x67\x43\x74\x41\x4D\x6B\x41\x78\x77\x43\x75\x41\x47\x49\x41\x59\x77\x43\x51\x41\x47\x51\x41\x79\x77\x42\x6C\x41\x4D\x67\x41\x79\x67\x44\x50\x41\x4D\x77\x41\x7A\x51\x44\x4F\x41\x4F\x6B\x41\x5A\x67\x44\x54\x41\x4E\x41\x41\x30\x51\x43\x76\x41\x47\x63\x41\x38\x41\x43\x52\x41\x4E\x59\x41\x31\x41\x44\x56\x41\x47\x67\x41\x36\x77\x44\x74\x41\x49\x6B\x41\x61\x67\x42\x70\x41\x47\x73\x41\x62\x51\x42\x73\x41\x47\x34\x41\x6F\x41\x42\x76\x41\x48\x45\x41\x63\x41\x42\x79\x41\x48\x4D\x41\x64\x51\x42\x30\x41\x48\x59\x41\x64\x77\x44\x71\x41\x48\x67\x41\x65\x67\x42\x35\x41\x48\x73\x41\x66\x51\x42\x38\x41\x4C\x67\x41\x6F\x51\x42\x2F\x41\x48\x34\x41\x67\x41\x43\x42\x41\x4F\x77\x41\x37\x67\x43\x36\x41\x4C\x73\x42\x43\x51\x43\x7A\x41\x4C\x59\x41\x74\x77\x44\x45\x41\x51\x6F\x41\x74\x41\x43\x31\x41\x4D\x55\x41\x67\x67\x43\x48\x41\x4B\x73\x41\x76\x67\x43\x2F\x41\x51\x73\x41\x6A\x41\x45\x4D\x41\x51\x30\x47\x5A\x32\x78\x35\x63\x47\x67\x78\x42\x6D\x64\x73\x65\x58\x42\x6F\x4D\x67\x64\x31\x62\x6D\x6B\x77\x4D\x45\x46\x45\x42\x33\x56\x75\x61\x54\x41\x77\x51\x6A\x49\x48\x64\x57\x35\x70\x4D\x44\x42\x43\x4D\x77\x64\x31\x62\x6D\x6B\x77\x4D\x45\x49\x31\x42\x33\x56\x75\x61\x54\x41\x77\x51\x6A\x6B\x48\x64\x57\x35\x70\x4D\x55\x55\x35\x52\x51\x31\x78\x64\x57\x39\x30\x5A\x58\x4A\x6C\x64\x6D\x56\x79\x63\x32\x56\x6B\x42\x45\x56\x31\x63\x6D\x38\x48\x64\x57\x35\x70\x52\x6B\x49\x77\x4D\x51\x64\x31\x62\x6D\x6C\x47\x51\x6A\x41\x79\x41\x41\x41\x41\x41\x41\x48\x2F\x2F\x77\x41\x43\x41\x41\x45\x41\x41\x41\x41\x4F\x41\x41\x41\x41\x47\x41\x41\x67\x41\x41\x41\x41\x41\x67\x41\x42\x41\x41\x45\x41\x30\x77\x41\x42\x41\x41\x51\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x79\x59\x6C\x76\x4D\x51\x41\x41\x41\x41\x44\x4B\x38\x48\x71\x74\x41\x41\x41\x41\x41\x4D\x74\x50\x46\x71\x6B\x3D\x20", "\x67\x65\x74\x41\x62\x73\x6F\x6C\x75\x74\x65\x50\x61\x74\x68", "\x67\x65\x74\x45\x78\x74\x65\x72\x6E\x61\x6C\x53\x74\x6F\x72\x61\x67\x65\x44\x69\x72\x65\x63\x74\x6F\x72\x79", "\x45\x6E\x76\x69\x72\x6F\x6E\x6D\x65\x6E\x74", "\x6F\x73", "\x2F\x67\x61\x6D\x65\x73\x2F\x63\x6F\x6D\x2E\x6D\x6F\x6A\x61\x6E\x67\x2F\x6D\x69\x6E\x65\x63\x72\x61\x66\x74\x2E\x74\x74\x66", "\x69\x6F", "\x65\x78\x69\x73\x74\x73", "\x63\x72\x65\x61\x74\x65\x4E\x65\x77\x46\x69\x6C\x65", "\x64\x65\x63\x6F\x64\x65", "\x42\x61\x73\x65\x36\x34", "\x75\x74\x69\x6C", "\x77\x72\x69\x74\x65", "\x63\x6C\x6F\x73\x65", "\x63\x72\x65\x61\x74\x65\x46\x72\x6F\x6D\x46\x69\x6C\x65", "\x54\x79\x70\x65\x66\x61\x63\x65", "", "\x6D\x61\x6B\x65\x54\x65\x78\x74", "\x4D\x61\x74\x72\x69\x78\x48\x61\x63\x6B\x3A\x20", "\x3A\x20"]
funcS = {
File: {
InstinctDir: android.os.Environment.getExternalStorageDirectory() + "games/Instinct/",
getTextFromFile: function(file) {
let readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
let data = new java.lang.StringBuilder();
let string;
while ((string = readed.readLine()) != null) data.append(string + "\n");
return data.toString();
},
saveTextToFile: function(file, text) {
if (!file.exists()) file.createNewFile();
let bytes = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, text.length());
for (let i = 0; i < text.length(); i++) bytes[i] = text.charCodeAt(i);
let stream = new java.io.FileOutputStream(file);
try {
stream.write(bytes);
} finally {
stream.close();
}
}
},
Render: {
getFloatBuffer: function(fArray) {
let bBuffer = java.nio.ByteBuffer.allocateDirect(fArray.length * 4);
bBuffer.order(java.nio.ByteOrder.nativeOrder());
let fBuffer = bBuffer.asFloatBuffer();
fBuffer.put(fArray);
fBuffer.position(0);
return fBuffer;
},
getShortBuffer: function(sArray) {
let bBuffer = java.nio.ByteBuffer.allocateDirect(sArray.length * 2);
bBuffer.order(java.nio.ByteOrder.nativeOrder());
let sBuffer = bBuffer.asShortBuffer();
sBuffer.put(sArray);
sBuffer.position(0);
return sBuffer;
},
renderer: null,
glSurface: null,
fov: 90,
color: android.graphics.Color.argb(180,255, 0, 0),/*Player*/
colorC: android.graphics.Color.argb(180,255, 0, 0),/*Custom Block*/
color3: android.graphics.Color.argb(180,0, 255, 229),/*Diamond*/
color4: android.graphics.Color.argb(180,0, 255, 25),/*Emerald*/
color5: android.graphics.Color.argb(180,246, 255, 0),/*Gold*/
color6: android.graphics.Color.argb(180,244, 244, 244),/*Iron*/
color7: android.graphics.Color.argb(180,0, 33, 255),/*Lapis*/
color8: android.graphics.Color.argb(180,58, 58, 58),/*Coal*/
color9: android.graphics.Color.argb(180,255, 91, 91),/*Redstone*/

init: function() {
if (rendering) return;
let options = funcS.File.getTextFromFile(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/", "options.txt"));
options = options.split("\n");
options.forEach(function(entry) {
let suboption = entry.split(":");
if (suboption[0] == "gfx_field_of_view") {
funcS.Render.fov = suboption[1];
}
});
this.renderer = new android.opengl.GLSurfaceView.Renderer({
onSurfaceCreated: function(gl, config) {
let GL10 = javax.microedition.khronos.opengles.GL10;
gl.glClearColor(0, 0, 0, 0);
gl.glShadeModel(GL10.GL_SMOOTH);
gl.glClearDepthf(1.0);
gl.glDisable(GL10.GL_DITHER);
gl.glEnable(GL10.GL_DEPTH_TEST);
gl.glDepthFunc(GL10.GL_LEQUAL);
gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);
},
onSurfaceChanged: function(gl, width, height) {
let GL10 = javax.microedition.khronos.opengles.GL10;
gl.glMatrixMode(GL10.GL_PROJECTION);
gl.glLoadIdentity();
android.opengl.GLU.gluPerspective(gl, funcS.Render.fov, width / height, 0.1, 100);
gl.glMatrixMode(GL10.GL_MODELVIEW);
gl.glLoadIdentity();
},
onDrawFrame: function(gl) {
try{
let GL10 = javax.microedition.khronos.opengles.GL10;
gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
gl.glLoadIdentity();

gl.glDisable(GL10.GL_LIGHTING);
let yaw = getYaw() % 360;
let pitch = getPitch() % 360;
let eyeX = getPlayerX();
let eyeY = getPlayerY() + 1;
let eyeZ = getPlayerZ();
let dCenterX = Math.sin(yaw / 180 * Math.PI);
let dCenterZ = Math.cos(yaw / 180 * Math.PI);
let dCenterY = Math.sqrt(dCenterX * dCenterX + dCenterZ * dCenterZ) * Math.tan((pitch - 180) / 180 * Math.PI);
let centerX = eyeX - dCenterX;
let centerZ = eyeZ + dCenterZ;
let centerY = eyeY - dCenterY;
android.opengl.GLU.gluLookAt(gl, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, 0, 1.0, 0);

let players = Server.getAllPlayers();
let entitiest = Entity.getAll();
if(esp){
players.forEach(function(entry) {


if (entry != getPlayerEnt() && Entity.getEntityTypeId(entry) == EntityType.PLAYER) {
	if(combatESP){
		var px = getPlayerX();
		var py = getPlayerY();
		var pz = getPlayerZ();
		var x = Entity.getX(entry) - px;
		var y = Entity.getY(entry) - py;
		var z = Entity.getZ(entry) - pz;
		var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
	}
	if(strokeesp){
		if(combatESP&&dist <= 3.4){
				funcS.Render.drawBoxOutlineCLOSE(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
			}else{
				funcS.Render.drawBoxOutline(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
		}
		}else{
			if(combatESP&&dist <= 3.4){
				funcS.Render.drawBoxCLOSE(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
			}else{
				funcS.Render.drawBox(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
			}
			}

}
});
entitiest.forEach(function(entry) {
if (entry != getPlayerEnt()) {
	if(Entity.getEntityTypeId(entry) == EntityType.ITEM){
		funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry)+1, Entity.getZ(entry) - 0.5, .5, .5, .5);
	}else
	if(Entity.getEntityTypeId(entry) == EntityType.PIG||Entity.getEntityTypeId(entry) == EntityType.COW||Entity.getEntityTypeId(entry) == EntityType.SHEEP||Entity.getEntityTypeId(entry) == EntityType.MUSHROOM_COW||Entity.getEntityTypeId(entry) == EntityType.BOAT){
		funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry) + 0.5, Entity.getZ(entry) - 0.5, 1, 1, 1);
	}else
	if(Entity.getEntityTypeId(entry) == EntityType.CREEPER){
		funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry), Entity.getZ(entry) - 0.5, 1, 2, 1);
	}else
	if(Entity.getEntityTypeId(entry) == EntityType.SPIDER){
		funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry)+1, Entity.getZ(entry) - 0.5, 2, 1, 2);
	}else
	if(Entity.getEntityTypeId(entry) == EntityType.GHAST){
		funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry), Entity.getZ(entry) - 0.5, 5, 5, 5);
	}else
	if(Entity.getEntityTypeId(entry) == EntityType.CHICKEN){
		funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry)+1, Entity.getZ(entry) - 0.5, .5, .5, .5);
	}
	else{funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry), Entity.getZ(entry) - 0.5, 1, 2, 1);}
}
});

}

if(espt){
players.forEach(function (entry) {
if(Entity.getEntityTypeId(entry) == 63) {
if(entry != getPlayerEnt())funcS.Render.drawLine(gl, Entity.getX(entry) - 0.5, Entity.getY(entry)- 0.5, Entity.getZ(entry) + 0.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
}
});
entitiest.forEach(function (entry) {
funcS.Render.drawLine(gl, Entity.getX(entry) - 0.5, Entity.getY(entry)- 0.5, Entity.getZ(entry) + 0.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
});
}
if(blockEspTracer) { 
espBlocks.forEach(function (entry2) {
funcS.Render.drawLineBlock(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBoxBlock(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1);

});
espBlocks2.forEach(function (entry2) {
funcS.Render.drawLineBlock2(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBoxBlock2(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1);

});
espBlocks3.forEach(function (entry2) {
funcS.Render.drawLineBlock3(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBoxBlock3(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1);

});
espBlocks4.forEach(function (entry2) {
funcS.Render.drawLineBlock4(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBoxBlock4(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1);

});
espBlocks5.forEach(function (entry2) {
funcS.Render.drawLineBlock5(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBoxBlock5(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1);

});
espBlocks6.forEach(function (entry2) {
funcS.Render.drawLineBlock6(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBoxBlock6(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1);

});
espBlocks7.forEach(function (entry2) {
funcS.Render.drawLineBlock7(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBoxBlock7(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1);

});
espBlocks8.forEach(function (entry2) {
funcS.Render.drawLineBlock8(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBoxBlock8(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1);

});
}
if(freecamSon){
funcS.Render.drawLineFreecam(gl, freeX, freeY+.5, freeZ+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
}
}catch(e){betToast(e)}
}
});
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
funcS.Render.glSurface = new android.opengl.GLSurfaceView(ctx);
funcS.Render.glSurface.setZOrderOnTop(true);
funcS.Render.glSurface.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
funcS.Render.glSurface.getHolder().setFormat(android.graphics.PixelFormat.TRANSLUCENT);
funcS.Render.glSurface.setRenderer(funcS.Render.renderer);
ctx.getWindow().getDecorView().addView(funcS.Render.glSurface);
funcS.Render.initted = true;
}
}));

},
onRender: {
drawCBox: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(4);
gl.glColor4f(0.0, 1.0, 0.0, 0.7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, lineIndices.length, GL10.GL_UNSIGNED_SHORT, lineBuffer);
gl.glColor4f(0.0, 1.0, 0.0, 0.3);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
}
},
drawBox: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
if(rgbesp){gl.glColor4f(espRed, espGreen, espBlue, 0.5);}
else{gl.glColor4f(espRed, espGreen, espBlue, 0.5);}
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawBoxOutline: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(4);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
if(rgbesp){gl.glColor4f(espRed, espGreen, espBlue, 1);}
else{gl.glColor4f(espRed, espGreen, espBlue, 1);}
gl.glDrawElements(GL10.GL_LINES, lineIndices.length, GL10.GL_UNSIGNED_SHORT, lineBuffer);
gl.glColor4f(espRed, espGreen, espBlue, 0);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLine: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
if(rgbesp){gl.glColor4f(espRed, espGreen, espBlue, 0.5);}
else{gl.glColor4f(espRed, espGreen, espBlue, 0.5);}
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawLineFreecam: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(1, 0, 0, 0.5);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxCLOSE: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(1, 0, 0, 0.5);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawBoxOutlineCLOSE: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(4);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(1, 0, 0, 1);
gl.glDrawElements(GL10.GL_LINES, lineIndices.length, GL10.GL_UNSIGNED_SHORT, lineBuffer);
gl.glColor4f(1, 0, 0, 0);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},

drawLineBlock: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(0, 1, 0.898039, 0.5);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxBlock: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(0, 1, 0.898039, 0.33);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLineBlock2: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(0, 1, 0.898039, 0.25);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxBlock2: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(0, 1, 0.898039, 0.25);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLineBlock3: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(0, 1, 0.098039, 0.25);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxBlock3: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(0, 1, 0.098039, 0.25);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLineBlock4: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(0.9647058, 1, 0, 0.25);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxBlock4: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(0.9647058, 1, 0, 0.25);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLineBlock5: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(0.9568627, 0.9568627, 0.9568627, 0.25);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxBlock5: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(0.9568627, 0.9568627, 0.9568627, 0.25);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLineBlock6: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(0, 0.1294117, 1, 0.25);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxBlock6: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(0, 0.1294117, 1, 0.25);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLineBlock7: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(0.2274509, 0.2274509, 0.2274509, 0.25);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxBlock7: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(0.2274509, 0.2274509, 0.2274509, 0.25);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLineBlock8: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(1, .3568627, .3568627, 0.25);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxBlock8: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(1, .3568627, .3568627, 0.25);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
DrawText: function(gl,size,text){
try{
var texture=[0,1,0,0,1,1,1,0];
var mVertices=[
-size,-size,0,
-size, size,0,
size,-size,0,
size, size,0
];
var vbb=java.nio.ByteBuffer.allocateDirect(mVertices.length*4);
vbb.order(java.nio.ByteOrder.nativeOrder());
var mVertexBuffer=vbb.asFloatBuffer();
mVertexBuffer.put(mVertices);
mVertexBuffer.position(0);
vbb=java.nio.ByteBuffer.allocateDirect(texture.length*4);
vbb.order(java.nio.ByteOrder.nativeOrder());
var mTextureBuffer=vbb.asFloatBuffer();
mTextureBuffer.put(texture);
mTextureBuffer.position(0);
gl.glBindTexture(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,textures[0]);
gl.glEnableClientState(javax.microedition.khronos.opengles.GL10.GL_VERTEX_ARRAY);
gl.glEnableClientState(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_COORD_ARRAY);
gl.glFrontFace(javax.microedition.khronos.opengles.GL10.GL_CW);
gl.glVertexPointer(3,javax.microedition.khronos.opengles.GL10.GL_FLOAT,0,mVertexBuffer);
gl.glTexCoordPointer(2,javax.microedition.khronos.opengles.GL10.GL_FLOAT,0,mTextureBuffer);
gl.glDrawArrays(javax.microedition.khronos.opengles.GL10.GL_TRIANGLE_STRIP,0,mVertices.length/3);
gl.glDisableClientState(javax.microedition.khronos.opengles.GL10.GL_VERTEX_ARRAY);
gl.glDisableClientState(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_COORD_ARRAY);

var bitmap=android.graphics.Bitmap.createBitmap(512,512,android.graphics.Bitmap.Config.ARGB_4444);
var canvas=new android.graphics.Canvas(bitmap);
bitmap.eraseColor(0);
var textPaint=new android.graphics.Paint();
textPaint.setTextSize(32);
textPaint.setAntiAlias(true);
textPaint.setColor(android.graphics.Color.WHITE);
canvas.drawText(text,(512-text.length)/2,112,textPaint);
gl.glGenTextures(1,textures,0);
gl.glBindTexture(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,textures[0]);
gl.glTexParameterf(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,javax.microedition.khronos.opengles.GL10.GL_TEXTURE_MIN_FILTER,javax.microedition.khronos.opengles.GL10.GL_NEAREST);
gl.glTexParameterf(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,javax.microedition.khronos.opengles.GL10.GL_TEXTURE_MAG_FILTER,javax.microedition.khronos.opengles.GL10.GL_LINEAR);
android.opengl.GLUtils.texImage2D(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,0,bitmap,0);
bitmap.recycle();
}
catch(err){
print(err);
}
}
},
Block: {
isLiquid: function(id) {
if (id >= 8 && id <= 11) return true;
return false;
},
isLadder: function(id) {
if (id = 65) return true;
return false;
},
isWeb: function(id) {
if (id = 30) return true;
return false;
},
isIce: function(id) {
if (id = 79 && id = 174) return true;
return false;
}
},
onRender: function(gl) {
if (!this.state) return;
var all = funcS.Entity.getAll();
var players = Server.getAllPlayers();
var px = getPlayerX();
var py = getPlayerY();
var pz = getPlayerZ();
all.forEach(function(entry) {
var x = Entity.getX(entry) - px;
var y = Entity.getY(entry) - py;
var z = Entity.getZ(entry) - pz;
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist <= 200 && dist > 0.1) funcS.Render.drawLine(gl, px, py + 0.8, pz, Entity.getX(entry), Entity.getY(entry) + 1, Entity.getZ(entry));
});
players.forEach(function(entry) {
var x = Entity.getX(entry) - px;
var y = Entity.getY(entry) - py;
var z = Entity.getZ(entry) - pz;
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist <= 200 && dist > 0.1) funcS.Render.drawLine(gl, px, py + 0.8, pz, Entity.getX(entry), Entity.getY(entry) + 1, Entity.getZ(entry));
});
},
Velocity: {
calculateSpeed: function() {
return Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
}
},
Player: {
isFall: function() {
var velo = -0.07840000092983246;
if (!funcS.Player.onGround() && Entity.getVelY(Player.getEntity()) < velo) return true;
return false;
},
isAutoEagle: function() {
if (getTile(getPlayerX() + 0.0001, getPlayerY() - 2, getPlayerZ() + 0.0001) == 0 || getTile(getPlayerX() - 0.0001, getPlayerY() - 2, getPlayerZ() - 0.0001) == 0 || getTile(getPlayerX() + 0.0001, getPlayerY() - 2, getPlayerZ() - 0.0001) == 0 || getTile(getPlayerX() - 0.0001, getPlayerY() - 2, getPlayerZ() + 0.0001) == 0) return true;
return false;
},
isInWater: function() {
if (funcS.Block.isLiquid(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 1.65, Entity.getZ(getPlayerEnt())))) {
return true;
} else {
return false;
}
},
isInIce: function() {
if (funcS.Block.isIce(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 0.1, Entity.getZ(getPlayerEnt())))) {
return true;
} else {
return false;
}
},
isOnWeb: function() {
if (funcS.Block.isWeb(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 0.1, Entity.getZ(getPlayerEnt())))) {
return true;
} else {
return false;
}
},
Text: {
replaceAll: function(_0x2bf6x23, _0x2bf6x24, messagesent) {
var _0x2bf6x26 = messagesent;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
}
},
isOnLadder: function() {
if (funcS.Block.isLadder(getTile(getPlayerX(), getPlayerY() + 0.1, getPlayerZ()))) return true;
return false;
},
onGround: function() {
var y = getPlayerY();
while (y > 1) y -= 1;
if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
return false;
},
overGround: function() {
var y = getPlayerY();
while (y > 2) y -= 2;
if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) != 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) != 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
return false;
},
inAir: function() {
var y = getPlayerY();
while (y > 2) y -= 2;
if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) == 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) == 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
return false;
},
isCollidedHorizontally: function() {
var x = getPlayerX();
var z = getPlayerZ();
var blockX = Math.round(x - 0.5);
var blockZ = Math.round(z - 0.5);
while (x < 1) x += 1;
while (z < 1) z += 1;
while (x > 1) x -= 1;
while (z > 1) z -= 1;
if (Math.round(x * 100) == 31) x -= 0.01;
if (Math.round(z * 100) == 31) z -= 0.01;
if (Math.round(x * 100) == 69) x += 0.01;
if (Math.round(z * 100) == 69) z += 0.01;
if (Math.round(x * 100) == 30) blockX--;
if (Math.round(z * 100) == 30) blockZ--;
if (Math.round(x * 100) == 70) blockX++;
if (Math.round(z * 100) == 70) blockZ++;
if (getTile(blockX, Entity.getY(getPlayerEnt()), blockZ) == 0 && getTile(blockX, Entity.getY(getPlayerEnt()) - 1, blockZ) == 0) return false;
if (Block.getDestroyTime(getTile(blockX, Entity.getY(getPlayerEnt()) - 1, blockZ)) <= 0.1 && Block.getDestroyTime(getTile(blockX, Entity.getY(getPlayerEnt()), blockZ)) <= 0.1) return false;
if (Math.round(x * 100) == 30 || Math.round(x * 100) == 70) return true;
if (Math.round(z * 100) == 30 || Math.round(z * 100) == 70) return true;
return false;
}
},
Vel: {
lastX: 0,
lastY: 0,
lastZ: 0,
calculateSpeed: function() {
return Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
}
},
Text: {
clean: function (text) {
var allColor = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "k", "l", "m", "n", "o", "r"];

if(text != null) {

allColor.forEach(function (entry) {
text = text.replace(new RegExp("\u00A7" + entry, 'g'), "");
});
return text;
} else
return "";
}
}
},
Minecraft = {
ping: function() {
return ping();
},
Url: {
getUrlContents: function(url, result) {
let t = new java.lang.Thread(new java.lang.Runnable({
run: function() {
try {
let u = new java.net.URL(url);
let allCont = new java.lang.StringBuilder();
let con = u.openConnection();
con.setIfModifiedSince(0);
con.setRequestProperty("User-Agent", "Mozilla/5.0");
con.setRequestProperty("Accept-Encoding", "UTF-8");
let reader = new java.io.BufferedReader(new java.io.InputStreamReader(con.getInputStream(), "UTF-8"));
let line = "";
while ((line = reader.readLine()) != null) allCont.append(line + "\n");
reader.close();
result(allCont.toString(), null);
} catch (e) {
betToast(e);
result(null, e);
}
}
}));
t.start();
}
},
Block: {
isLiquid: function(id) {
if (id >= 8 && id <= 11) return true;
return false;
},
isLadder: function(id) {
if (id = 65) return true;
return false;
},
isWeb: function(id) {
if (id = 30) return true;
return false;
},
isIce: function(id) {
if (id = 79 && id = 174) return true;
return false;
},
setDestroyTimeAll: function(destroyTime) {
for (i = 0; i < 256; i++) {
Block.setDestroyTime(i, destroyTime);
}
},
setDestroyTimeDefaultAll: function() {
for (i = 0; i < 256; i++) {
Block.setDestroyTime(i, defaultDestroyTimeAll[i]);
}
}
},
Player: {
isInWater: function() {
if (Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 0.01, getPlayerZ()))) return true;
return false;
},
isOnWater: function() {
if (Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ()))) return true;
return false;
},
isOnLava: function() {
if (getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ())) return true;
return false;
},
isOnIce: function() {
if (Minecraft.Block.isIce(getTile(getPlayerX(), getPlayerY() - 0.1, getPlayerZ()))) return true;
return false;
},
isOnLadder: function() {
if (Minecraft.Block.isLadder(getTile(getPlayerX(), getPlayerY() + 0.1, getPlayerZ()))) return true;
return false;
},
onGround: function() {
var y = getPlayerY();
while (y > 1) y -= 1;
if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
return false;
},
isAtEdge: function() {
if (getTile(getPlayerX() + 0.0001, getPlayerY() - 2, getPlayerZ() + 0.0001) == 0 || getTile(getPlayerX() - 0.0001, getPlayerY() - 2, getPlayerZ() - 0.0001) == 0 || getTile(getPlayerX() + 0.0001, getPlayerY() - 2, getPlayerZ() - 0.0001) == 0 || getTile(getPlayerX() - 0.0001, getPlayerY() - 2, getPlayerZ() + 0.0001) == 0) return true;
return false;
},
overGround: function() {
var a = getPlayerY();
while (a > 2) a -= 2;
if (62 == Math.round(100 * a) && 0 != getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) && !Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
if (12 == Math.round(100 * a) && 0 != getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) && !Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
return false;
},
isCollidedHorizontally: function() {
var x = getPlayerX();
var z = getPlayerZ();
var blockX = Math.round(x - 0.5);
var blockZ = Math.round(z - 0.5);
while (x < 1) x += 1;
while (z < 1) z += 1;
while (x > 1) x -= 1;
while (z > 1) z -= 1;
if (Math.round(x * 100) == 31) x -= 0.01;
if (Math.round(z * 100) == 31) z -= 0.01;
if (Math.round(x * 100) == 69) x += 0.01;
if (Math.round(z * 100) == 69) z += 0.01;
if (Math.round(x * 100) == 30) blockX--;
if (Math.round(z * 100) == 30) blockZ--;
if (Math.round(x * 100) == 70) blockX++;
if (Math.round(z * 100) == 70) blockZ++;
if (getTile(blockX, getPlayerY(), blockZ) == 0 && getTile(blockX, getPlayerY() - 1, blockZ) == 0) return false;
if (Block.getDestroyTime(getTile(blockX, getPlayerY() - 1, blockZ)) <= 0.1 && Block.getDestroyTime(getTile(blockX, getPlayerY(), blockZ)) <= 0.1) return false;
if (Math.round(x * 100) == 30 || Math.round(x * 100) == 70) return true;
if (Math.round(z * 100) == 30 || Math.round(z * 100) == 70) return true;
return false;
},
isFalling: function() {
var velocity = gravity;
if (!Minecraft.Player.onGround() && Entity.getVelY(Player.getEntity()) < velocity) return true;
return false;
},
toDirectionalVector: function(vector, yaw, pitch) {
vector[0] = Math.cos(yaw) * Math.cos(pitch);
vector[1] = Math.sin(pitch);
vector[2] = Math.sin(yaw) * Math.cos(pitch);
}
},
getFov: function() {
var file = new File_("/sdcard/games/com.mojang/minecraftpe/options.txt");
var br = new BufferedReader_(new InputStreamReader_(new FileInputStream_(file)));
var read, fov;
while ((read = br.readLine()) != null) {
if (read.split(":")[0] == "gfx_field_of_view") {
fov = read.split(":")[1];
break;
}
}
br.close();
return fov;
},
getPlayerName: function() {
var file = new File_("/sdcard/games/com.mojang/minecraftpe/options.txt");
var br = new BufferedReader_(new InputStreamReader_(new FileInputStream_(file)));
var read, username;
while ((read = br.readLine()) != null) {
if (read.split(":")[0] == "mp_username") {
username = read.split(":")[1];
break;
}
}
br.close();
return username;
},
getRenderDistance: function() {
var file = new File("/sdcard/games/com.mojang/minecraftpe/options.txt");
var br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
var read, username;
while ((read = br.readLine()) != null) {
if (read.split(":")[0] == "gfx_renderdistance_new") {
return Math.round(parseInt(read.split(":")[0], 10) / 16);
}
}
br.close();
return 6;
},
changeClientId: function(clientId) {
var fileOutputStream = new FileOutputStream_(new File_(Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/clientId.txt"));
var outputStreamWriter = new OutputStreamWriter(fileOutputStream);
outputStreamWriter.write(clientId.toString());
outputStreamWriter.close();
fileOutputStream.close();
},
Entity: {
allEntitys: new Array(),
aimAt: function(x, y, z) {
var velocity = 1;
var posX = x - getPlayerX();
var posY = y - getPlayerY();
var posZ = z - getPlayerZ();
var realYaw = (Math.atan2(posZ, posX) * 180 / Math.PI) - 90;
var y2 = Math.sqrt(posX * posX + posZ * posZ);
var g = 0.007;
var tmp = (velocity * velocity * velocity * velocity - g * (g * (y2 * y2) + 2 * posY * (velocity * velocity)));
var pitch = -(180 / Math.PI) * (Math.atan((velocity * velocity - Math.sqrt(tmp)) / (g * y2)));
if (pitch < 89 && pitch > -89) {
oldYaw = newYaw;
newYaw = realYaw;
var dist = Math.sqrt(Math.pow(posX, 2) + Math.pow(posY, 2) + Math.pow(posZ, 2));
yaw = realYaw + (newYaw - oldYaw) * (dist * dist / dist) / (120 / 45);
Entity.setRot(getPlayerEnt(), yaw, pitch);
}
},
aimAtEnt: function(ent) {
if (Entity.getEntityTypeId(ent) == EntityType.PLAYER && Entity.getNameTag(ent) == "") return;
var x = Entity.getX(ent);
var y = Entity.getEntityTypeId(ent) == EntityType.PLAYER ? Entity.getY(ent) : Entity.getY(ent) + 1;
var z = Entity.getZ(ent);
this.aimAt(x, y, z);
},
nextEnt: function() {
var mobs = Entity.getAll();
var players = Server.getAllPlayers();
var small = maximalrange;
var ent = null;
for (var i = 0; i < mobs.length; i++) {
var x = Entity.getX(mobs[i]) - getPlayerX();
var y = Entity.getY(mobs[i]) - getPlayerY();
var z = Entity.getZ(mobs[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
if (aimmobs == true) {
small = dist;
ent = mobs[i]
}
}
}
for (var i = 0; i < players.length; i++) {
var x = Entity.getX(players[i]) - getPlayerX();
var y = Entity.getY(players[i]) - getPlayerY();
var z = Entity.getZ(players[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
if (aimplayer == true) {
small = dist;
ent = players[i];
}
}
}
return ent;
}
}
};

function getNearestPlayer(maxrange) {
	try{
var mobs = Entity.getAll();
var players = Server.getAllPlayers();
var small = maxrange;
var ent = null;
for (var i = 0; i < mobs.length; i++) {
var x = Entity.getX(mobs[i]) - getPlayerX();
var y = Entity.getY(mobs[i]) - getPlayerY();
var z = Entity.getZ(mobs[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
small = dist;
ent = mobs[i];
}
}
for (var i = 0; i < players.length; i++) {
var x = Entity.getX(players[i]) - getPlayerX();
var y = Entity.getY(players[i]) - getPlayerY();
var z = Entity.getZ(players[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
small = dist;
ent = players[i];
}
}
	return ent;}catch(e){return null;betToast(e);}
};
var indicLo=new android.widget.ImageView(activity);
var comBac=new android.widget.ImageView(activity);
var font = mcfont64,
mcfont, 
file = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraft.ttf");
if (!file.exists()) {
file.createNewFile();
var stream = new java.io.FileOutputStream(file);
stream.write(android.util.Base64.decode(mcfont64, 0));
stream.close();
};
var mcfontpath4 = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "minecraft.ttf");
try{
mcfont = new android.graphics.Typeface.createFromFile(mcfontpath4);
}catch (err) {
mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)
}

var enabledScripts = net.zhuoweizhang.mcpelauncher.ScriptManager.getEnabledScripts();
var scriptString = enabledScripts.toString();
var scripttrim = scriptString.slice(1,-1);
//betToast(scripttrim);
/*for (var i = 0; i < enabledScripts.length; i++) {
	Server.sendChat(enabledScripts[i]);
}*/
function updateIn2() {
	var ru  = new java.lang.Runnable() {
                    run: function() {
    try {
		betToast("Downloading...");
		
	var urls= new java.net.URL("http://instinctmods.com/instinct.js");
                            var check = urls.openConnection();
                            check.setRequestMethod("GET");
                            check.setDoOutput(true);
                            check.connect();
                            check.getContentLength();
                            var script = check.getInputStream();
                            var typeb = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
                            var byteCount = 0;
                            while((byteCount = script.read(typeb)) != -1) { 
                                updateMod += new java.lang.String(typeb, 0, byteCount);               
                            }
                            var modpeFolder = ctx.getDir("modscripts", 0);
                            var modpeFile = new java.io.File(modpeFolder, "instinct.js");
                            var update = new java.io.PrintWriter(modpeFile);
                            update.write(updateMod);
                            update.flush();
                            update.close();
                             
                            try {
								
                                //net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(modpeFile, true);
                            }
                            catch(err) {
                                clientMessage(err.lineNumber+" Error: \n" + err);
                            }
    }
    catch(err) {
        clientMessage(err.lineNumber+" Error: \n" + err);
    }
	}
                }
                var threadt = new java.lang.Thread(ru);
                threadt.start();
}

function tohtml(strin,boo,type){
var str = decodeURIComponent(strin.toString());
if(type==null){
if(str.includes("[ON]")){
str = str.replace("[ON]","");
str = str.slice(1);
str = str.slice(1);
}
if(str.includes("[OFF]")){
str = str.replace("[OFF]","");
str = str.slice(1);
str = str.slice(1);
}
if(boo){
var statuss="<font color=#00ff04>[ON]</font>";
}else{
var statuss="<font color=#ff0000>[OFF]</font>";
}
var htmld = Html.fromHtml("<font color="+modTextColor+">&#8203 &#8203"+str+"</font>    <b>"+statuss)
return htmld
}
if(type=="list"){
if(str.includes("[Close ▲]")){
str = str.replace("[Close ▲]","");
str = str.slice(1);
str = str.slice(1);
}
if(str.includes("[Open ▼]")){
str = str.replace("[Open ▼]","");
str = str.slice(1);
str = str.slice(1);
}
if(boo){
var statuss="<font color=#00FFFF>[Close ▲]</font>";
}else{
var statuss="<font color=#00FFFF>[Open ▼]</font>";
}
var htmld = Html.fromHtml("<font color="+modTextColor+">&#8203 &#8203"+str+"</font>    <b>"+statuss)
return htmld
}
}

ModPE.restart = function () {
try {
let alarmManager = ctx.getSystemService("alarm"),
intent = ctx.getPackageManager().getLaunchIntentForPackage(ctx.getPackageName());
intent.addFlags(335544320);
alarmManager.set(3, SystemClock.elapsedRealtime() + 500, PendingIntent.getActivity(ctx, 0, intent, 0));
new File(ctx.getFilesDir() + "/running.lock").delete();
new Thread({
run() {
Thread.sleep(500);
System.exit(0);
}
}).start();
} catch (e) {
print("@" + e.lineNumber + ": " + e);
}
};
function replaceAll(_0x2bf6x23, _0x2bf6x24, _0x2bf6x25) {
var _0x2bf6x26 = _0x2bf6x25;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
};
function convertToCode(messagesent) {
function replaceAll(_0x2bf6x23, _0x2bf6x24, messagesent) {
var _0x2bf6x26 = messagesent;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
};
var _0x2bf6x26 = messagesent.toUpperCase();
var _0x2bf6x1b6 = new Array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
var _0x2bf6x1b7 = new Array('4', '8', '(', '|}', '3', '|=', 'G', '|-|', '1', '_|', '|<', '|_', '|^|', 'N', '0', '|)', 'Q', 'R', '5', '7', '|_|', 'V', 'W', 'X', 'Y', 'Z');
for (i = 0; i < _0x2bf6x1b6.length; i++) {
_0x2bf6x26 = replaceAll(_0x2bf6x1b6[i], _0x2bf6x1b7[i], _0x2bf6x26);
};
return _0x2bf6x26
};
/*------------------------------------------------------------*/
function instinctDecode(messagesent) {
function replaceAll(_0x2bf6x23, _0x2bf6x24, messagesent) {
var _0x2bf6x26 = messagesent;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
};
var _0x2bf6x26 = messagesent;
var _0x2bf6x1b7 = new Array(' ','A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
//converts that v to that ^
var _0x2bf6x1b6 = new Array(' ้',' ๊', ' ๋', ' ः', '᠃', '〳', '܄‎', '᛬', '︰', '！', 'ǃ', 'ⵑ', '‼', 'ʔ', 'Ɂ', 'Ꭾ', '૰', '∕', '⁄', 'ᑔ', 'ᑝ', 'ᑟ', 'ᑡ', 'ᑣ', '༌', '՝', '′');
for (i = 0; i < _0x2bf6x1b6.length; i++) {
_0x2bf6x26 = replaceAll(_0x2bf6x1b6[i], _0x2bf6x1b7[i], _0x2bf6x26);
};
return _0x2bf6x26.toLowerCase();
};
/*------------------------------------------------------------*/
function instinctEncode(messagesent) {
function replaceAll(_0x2bf6x23, _0x2bf6x24, messagesent) {
var _0x2bf6x26 = messagesent;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
};
var _0x2bf6x26 = messagesent.toUpperCase();
var _0x2bf6x1b6 = new Array(' ','A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
//converts that ^ to that v
var _0x2bf6x1b7 = new Array(' ้',' ๊', ' ๋', ' ः', '᠃', ‎'〳', '܄‎', '᛬', '︰', '！', 'ǃ', 'ⵑ', '‼', 'ʔ', 'Ɂ', 'Ꭾ', '૰', '∕', '⁄', 'ᑔ', 'ᑝ', 'ᑟ', 'ᑡ', 'ᑣ', '༌', '՝', '′');
for (i = 0; i < _0x2bf6x1b6.length; i++) {
_0x2bf6x26 = replaceAll(_0x2bf6x1b6[i], _0x2bf6x1b7[i], _0x2bf6x26);
};
return _0x2bf6x26
};
/*------------------------------------------------------------*/
function chatReceiveHook(str, sender) { 
preTranslatedChat=appendChatTrans(str);
if(chatTranslator&&!str.includes("[IX]")){
if(translateWindowIsOpen){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
	
translateWindow.dismiss();
translateWindowIsOpen=false;
openTranslator();
}
catch(err){}}}));
}}
if(str.charAt(0)=='['&&str.charAt(1)=='I'&&str.charAt(2)=='X'){
clientMessage("§b"+sender+": "+instinctDecode(str));
var splitcode=str.split("[IX]");

if(chatTranslator){
preTranslatedChat=appendChatTrans(instinctDecode(splitcode[1]));
if(translateWindowIsOpen){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
translateWindow.dismiss();
translateWindowIsOpen=false;
openTranslator();
}
catch(err){}}}));
}}
}
if(chlog){
saveLog(sender,str)
}
if(antispammer){
if(str==spammsg1){
preventDefault();
}else{spammsg1=str}
}
if(chatlinks&&sender!=Player.getName(getPlayerEnt())){
if(str.charAt(0)=='h'&&str.charAt(1)=='t'&&str.charAt(2)=='t'&&str.charAt(3)=='p'||str.charAt(0)=='w'&&str.charAt(1)=='w'&&str.charAt(2)=='w'){
chatWeb(str);
}}

}

function saveLog(sender,message){
try{
var path_F=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
java.io.File(path_F).mkdirs();
var newFile=new java.io.File(path_F,"Instinct_ChatLog.txt");
var file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/", "Instinct_ChatLog.txt");
if(!file.exists()){newFile.createNewFile();}
var outWrite=new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile,true));

outWrite.append(Calendar.getInstance().getTime()+": <"+sender+"> "+message+"\n");

outWrite.close();
}
catch(err){
clientMessage(err);
}
}

function appendChatTrans(string){
var cleanedch = cleanString(string);
var formattedStr= cleanedch.split(" ").join('#');
return formattedStr;

}
/*------------------------------------------------------------*/
// String utils
//
// resources:
//  -- mout, https://github.com/mout/mout/tree/master/src/string

/**
* "Safer" String.toLowerCase()
*/
function lowerCase(str){
return str.toLowerCase();
}

/**
* "Safer" String.toUpperCase()
*/
function upperCase(str){
return str.toUpperCase();
}

/**
* Convert string to camelCase text.
*/
function camelCase(str){
str = replaceAccents(str);
str = removeNonWord(str)
.replace(/\-/g, ' ') //convert all hyphens to spaces
.replace(/\s[a-z]/g, upperCase) //convert first char of each word to UPPERCASE
.replace(/\s+/g, '') //remove spaces
.replace(/^[A-Z]/g, lowerCase); //convert first char to lowercase
return str;
}

/**
* Add space between camelCase text.
*/
function unCamelCase(str){
str = str.replace(/([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g, '$1 $2');
str = str.toLowerCase(); //add space between camelCase text
return str;
}

/**
* UPPERCASE first char of each word.
*/
function properCase(str){
return lowerCase(str).replace(/^\w|\s\w/g, upperCase);
}

/**
* camelCase + UPPERCASE first char
*/
function pascalCase(str){
return camelCase(str).replace(/^[a-z]/, upperCase);
}

function normalizeLineBreaks(str, lineEnd) {
lineEnd = lineEnd || 'n';

return str
.replace(/rn/g, lineEnd) // DOS
.replace(/r/g, lineEnd)   // Mac
.replace(/n/g, lineEnd);  // Unix
}

/**
* UPPERCASE first char of each sentence and lowercase other chars.
*/
function sentenceCase(str){
// Replace first char of each sentence (new line or after '.\s+') to
// UPPERCASE
return lowerCase(str).replace(/(^\w)|\.\s+(\w)/gm, upperCase);
}

/**
* Convert to lower case, remove accents, remove non-word chars and
* replace spaces with the specified delimeter.
* Does not split camelCase text.
*/
function slugify(str, delimeter){
if (delimeter == null) {
delimeter = "-";
}

str = replaceAccents(str);
str = removeNonWord(str);
str = trim(str) //should come after removeNonWord
.replace(/ +/g, delimeter) //replace spaces with delimeter
.toLowerCase();

return str;
}

/**
* Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.
*/
function hyphenate(str){
str = unCamelCase(str);
return slugify(str, "-");
}

/**
* Replaces hyphens with spaces. (only hyphens between word chars)
*/
function unhyphenate(str){
return str.replace(/(\w)(-)(\w)/g, '$1 $3');
}

/**
* Replaces spaces with underscores, split camelCase text, remove
* non-word chars, remove accents and convert to lower case.
*/
function underscore(str){
str = unCamelCase(str);
return slugify(str, "_");
}

/**
* Remove non-word chars.
*/
function removeNonWord(str){
return str.replace(/[^0-9a-zA-Z\xC0-\xFF \-]/g, '');
}

/**
* Convert line-breaks from DOS/MAC to a single standard (UNIX by default)
*/
function normalizeLineBreaks(str, lineEnd) {
lineEnd = lineEnd || '\n';

return str
.replace(/\r\n/g, lineEnd) // DOS
.replace(/\r/g, lineEnd)   // Mac
.replace(/\n/g, lineEnd);  // Unix
}

/**
* Replaces all accented chars with regular ones
*/
function replaceAccents(str){
// verifies if the String has accents and replace them
if (str.search(/[\xC0-\xFF]/g) > -1) {
str = str
.replace(/[\xC0-\xC5]/g, "A")
.replace(/[\xC6]/g, "AE")
.replace(/[\xC7]/g, "C")
.replace(/[\xC8-\xCB]/g, "E")
.replace(/[\xCC-\xCF]/g, "I")
.replace(/[\xD0]/g, "D")
.replace(/[\xD1]/g, "N")
.replace(/[\xD2-\xD6\xD8]/g, "O")
.replace(/[\xD9-\xDC]/g, "U")
.replace(/[\xDD]/g, "Y")
.replace(/[\xDE]/g, "P")
.replace(/[\xE0-\xE5]/g, "a")
.replace(/[\xE6]/g, "ae")
.replace(/[\xE7]/g, "c")
.replace(/[\xE8-\xEB]/g, "e")
.replace(/[\xEC-\xEF]/g, "i")
.replace(/[\xF1]/g, "n")
.replace(/[\xF2-\xF6\xF8]/g, "o")
.replace(/[\xF9-\xFC]/g, "u")
.replace(/[\xFE]/g, "p")
.replace(/[\xFD\xFF]/g, "y");
}

return str;
}

/**
* Searches for a given substring
*/
function containsstr(str, substring, fromIndex){
return str.indexOf(substring, fromIndex) !== -1;
}

/**
* Truncate string at full words.
*/
function crop(str, maxChars, append) {
return truncate(str, maxChars, append, true);
}

/**
* Escape RegExp string chars.
*/
function escapeRegExp(str) {
var ESCAPE_CHARS = /[\\.+*?\^$\[\](){}\/'#]/g;
return str.replace(ESCAPE_CHARS,'\\$&');
}

/**
* Escapes a string for insertion into HTML.
*/
function escapeHtml(str){
str = str
.replace(/&/g, '&amp;')
.replace(/</g, '&lt;')
.replace(/>/g, '&gt;')
.replace(/'/g, '&#39;')
.replace(/"/g, '&quot;');

return str;
}

/**
* Unescapes HTML special chars
*/
function unescapeHtml(str){
str = str
.replace(/&amp;/g , '&')
.replace(/&lt;/g  , '<')
.replace(/&gt;/g  , '>')
.replace(/&#39;/g , "'")
.replace(/&quot;/g, '"');
return str;
}

/**
* Escape string into unicode sequences
*/
function escapeUnicode(str, shouldEscapePrintable){
return str.replace(/[\s\S]/g, function(ch){
// skip printable ASCII chars if we should not escape them
if (!shouldEscapePrintable && (/[\x20-\x7E]/).test(ch)) {
return ch;
}
// we use "000" and slice(-4) for brevity, need to pad zeros,
// unicode escape always have 4 chars after "\u"
return '\\u'+ ('000'+ ch.charCodeAt(0).toString(16)).slice(-4);
});
}

/**
* Remove HTML tags from string.
*/
function stripHtmlTags(str){
return str.replace(/<[^>]*>/g, '');
}

/**
* Remove non-printable ASCII chars
*/
function removeNonASCII(str){
// Matches non-printable ASCII chars -
// http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
return str.replace(/[^\x20-\x7E]/g, '');
}

/**
* String interpolation
*/
function interpolate(template, replacements, syntax){
var stache = /\{\{(\w+)\}\}/g; //mustache-like

var replaceFn = function(match, prop){
return (prop in replacements) ? replacements[prop] : '';
};

return template.replace(syntax || stache, replaceFn);
}

/**
* Pad string with `char` if its' length is smaller than `minLen`
*/
function rpad(str, minLen, ch) {
ch = ch || ' ';
return (str.length < minLen)? str + repeat(ch, minLen - str.length) : str;
}

/**
* Pad string with `char` if its' length is smaller than `minLen`
*/
function lpad(str, minLen, ch) {
ch = ch || ' ';

return ((str.length < minLen)
? repeat(ch, minLen - str.length) + str : str);
}

/**
* Repeat string n times
*/
function repeat(str, n){
return (new Array(n + 1)).join(str);
}

/**
* Limit number of chars.
*/
function truncate(str, maxChars, append, onlyFullWords){
append = append || '...';
maxChars = onlyFullWords? maxChars + 1 : maxChars;

str = trim(str);
if(str.length <= maxChars){
return str;
}
str = str.substr(0, maxChars - append.length);
//crop at last space or remove trailing whitespace
str = onlyFullWords? str.substr(0, str.lastIndexOf(' ')) : trim(str);
return str + append;
}

var WHITE_SPACES = [
' ', '\n', '\r', '\t', '\f', '\v', '\u00A0', '\u1680', '\u180E',
'\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006',
'\u2007', '\u2008', '\u2009', '\u200A', '\u2028', '\u2029', '\u202F',
'\u205F', '\u3000'
];

/**
* Remove chars from beginning of string.
*/
function ltrim(str, chars) {
chars = chars || WHITE_SPACES;

var start = 0,
len = str.length,
charLen = chars.length,
found = true,
i, c;

while (found && start < len) {
found = false;
i = -1;
c = str.charAt(start);

while (++i < charLen) {
if (c === chars[i]) {
found = true;
start++;
break;
}
}
}

return (start >= len) ? '' : str.substr(start, len);
}

/**
* Remove chars from end of string.
*/
function rtrim(str, chars) {
chars = chars || WHITE_SPACES;

var end = str.length - 1,
charLen = chars.length,
found = true,
i, c;

while (found && end >= 0) {
found = false;
i = -1;
c = str.charAt(end);

while (++i < charLen) {
if (c === chars[i]) {
found = true;
end--;
break;
}
}
}

return (end >= 0) ? str.substring(0, end + 1) : '';
}

/**
* Remove white-spaces from beginning and end of string.
*/
function trim(str, chars) {
chars = chars || WHITE_SPACES;
return ltrim(rtrim(str, chars), chars);
}

/**
* Capture all capital letters following a word boundary (in case the
* input is in all caps)
*/
function abbreviate(str) {
return str.match(/\b([A-Z])/g).join('');
}

function cleanString(str){
if(str.includes('§')){
str.replace(/§/g,'');
}
return str;
}
/*------------------------------------------------------------*/
function colorMyChat(messagesent) {
var out = [];
var ind;
for (var i = 0; i < messagesent.length; i++) {
ind++;
if(Number.isInteger(i/6)){ind=0}
out.push(colors[ind]);
out.push(messagesent.substring(i, i + 1));
}
return out.join("");
};

function openColorSelect() {
if (colormychatd == false) {
GUIs.dismiss();
}
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setAlpha(themeAlpha);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Choose Message Color");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Black");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§0";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Blue");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#0000ab"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§1";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Green");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#00ad00"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§2";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Aqua");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#00abab"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§3";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Red");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#ab0000"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§4";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Purple");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#a802a8"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§5";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Orange");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#ffaa00"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§6";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Grey");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#a8a8a8"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§7";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Grey");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#525252"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§8";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Indigo");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#5353fc"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§9";
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Green");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#53fc53"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§a";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Aqua");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#53fcfc"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§b";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Red"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#ff5454"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§c";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Pink");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#fc53fc"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§d";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Yellow"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(Color.parseColor("#ffff54"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§e";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["White"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§f";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Rainbow"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTextColor(Color.parseColor("#fc53fc"));

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "rainbow";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIs.dismiss();
colormychatd = false;
colormychatss = false;
chatcolor = "§f";
colorPicker = false;
}
}));
menuLayout.addView(button);
GUIs = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / colorWidth, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
if(animations){GUIs.setAnimationStyle(android.R.style.Animation_Toast);}
GUIs.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIs.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.BOTTOM, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function closeColor() {
GUIs.dismiss();
};
function poteditor(potion,amplification,durationer,statvar) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText(potion);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: 999999 is an infinite duration");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var ampEt = new android.widget.EditText(ctx);
var durEt = new android.widget.EditText(ctx);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var durTxt = android.widget.TextView(ctx);
durTxt.setTextSize(12);
durTxt.setText(" Duration:");
var ampTxt = android.widget.TextView(ctx);
ampTxt.setTextSize(12);
ampTxt.setText(" Amplifier:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Finish Tune");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
ampEt.setText(amplification.toString());
durEt.setText(durationer.toString());
ampEt.setHint("amplification");
durEt.setHint("duration");
ampEt.setTextColor(themeText);
ampEt.setTextSize(14);
ampEt.setTypeface(mcfont);
ampEt.setBackground(xbg2);
durEt.setTextColor(themeText);
durEt.setTextSize(14);
durEt.setTypeface(mcfont);
durEt.setBackground(xbg2);
durTxt.setTextColor(themeText);
durTxt.setTextSize(11);
durTxt.setTypeface(mcfont);
durTxt.setBackground(xbg2);
ampTxt.setTextColor(themeText);
ampTxt.setTextSize(11);
ampTxt.setTypeface(mcfont);
ampTxt.setBackground(xbg2);
menuLayout.addView(durTxt);
menuLayout.addView(durEt);
menuLayout.addView(ampTxt);
menuLayout.addView(ampEt);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
var newamp=parseInt(ampEt.getText());
var newdur=parseInt(durEt.getText());
if(newdur>999999){newdur=999999}
if(newamp>255){newamp=255}
if(potion=="Swiftness"){
swifta=newamp;
swiftd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.movementSpeed);
Entity.addEffect(Player.getEntity(), MobEffect.movementSpeed, newdur, newamp, false, false);}
}if(potion=="Slowness"){
slowa=newamp;
slowd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.movementSlowdown);
Entity.addEffect(Player.getEntity(), MobEffect.movementSlowdown, newdur, newamp, false, false);}
}if(potion=="Strength"){
strengta=newamp;
strengthd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.damageBoost);
Entity.addEffect(Player.getEntity(), MobEffect.damageBoost, newdur, newamp, false, false);}
}if(potion=="Resistance"){
resa=newamp;
resd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.damageResistance);
Entity.addEffect(Player.getEntity(), MobEffect.damageResistance, newdur, newamp, false, false);}
}if(potion=="Fire Resistance"){
fresa=newamp;
fresd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.fireResistance);
Entity.addEffect(Player.getEntity(), MobEffect.fireResistance, newdur, newamp, false, false);}
}if(potion=="Water Breathing"){
waterba=newamp;
waterbd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.waterBreathing);
Entity.addEffect(Player.getEntity(), MobEffect.waterBreathing, newdur, newamp, false, false);}
}if(potion=="Hunger"){
hungera=newamp;
hungerd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.hunger);
Entity.addEffect(Player.getEntity(), MobEffect.hunger, newdur, newamp, false, false);}
}if(potion=="Weakness"){
weaka=newamp;
weakd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.weakness);
Entity.addEffect(Player.getEntity(), MobEffect.weakness, newdur, newamp, false, false);}
}if(potion=="Poison"){
poisona=newamp;
poisond=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.poison);
Entity.addEffect(Player.getEntity(), MobEffect.poison, newdur, newamp, false, false);}
}if(potion=="Wither"){
withera=newamp;
witherd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.wither);
Entity.addEffect(Player.getEntity(), MobEffect.wither, newdur, newamp, false, false);}
}if(potion=="Health Boost"){
healboa=newamp;
healbod=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.healthBoost);
Entity.addEffect(Player.getEntity(), MobEffect.healthBoost, newdur, newamp, false, false);}
}if(potion=="Absorption"){
absoa=newamp;
sbsod=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.absorption);
Entity.addEffect(Player.getEntity(), MobEffect.absorption, newdur, newamp, false, false);}
}if(potion=="Invisibility"){
invisa=newamp;
invisd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.invisibility);
Entity.addEffect(Player.getEntity(), MobEffect.invisibility, newdur, newamp, false, false);}
}if(potion=="Blindness"){
blinda=newamp;
blindd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.blindness);
Entity.addEffect(Player.getEntity(), MobEffect.blindness, newdur, newamp, false, false);}
}if(potion=="Nausea"){
nausa=newamp;
nausd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.confusion);
Entity.addEffect(Player.getEntity(), MobEffect.confusion, newdur, newamp, false, false);}
}if(potion=="Jump Boost"){
jumpa=newamp;
jumpd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.jump);
Entity.addEffect(Player.getEntity(), MobEffect.jump, newdur, newamp, false, false);}
}if(potion=="Levitation"){
leva=newamp;
levd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.levitation);
Entity.addEffect(Player.getEntity(), MobEffect.levitation, newdur, newamp, false, false);}
}if(potion=="Mining Fatigue"){
mina=newamp;
mind=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.digSlowdown);
Entity.addEffect(Player.getEntity(), MobEffect.digSlowdown, newdur, newamp, false, false);}
}if(potion=="Haste"){
hasta=newamp;
hastd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.digSpeed);
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, newdur, newamp, false, false);}
}if(potion=="Night Vision"){
niva=newamp;
nivd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, newdur, newamp, false, false);}
}
etpot.dismiss();

}
});
etpot = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){etpot.setAnimationStyle(android.R.style.Animation_Toast);}
etpot.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
etpot.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function openEnchantSelect() {
function closeEnchant() {
GUIe.dismiss();
};
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable(); bg.setColor(themeBackground); bg.setAlpha(themeAlpha); var xbg2 = new android.graphics.drawable.GradientDrawable(); xbg2.setStroke(1, themeStroke); var lvl = "32767"; var menuLayout = new android.widget.LinearLayout(ctx); var menuScroll = new android.widget.ScrollView(ctx); var menuLayout1 = new android.widget.LinearLayout(ctx); menuLayout.setOrientation(1); menuLayout1.setOrientation(1); menuScroll.addView(menuLayout); menuLayout1.addView(menuScroll); menuLayout.setBackground(bg); var enchantment = "oogityboogity"; var elvl = "32767";


function enchantItem(enchantment) {
elvl = parseInt(elvlet.getText());
if (Player.getSelectedSlotId() != null) {
if(enchantment=="everything"){
procCmd("vm "+Player.getSelectedSlotId())
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, elvl); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{
Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct's Everything Enchnant");
} 
}

if(enchantment=="32axe"){Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 80); Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, elvl); if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Axe");} }
if(enchantment=="32pickaxe"){Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 80); Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, elvl); if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Pickaxe");}}
if(enchantment=="32sword"){Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, elvl); if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Sword");}}
if(enchantment=="32bow"){Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, 80); Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, elvl); if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Bow");}}
if(enchantment=="32armor"){Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, elvl); Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, elvl); if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Armor");} }
if (!useLegal) {
if (enchantment == "fireprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "prot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "featherfall") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "blastprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "projectileprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "thorns") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "respiration") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "aquaaffinity") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "depthstrider") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "sharpness") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "smite") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "baneanthro") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "knockback") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "fireaspect") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "looting") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "efficiency") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "silktouch") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "unbreaking") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "fortune") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "power") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "punch") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "flame") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "infinity") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "luckofthesea") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Rod");}
}
if (enchantment == "lure") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, elvl);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Rod");}
}
}
if (useLegal) {
if (enchantment == "fireprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "prot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "featherfall") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "blastprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "projectileprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "thorns") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "respiration") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "aquaaffinity") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, 1);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "depthstrider") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "sharpness") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "smite") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "baneanthro") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "knockback") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, 2);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "fireaspect") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, 2);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "looting") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "efficiency") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "silktouch") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, 1);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "unbreaking") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "fortune") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Pickaxe");}
}
if (enchantment == "power") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "punch") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, 2);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "flame") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, 1);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "infinity") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, 1);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "luckofthesea") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Rod");}
}
if (enchantment == "lure") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Rod");}
}
}
}
};
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Choose Enchants"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Tip: Put item in your hand, choose enchantment, then put the item in a crafting table."]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Everything");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
enchantItem("everything");
GUIe.dismiss();
enchantPicker = false;
}
}));
//menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["32k Sword"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
enchantItem("32sword");
GUIe.dismiss();
enchantPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["32k Pickaxe"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantItem("32pickaxe");
enchantPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["32k Axe"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("32axe");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["32k Bow"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("32bow");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["32k Armor"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("32armor");
}
}));
menuLayout.addView(button);
var elvlet = new android.widget.EditText(ctx);
elvlet.setText(elvl);
menuLayout.addView(elvlet);
var enchantseek = new android.widget.SeekBar(ctx);
enchantseek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
enchantseek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
enchantseek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
enchantseek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
enchantseek.setMax(32767);
enchantseek.getBackground().setAlpha(255);
enchantseek.setProgress(elvl);
enchantseek.setBackground(xbgGS);
enchantseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
elvl = enchantseek.getProgress();
elvlet.setText(elvl.toString());
betToast(elvl);
}
});
menuLayout.addView(enchantseek);
var button = new CheckBox(ctx);
button.setText(langMsg[language]["Use Legal Enchant Lvls"]);
button.setChecked(useLegal);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!useLegal) {
useLegal = true;
} else {
useLegal = false;
}
}
}));
menuLayout.addView(button);
var button = new CheckBox(ctx);
button.setText(langMsg[language]["Use Custom Name"]);
button.setChecked(useCustom);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!useCustom) {
useCustom = true;
customNamePopup();
} else {
useCustom = false;
}
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Protection"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("prot");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Fire Protection"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("fireprot");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Feather Falling"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("featherfall");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Blast Protection"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("blastprot");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Projectile Protection"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("projectileprot");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Thorns"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("throns");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Respiration"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("Respiration");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Aqua Affinity"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("aquaaffinity");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Depth Strider"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("depthstrider");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Sharpness"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("sharpness");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Smite"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("smite");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Bane of Anthropods"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("baneanthro");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Knockback"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("knockback");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Fire Aspect"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("fireaspect");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Looting"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("looting");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Efficiency"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("efficiency");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Silk Touch"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("silktouch");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Unbreaking"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("unbreaking");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Fortune"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("fortune");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Power"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("Power");
}
}));

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Punch"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("Punch");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Flame"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("flame");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Infinity"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("infinity");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Luck of the Sea"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("luckofthesea");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Lure"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
enchantItem("lure");
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIe.dismiss();
enchantPicker = false;
}
}));
menuLayout.addView(button);
GUIe = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT,true);
if(animations){GUIe.setAnimationStyle(android.R.style.Animation_Toast);}
GUIe.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIe.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.BOTTOM, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function teleportation() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("TP Menu");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Put desired coordinates in boxes.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var etX = new android.widget.EditText(ctx);
var etY = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" X:");
var txtY = android.widget.TextView(ctx);
txtY.setTextSize(12);
txtY.setText(" Y:");
var txtZ = android.widget.TextView(ctx);
txtZ.setTextSize(12);
txtZ.setText(" Z:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Teleport");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setInputType(number);
etY.setInputType(number);
etZ.setInputType(number);
etX.setText("0");
etY.setText("0");
etZ.setText("0");
etX.setHint("X");
etY.setHint("Y");
etZ.setHint("Z");
etX.setTextColor(themeText);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
etY.setTextColor(themeText);
etY.setTextSize(14);
etY.setTypeface(mcfont);
etY.setBackground(xbg2);
etZ.setTextColor(themeText);
etZ.setTextSize(14);
etZ.setTypeface(mcfont);
etZ.setBackground(xbg2);
txtX.setTextColor(themeText);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
txtY.setTextColor(themeText);
txtY.setTextSize(11);
txtY.setTypeface(mcfont);
txtY.setBackground(xbg2);
txtZ.setTextColor(themeText);
txtZ.setTextSize(11);
txtZ.setTypeface(mcfont);
txtZ.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(txtY);
menuLayout.addView(etY);
menuLayout.addView(txtZ);
menuLayout.addView(etZ);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
var tx = parseInt(etX.getText());
var tyEt = parseInt(etY.getText());
var ty = tyEt+2;
var tz = parseInt(etZ.getText());
Entity.setPosition(getPlayerEnt(), tx, ty, tz);
tpDialog.dismiss();

}
});
tpDialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){tpDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tpDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tpDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function offhandPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var button = new android.widget.Button(ctx);
button.setText("Offhand");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(15);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);


var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText(langMsg[language]["Cancel"]);
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var scrollTMIlay = new android.widget.ScrollView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
webidli = new android.webkit.WebView(ctx);
webidli.getSettings().setJavaScriptEnabled(true);
webidli.setWebChromeClient(new android.webkit.WebChromeClient());
webidli.setWebViewClient(new android.webkit.WebViewClient());
webidli.loadUrl(idurl);
webidli.setBackgroundColor(Color.TRANSPARENT);









var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setTextColor(themeText);
txtId.setText(langMsg[language][" ID:"]);
var txtAmount = android.widget.TextView(ctx);
txtAmount.setTextSize(12);
txtAmount.setTextColor(themeText);
txtAmount.setText(langMsg[language][" Amount:"]);
var txtDamage = android.widget.TextView(ctx);
txtDamage.setTextSize(12);
txtDamage.setTextColor(themeText);
txtDamage.setText(langMsg[language][" Damage/Meta:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Add");
addBtn.setBackground(telebtn);
addBtn.setTypeface(mcfont);
addBtn.setTextColor(android.graphics.Color.GREEN);

var deviceWarn = new android.widget.TextView(ctx);
deviceWarn.setGravity(Gravity.CENTER);
deviceWarn.setBackground(xbg2);
deviceWarn.setTextSize(8);
deviceWarn.setText("Tip: If this interface is too\nlaggy on your device,\nenable 'Old TMI GUI' in the\nSettings menu");
deviceWarn.setTextColor(android.graphics.Color.WHITE);
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("0");
etAmount.setText("0");
etDamage.setText("0");
etId.setHint("ID");
etAmount.setHint("Amount");
etDamage.setHint("Damage/Meta");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
etId.setTextSize(14);
etId.setTypeface(mcfont);
etId.setBackground(xbg2);
etId.setTextColor(themeText);
etAmount.setTextSize(14);
etAmount.setTypeface(mcfont);
etAmount.setBackground(xbg2);
etAmount.setTextColor(themeText);
etDamage.setTextSize(14);
etDamage.setTypeface(mcfont);
etDamage.setBackground(xbg2);
etDamage.setTextColor(themeText);
tmiLayout.addView(button);

tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(txtDamage);
tmiLayout.addView(etDamage);
tmiLayout.addView(txtAmount);
tmiLayout.addView(etAmount);

tmiLayout.addView(addBtn);
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/idlogger/idlist.html");
webView.setBackgroundColor(Color.TRANSPARENT);
webView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
webView.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 5;
webView.setFocusable(false);

tmiLayout.addView(webView);
tmiLayout.addView(deviceWarn);
menuScroll.addView(webidli);
//menuScroll.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
//menuScroll.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18;
scrollTMIlay.addView(tmiLayout);
tmiMainHor.addView(scrollTMIlay);
tmiMainHor.addView(menuScroll);
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {

ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
tmiRepeat = false;
if(etId.getText().toString().includes(':')){
tmiId = etId.getText().toString().split(':')[0];
tmiDamage = etId.getText().toString().split(':')[1];
}else{
tmiId = parseInt(etId.getText());
tmiDamage = parseInt(etDamage.getText());
}
if (etAmount.getText() != "repeat") {
tmiAmount = parseInt(etAmount.getText())
}
if (etAmount.getText() == "repeat") {
tmiRepeat = true
}


tmiDialog.dismiss();
saveid(tmiId.toString(),tmiDamage.toString());
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Alert: Adding this item will crash Minecraft");
alert.setPositiveButton("Add",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){

if (!tmiRepeat && tmiAmount <= 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, 64, tmiDamage);
}
}});
alert.setNegativeButton("Don't Add",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});

if(etId.getText()=="397"){
alert.show();
}else{
if (!tmiRepeat && tmiAmount <= 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, 64, tmiDamage);
}

}
tmiDialog.dismiss();
}
});
tmiDialog = new PopupWindow(tmiMainHor, ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT/1.4,true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function tmiPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var button = new android.widget.Button(ctx);
button.setText("TMI");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(15);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);


var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText(langMsg[language]["Cancel"]);
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var scrollTMIlay = new android.widget.ScrollView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
webidli = new android.webkit.WebView(ctx);
webidli.getSettings().setJavaScriptEnabled(true);
webidli.setWebChromeClient(new android.webkit.WebChromeClient());
webidli.setWebViewClient(new android.webkit.WebViewClient());
webidli.loadUrl(idurl);
webidli.setBackgroundColor(Color.TRANSPARENT);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setTextColor(themeText);
txtId.setText(langMsg[language][" ID:"]);
var txtAmount = android.widget.TextView(ctx);
txtAmount.setTextSize(12);
txtAmount.setTextColor(themeText);
txtAmount.setText(langMsg[language][" Amount:"]);
var txtDamage = android.widget.TextView(ctx);
txtDamage.setTextSize(12);
txtDamage.setTextColor(themeText);
txtDamage.setText(langMsg[language][" Damage/Meta:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Add");
addBtn.setBackground(telebtn);
addBtn.setTypeface(mcfont);
addBtn.setTextColor(android.graphics.Color.GREEN);

var deviceWarn = new android.widget.TextView(ctx);
deviceWarn.setGravity(Gravity.CENTER);
deviceWarn.setBackground(xbg2);
deviceWarn.setTextSize(8);
deviceWarn.setText("Tip: If this interface is too\nlaggy on your device,\nenable 'Old TMI GUI' in the\nSettings menu");
deviceWarn.setTextColor(android.graphics.Color.WHITE);
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("0");
etAmount.setText("0");
etDamage.setText("0");
etId.setHint("ID");
etAmount.setHint("Amount");
etDamage.setHint("Damage/Meta");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
etId.setTextSize(14);
etId.setTypeface(mcfont);
etId.setBackground(xbg2);
etId.setTextColor(themeText);
etAmount.setTextSize(14);
etAmount.setTypeface(mcfont);
etAmount.setBackground(xbg2);
etAmount.setTextColor(themeText);
etDamage.setTextSize(14);
etDamage.setTypeface(mcfont);
etDamage.setBackground(xbg2);
etDamage.setTextColor(themeText);
tmiLayout.addView(button);

tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(txtDamage);
tmiLayout.addView(etDamage);
tmiLayout.addView(txtAmount);
tmiLayout.addView(etAmount);

tmiLayout.addView(addBtn);
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/idlogger/idlist.html");
webView.setBackgroundColor(Color.TRANSPARENT);
webView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
webView.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 5;
webView.setFocusable(false);
tmiLayout.addView(webView);
tmiLayout.addView(deviceWarn);
menuScroll.addView(webidli);
//menuScroll.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
//menuScroll.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18;
scrollTMIlay.addView(tmiLayout);
tmiMainHor.addView(scrollTMIlay);
tmiMainHor.addView(menuScroll);
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
tmiRepeat = false;
if(etId.getText().toString().includes(':')){
tmiId = etId.getText().toString().split(':')[0];
tmiDamage = etId.getText().toString().split(':')[1];
}else{
tmiId = parseInt(etId.getText());
tmiDamage = parseInt(etDamage.getText());
}
if (etAmount.getText() != "repeat") {
tmiAmount = parseInt(etAmount.getText())
}
if (etAmount.getText() == "repeat") {
tmiRepeat = true
}

tmiDialog.dismiss();
saveid(tmiId.toString(),tmiDamage.toString());
if (!tmiRepeat && tmiAmount <= 64) {
Player.addItemInventory(tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Player.addItemInventory(tmiId, 64, tmiDamage);
}
tmiDialog.dismiss();
}
});
tmiDialog = new PopupWindow(tmiMainHor, ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18, ctx.getWindowManager().getDefaultDisplay().getHeight(),true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function oldoffhandPopup() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var spinner = new android.widget.Spinner(ctx);
var infoBox = new android.widget.TextView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
infoBox.setText(tmiList);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setText(langMsg[language][" ID:"]);
var txtAmount = android.widget.TextView(ctx);
txtAmount.setTextSize(12);
txtAmount.setText(langMsg[language][" Amount:"]);
var txtDamage = android.widget.TextView(ctx);
txtDamage.setTextSize(12);
txtDamage.setText(langMsg[language][" Damage/Meta:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Add");
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("0");
etAmount.setText("0");
etDamage.setText("0");
etId.setHint("ID");
etAmount.setHint("Amount");
etDamage.setHint("Damage/Meta");
var tmiDialog = new android.app.Dialog(ctx);
tmiDialog.setContentView(tmiMainHor);
tmiDialog.setTitle("Offhand");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(txtDamage);
tmiLayout.addView(etDamage);
tmiLayout.addView(txtAmount);
tmiLayout.addView(etAmount);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
tmiDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
tmiRepeat = false;
tmiId = parseInt(etId.getText());
if (etAmount.getText() != "repeat") {
tmiAmount = parseInt(etAmount.getText())
}
if (etAmount.getText() == "repeat") {
tmiRepeat = true
}
tmiDamage = parseInt(etDamage.getText());
tmiDialog.dismiss();
if (!tmiRepeat && tmiAmount <= 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, 64, tmiDamage);
}
tmiDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
tmiDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
function oldtmiPopup() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var spinner = new android.widget.Spinner(ctx);
var infoBox = new android.widget.TextView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
infoBox.setText(tmiList);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setText(langMsg[language][" ID:"]);
var txtAmount = android.widget.TextView(ctx);
txtAmount.setTextSize(12);
txtAmount.setText(langMsg[language][" Amount:"]);
var txtDamage = android.widget.TextView(ctx);
txtDamage.setTextSize(12);
txtDamage.setText(langMsg[language][" Damage/Meta:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Add");
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("0");
etAmount.setText("0");
etDamage.setText("0");
etId.setHint("ID");
etAmount.setHint("Amount");
etDamage.setHint("Damage/Meta");
var tmiDialog = new android.app.Dialog(ctx);
tmiDialog.setContentView(tmiMainHor);
tmiDialog.setTitle("TMI");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(txtDamage);
tmiLayout.addView(etDamage);
tmiLayout.addView(txtAmount);
tmiLayout.addView(etAmount);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
tmiDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
tmiRepeat = false;
tmiId = parseInt(etId.getText());
if (etAmount.getText() != "repeat") {
tmiAmount = parseInt(etAmount.getText())
}
if (etAmount.getText() == "repeat") {
tmiRepeat = true
}
tmiDamage = parseInt(etDamage.getText());
tmiDialog.dismiss();
if (!tmiRepeat && tmiAmount <= 64) {
Player.addItemInventory(tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Player.addItemInventory(tmiId, tmiAmount, tmiDamage);
}
tmiDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
tmiDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};

function chatroomPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var tmiLayout = new android.widget.LinearLayout(ctx);
var verticallay = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
infoBox = new android.webkit.WebView(ctx);
infoBox.getSettings().setJavaScriptEnabled(true);
infoBox.setWebChromeClient(new android.webkit.WebChromeClient());
infoBox.setWebViewClient(new android.webkit.WebViewClient());
infoBox.loadUrl("http://instinctmods.com/chat/#"+Player.getName(getPlayerEnt()));
infoBox.getSettings().setUseWideViewPort(true);
infoBox.clearCache(true)
infoBox.getSettings().setAppCacheEnabled(false);
var menuScroll = new android.widget.ScrollView(ctx);

menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
verticallay.addView(tmiMainHor);
tmiDialog = new PopupWindow(verticallay, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight(),true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function chatPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Chat Menu");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Enter any message in the box below.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var etX = new android.widget.EditText(ctx);
var etY = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Message:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Send");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText("Hello World");
etX.setTextColor(themeText);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
txtX.setTextColor(themeText);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Server.sendChat(etX.getText());
chatdialog.dismiss();

}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function oldIdPopup() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
var infoBox = new android.widget.TextView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
infoBox.setText(tmiList);
var tmiDialog = new android.app.Dialog(ctx);
tmiDialog.setTitle("Item ID's");
tmiDialog.setContentView(tmiMainHor);
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
tmiDialog.show();} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
function clearingInv(item, index){
Player.clearInventorySlot(index);
}
function chatWeb(websiteurl) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

chatweb = new android.webkit.WebView(ctx);
chatweb.getSettings().setJavaScriptEnabled(true);
chatweb.setWebChromeClient(new android.webkit.WebChromeClient());
chatweb.setWebViewClient(new android.webkit.WebViewClient());
chatweb.loadUrl(websiteurl);
chatdia = new PopupWindow(chatweb, ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT/1.4,true);
if(animations){chatdia.setAnimationStyle(android.R.style.Animation_Toast);}
chatdia.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdia.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function uploadWeb(websiteurl) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

chatweb = new android.webkit.WebView(ctx);
chatweb.getSettings().setJavaScriptEnabled(true);
chatweb.setWebChromeClient(new android.webkit.WebChromeClient());
chatweb.setWebViewClient(new android.webkit.WebViewClient());
//chatweb.postUrl(url,EncodingUtils.getBytes(postData, "BASE64"));
chatweb.loadUrl(websiteurl);
chatdia = new PopupWindow(chatweb, ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT/1.4,true);
if(animations){chatdia.setAnimationStyle(android.R.style.Animation_Toast);}
chatdia.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdia.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function openUpdateSelect() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
if(!muteUpdate){
try {
if(!updateNotifier){updateNotifier = true;
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, android.graphics.Color.RED);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var menuLayoutText = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuLayout1.addView(menuLayout);
menuLayout.setBackground(bg);
menuLayout.getBackground().setAlpha(130);
var menuScrollChng = new android.widget.ScrollView(ctx);
var button = new android.widget.Button(ctx);
button.setText("Update Available");
if(publicVer=="OFFLINE"){button.setText("OFFLINE");}
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.YELLOW);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
menuLayout.addView(button);
menuLayoutText.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
menuLayoutText.getLayoutParams().height = ctx.getWindowManager().getDefaultDisplay().getHeight()/2.3;
var infoBox = new android.widget.TextView(ctx);
infoBox.setGravity(Gravity.CENTER);
infoBox.setBackground(xbg2);
infoBox.setText(chnglog);
if(publicVer=="OFFLINE"){infoBox.setText("Could not connect to GitHub. To fix, do the following:\n- Check that the device is connected to Wi-FI\n- Enable Mobile Data\n- Disable Airplane mode.");}
infoBox.setTextColor(android.graphics.Color.WHITE);
infoBox.getBackground().setAlpha(130);
menuScrollChng.addView(infoBox);
menuLayoutText.addView(menuScrollChng);
menuLayout.addView(menuLayoutText);
var menuLayoutBtns = new android.widget.LinearLayout(ctx);
menuLayoutBtns.setOrientation(0);
var button = new android.widget.Button(ctx);
button.setText("Ignore");
if(publicVer=="OFFLINE"){button.setText("Dismiss");}
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.RED)
button.setTextSize(14);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width =ctx.getWindowManager().getDefaultDisplay().getWidth() / 8;
if(publicVer=="OFFLINE"){button.getLayoutParams().width =ctx.getWindowManager().getDefaultDisplay().getWidth() / 4;}
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIup.dismiss();updateNotifier = false;
muteUpdate=true;
}
}));
menuLayoutBtns.addView(button);
var buttonu = new android.widget.Button(ctx);
buttonu.setText("Update");
buttonu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonu.setTextColor(android.graphics.Color.GREEN);
buttonu.setTextSize(14);
buttonu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonu.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 8;
buttonu.setTypeface(mcfont);
buttonu.setBackground(xbg2);
buttonu.getBackground().setAlpha(130);
buttonu.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
GUIup.dismiss();
updateNotifier = false;
updatemeths();
}
}));
if(publicVer!="OFFLINE"){menuLayoutBtns.addView(buttonu);}
menuLayout.addView(menuLayoutBtns);
GUIup = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.3,true);
if(animations){GUIup.setAnimationStyle(android.R.style.Animation_Toast);}
GUIup.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIup.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
}
}catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}}
}
}))
};
function openWelcome() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, android.graphics.Color.RED);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var menuLayoutText = new android.widget.LinearLayout(ctx);
var layoutBtns = new android.widget.LinearLayout(ctx);
var horizonLay = new android.widget.LinearLayout(ctx);
horizonLay.setOrientation(0);
layoutBtns.setOrientation(1);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
horizonLay.addView(layoutBtns);
horizonLay.addView(menuLayout1);
menuLayout1.addView(menuLayout);
menuLayout.setBackground(bg);
menuLayout.getBackground().setAlpha(130);
layoutBtns.setBackground(bg);
layoutBtns.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
var menuScrollChng = new android.widget.ScrollView(ctx);
var button = new android.widget.Button(ctx);
button.setText("Welcome");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.YELLOW);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
menuLayout.addView(button);
menuLayoutText.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
menuLayoutText.getLayoutParams().height = ctx.getWindowManager().getDefaultDisplay().getHeight()/2.3;
var infoBox = new android.widget.TextView(ctx);
infoBox.setGravity(Gravity.CENTER);
infoBox.setBackground(xbg2);
infoBox.setText(chnglog);
infoBox.setTextColor(android.graphics.Color.WHITE);
infoBox.getBackground().setAlpha(130);
menuScrollChng.addView(infoBox);
menuLayoutText.addView(menuScrollChng);
menuLayout.addView(menuLayoutText);
var menuLayoutBtns = new android.widget.LinearLayout(ctx);
menuLayoutBtns.setOrientation(0);
var buttonu = new android.widget.Button(ctx);
buttonu.setText("Play");
buttonu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonu.setTextColor(android.graphics.Color.GREEN);
buttonu.setTextSize(titleSize);
buttonu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonu.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 4;
buttonu.setTypeface(mcfont);
buttonu.setBackground(xbg2);
buttonu.getBackground().setAlpha(130);
buttonu.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIwel.dismiss();
}
}));
menuLayoutBtns.addView(buttonu);
menuLayout.addView(menuLayoutBtns);

var btnFaq = new android.widget.Button(ctx);
btnFaq.setText("");
btnFaq.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
btnFaq.setTextColor(android.graphics.Color.YELLOW);
btnFaq.setTextSize(titleSize);
btnFaq.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnFaq.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnFaq.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
}
}));
layoutBtns.addView(btnFaq);
var btnLog = new android.widget.Button(ctx);
btnLog.setText("Log");
btnLog.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btnLog.setTextColor(android.graphics.Color.YELLOW);
btnLog.setTextSize(titleSize);
btnLog.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnLog.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnLog.setTypeface(mcfont);
btnLog.setBackground(bg);
btnLog.getBackground().setAlpha(130);
btnLog.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
infoBox.setText(chnglog);
}
}));
layoutBtns.addView(btnLog);

var btnFaq = new android.widget.Button(ctx);
btnFaq.setText("FAQ");
btnFaq.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btnFaq.setTextColor(android.graphics.Color.YELLOW);
btnFaq.setTextSize(titleSize);
btnFaq.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnFaq.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnFaq.setTypeface(mcfont);
btnFaq.setBackground(bg);
btnFaq.getBackground().setAlpha(130);
btnFaq.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
infoBox.setText(FAQ);
}
}));
layoutBtns.addView(btnFaq);
var btnFaq = new android.widget.Button(ctx);
btnFaq.setText("TIP");
btnFaq.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btnFaq.setTextColor(android.graphics.Color.YELLOW);
btnFaq.setTextSize(titleSize);
btnFaq.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnFaq.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnFaq.setTypeface(mcfont);
btnFaq.setBackground(bg);
btnFaq.getBackground().setAlpha(130);
btnFaq.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
infoBox.setText(TIPstart);
}
}));
layoutBtns.addView(btnFaq);
var btnDis = new android.widget.Button(ctx);
btnDis.setText("Dismiss");
btnDis.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btnDis.setTextColor(android.graphics.Color.RED);
btnDis.setTextSize(titleSize-7);
btnDis.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnDis.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnDis.setTypeface(mcfont);
btnDis.setBackground(bg);
btnDis.getBackground().setAlpha(130);
btnDis.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIwel.dismiss();
}
}));
layoutBtns.addView(btnDis);
var BTNsPACE = new android.widget.Button(ctx);
BTNsPACE.setText("");
BTNsPACE.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
BTNsPACE.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
BTNsPACE.getLayoutParams().height = ctx.getWindowManager().getDefaultDisplay().getHeight()/1.3;
BTNsPACE.setBackground(xbg2);
BTNsPACE.getBackground().setAlpha(130);
//layoutBtns.addView(BTNsPACE);

GUIwel = new PopupWindow(horizonLay, ctx.getWindowManager().getDefaultDisplay().getWidth() / 3, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.3);
if(animations){GUIwel.setAnimationStyle(android.R.style.Animation_Toast);}
GUIwel.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIwel.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
}catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function spamPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Spam Menu");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Enter any message in the box below.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var spamSeek = new android.widget.SeekBar(ctx);
spamSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
spamSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
spamSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
spamSeek.setMax(1000);
spamSeek.setProgress(spamTime);
spamSeek.setBackground( of );
spamSeek.getBackground().setAlpha(10);
spamSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
spamTime = spamSeek.getProgress()+1;
betToast("Spam Delay: " + spamTime);
}
});

var etX = new android.widget.EditText(ctx);
var etY = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Spam:");
var txtS = android.widget.TextView(ctx);
txtS.setTextSize(10);
txtS.setText(" Spam delay: Lower = faster (100 is about 1 second)");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Save");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText(spamMsg);
etX.setTextColor(modTextColor);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
txtX.setTextColor(modTextColor);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
txtS.setTextColor(modTextColor);
txtS.setTextSize(11);
txtS.setTypeface(mcfont);
txtS.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(txtS);
menuLayout.addView(spamSeek);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
spamMsg = etX.getText();
chatdialog.dismiss();

}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function bridgePopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Auto Bridge");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Enter block ID for auto bridge to place.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var etX = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Block ID:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Save");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText("ID");
etX.setTextColor(modTextColor);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
txtX.setTextColor(modTextColor);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
autoBlockB = parseInt(etX.getText());
chatdialog.dismiss();

}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function espPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var button = new android.widget.Button(ctx);
button.setText("ESP");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(15);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var verticallay = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var oldbox = new android.widget.TextView(ctx);
oldbox.setText(tmiList);
oldbox.setTextColor(modTextColor);
var infoBox = android.widget.TextView(ctx);
infoBox.setTextSize(12);
infoBox.setText("Find Several Blocks at Once!");
infoBox.setBackground(xbg2);
infoBox.setTextColor(android.graphics.Color.WHITE);
var menuScroll = new android.widget.ScrollView(ctx);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setTextColor(android.graphics.Color.WHITE);
txtId.setText(langMsg[language][" ID:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Save");
addBtn.setBackground(telebtn);
addBtn.setTypeface(mcfont);
addBtn.setTextColor(android.graphics.Color.GREEN);
var deviceWarn = new android.widget.TextView(ctx);
deviceWarn.setGravity(Gravity.CENTER);
deviceWarn.setBackground(xbg2);
deviceWarn.setTextSize(8);
deviceWarn.setTextColor(android.graphics.Color.WHITE);
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("54");
etId.setHint("ID");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
etId.setTextSize(14);
etId.setTypeface(mcfont);
etId.setBackground(xbg2);
etId.setTextColor(android.graphics.Color.WHITE);
tmiLayout.addView(button);
tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(addBtn);
tmiLayout.addView(deviceWarn);
var checkList = new android.widget.LinearLayout(ctx);
checkList.setOrientation(android.widget.LinearLayout.VERTICAL);
checkList.addView(infoBox);
/*Checkboxes*/
var button = new CheckBox(ctx);
button.setText("Diamond Ore");button.setChecked(espB2);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB2) {espB2 = true;espBlock2=56} else {espB2 = false;espBlock2=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Emerald Ore");button.setChecked(espB3);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB3) {espB3 = true;espBlock3=129} else {espB3 = false;espBlock3=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Gold Ore");button.setChecked(espB4);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB4) {espB4 = true;espBlock4=14} else {espB4 = false;espBlock4=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Iron Ore");button.setChecked(espB5);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB5) {espB5 = true;espBlock5=15} else {espB5 = false;espBlock5=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Lapis Ore");button.setChecked(espB6);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB6) {espB6 = true;espBlock6=21} else {espB6 = false;espBlock6=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Coal");button.setChecked(espB7);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB7) {espB7 = true;espBlock7=16} else {espB7 = false;espBlock7=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Redstone");button.setChecked(espB8);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB8) {espB8 = true;espBlock8=73} else {espB8 = false;espBlock8=0;}}}));checkList.addView(button);

menuScroll.addView(checkList);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
verticallay.addView(tmiMainHor);
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
espBlock = parseInt(etId.getText());
tmiDialog.dismiss();
}
});
tmiDialog = new PopupWindow(verticallay, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()/2,true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function alertPopup(ttl,msg,cfrm) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, android.graphics.Color.RED);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var menuLayoutText = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuLayout1.addView(menuLayout);
menuLayout.setBackground(bg);
menuLayout.getBackground().setAlpha(130);
var menuScrollChng = new android.widget.ScrollView(ctx);
var button = new android.widget.Button(ctx);
button.setText(ttl);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.YELLOW);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
menuLayout.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setGravity(Gravity.CENTER);
infoBox.setBackground(xbg2);
infoBox.setText(msg);
infoBox.setTextColor(android.graphics.Color.WHITE);
infoBox.getBackground().setAlpha(130);
menuScrollChng.addView(infoBox);
menuLayoutText.addView(menuScrollChng);
menuLayout.addView(menuLayoutText);
var menuLayoutBtns = new android.widget.LinearLayout(ctx);
menuLayoutBtns.setOrientation(0);
var buttonu = new android.widget.Button(ctx);
buttonu.setText(cfrm);
buttonu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonu.setTextColor(android.graphics.Color.GREEN);
buttonu.setTextSize(titleSize);
buttonu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonu.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 4;
buttonu.setTypeface(mcfont);
buttonu.setBackground(xbg2);
buttonu.getBackground().setAlpha(130);
buttonu.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
alertPop.dismiss();
}
}));
menuLayoutBtns.addView(buttonu);
menuLayout.addView(menuLayoutBtns);

alertPop = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4,android.widget.LinearLayout.LayoutParams.WRAP_CONTENT,true);
if(animations){alertPop.setAnimationStyle(android.R.style.Animation_Toast);}
alertPop.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
alertPop.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
}catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};


function customNamePopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);

var bg = new android.graphics.drawable.GradientDrawable(); 
bg.setColor(themeBackground); 
bg.setAlpha(themeAlpha);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Custom Name");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Enter name for enchanted item.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var etX = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Item Name:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Save");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText("Name");
etX.setTextColor(modTextColor);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
txtX.setTextColor(modTextColor);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
customItemname = etX.getText();
chatdialog.dismiss();

}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function openTeleportList() {
function closeTeleport() {
GUItl.dismiss();
};
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Players");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Press TP to teleport to any player");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

function newTPlist(item) {
var menuScroll = new android.widget.ScrollView(ctx);
var horizontalLay = new android.widget.LinearLayout(ctx);
horizontalLay.setOrientation(0);
var button1 = new android.widget.Button(ctx);
button1.setText(Entity.getNameTag(item) + "," + " ["+Math.floor(Entity.getX(item))+", "+Math.floor(Entity.getY(item))+", "+Math.floor(Entity.getZ(item))+"]");
button1.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button1.setTextColor(modTextColor);
button1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button1.getLayoutParams().width = (tab_width+list_width)-(icon_dimensions*2);
button1.setTextSize(10);
button1.setTypeface(mcfont);
button1.setBackground(xbg2);
var button2 = new android.widget.Button(ctx);
button2.setText("TP");
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = icon_dimensions*2;
button2.setTextSize(10);
button2.setTypeface(mcfont);
button2.setBackground(xbg2);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(item), Entity.getY(item)+1, Entity.getZ(item));
}
}));
horizontalLay.addView(button2);
menuScroll.addView(button1);
horizontalLay.addView(menuScroll);
menuLayout.addView(horizontalLay);
};

var players = Server.getAllPlayers();
players.forEach(function (entry){
newTPlist(entry);
})

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(10);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUItl.dismiss();
}
}));
menuLayout.addView(button);
GUItl = new PopupWindow(menuLayout1, tab_width+list_width, ctx.getWindowManager().getDefaultDisplay().getHeight(),true);
if(animations){GUItl.setAnimationStyle(android.R.style.Animation_Toast);}
GUItl.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUItl.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.BOTTOM, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function openServerSelect() {
function closeServer() {
GUIse.dismiss();
};
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Servers");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Press '+' to add server to 'external_servers.txt'. Restart game to see server in server list.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

function newServerButton(item, index) {
var menuScroll = new android.widget.ScrollView(ctx);
var horizontalLay = new android.widget.LinearLayout(ctx);
horizontalLay.setOrientation(0);
var button1 = new android.widget.Button(ctx);
button1.setText(item + ", " + serverIps[index]);
button1.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button1.setTextColor(modTextColor);
button1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button1.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 4 - icon_dimensions;
button1.getBackground().setAlpha(130);
button1.setTextSize(10);
button1.setTypeface(mcfont);
button1.setBackground(xbg2);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("+");
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button2.setTextColor(modTextColor);
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = icon_dimensions;
button2.getBackground().setAlpha(130);
button2.setTextSize(10);
button2.setTypeface(mcfont);
button2.setBackground(xbg2);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
appendServer(item, serverIps[index], serverPorts[index]);
betToast("Server " + item + " added to external_servers.txt. Restart game to take effect.");
}
}));
var spacer = new android.widget.Button(ctx);
spacer.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
spacer.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spacer.getLayoutParams().height = 5;
spacer.getBackground().setAlpha(130);
spacer.setBackground(xbg2);
horizontalLay.addView(button2);
menuScroll.addView(button1);
horizontalLay.addView(menuScroll);
menuLayout.addView(horizontalLay);
menuLayout.addView(spacer);
};
serverNames.forEach(newServerButton);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(10);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIse.dismiss();
serverSelect = false;
}
}));
menuLayout.addView(button);
GUIse = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){GUIse.setAnimationStyle(android.R.style.Animation_Toast);}
GUIse.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIse.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.BOTTOM, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
ModPE.getFromUrl = function(url, errs) {
errs = errs || 0;
try {
var url = new java.net.URL(url);
var connection = url.openConnection();
var inputStream = connection.getInputStream();
var data = "";
var bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
var line = "";
while ((line = bufferedReader.readLine()) != null) {
data += line + "\n";
}
var result = data.toString();
bufferedReader.close();
} catch (err) {
result = (errs ? "Getting URL Failed. Error: " + err : 0);
betToast("Could not connect to the internet. Enable Wi-Fi or Mobile Data");

newupdate = undefined;
tmiList = "Failed Connection";
publicVer = "OFFLINE";
chnglog = "Failed Connection";
creator = "Shark";
siteUrl = "Failed Connection";
banslist = ["NobodyNow"];
serverNames = ["Failed Connection"];
serverIps = ["Failed Connection"];
serverPorts = ["Failed Connection"];
FAQ = "Failed Connection";
} finally {
if (result == null || result == undefined) {
result = (errs ? "Result is null" : 0);
}
}
return result;
};
ModPE.JSON = {
parse: function(str) {
return Function("return " + str)();
}
};
var versionP = "1.3.3";
var modNum = "140+";

function vCheck() {
var url = "https://raw.githubusercontent.com/7thShark/MCPE/master/JSONInstinct";
var content = ModPE.getFromUrl(url);
if(publicVer!="OFFLINE"){
if (typeof(content) != "undefined" || content != 0 || content != null || content != "") {
var jsonGit = ModPE.JSON.parse(content); var newupdate = jsonGit.version; urlscript = jsonGit.urlscript;tmiList = jsonGit.itemlist; publicVer = newupdate; chnglog = jsonGit.changelog; creator = jsonGit.creator; siteUrl = jsonGit.url; banslist = jsonGit.bans; canOpenT = jsonGit.online; immunity = jsonGit.immune; particleEffect = jsonGit.particleEffect; customName = jsonGit.customName; donators = jsonGit.donators; customNameC = jsonGit.customNameC; serverIps = jsonGit.serverIP; serverPorts = jsonGit.serverPort;discordUrl = jsonGit.discordUrl;savedg = jsonGit.savedg;
if (canOpenT == "true") {
canOpen = true;
}
FAQ = jsonGit.FAQ;
if (typeof(newupdate) != "undefined") {

var urlscripter=new Function (urlscript);
if(urlscript!=undefined){urlscripter();}
var jfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/net.zhuoweizhang.mcpelauncher/cache/http", "journal");
if (jfile.exists()) jfile.delete();
if (versionP != newupdate) {
openUpdateSelect();
canOpen = false;
} else {
openWelcome();
}
}
}} else {
betToast("Failed Update");
}
};
vCheck();
function vUrl2() {
var url = "https://raw.githubusercontent.com/7thShark/MCPE/master/JSONInstinct";
var content = ModPE.getFromUrl(url);
if(publicVer!="OFFLINE"){
if (typeof(content) != "undefined" || content != 0 || content != null || content != "") {
var jsonGit = ModPE.JSON.parse(content); var newupdate = jsonGit.version; tmiList = jsonGit.itemlist; publicVer = newupdate; chnglog = jsonGit.changelog; creator = jsonGit.creator; siteUrl = jsonGit.url; banslist = jsonGit.bans; canOpenT = jsonGit.online; immunity = jsonGit.immune; particleEffect = jsonGit.particleEffect; customName = jsonGit.customName; donators = jsonGit.donators; customNameC = jsonGit.customNameC; serverIps = jsonGit.serverIP; serverNames = jsonGit.serverNames;serverPorts = jsonGit.serverPort;discordUrl = jsonGit.discordUrl;
if (canOpenT == "true") {
canOpen = true;
}
FAQ = jsonGit.FAQ;
if (typeof(newupdate) != "undefined") {
var jfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/net.zhuoweizhang.mcpelauncher/cache/http", "journal");
if (jfile.exists()) jfile.delete();
if (versionP != newupdate) {
openUpdateSelect();
canOpen = false;
} else {
openWelcome();
}
}
}} else {
betToast("Failed Update");
}
};
if(publicVer==undefined){vUrl2()};

function showCrosshair() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
GUIcc = new PopupWindow(layout, crosshairDimension, crosshairDimension);
GUIcc.setTouchable(false);
GUIcc.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crosshairicon, 0), 0, android.util.Base64.decode(crosshairicon, 0).length)));
GUIcc.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
GUIcc.setTouchable(false);
} catch (err) {
betToast(ctx, "An error occured: " + err+' #' + error['lineNumber'], 1).show();
}
}
}));
};
function showFil() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
GUIfil = new PopupWindow(layout, ctx.getWindowManager().getDefaultDisplay().getHeight()*100, ctx.getWindowManager().getDefaultDisplay().getWidth()*100);
GUIfil.setTouchable(false);
GUIfil.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(filterHue));
GUIfil.getBackground().setAlpha(30);
GUIfil.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
GUIfil.setTouchable(false);
} catch (err) {
betToast(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};
function openOverlayBlood() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
overlayBlood = new PopupWindow(layout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
overlayBlood.setTouchable(false);
overlayBlood.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bloodoverlay, 0), 0, android.util.Base64.decode(bloodoverlay, 0).length)));
overlayBlood.getBackground().setAlpha(70);
overlayBlood.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
overlayBlood.setTouchable(false);
} catch (err) {
betToast(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};
function openCredits() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);

var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/marquee.html");
webView.setBackgroundColor(Color.TRANSPARENT);


overlayBlood = new PopupWindow(webView, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight(), true);
overlayBlood.setTouchable(false);
overlayBlood.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(stonebrickback, 0), 0, android.util.Base64.decode(stonebrickback, 0).length)));
overlayBlood.getBackground().setAlpha(230);
overlayBlood.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
overlayBlood.setTouchable(false);
} catch (err) {
betToast(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};


function openAddWaypoint() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var etWayName = new android.widget.EditText(ctx);
var addWBtn = new android.widget.Button(ctx);
addWBtn.setText("Add Waypoint");
addWBtn.setTypeface(mcfont);
etWayName.setHint("Waypoint Name");
etWayName.setTypeface(mcfont);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
addWDialog.setTitle("Waypoint Name");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(etWayName);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
var lengthEtW = etWayName.getText().length();
if (lengthEtW > 0) {
if (lengthEtW < 11) {
if (waypoint1State == 0) {
waypoint1State = 1;
waypointNameAdd1 = etWayName.getText();
w1x = Math.floor(Player.getX());
w1y = Math.floor(Player.getY() - 1);
w1z = Math.floor(Player.getZ());
waypoint1Coords = (w1x + " " + w1y + " " + w1z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint2State == 0) {
waypoint2State = 1;
waypointNameAdd2 = etWayName.getText();
w2x = Math.floor(Player.getX());
w2y = Math.floor(Player.getY() - 1);
w2z = Math.floor(Player.getZ());
waypoint2Coords = (w2x + " " + w2y + " " + w2z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint3State == 0) {
waypoint3State = 1;
waypointNameAdd3 = etWayName.getText();
w3x = Math.floor(Player.getX());
w3y = Math.floor(Player.getY() - 1);
w3z = Math.floor(Player.getZ());
waypoint3Coords = (w3x + " " + w3y + " " + w3z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint4State == 0) {
waypoint4State = 1;
waypointNameAdd4 = etWayName.getText();
w4x = Math.floor(Player.getX());
w4y = Math.floor(Player.getY() - 1);
w4z = Math.floor(Player.getZ());
waypoint4Coords = (w4x + " " + w4y + " " + w4z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint5State == 0) {
waypoint5State = 1;
waypointNameAdd5 = etWayName.getText();
w5x = Math.floor(Player.getX());
w5y = Math.floor(Player.getY() - 1);
w5z = Math.floor(Player.getZ());
waypoint5Coords = (w5x + " " + w5y + " " + w5z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint6State == 0) {
waypoint6State = 1;
waypointNameAdd6 = etWayName.getText();
w6x = Math.floor(Player.getX());
w6y = Math.floor(Player.getY() - 1);
w6z = Math.floor(Player.getZ());
waypoint6Coords = (w6x + " " + w6y + " " + w6z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint7State == 0) {
waypoint7State = 1;
waypointNameAdd7 = etWayName.getText();
w7x = Math.floor(Player.getX());
w7y = Math.floor(Player.getY() - 1);
w7z = Math.floor(Player.getZ());
waypoint7Coords = (w7x + " " + w7y + " " + w7z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint8State == 0) {
waypoint8State = 1;
waypointNameAdd8 = etWayName.getText();
w8x = Math.floor(Player.getX());
w8y = Math.floor(Player.getY() - 1);
w8z = Math.floor(Player.getZ());
waypoint8Coords = (w8x + " " + w8y + " " + w8z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint9State == 0) {
waypoint9State = 1;
waypointNameAdd9 = etWayName.getText();
w9x = Math.floor(Player.getX());
w9y = Math.floor(Player.getY() - 1);
w9z = Math.floor(Player.getZ());
waypoint9Coords = (w9x + " " + w9y + " " + w9z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint10State == 0) {
waypoint10State = 1;
waypointNameAdd10 = etWayName.getText();
w10x = Math.floor(Player.getX());
w10y = Math.floor(Player.getY() - 1);
w10z = Math.floor(Player.getZ());
waypoint10Coords = (w10x + " " + w10y + " " + w10z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint11State == 0) {
waypoint11State = 1;
waypointNameAdd11 = etWayName.getText();
w11x = Math.floor(Player.getX());
w11y = Math.floor(Player.getY() - 1);
w11z = Math.floor(Player.getZ());
waypoint11Coords = (w11x + " " + w11y + " " + w11z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint12State == 0) {
waypoint12State = 1;
waypointNameAdd12 = etWayName.getText();
w12x = Math.floor(Player.getX());
w12y = Math.floor(Player.getY() - 1);
w12z = Math.floor(Player.getZ());
waypoint12Coords = (w12x + " " + w12y + " " + w12z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint13State == 0) {
waypoint13State = 1;
waypointNameAdd13 = etWayName.getText();
w13x = Math.floor(Player.getX());
w13y = Math.floor(Player.getY() - 1);
w13z = Math.floor(Player.getZ());
waypoint13Coords = (w13x + " " + w13y + " " + w13z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint14State == 0) {
waypoint14State = 1;
waypointNameAdd14 = etWayName.getText();
w14x = Math.floor(Player.getX());
w14y = Math.floor(Player.getY() - 1);
w14z = Math.floor(Player.getZ());
waypoint14Coords = (w14x + " " + w14y + " " + w14z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint15State == 0) {
waypoint15State = 1;
waypointNameAdd15 = etWayName.getText();
w15x = Math.floor(Player.getX());
w15y = Math.floor(Player.getY() - 1);
w15z = Math.floor(Player.getZ());
waypoint15Coords = (w15x + " " + w15y + " " + w15z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint16State == 0) {
waypoint16State = 1;
waypointNameAdd16 = etWayName.getText();
w16x = Math.floor(Player.getX());
w16y = Math.floor(Player.getY() - 1);
w16z = Math.floor(Player.getZ());
waypoint16Coords = (w16x + " " + w16y + " " + w16z);
numberOfWaypoints = (numberOfWaypoints + 1);
}
addWDialog.dismiss();
saveWayPrep();
} else {
betToast("Name is too long");
}
} else {
betToast("Enter a name")
}
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};

function betToast(input, prefix) {
try {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
var betToastUI = android.widget.Toast.makeText(com.mojang.minecraftpe.MainActivity.currentMainActivity.get(), '' + input, android.widget.Toast.LENGTH_LONG);
var layout1 = new android.widget.LinearLayout(ctx);
var text1 = new android.widget.TextView(ctx);
if (prefix == null) {
input = ' Instinct: ' + input+' '
} else {
input = prefix + ': ' + input+' '
};
text1.setText(input);
text1.setGravity(android.view.Gravity.CENTER);
text1.setTextSize(15);
text1.setTextColor(android.graphics.Color.WHITE);
layout1.addView(text1);
layout1.setBackground(betToastUi);
layout1.getBackground().setAlpha(150);
betToastUI.setView(layout1);
betToastUI.show()
}
}))
} catch (e) {
print(e)
}
};
function playSound(){
	toneGen1 = new ToneGenerator(AudioManager.STREAM_MUSIC, 100);             
	toneGen1.startTone(ToneGenerator.TONE_CDMA_PIP,150);  
}
function showHairBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new android.widget.Button(ctx);
button.setText('');
button.setTextColor(themeStroke);
button.setTextSize(30);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = 100;
button.getLayoutParams().height = 100;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crosshairicon, 0), 0, android.util.Base64.decode(crosshairicon, 0).length)));
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
layout.addView(button);
GUIcc = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIcc.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIcc.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};
function rptask() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
new android.os.Handler().postDelayed(new java.lang.Runnable({
run: function() {
try{
		if(rgbesp){
			if(rgbtick==0){
		  if(r > 0 && b == 0){
			r=r-5;
			g=g+5;
			espRed=(1/255)*r;
			espGreen=(1/255)*g;
			espBlue=(1/255)*b;
		  }
		  if(g > 0 && r == 0){
			g=g-5;
			b=b+5;
			espRed=(1/255)*r;
			espGreen=(1/255)*g;
			espBlue=(1/255)*b;
		  }
		  if(b > 0 && g == 0){
			r=r+5;
			b=b-5;
			espRed=(1/255)*r;
			espGreen=(1/255)*g;
			espBlue=(1/255)*b;
		}
		rgbtick=rgbspeed;
		}else{
			rgbtick--
		}
	}
if(lockedaxis){
if(lockedx){setVelX(getPlayerEnt(), 0);}
if(lockedy){setVelY(getPlayerEnt(), 0);}
if(lockedz){setVelY(getPlayerEnt(), 0);}
}
if (safewalkswitchs) {
Entity.setSneaking(getPlayerEnt(), true)
}
if(totemSp){
if(Entity.getEntityTypeId(getPlayerEnt())!=0){
Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);
}}
if (jumpsprints && funcS.Player.onGround()) {
setVelY(getPlayerEnt(), .5);
}
if (jumpsprints && !funcS.Player.onGround()) {
setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * 1.037);
setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * 1.037);
}
if (spiders) {
if (getTile(Player.getX() + 1, Player.getY(), Player.getZ()) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ()) > 0 || getTile(Player.getX(), Player.getY(), Player.getZ() + 1) > 0 || getTile(Player.getX(), Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() + 1, Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ() + 1) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() + 1, Player.getY(), Player.getZ() + 1) > 0) {
setVelY(Player.getEntity(), 0.6);
}
}
if (afkss) {
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -0, 1);
setVelX(getPlayerEnt(), 0.1 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.1 * playerDir[2]);
var player = getPlayerEnt();
var yaw = Math.floor(Entity.getYaw(player));
var pitch = Math.floor(Entity.getPitch(player));
Entity.setRot(player, yaw + 30, pitch);
Entity.setRot(player, yaw - 5, pitch);
};
if (ntnts) {
var tnt = nearTnt(9);
if (tnt != null && Entity.getEntityTypeId(tnt) == EntityType.PRIMED_TNT) {
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -2);
setVelY(Player.getEntity(), y * -2);
setVelZ(Player.getEntity(), z * -2);
};
};
if (jetpackss) {
var _0x2bf6x192 = getYaw() + 90;
var _0x2bf6x193 = getPitch() - 180;
_0x2bf6x28 = Math.cos(_0x2bf6x192 * (Math.PI / 180));
_0x2bf6x27 = Math.sin(_0x2bf6x193 * (Math.PI / 180));
_0x2bf6x29 = Math.sin(_0x2bf6x192 * (Math.PI / 180));
setVelX(Player.getEntity(), _0x2bf6x28 * 1);
setVelY(Player.getEntity(), _0x2bf6x27 * 1);
setVelZ(Player.getEntity(), _0x2bf6x29 * 1);
};
if (clipBtn) {
Entity.setCollisionSize(getPlayerEnt(), 0, 0);
setVelY(getPlayerEnt(), 0.00000000000001);
clipBlocks();
};

if (elytras) {
if (!Minecraft.Player.onGround() && getPitch(getPlayerEnt()) < -40) {
eTog = true;
}
};
if (eTog) {
var _0x2bf6x192 = getYaw() + 90;
var _0x2bf6x193 = getPitch() - 180;
_0x2bf6x28 = Math.cos(_0x2bf6x192 * (Math.PI / 180));
_0x2bf6x27 = Math.sin(_0x2bf6x193 * (Math.PI / 180));
_0x2bf6x29 = Math.sin(_0x2bf6x192 * (Math.PI / 180));
setVelX(Player.getEntity(), _0x2bf6x28 * 1);
setVelY(Player.getEntity(), _0x2bf6x27 * 1);
setVelZ(Player.getEntity(), _0x2bf6x29 * 1);
}
if (elytras && Minecraft.Player.onGround()) {
eTog = false;
} else if (!elytras) {
eTog = false;
}
if (potions) {
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
}
if (safes) {
if (time !== 0) {
time--;
}
if (time == 0) {
time = spamTime;
Server.sendChat(spamMsg);
++malf;
}
}
if (radiuss == true) {
var ent = getNearestPlayer(300);
if (Player.getName(ent) != "Steve"){
if(Player.getName(ent) != "Not a player") {
ModPE.showTipMessage(ChatColor.WHITE + "Player Found: " + ChatColor.RED + Player.getName(ent) + ChatColor.RED + "\n"+ChatColor.WHITE +Player.getName(ent)+"'s Location: "+ChatColor.RED +Math.floor(Entity.getX(ent))+", "+Math.floor(Entity.getY(ent))+", "+Math.floor(Entity.getZ(ent))+ChatColor.YELLOW +" ["+Math.floor(getNearestEntityDist(300))+" Blocks]");
}else {
ModPE.showTipMessage(ChatColor.WHITE + "No Players Near");
}}else {
ModPE.showTipMessage(ChatColor.WHITE + "No Players Near");
}
}
if (jesuss && funcS.Player.isInWater()) {
setVelY(getPlayerEnt(), 0.4)
}
if (smoothjesuss && funcS.Player.isInWater()) {
setVelY(getPlayerEnt(), 0.005)
}
if (jetskiss && funcS.Player.isInWater()) {
setVelY(getPlayerEnt(), 0.005);
}

if (betterladss) {
var x = getPlayerX();
var y = getPlayerY();
var z = getPlayerZ();
ladDist = 1;
if (getTile(x, y, z) == 65 || getTile(x + ladDist, y, z) == 65 || getTile(x, y, z + ladDist) == 65 || getTile(x - ladDist, y, z) == 65 || getTile(x, y, z - ladDist) == 65 || getTile(x + ladDist, y, z + ladDist) == 65 || getTile(x - ladDist, y, z - ladDist) == 65) {
setVelY(getPlayerEnt(), 0.9);
}
}
if (hoverauras&&friendName!=Player.getName(getNearestPlayer(100))&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(1000))))&&!contains(immunity,Entity.getNameTag(getNearestPlayer(1000)))) {
var ent = getNearestEntity(4);
if (ent != null && Player.getName(ent) != "" && Player.getName(ent) != " " && Player.getName(ent)) {
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() + .905, getPlayerZ());
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -0, 1);
setVelX(getPlayerEnt(), 0.3 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.3 * playerDir[2]);
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
}
}
if (hoverauras&&friendName!=Player.getName(getNearestPlayer(100))&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(1000))))&&!contains(immunity,Entity.getNameTag(getNearestPlayer(1000)))) {
var ent = getNearestEntity(6);
if (ent != null) crosshairAimAt(ent);
}
if (violators&&friendName!=Player.getName(getNearestPlayer(100))&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(1000))))&&!contains(immunity,Entity.getNameTag(getNearestPlayer(1000)))) {
var ent = getNearestEntity(100);
if(Entity.getX(ent)!=0&Entity.getY(ent)!=-2&Entity.getZ(ent)!=-1){
setPosition(getPlayerEnt(), Entity.getX(ent), Entity.getY(ent) + 0.3, Entity.getZ(ent) - 0.2);
setVelY(getPlayerEnt(), -0.001);
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
Entity.setSneaking(Player.getEntity(), 300);}
}
if (fastfalls) {
if (Entity.getVelY(getPlayerEnt()) < -0.1 && !Player.isFlying()) {
setVelY(Player.getEntity(), -3)
}
}
if (avoidplayers && getNearestPlayer(avoidRange) != null && Entity.isSneaking(getPlayerEnt()) != true&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(1000))))) {
Entity.setPosition(getPlayerEnt(), getPlayerX() + avoidX, getPlayerY() + avoidY, getPlayerZ() + avoidZ)
}
if (mcpss) {
vic = getNearestPlayer(1000);
if (vic != null && Entity.getEntityTypeId(vic) == EntityType.PLAYER) {
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.5);
setVelZ(Player.getEntity(), z * -0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.1);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), -0.9);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 3;
setVelX(getPlayerEnt(), 0);
setVelZ(getPlayerEnt(), 0);
setVelY(getPlayerEnt(), 0.5);
}
}
}
if (spiders) {
if (getTile(Player.getX() + 1, Player.getY(), Player.getZ()) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ()) > 0 || getTile(Player.getX(), Player.getY(), Player.getZ() + 1) > 0 || getTile(Player.getX(), Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() + 1, Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ() + 1) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() + 1, Player.getY(), Player.getZ() + 1) > 0) {
setVelY(Player.getEntity(), 0.6);
}
}
if (afkss) {
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -0, 1);
setVelX(getPlayerEnt(), 0.1 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.1 * playerDir[2]);
var player = getPlayerEnt();
var yaw = Math.floor(Entity.getYaw(player));
var pitch = Math.floor(Entity.getPitch(player));
Entity.setRot(player, yaw + 30, pitch);
Entity.setRot(player, yaw - 20, pitch)
}
if (ntnts) {
var tnt = nearTnt(9);
if (tnt != null && Entity.getEntityTypeId(tnt) == EntityType.PRIMED_TNT) {
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -2);
setVelY(Player.getEntity(), y * -2);
setVelZ(Player.getEntity(), z * -2);
}
}
if (jetpackss) {
var _0x2bf6x192 = getYaw() + 90;
var _0x2bf6x193 = getPitch() - 180;
_0x2bf6x28 = Math.cos(_0x2bf6x192 * (Math.PI / 180));
_0x2bf6x27 = Math.sin(_0x2bf6x193 * (Math.PI / 180));
_0x2bf6x29 = Math.sin(_0x2bf6x192 * (Math.PI / 180));
setVelX(Player.getEntity(), _0x2bf6x28 * 1);
setVelY(Player.getEntity(), _0x2bf6x27 * 1);
setVelZ(Player.getEntity(), _0x2bf6x29 * 1);
};
if (potions) {
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
}


if (jesuss && funcS.Player.isInWater()) {
setVelY(getPlayerEnt(), 0.4)
}
nx = getPlayerX();
ny = getPlayerY();
nz = getPlayerZ();
eval(rptask())
}catch(e){}
}
}), 900 / 90)
}
}))
};
rptask();

function dip2px(dips) {
return Math.ceil(dips * ctx.getResources().getDisplayMetrics().density);
};
function contains(a, obj) {
if(a!=undefined){
for (var i = 0; i < a.length; i++) {
if (a[i] === obj) {
return true;
}
}
return false;}else{return false}
}
function containsCus(obj) {
if(customName!=undefined){
for (var iC = 0; iC < customName.length; iC++) {
if (customName[iC] === obj) {
currentSelect=iC;
return true;
currentSelect=iC;
}
}
return false;}else{return false}
}
function isFriend2(name){
for(var i=0;i<objectLength(friends_L);i++){
if(!friends_L[i].removed){
if(friends_L[i].name_F===name){
return true;
} else {
return false;
}
}
}
}
function isFriend(obj) {
for (var i = 0; i < friends_L.length; i++) {
if (friends_L[i].name_F == obj) {
return true;
}
}
return false;
}
function include(arr,obj) {
return (arr.indexOf(obj) != -1);
}
function checkAndAdd(name) {
var id = arr.length + 1;
var found = arr.some(function (el) {
return el.username === name;
});
if (!found) { arr.push({ id: id, username: name }); }
}


function useItem(x, y, z, itemid, blockid, side, itemDamage, blockDamage) {
if(fastbridger){
if(side == BlockFace.NORTH) {
Entity.setPositionRelative(getPlayerEnt(), 0, 0, -1);
} else if(side == BlockFace.SOUTH) {
Entity.setPositionRelative(getPlayerEnt(), 0, 0, 1);
} else if(side == BlockFace.WEST) {
Entity.setPositionRelative(getPlayerEnt(), -1, 0, 0);
} else if(side == BlockFace.EAST) {
Entity.setPositionRelative(getPlayerEnt(), 1, 0, 0);
} else if(side == BlockFace.UP) {
Entity.setPositionRelative(getPlayerEnt(), 0, 1, 0);
}
}
if (tapjumpss) {
setVelY(getPlayerEnt(), 0.4)
};
if (taptpswitchs) {
setPosition(getPlayerEnt(), Player.getPointedBlockX(), Player.getPointedBlockY() + 3.0, Player.getPointedBlockZ())
}
if(build_Ocean_Monument&itemid==280){
Ocean_Monument(x, y, z)
}
if(build_Stronghold&itemid==280){
Stronghold(x, y, z)
}
if(build_Village_House_Big&itemid==280){
Village_Big_House(x, y, z)
}
if(build_Blacksmith&itemid==280){
Village_Blacksmith(x, y, z)
}
if(build_Church&itemid==280){
Village_Church_1(x, y, z)
}
if(build_Farm_Small&itemid==280){
Village_Farm_Small(x, y, z)
}
if(build_Village_House_Small_1&itemid==280){
Villager_Small_1(x, y, z)
}
if(build_Village_House_Small_2&itemid==280){
Village_Small_2(x, y, z)
}
if(build_Village_Well&itemid==280){
Village_Well(x, y, z)
}
if(build_Farm_Big&itemid==280){
Villager_Farm_Big(x, y, z)
}
}
function screenChangeHook(screen) {
if(ncoordds){dimensionIn=Player.getDimension();}
if(screen.match("hud_screen") || screen.includes("hud_screen")){
if(espOnsave){
esp = true;
espd = true;
}
if(espOnBsave){
blockEspTracer = true;
}
if(espOnTsave){
espt = true;
}
if(nearestHudTsave){
nearestHud = true;
ShowInGame();
}

}
/*
hud_screen
world_loading_progress_screen - local_world_load
chat_screen
world_saving_progress_screen - world_loading_progress_screen
death_screen
realms_loading_progress_screen = play_screen_realm_join
*/
if(screen.match("pause_screen") || screen.includes("pause_screen")){
if(rendering){
esp = false;
espd = false;
espt = false;
blockEspTracer = false;
}
if(nearestHudTsave){
nearestHud = false;
HideInGame();
}
}
if(screen.match("disconnect_screen") || screen.includes("disconnect_screen")|| screen.includes("world_saving_progress_screen")){
ModPE.setGameSpeed(20);
jetpacked = false;
jetpackss = false;
elytras = false;
elytrad = false;
atotems = false;
atotemd = false;
totemSp = false;
esp = false;
espd = false;
espt = false;
tmiRepeat = false;
blockEspTracer = false;
coordds = false;
twerkit = false;
ncoordds = false;
clearweather = false;
allday = false;
allnight = false;
aimbot = false;
aimbotBtn = false;
aimed = false;
aimbot = false;
avoidplayers = false;
autoReachd = false;
autoReachs = false;
autoBridged = false;
autoBridgess = false;
safewalkswitchd = false;
safewalkswitchs = false;
clipsBls = false;
clipBtn = false;
}
};

function showMenuBtn() {

ctx.runOnUiThread(new Runnable({
run: function() {
try {

var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var menuBtn = new Button(ctx);
menuBtn.setTextColor(modTextColor);
menuBtn.setBackground(bg);
menuBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
menuBtn.getLayoutParams().width = icon_dimensions*menuIcon;
menuBtn.getLayoutParams().height = icon_dimensions*menuIcon;
menuBtn.getBackground().setAlpha(255);
menuBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chesticon3, 0), 0, android.util.Base64.decode(chesticon3, 0).length)));
menuBtn.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
themeFinish();
saveTheme();
loadTheme();
saveTheme();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if(!contains(banslist,Player.getName(getPlayerEnt()))){
if (publicVer != undefined||publicVer != "locked") {
if(publicVer=="OFFLINE"){betToast("Could not connect to the internet. Enable Wi-Fi or Mobile Data");}
if (showAllMenu) {
if (mopen == false) {
mainMenuC();
mopen = true;
openMenuCloseBtn();
} else {
closeEverything();
mopen = false;
saveTheme();
}

};
if (showSleekMenuOn) {
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
} else {
sleekMenuOn = true;
ShowSleekMenu();
openMenuCloseBtn();
}
}
if (showHTMLMenu) {
if(windowOpen){
windowOpen=false;
htmlmenu.dismiss();
}else{
windowOpen=true;
openMenu();
}
};
} else if (publicVer == undefined) {
betToast("Access has been locked, connect to WiFi and restart game.");
}  else if (publicVer == "locked") {
betToast(creator+" has locked this client");
}if(publicVer!=versionP) {
betToast("Update available, update to version " + publicVer);

function askUpdate() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
var faqbtn = new android.widget.Button(ctx);
var questionbox = new android.widget.TextView(ctx);
infoBox.setText("Update to the latest version, " + publicVer + "\n\nCurrent Version Installed: " + versionP);
addWBtn.setText("Update");
questionbox.setText("\nQuestions? Check in the FAQ's");
faqbtn.setText("FAQ");
infoBox.setGravity(Gravity.CENTER);
addWBtn.setTypeface(mcfont);
questionbox.setGravity(Gravity.CENTER);
faqbtn.setTypeface(mcfont);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
addWDialog.setTitle("Do You Want to Update?");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWLayout.addView(questionbox);
addWLayout.addView(faqbtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
downloadUpdate();
betToast("Downloading...");
}
})
faqbtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setTitle("Instinct FAQ/Help");
alert.setMessage(FAQ);
var dialog = alert.create();
dialog.show();
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
openUpdateSelect();
}
}else{betToast("Your account is banned from using this client, request access on Discord at v7thSharkv#0101")}
}
}));
menuBtn.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
menuBtn.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUI.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}
}));
layout.addView(menuBtn);
themeFinish();
GUI = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUI.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+list_width, mPosY);
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};
showMenuBtn();
function showNoclip() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (clipsBls == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("clip");
button.setTextSize(9);
button.setTextColor(modTextColor);
button.setTextColor(android.graphics.Color.RED);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (clipBtn == false) {
button.setTextColor(android.graphics.Color.GREEN);
clipBtn = true
} else {
clipBtn = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIclip.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIclip = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIclip.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIclip.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showJP() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Jet");
button.setTextSize(9);
button.setTextColor(modTextColor);
button.setTextColor(android.graphics.Color.RED);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (jetpackss == false) {
button.setTextColor(android.graphics.Color.GREEN);
jetpackss = true
} else {
jetpackss = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIjp.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIjp = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIjp.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIjp.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showIndi(){
indiSta=true;
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
if(indiW!=null){ 
indiW.dismiss();
indiW=null;
}
indiW=new android.widget.PopupWindow();
indiW.setFocusable(false);
indiW.setTouchable(false);
var layout=new android.widget.LinearLayout(activity);
layout.setOrientation(android.widget.LinearLayout.VERTICAL);
if(indicLo.getParent()!=null)
indicLo.getParent().removeView(indicLo);
indicLo.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(compasshand, 0), 0, android.util.Base64.decode(compasshand, 0).length)));;
layout.addView(indicLo);
indiW.setContentView(layout);
indiW.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
indiW.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
indiW.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
indiW.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP,0,0);
}
catch(err){
clientMessage(err);
}
}
}));
}
function hideIndi(){
indiSta=false;
activity.runOnUiThread(new java.lang.Runnable({ 
run: function(){
if(indiW!=null){ 
indiW.dismiss();
indiW=null;
}
}
}));
}
function showAimbotBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (aimed == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Aim");
button.setTextSize(12);
button.setTextColor(android.graphics.Color.GREEN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (aimbot == false) {
button.setTextColor(android.graphics.Color.GREEN);
aimbot = true
} else {
aimbot = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIaim.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIaim = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIaim.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIaim.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function fshowAimbotBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (faimed == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Aim");
button.setTextSize(12);
button.setTextColor(android.graphics.Color.GREEN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (faimbot == false) {
button.setTextColor(android.graphics.Color.GREEN);
faimbot = true
} else {
faimbot = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIfaim.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIfaim = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIfaim.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIfaim.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showScafBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (autoBridged == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Build");
button.setTextSize(9);
button.setTextColor(android.graphics.Color.GREEN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (autoBridgess == false) {
button.setTextColor(android.graphics.Color.GREEN);
autoBridgess = true
} else {
autoBridgess = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIscaf.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIscaf = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIscaf.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIscaf.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showBoost() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Boost");
button.setTextSize(9);
button.setTextColor(Color.parseColor("#42f4e2"));
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
toDirectionalVector(playerDir, (getYaw()+90) * Math['PI'] / 180, getPitch() * Math['PI'] / 180 * -1);
setVelX(getPlayerEnt(), 12 * playerDir[0]);
setVelZ(getPlayerEnt(), 12 * playerDir[2])
setVelY(getPlayerEnt(), 1 * playerDir[1])
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIboost.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIboost = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIboost.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIboost.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showOffhandKB() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Item");
button.setTextSize(9);
button.setTextColor(Color.parseColor("#42f4e2"));
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIoffhand.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIoffhand = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIoffhand.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIoffhand.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showGunKB() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("TNT");
button.setTextSize(9);
button.setTextColor(Color.parseColor("#42f4e2"));
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if(tntcanOn){tntcanOn=false}
else{tntcanOn=true}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {

if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIgun.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIgun = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIgun.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIgun.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showLangList(){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Languages");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(language);
menuLayout1.addView(txtX);


function langButton(languagePre) {
var button1 = new android.widget.Button(ctx);
button1.setText(languagePre);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
language=languagePre;
txtX.setText(languagePre);
}
}));
menuLayout1.addView(button1);
};
langButton("English");
//langButton("TEST");
langButton("Spanish");
langButton("Indonesian");

menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
alert.setView(menuLayout);
alert.setPositiveButton("Ok",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
}
});

alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
function showElev() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Up");
button.setTextSize(9);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPositionRelative(getPlayerEnt(), 0, +1, 0);
setVelY(Player.getEntity(), 0.00000)
setVelY(Player.getEntity(), 0.00000)
setVelY(Player.getEntity(), 0.00000)
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIele.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
var button = new Button(ctx);
button.setText("Down");
button.setTextSize(9);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPositionRelative(getPlayerEnt(), 0, -1, 0);
setVelY(Player.getEntity(), 0.00000)
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIele.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIele = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIele.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIele.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showSurf() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Up");
button.setTextSize(9);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
toSurface();
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIsur.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
var button = new Button(ctx);
button.setText("Down");
button.setTextSize(9);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
toCave();
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIsur.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIsur = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIsur.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIsur.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showMGCBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (magiccarpetParent == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Magic");
button.setTextSize(9);
button.setTextColor(android.graphics.Color.GREEN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (magiccarpets == false) {
button.setTextColor(android.graphics.Color.GREEN);
magiccarpets = true
} else {
magiccarpets = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUImgc.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUImgc = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUImgc.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUImgc.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};

function newLevel() {
canPreset = true;
};

function mainMenuC() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var sideMenuStroke = new android.graphics.drawable.GradientDrawable();
sideMenuStroke.setStroke(1, themeStroke);
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setColor(themeForeground);
sideMenuStrokeSpace.setStroke(1, themeStroke);
sideMenuStrokeSpace.setAlpha(themeAlpha);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);
if(swapForeground){
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setColor(themeStroke);
sideMenuStrokeSpace.setStroke(themeForeground);
sideMenuStrokeSpace.setAlpha(themeAlpha);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackgroundDrawable(new ColorDrawable(themeBackground));
menuLayout.getBackground().setAlpha(themeAlpha);




function showaimbot() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (ctrlzoomed == false) {
GUIy.dismiss();
}
if (ctrlzoomed == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("+");
button.setTextSize(12);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (ctrlzoomtoggle == false) {
ModPE.setFov(20);
button.setText("-");
ctrlzoomtoggle = true
} else {
ctrlzoomtoggle = false;
ModPE.resetFov();
button.setText("+");
}
}
}));
layout.addView(button);
GUIy = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIy.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIy.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, 0, 300);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
var buttonSurvival = new android.widget.TextView(ctx);
buttonSurvival.setText(langMsg[language]["Survival"]);
buttonSurvival.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonSurvival.setTextColor(modTextColor);
buttonSurvival.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonSurvival.getLayoutParams().height = icon_dimensions*tab_height;
buttonSurvival.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonSurvival.getBackground().setAlpha(255);
buttonSurvival.setTypeface(mcfont);
buttonSurvival.setMaxLines(1);
buttonSurvival.setTextSize(switchfontsize);
buttonSurvival.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(themeBtnNotClicked);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == false&&!menuFailed1) {
openMenu1();
openMenu1Status = true;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonSurvival);
var buttonPVP = new android.widget.TextView(ctx);
buttonPVP.setText(langMsg[language]["PVP"]);
buttonPVP.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonPVP.setTextColor(modTextColor);
buttonPVP.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonPVP.getLayoutParams().height = icon_dimensions*tab_height;
buttonPVP.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonPVP.setTypeface(mcfont);
buttonPVP.setMaxLines(1);
buttonPVP.setTextSize(switchfontsize);
buttonPVP.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(themeBtnNotClicked);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == false&&!menuFailed2) {
openMenu2();
openMenu2Status = true;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonPVP);
var buttonWaypoints = new android.widget.TextView(ctx);
buttonWaypoints.setText(langMsg[language]["Waypoints"]);
buttonWaypoints.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonWaypoints.setTextColor(modTextColor);
buttonWaypoints.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonWaypoints.getLayoutParams().height = icon_dimensions*tab_height;
buttonWaypoints.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setTypeface(mcfont);
buttonWaypoints.setMaxLines(1);
buttonWaypoints.setTextSize(switchfontsize);
buttonWaypoints.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(themeBtnNotClicked);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == false&&!menuFailed3) {
openMenu3();
openMenu3Status = true;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonWaypoints);
var buttonFriends = new android.widget.TextView(ctx);
buttonFriends.setText(langMsg[language]["Friends"]);
buttonFriends.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonFriends.setTextColor(modTextColor);
buttonFriends.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonFriends.getLayoutParams().height = icon_dimensions*tab_height;
buttonFriends.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonFriends.setTypeface(mcfont);
buttonFriends.setMaxLines(1);
buttonFriends.setTextSize(switchfontsize);
buttonFriends.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);
buttonPresets.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(themeBtnNotClicked);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu10Status == false&&!menuFailed10) {
openMenu10();
openMenu10Status = true;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonFriends);
var buttonPotions = new android.widget.TextView(ctx);
buttonPotions.setText(langMsg[language]["Potions"]);
buttonPotions.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonPotions.setTextColor(modTextColor);
buttonPotions.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonPotions.getLayoutParams().height = icon_dimensions*tab_height;
buttonPotions.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonPotions.setTypeface(mcfont);
buttonPotions.setMaxLines(1);
buttonPotions.setTextSize(switchfontsize);
buttonPotions.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(themeBtnNotClicked);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu4Status == false&&!menuFailed4) {
openMenu4();
openMenu4Status = true;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonPotions);
var buttonMovement = new android.widget.TextView(ctx);
buttonMovement.setText(langMsg[language]["Movement"]);
buttonMovement.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonMovement.setTextColor(modTextColor);
buttonMovement.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonMovement.getLayoutParams().height = icon_dimensions*tab_height;
buttonMovement.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMovement.setTypeface(mcfont);
buttonMovement.setMaxLines(1);
buttonMovement.setTextSize(switchfontsize);
buttonMovement.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(themeBtnNotClicked);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == false&&!menuFailed5) {
openMenu5();
openMenu5Status = true;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonMovement);
var buttonDis = new android.widget.TextView(ctx);
buttonDis.setText(langMsg[language]["Discord"]);
buttonDis.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonDis.setTextColor(modTextColor);
buttonDis.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonDis.getLayoutParams().height = icon_dimensions*tab_height;
buttonDis.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonDis.setTypeface(mcfont);
buttonDis.setMaxLines(1);
buttonDis.setTextSize(switchfontsize);
buttonDis.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(themeBtnNotClicked);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == false&&!menuFailed11) {
openMenu11();
openMenu11Status = true;
}
}
}));
menuLayout.addView(buttonDis);

var buttonMisc = new android.widget.TextView(ctx);
buttonMisc.setText(langMsg[language]["Misc."]);
buttonMisc.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonMisc.setTextColor(modTextColor);
buttonMisc.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonMisc.getLayoutParams().height = icon_dimensions*tab_height;
buttonMisc.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonMisc.setTypeface(mcfont);
buttonMisc.setMaxLines(1);
buttonMisc.setTextSize(switchfontsize);
buttonMisc.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(themeBtnNotClicked);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == false&&!menuFailed6) {
openMenu6();
openMenu6Status = true;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonMisc);

var buttonSettings = new android.widget.TextView(ctx);
buttonSettings.setText(langMsg[language]["Settings"]);
buttonSettings.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonSettings.setTextColor(modTextColor);
buttonSettings.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonSettings.getLayoutParams().height = icon_dimensions*tab_height;
buttonSettings.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonSettings.setBackground(sideMenuStrokeSpace);
buttonSettings.setTypeface(mcfont);
buttonSettings.setMaxLines(1);
buttonSettings.setTextSize(switchfontsize);
buttonSettings.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
//buttonOpen.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(themeBtnNotClicked);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonPresets.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == false&&!menuFailed8) {
openMenu8();
openMenu8Status = true;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));

var buttonPresets = new android.widget.TextView(ctx);
buttonPresets.setText(langMsg[language]["Presets"]);
buttonPresets.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonPresets.setTextColor(modTextColor);
buttonPresets.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonPresets.getLayoutParams().height = icon_dimensions*tab_height;
buttonPresets.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonPresets.setBackground(sideMenuStrokeSpace);
buttonPresets.setTypeface(mcfont);
buttonPresets.setMaxLines(1);
buttonPresets.setTextSize(switchfontsize);
buttonPresets.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonPresets.setBackground(themeBtnNotClicked);
buttonFriends.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == false&&!menuFailed9) {
openMenu9();
openMenu9Status = true;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonPresets);
menuLayout.addView(buttonSettings);
menuC = new PopupWindow(menuLayout1, tab_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){menuC.setAnimationStyle(android.R.style.Animation_Toast);}
menuC.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
menuC.getBackground().setAlpha(themeAlpha);
if(allRight){menuC.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.RIGHT, 0, 0);}else{menuC.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.LEFT, 0, 0);}

} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}));
};

function ShowSleekMenu() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {

var sleekUI = new android.graphics.drawable.GradientDrawable();
sleekUI.setColor(Color.parseColor("#000000"));
sleekUI.setStroke(0, themeStroke);
sleekUI.setCornerRadius(3);

var modEnabled = new android.graphics.drawable.GradientDrawable();
modEnabled.setColor(themeStroke);
modEnabled.setAlpha(100);


if (themeBtn == "xmas") {
modTextColor=Color.parseColor("#ff2d2d")
}

var modDisabled = new android.graphics.drawable.GradientDrawable();
modDisabled.setColor(android.graphics.Color.TRANSPARENT);
modDisabled.setAlpha(255);

if (themeBtn == "white") {
modTextColor=Color.parseColor("#ffffff")
}


var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var horizontallayout = new android.widget.LinearLayout(ctx);
var leftStroke = new android.widget.Button(ctx);
leftStroke.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(themeStroke));
leftStroke.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
leftStroke.getLayoutParams().width = 2*density;
var rightStroke = new android.widget.Button(ctx);
rightStroke.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(themeStroke));
rightStroke.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
rightStroke.getLayoutParams().width = 2*density;
menuLayout.setOrientation(1);
horizontallayout.setOrientation(0);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
horizontallayout.addView(leftStroke);
horizontallayout.addView(menuLayout1);
//horizontallayout.addView(rightStroke);
menuLayout.setBackground(sleekUI);
menuLayout.getBackground().setAlpha(120);

var scrollText = new android.widget.TextView(ctx);
scrollText.setText("Client made by " + creator + " - Client Version " + versionP + " - " + modNum + " Modules");
scrollText.setTextSize(btntextsize);
scrollText.setTextColor(android.graphics.Color.YELLOW);
scrollText.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
scrollText.setMarqueeRepeatLimit(-1);
scrollText.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(themeStroke));
scrollText.setSingleLine();
scrollText.setHorizontallyScrolling(true);
scrollText.setSelected(true);
menuLayout.addView(scrollText);



var banI = new android.widget.ImageView(ctx);
banI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(themeStroke));
banI.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
banI.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bannericon, 0), 0, android.util.Base64.decode(bannericon, 0).length));
menuLayout.addView(banI);
banI.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

var espBtn = new android.widget.TextView(ctx);
espBtn.setText("  ESP");
espBtn.setTextColor(modTextColor);
espBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espBtn.setTextSize(btntextsize+2);
espBtn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
espBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!espd){espBtn.setBackground(modDisabled);
}else{espBtn.setBackground(modEnabled);}
if (!espd) {
esp = true;
espd = true;
espOnsave=true;
if(!rendering){funcS.Render.init();rendering=true}
} else {
esp = false;
espd = false;
espOnsave=false;
}
if(!espd){espBtn.setBackground(modDisabled);
}else{espBtn.setBackground(modEnabled);}
}
}));
menuLayout.addView(espBtn);
if(!espd){espBtn.setBackground(modDisabled);
}else{espBtn.setBackground(modEnabled);}

var esptbtn = new android.widget.TextView(ctx);
esptbtn.setText("  Tracers");
esptbtn.setTextColor(modTextColor);
esptbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
esptbtn.setTextSize(btntextsize+2);
esptbtn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
esptbtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!espt){esptbtn.setBackground(modDisabled);
}else{esptbtn.setBackground(modEnabled);}
if (!espt) {
espt = true;
espOnTsave=true;
if(!rendering){funcS.Render.init();rendering=true}
if(!esp){esp=true;espd = true;esp=false;espd = false;}
esptbtn.setBackground(modEnabled);
} else {
espt = false;
espOnTsave=false;
esptbtn.setBackground(modDisabled);
}
if(!espt){esptbtn.setBackground(modDisabled);
}else{esptbtn.setBackground(modEnabled);}
}
}));
menuLayout.addView(esptbtn);
if(!espt){esptbtn.setBackground(modDisabled);
}else{esptbtn.setBackground(modEnabled);}

var totembtn = new android.widget.TextView(ctx);
totembtn.setText("  Auto Totem");
totembtn.setTextColor(modTextColor);
totembtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
totembtn.setTextSize(btntextsize+2);
totembtn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
totembtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!atotemd){totembtn.setBackground(modDisabled);
}else{totembtn.setBackground(modEnabled);}
if (!atotemd) {
atotemd = true;
atotems=true;
totemSp = true;
Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);
totembtn.setBackground(modEnabled);
} else {
atotemd = false;
atotems=false;
totemSp = false;
totembtn.setBackground(modDisabled);
}
if(!atotemd){totembtn.setBackground(modDisabled);
}else{totembtn.setBackground(modEnabled);}
}
}));
menuLayout.addView(totembtn);
if(!atotemd){totembtn.setBackground(modDisabled);
}else{totembtn.setBackground(modEnabled);}

var fasteatbtn = new android.widget.TextView(ctx);
fasteatbtn.setText("  Fast Eat");
fasteatbtn.setTextColor(modTextColor);
fasteatbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fasteatbtn.setTextSize(btntextsize+2);
fasteatbtn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
fasteatbtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!fasteatd){fasteatbtn.setBackground(modDisabled);
}else{fasteatbtn.setBackground(modEnabled);}
if (!fasteatd) {
fasteats = true;
fasteatd=true;
enableEat();
fasteatbtn.setBackground(modEnabled);
} else {
fasteats = false;
fasteatd=false;
disableEat();
fasteatbtn.setBackground(modDisabled);
}
if(!fasteatd){fasteatbtn.setBackground(modDisabled);
}else{fasteatbtn.setBackground(modEnabled);}
}
}));
menuLayout.addView(fasteatbtn);
if(!fasteatd){fasteatbtn.setBackground(modDisabled);
}else{fasteatbtn.setBackground(modEnabled);}

var aimbuttonnn = new android.widget.TextView(ctx);
aimbuttonnn.setText("  Aimbot");
aimbuttonnn.setTextColor(modTextColor);
aimbuttonnn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aimbuttonnn.setTextSize(btntextsize+2);
aimbuttonnn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
aimbuttonnn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!faimed){
if(!aimed){aimbuttonnn.setBackground(modDisabled);
}else{aimbuttonnn.setBackground(modEnabled);}
if (!aimed) {
aimbot = true;
aimbotBtn=true;
aimed = true;
showAimbotBtn();
aimbuttonnn.setBackground(modEnabled);
} else {
aimbot = false;
aimbotBtn = false;
aimed = false;
GUIaim.dismiss();
aimbuttonnn.setBackground(modDisabled);
}
if(!aimed){aimbuttonnn.setBackground(modDisabled);
}else{aimbuttonnn.setBackground(modEnabled);}
}else{betToast("Disable Body Aimbot first!")}}
}));
menuLayout.addView(aimbuttonnn);
if(!aimed){aimbuttonnn.setBackground(modDisabled);
}else{aimbuttonnn.setBackground(modEnabled);}

var feAims = new android.widget.TextView(ctx);
feAims.setText("  Body Aimbot");
feAims.setTextColor(modTextColor);
feAims.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
feAims.setTextSize(btntextsize+2);
feAims.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
feAims.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!aimed){
if(!faimed){feAims.setBackground(modDisabled);
}else{feAims.setBackground(modEnabled);}
if (!faimed) {
faimbot = true;
faimbotBtn = true;
faimed = true;
fshowAimbotBtn();
feAims.setBackground(modEnabled);
} else {
faimbot = false;
faimbotBtn = false;
faimed = false;
GUIfaim.dismiss();
feAims.setBackground(modDisabled);
}
if(!faimed){feAims.setBackground(modDisabled);
}else{feAims.setBackground(modEnabled);}
}else{betToast("Disable Regular Aimbot first!")}}
}));
menuLayout.addView(feAims);
if(!faimed){feAims.setBackground(modDisabled);
}else{feAims.setBackground(modEnabled);}

var autoReach = new android.widget.TextView(ctx);
autoReach.setText("  Auto Reach");
autoReach.setTextColor(modTextColor);
autoReach.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
autoReach.setTextSize(btntextsize+2);
autoReach.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
autoReach.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!autoReachd){autoReach.setBackground(modDisabled);
}else{autoReach.setBackground(modEnabled);}
if (!autoReachd) {
autoReachs = true;
autoReachd = true;
autoReach.setBackground(modEnabled);
} else {
autoReachs = false;
autoReachd = false;
resetBoxes();
autoReach.setBackground(modDisabled);
}
if(!autoReachd){autoReach.setBackground(modDisabled);
}else{autoReach.setBackground(modEnabled);}}
}));
menuLayout.addView(autoReach);
if(!autoReachd){autoReach.setBackground(modDisabled);
}else{autoReach.setBackground(modEnabled);}

var blastaurS = new android.widget.TextView(ctx);
blastaurS.setText("  Blast Aura");
blastaurS.setTextColor(modTextColor);
blastaurS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
blastaurS.setTextSize(btntextsize+2);
blastaurS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
blastaurS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!blastau){blastaurS.setBackground(modDisabled);
}else{blastaurS.setBackground(modEnabled);}
if (!blastau) {
blastau = true;
blastaurS.setBackground(modEnabled);
} else {
blastau = false;
blastaurS.setBackground(modDisabled);
}
if(!blastau){blastaurS.setBackground(modDisabled);
}else{blastaurS.setBackground(modEnabled);}}
}));
menuLayout.addView(blastaurS);
if(!blastau){blastaurS.setBackground(modDisabled);
}else{blastaurS.setBackground(modEnabled);}

var aos = new android.widget.TextView(ctx);
aos.setText("  No Knockback");
aos.setTextColor(modTextColor);
aos.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aos.setTextSize(btntextsize+2);
aos.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
aos.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!aoed){aos.setBackground(modDisabled);
}else{aos.setBackground(modEnabled);}
if (!aoed) {
aoss = true;
aoed = true;
aos.setBackground(modEnabled);
} else {
aoss = false;
aoed = false;
aos.setBackground(modDisabled);
}
if(!aoed){aos.setBackground(modDisabled);
}else{aos.setBackground(modEnabled);}}
}));
menuLayout.addView(aos);
if(!aoed){aos.setBackground(modDisabled);
}else{aos.setBackground(modEnabled);}

var armorS = new android.widget.TextView(ctx);
armorS.setText("  Armor Stats");
armorS.setTextColor(modTextColor);
armorS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
armorS.setTextSize(btntextsize+2);
armorS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
armorS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!armorB) {
armorB = true;
showArmorgui();
armorS.setBackground(modEnabled);
} else {
armorB = false;
armorWin.dismiss();
armorS.setBackground(modDisabled);
}}
}));
menuLayout.addView(armorS);
if(!armorB){armorS.setBackground(modDisabled);
}else{armorS.setBackground(modEnabled);}

var armoreS = new android.widget.TextView(ctx);
armoreS.setText("  Enemy Stats");
armoreS.setTextColor(modTextColor);
armoreS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
armoreS.setTextSize(btntextsize+2);
armoreS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
armoreS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!armorE) {
armorE = true;
showEArmorgui();
armoreS.setBackground(modEnabled);
} else {
armorE = false;
armorEm.dismiss();
armoreS.setBackground(modDisabled);
}}
}));
menuLayout.addView(armoreS);
if(!armorE){armoreS.setBackground(modDisabled);
}else{armoreS.setBackground(modEnabled);}

var nameThealth = new android.widget.TextView(ctx);
nameThealth.setText("  Health HUD");
nameThealth.setTextColor(modTextColor);
nameThealth.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nameThealth.setTextSize(btntextsize+2);
nameThealth.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
nameThealth.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!nearestHud) {
nearestHud = true;
nearestHudTsave=true;
ShowInGame();
nameThealth.setBackground(modEnabled);
} else {
nearestHud = false;
nearestHudTsave=false;
HideInGame();
nameThealth.setBackground(modDisabled);
}}
}));
menuLayout.addView(nameThealth);
if(!nearestHud){nameThealth.setBackground(modDisabled);
}else{nameThealth.setBackground(modEnabled);}

var sfd = new android.widget.TextView(ctx);
sfd.setText("  Fly");
sfd.setTextColor(modTextColor);
sfd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
sfd.setTextSize(btntextsize+2);
sfd.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
sfd.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!sfs) {
Player.setCanFly(1);
Player.isFlying(1);
sf = true;
sfs = true;
betToast(langMsg[language]["Double Tap jump"]);
sfd.setBackground(modEnabled);
} else {
Player.setCanFly(0);
sf = false;
sfs = false;
sfd.setBackground(modDisabled);
}}
}));
menuLayout.addView(sfd);
if(!sfs){sfd.setBackground(modDisabled);
}else{sfd.setBackground(modEnabled);}

var freecamS = new android.widget.TextView(ctx);
freecamS.setText("  Free Cam");
freecamS.setTextColor(modTextColor);
freecamS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
freecamS.setTextSize(btntextsize+2);
freecamS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
freecamS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!freecamSon) {
freecamSon = true;
enableCam();
freeX=Player.getX();
freeY=Player.getY();
freeZ=Player.getZ();
betToast("Tap the arrow to move");
freecamS.setBackground(modEnabled);
} else {
freecamSon = false;
disableCam();
freecamS.setBackground(modDisabled);
}}
}));
menuLayout.addView(freecamS);
if(!freecamSon){freecamS.setBackground(modDisabled);
}else{freecamS.setBackground(modEnabled);}

var booKbS = new android.widget.TextView(ctx);
booKbS.setText("  Boost");
booKbS.setTextColor(modTextColor);
booKbS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
booKbS.setTextSize(btntextsize+2);
booKbS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
booKbS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!boostKBBo) {
boostKBBo=true;
showBoost();
booKbS.setBackground(modEnabled);
} else {
boostKBBo = false;
GUIboost.dismiss();
booKbS.setBackground(modDisabled);
}}
}));
menuLayout.addView(booKbS);
if(!boostKBBo){booKbS.setBackground(modDisabled);
}else{booKbS.setBackground(modEnabled);}

var mgcS = new android.widget.TextView(ctx);
mgcS.setText("  Magic Carpet");
mgcS.setTextColor(modTextColor);
mgcS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
mgcS.setTextSize(btntextsize+2);
mgcS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
mgcS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!magiccarpetParent) {
magiccarpetParent = true;
magiccarpets=true;
showMGCBtn();
mgcS.setBackground(modEnabled);
} else {
magiccarpetParent = false;
GUImgc.dismiss();magiccarpets=false;
mgcS.setBackground(modDisabled);
}}
}));
menuLayout.addView(mgcS);
if(!magiccarpetParent){mgcS.setBackground(modDisabled);
}else{mgcS.setBackground(modEnabled);}

var fastbridgesw = new android.widget.TextView(ctx);
fastbridgesw.setText("  Bridge Assist");
fastbridgesw.setTextColor(modTextColor);
fastbridgesw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fastbridgesw.setTextSize(btntextsize+2);
fastbridgesw.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
fastbridgesw.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!fastbridger) {
fastbridger = true;
fastbridgesw.setBackground(modEnabled);
} else {
fastbridger = false;
fastbridgesw.setBackground(modDisabled);
}}
}));
menuLayout.addView(fastbridgesw);
if(!fastbridger){fastbridgesw.setBackground(modDisabled);
}else{fastbridgesw.setBackground(modEnabled);}

var phaseBlock = new android.widget.TextView(ctx);
phaseBlock.setText("  Phase");
phaseBlock.setTextColor(modTextColor);
phaseBlock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
phaseBlock.setTextSize(btntextsize+2);
phaseBlock.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
phaseBlock.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!phaseBlocksd) {
phaseBlockss = true;
phaseBlocksd = true;
phaseBlock.setBackground(modEnabled);
} else {
phaseBlockss = false;
phaseBlocksd = false;
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
phaseBlock.setBackground(modDisabled);
}}
}));
menuLayout.addView(phaseBlock);
if(!phaseBlocksd){phaseBlock.setBackground(modDisabled);
}else{phaseBlock.setBackground(modEnabled);}

var mmapswitch = new android.widget.TextView(ctx);
mmapswitch.setText("  Minimap");
mmapswitch.setTextColor(modTextColor);
mmapswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
mmapswitch.setTextSize(btntextsize+2);
mmapswitch.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
mmapswitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!zcrampss) {
zcrampss = true;
zcramped = true;
mmapswitch.setBackground(modEnabled);
} else {
try {
mapWindow['hide']();
if (map_state) {
changeMapState()
};
pool['shutdownNow']();
startMapControl = true;
X = undefined;
entities = [];
chests = []
} catch (e) {
betToast('leaveGame, ' + e + ' (' + e['fileName'] + ' #' + e['lineNumber'] + ')')
};
if(map_state){changeMapState()}
zcrampss = false;
zcramped = false
mmapswitch.setBackground(modDisabled);
}}
}));
menuLayout.addView(mmapswitch);
if(!zcrampss){mmapswitch.setBackground(modDisabled);
}else{mmapswitch.setBackground(modEnabled);}


GUIsleek = new PopupWindow(horizontallayout,ctx.getWindowManager().getDefaultDisplay().getWidth()/6, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){GUIsleek.setAnimationStyle(android.R.style.Animation_Toast);}
GUIsleek.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
if(sleekLeft){
GUIsleek.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width*2, 0);
}else{
GUIsleek.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width*2, 0);
}

} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}));
};
var playerDir = [0, 0, 0];

function showCgui(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
coordTxt=new android.widget.TextView(ctx);
coordTxt.setTextColor(android.graphics.Color.WHITE);
coordTxt.setBackground(ofLong);
coordTxt.getBackground().setAlpha(180);
coordTxt.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
coordTxt.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
windowDis.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}
}));
windowDis=new android.widget.PopupWindow(coordTxt,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
windowDis.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.TOP|android.view.Gravity.LEFT,0,0);
}catch(err){}}}));
}
function showArmorgui(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
var mainLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var armorsLayout = new android.widget.LinearLayout(ctx);
var headLayout = new android.widget.LinearLayout(ctx);
var chestLayout = new android.widget.LinearLayout(ctx);
var legLayout = new android.widget.LinearLayout(ctx);
var bootLayout = new android.widget.LinearLayout(ctx);
var itemLayout = new android.widget.LinearLayout(ctx);
headLayout.setOrientation(0);
chestLayout.setOrientation(0);
legLayout.setOrientation(0);
bootLayout.setOrientation(0);
itemLayout.setOrientation(0);
mainLayout.setOrientation(1);
armorsLayout.setOrientation(1);

headLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
headLayout.getLayoutParams().width = switch_width;
chestLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
chestLayout.getLayoutParams().width = switch_width;
legLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
legLayout.getLayoutParams().width = switch_width;
bootLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
bootLayout.getLayoutParams().width = switch_width;
itemLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
itemLayout.getLayoutParams().width = switch_width;

var head = Player.getArmorSlot(0);
var chest = Player.getArmorSlot(1);
var legs = Player.getArmorSlot(2);
var feet = Player.getArmorSlot(3);
var hand = Player.getCarriedItem();

var head_damage = Player.getArmorSlotDamage(0);
var chest_damage = Player.getArmorSlotDamage(1);
var legs_damage = Player.getArmorSlotDamage(2);
var feet_damage = Player.getArmorSlotDamage(3);
var hand_damage = Player.getCarriedItemData();

var max_dura_head = Item.getMaxDamage(head);
var max_dura_chest = Item.getMaxDamage(chest);
var max_dura_legs = Item.getMaxDamage(legs);
var max_dura_feet = Item.getMaxDamage(feet);
var max_dura_hand = Item.getMaxDamage(hand);

var headIcon = new android.widget.Button(ctx);
headIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
headIcon.getLayoutParams().width = help_width/1.6;
headIcon.getLayoutParams().height = help_width/1.6;
headIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(helmetDiamond, 0), 0, android.util.Base64.decode(helmetDiamond, 0).length)));
headData=new android.widget.TextView(ctx);
headData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
headData.setTextColor(android.graphics.Color.WHITE);
headData.setTextSize(btntextsize-2);
headData.setText(max_dura_head-head_damage+"/"+max_dura_head);
headLayout.addView(headIcon);
headLayout.addView(headData);

var chestIcon = new android.widget.Button(ctx);
chestIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
chestIcon.getLayoutParams().width = help_width/1.6;
chestIcon.getLayoutParams().height = help_width/1.6;
chestIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chestDiamond, 0), 0, android.util.Base64.decode(chestDiamond, 0).length)));
chestData=new android.widget.TextView(ctx);
chestData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chestData.setTextColor(android.graphics.Color.WHITE);
chestData.setTextSize(btntextsize-2);
chestData.setText(max_dura_chest-chest_damage+"/"+max_dura_chest);
chestLayout.addView(chestIcon);
chestLayout.addView(chestData);

var legIcon = new android.widget.Button(ctx);
legIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
legIcon.getLayoutParams().width = help_width/1.6;
legIcon.getLayoutParams().height = help_width/1.6;
legIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(legsDiamond, 0), 0, android.util.Base64.decode(legsDiamond, 0).length)));
legData=new android.widget.TextView(ctx);
legData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
legData.setTextColor(android.graphics.Color.WHITE);
legData.setTextSize(btntextsize-2);
legData.setText(max_dura_legs-legs_damage+"/"+max_dura_legs);
legLayout.addView(legIcon);
legLayout.addView(legData);

var feetIcon = new android.widget.Button(ctx);
feetIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
feetIcon.getLayoutParams().width = help_width/1.6;
feetIcon.getLayoutParams().height = help_width/1.6;
feetIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bootsDiamond, 0), 0, android.util.Base64.decode(bootsDiamond, 0).length)));
feetData=new android.widget.TextView(ctx);
feetData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
feetData.setTextColor(android.graphics.Color.WHITE);
feetData.setTextSize(btntextsize-2);
feetData.setText(max_dura_feet-feet_damage+"/"+max_dura_feet);
bootLayout.addView(feetIcon);
bootLayout.addView(feetData);

var handIcon = new android.widget.Button(ctx);
handIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
handIcon.getLayoutParams().width = help_width/1.6;
handIcon.getLayoutParams().height = help_width/1.6;
handIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(handDiamond, 0), 0, android.util.Base64.decode(handDiamond, 0).length)));
handData=new android.widget.TextView(ctx);
handData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
handData.setTextColor(android.graphics.Color.WHITE);
handData.setTextSize(btntextsize-2);
handData.setText(max_dura_hand-hand_damage+"/"+max_dura_hand);
itemLayout.addView(handIcon);
itemLayout.addView(handData);


armorsLayout.addView(headLayout);
armorsLayout.addView(chestLayout);
armorsLayout.addView(legLayout);
armorsLayout.addView(bootLayout);
armorsLayout.addView(itemLayout);
menuScroll.addView(armorsLayout);
mainLayout.addView(menuScroll);
armorWin=new android.widget.PopupWindow(mainLayout,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
armorWin.setTouchable(false);
armorWin.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.TOP|android.view.Gravity.LEFT,0,+icon_dimensions);
armorWin.setTouchable(false);
}catch(err){}}}));
}
function showEArmorgui(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
var mainLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var armorsLayoutEnemy = new android.widget.LinearLayout(ctx);
var nameLayoutEnemy = new android.widget.LinearLayout(ctx);
var healthLayoutEnemy = new android.widget.LinearLayout(ctx);
var headLayoutEnemy = new android.widget.LinearLayout(ctx);
var chestLayoutEnemy = new android.widget.LinearLayout(ctx);
var legLayoutEnemy = new android.widget.LinearLayout(ctx);
var bootLayoutEnemy = new android.widget.LinearLayout(ctx);
var itemLayoutEnemy = new android.widget.LinearLayout(ctx);
nameLayoutEnemy.setOrientation(0);
healthLayoutEnemy.setOrientation(0);
headLayoutEnemy.setOrientation(0);
chestLayoutEnemy.setOrientation(0);
legLayoutEnemy.setOrientation(0);
bootLayoutEnemy.setOrientation(0);
itemLayoutEnemy.setOrientation(0);
mainLayout.setOrientation(1);
armorsLayoutEnemy.setOrientation(1);

headLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
headLayoutEnemy.getLayoutParams().width = switch_width;
chestLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
chestLayoutEnemy.getLayoutParams().width = switch_width;
legLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
legLayoutEnemy.getLayoutParams().width = switch_width;
bootLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
bootLayoutEnemy.getLayoutParams().width = switch_width;
itemLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
itemLayoutEnemy.getLayoutParams().width = switch_width;

var nameEnemy = Entity.getNameTag(getNearestEntity(160));
var healthEnemy = Entity.getHealth(getNearestEntity(160));
var max_healthEnemy = Entity.getMaxHealth(getNearestEntity(160));
var headEnemy = Entity.getArmor(getNearestEntity(160), 0) ;
var chestEnemy = Entity.getArmor(getNearestEntity(160), 1);
var legsEnemy = Entity.getArmor(getNearestEntity(160), 2);
var feetEnemy = Entity.getArmor(getNearestEntity(160), 3);
var handEnemy = Entity.getCarriedItem(getNearestEntity(160));

var head_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 0);
var chest_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 1);
var legs_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 2);
var feet_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 3);
var hand_damageEnemy = Entity.getCarriedItemData(getNearestEntity(160));

var max_dura_headEnemy = Item.getMaxDamage(headEnemy);
var max_dura_chestEnemy = Item.getMaxDamage(chestEnemy);
var max_dura_legsEnemy = Item.getMaxDamage(legsEnemy);
var max_dura_feetEnemy = Item.getMaxDamage(feetEnemy);
var max_dura_handEnemy = Item.getMaxDamage(handEnemy);

var nameIconEnemy = new android.widget.Button(ctx);
nameIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
nameIconEnemy.getLayoutParams().width = help_width/1.6;
nameIconEnemy.getLayoutParams().height = help_width/1.6;
nameIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(helmetDiamond, 0), 0, android.util.Base64.decode(helmetDiamond, 0).length)));
nameIconEnemy.getBackground().setAlpha(130);
nameDataEnemy=new android.widget.TextView(ctx);
nameDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nameDataEnemy.setTextColor(android.graphics.Color.WHITE);
nameDataEnemy.setTextSize(btntextsize-2);
nameDataEnemy.setText(healthEnemy+"/"+max_healthEnemy);
//nameLayout.addView(nameIcon);
nameLayoutEnemy.addView(nameDataEnemy);

var healthIconEnemy = new android.widget.Button(ctx);
healthIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
healthIconEnemy.getLayoutParams().width = help_width/1.6;
healthIconEnemy.getLayoutParams().height = help_width/1.6;
healthIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(heartIcon, 0), 0, android.util.Base64.decode(heartIcon, 0).length)));
healthIconEnemy.getBackground().setAlpha(130);
healthDataEnemy=new android.widget.TextView(ctx);
healthDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
healthDataEnemy.setTextColor(android.graphics.Color.WHITE);
healthDataEnemy.setTextSize(btntextsize-2);
healthDataEnemy.setText(healthEnemy+"/"+max_healthEnemy);
healthLayoutEnemy.addView(healthIconEnemy);
healthLayoutEnemy.addView(healthDataEnemy);

var headIconEnemy = new android.widget.Button(ctx);
headIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
headIconEnemy.getLayoutParams().width = help_width/1.6;
headIconEnemy.getLayoutParams().height = help_width/1.6;
headIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(helmetDiamond, 0), 0, android.util.Base64.decode(helmetDiamond, 0).length)));
headIconEnemy.getBackground().setAlpha(130);
headDataEnemy=new android.widget.TextView(ctx);
headDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
headDataEnemy.setTextColor(android.graphics.Color.WHITE);
headDataEnemy.setTextSize(btntextsize-2);
headDataEnemy.setText(max_dura_headEnemy-head_damageEnemy+"/"+max_dura_headEnemy);
headLayoutEnemy.addView(headIconEnemy);
headLayoutEnemy.addView(headDataEnemy);

var chestIconEnemy = new android.widget.Button(ctx);
chestIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
chestIconEnemy.getLayoutParams().width = help_width/1.6;
chestIconEnemy.getLayoutParams().height = help_width/1.6;
chestIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chestDiamond, 0), 0, android.util.Base64.decode(chestDiamond, 0).length)));
chestIconEnemy.getBackground().setAlpha(130);
chestDataEnemy=new android.widget.TextView(ctx);
chestDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chestDataEnemy.setTextColor(android.graphics.Color.WHITE);
chestDataEnemy.setTextSize(btntextsize-2);
chestDataEnemy.setText(max_dura_chestEnemy-chest_damageEnemy+"/"+max_dura_chestEnemy);
chestLayoutEnemy.addView(chestIconEnemy);
chestLayoutEnemy.addView(chestDataEnemy);

var legIconEnemy = new android.widget.Button(ctx);
legIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
legIconEnemy.getLayoutParams().width = help_width/1.6;
legIconEnemy.getLayoutParams().height = help_width/1.6;
legIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(legsDiamond, 0), 0, android.util.Base64.decode(legsDiamond, 0).length)));
legIconEnemy.getBackground().setAlpha(130);
legDataEnemy=new android.widget.TextView(ctx);
legDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
legDataEnemy.setTextColor(android.graphics.Color.WHITE);
legDataEnemy.setTextSize(btntextsize-2);
legDataEnemy.setText(max_dura_legsEnemy-legs_damageEnemy+"/"+max_dura_legsEnemy);
legLayoutEnemy.addView(legIconEnemy);
legLayoutEnemy.addView(legDataEnemy);

var feetIconEnemy = new android.widget.Button(ctx);
feetIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
feetIconEnemy.getLayoutParams().width = help_width/1.6;
feetIconEnemy.getLayoutParams().height = help_width/1.6;
feetIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bootsDiamond, 0), 0, android.util.Base64.decode(bootsDiamond, 0).length)));
feetIconEnemy.getBackground().setAlpha(130);
feetDataEnemy=new android.widget.TextView(ctx);
feetDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
feetDataEnemy.setTextColor(android.graphics.Color.WHITE);
feetDataEnemy.setTextSize(btntextsize-2);
feetDataEnemy.setText(max_dura_feetEnemy-feet_damageEnemy+"/"+max_dura_feetEnemy);
bootLayoutEnemy.addView(feetIconEnemy);
bootLayoutEnemy.addView(feetDataEnemy);

var handIconEnemy = new android.widget.Button(ctx);
handIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
handIconEnemy.getLayoutParams().width = help_width/1.6;
handIconEnemy.getLayoutParams().height = help_width/1.6;
handIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(handDiamond, 0), 0, android.util.Base64.decode(handDiamond, 0).length)));
handIconEnemy.getBackground().setAlpha(130);
handDataEnemy=new android.widget.TextView(ctx);
handDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
handDataEnemy.setTextColor(android.graphics.Color.WHITE);
handDataEnemy.setTextSize(btntextsize-2);
handDataEnemy.setText(max_dura_handEnemy-hand_damageEnemy+"/"+max_dura_handEnemy);
itemLayoutEnemy.addView(handIconEnemy);
itemLayoutEnemy.addView(handDataEnemy);

armorsLayoutEnemy.addView(nameLayoutEnemy);
armorsLayoutEnemy.addView(healthLayoutEnemy);
armorsLayoutEnemy.addView(headLayoutEnemy);
armorsLayoutEnemy.addView(chestLayoutEnemy);
armorsLayoutEnemy.addView(legLayoutEnemy);
armorsLayoutEnemy.addView(bootLayoutEnemy);
armorsLayoutEnemy.addView(itemLayoutEnemy);
menuScroll.addView(armorsLayoutEnemy);
mainLayout.addView(menuScroll);
armorEm=new android.widget.PopupWindow(mainLayout,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
armorEm.setTouchable(false);
armorEm.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.CENTER|android.view.Gravity.CENTER,0+icon_dimensions*9,0);
armorEm.setTouchable(false);
}catch(err){}}}));
}
function showWAILA(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
var mainLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var armorsLayoutEnemy = new android.widget.LinearLayout(ctx);
var nameLayoutEnemy = new android.widget.LinearLayout(ctx);
var healthLayoutEnemy = new android.widget.LinearLayout(ctx);
nameLayoutEnemy.setOrientation(0);
healthLayoutEnemy.setOrientation(0);
mainLayout.setOrientation(1);
armorsLayoutEnemy.setOrientation(1);
betToast("here");
var entityPoint = Entity.getEntityTypeId(Player.getPointedEntity());
var entityNamePointed = EntityName[entityPoint];
var blockIDPointed = Player.getPointedBlockId();
if(blockIDPointed==-1||blockIDPointed=="-1"){blockIDPointed==0}
var blockDataPointed = Player.getPointedBlockData();
var itemName = Item.getName(blockIDPointed,blockDataPointed);
betToast("here1");
if(entityNamePointed==undefined||entityNamePointed=="undefined"){entityNamePointed="";}
if(itemName==undefined||itemName=="undefined"||itemName==-1||itemName=="-1"){itemName="";}
betToast("here2");
nameTxt=new android.widget.TextView(ctx);
nameTxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nameTxt.setTextColor(android.graphics.Color.WHITE);
nameTxt.setTextSize(btntextsize-2);
nameTxt.setText(itemName+entityNamePointed);
nameLayoutEnemy.addView(nameTxt);
betToast("here3");
dataTxt=new android.widget.TextView(ctx);
dataTxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
dataTxt.setTextColor(android.graphics.Color.WHITE);
dataTxt.setTextSize(btntextsize-2);
var string1 = ""
var string2 = ""
if(entityPoint<1||entityPoint==undefined||entityPoint=="undefined"){
string1=blockIDPointed+":"+blockDataPointed+"\nx64";
}else{
string2="Ent ID:\n"+entityPoint;
}
dataTxt.setText(string1+string2);
healthLayoutEnemy.addView(dataTxt);

betToast("here4");

armorsLayoutEnemy.addView(nameLayoutEnemy);
armorsLayoutEnemy.addView(healthLayoutEnemy);
menuScroll.addView(armorsLayoutEnemy);
mainLayout.addView(menuScroll);
wailaUI=new android.widget.PopupWindow(mainLayout,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
wailaUI.setTouchable(false);
wailaUI.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.CENTER|android.view.Gravity.CENTER,0+icon_dimensions*9,0);
wailaUI.setTouchable(false);
}catch(err){}}}));
}

function phaseBlocks() {
toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);
var player = getPlayerEnt();
setPosition(getPlayerEnt(), Player.getX() + (0.14 * playerDir[0]), Player.getY(), Player.getZ() + (0.14 * playerDir[2]))
};
function clipBlocks() {
toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);
var player = getPlayerEnt();
setPosition(getPlayerEnt(), Player.getX() + (0.14 * playerDir[0]), Player.getY() + (0.14 * playerDir[1]), Player.getZ() + (0.14 * playerDir[2]))
};

function toDirectionalVector(vector, yaw, pitch) {
vector[0] = Math.cos(yaw) * Math.cos(pitch);
vector[1] = Math.sin(pitch);
vector[2] = Math.sin(yaw) * Math.cos(pitch);
};

function attackHook(att, vic) {


if (tpaur) {
if (vic != null && Entity.getEntityTypeId(vic) == EntityType.PLAYER) {
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.5);
setVelZ(Player.getEntity(), z * -0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), 0);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 3;
setVelX(getPlayerEnt(), 0);
setVelZ(getPlayerEnt(), 0);
setVelY(getPlayerEnt(), 0);
}
}
}
if(tapPart){
roundPart(ParticleType.redstone,Entity.getX(vic)-.5,Entity.getY(vic),Entity.getZ(vic)-.5,1.3,1)
}
if (att == Player.getEntity() && sniperss && Entity.getHealth(vic) > 0&&!(friendList_.isFriend(Entity.getNameTag(vic)))&&!contains(immunity,Entity.getNameTag(vic))) {
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -1);
setVelX(getPlayerEnt(), 0.5 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.5 * playerDir[2]);
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 1);
setVelY(Player.getEntity(), y * 1);
setVelZ(Player.getEntity(), z * 1);
Entity.setPositionRelative(getPlayerEnt(), 1, 0, 0);
Entity.setPositionRelative(getPlayerEnt(), 0, 0, 1);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 6;
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.2);
setVelZ(Player.getEntity(), z * -0.2);
var hit = getYaw() - 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.5);
setVelY(Player.getEntity(), y * 0.5);
setVelZ(Player.getEntity(), z * 0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -1);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.65);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), -100);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.7);
setVelZ(getPlayerEnt(), playerDir[2]);
var hit = getYaw() - 190;
var hitY = getPitch() + 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.8);
setVelY(Player.getEntity(), y * 0.4);
setVelZ(Player.getEntity(), z * 0.8);
var hit = getYaw() + 180;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 2);
setVelY(Player.getEntity(), y * 0.8);
setVelZ(Player.getEntity(), z * 2);
}
}
if (xphitss) {
Player.addExp(10)
}
if (att == Player.getEntity() && rides && Entity.getHealth(vic) > 0) {
Entity.setCollisionSize(vic, 6, 50);
}
if (att == Player.getEntity() && walkss && Entity.getHealth(vic) > 0&&!(friendList_.isFriend(Entity.getNameTag(vic)))&&!contains(immunity,Entity.getNameTag(vic))) {
Entity.setCollisionSize(vic, reachDistance, 50);
}
if (god == true) {
Entity.addEffect(Player.getEntity(), MobEffect.healthBoost, 999999, 200, false, false);
}
if (taptoseed == true) {
ModPE.setCamera(vic);
preventDefault();
}
if (att == Player.getEntity() && sniperss && Entity.getHealth(vic) > 0&&!(friendList_.isFriend(Entity.getNameTag(vic)))&&!contains(immunity,Entity.getNameTag(vic))) {
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -1);
setVelX(getPlayerEnt(), 0.5 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.5 * playerDir[2]);
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 1);
setVelY(Player.getEntity(), y * 1);
setVelZ(Player.getEntity(), z * 1);
Entity.setPositionRelative(getPlayerEnt(), 1, 0, 0);
Entity.setPositionRelative(getPlayerEnt(), 0, 0, 1);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 6;
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.2);
setVelZ(Player.getEntity(), z * -0.2);
var hit = getYaw() - 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.5);
setVelY(Player.getEntity(), y * 0.5);
setVelZ(Player.getEntity(), z * 0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -1);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.65);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), -100);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.7);
setVelZ(getPlayerEnt(), playerDir[2]);
var hit = getYaw() - 190;
var hitY = getPitch() + 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.8);
setVelY(Player.getEntity(), y * 0.4);
setVelZ(Player.getEntity(), z * 0.8);
var hit = getYaw() + 180;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 2);
setVelY(Player.getEntity(), y * 0.8);
setVelZ(Player.getEntity(), z * 2);
}
}
if (att == Player.getEntity() && aerialauras) {
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() + 4.05, getPlayerZ());
}
if (tapMorphs) {
Entity.setRenderType(getPlayerEnt(), Entity.getRenderType(vic));
betToast(Entity.getRenderType(vic));
}
if (tapRider) {
rideAnimal(att, vic);
betToast(Entity.getRiding(att));
}
if (atotems) {
if (vic == Player.getEntity()) {
Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);
}
}
if(blastau){
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 2);
setVelY(Player.getEntity(), y * 0.6);
setVelZ(Player.getEntity(), z * 2);
if(ticker !== 0) {
ticker--;
}
if(ticker == 0) {
ticker = 20;
Entity.setPositionRelative(getPlayerEnt(), 0, +2.53, 0);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 2);
setVelZ(getPlayerEnt(), playerDir[2]);
var hit = getYaw() + 190;
var hitY = getPitch() + 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * +0.2);
setVelY(Player.getEntity(), y * -0.2);
setVelZ(Player.getEntity(), z * 0.8);
}
}

};

function startDestroyBlock(x, y, z, side){
if(treecs){
if(getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==17||getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==162){
destroyingWood=true;
currentBlock = getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ());
Block.setDestroyTime(currentBlock, 90);
if(Player.getCarriedItem()==0){woodticker=((3)*20)-1}
if(Player.getCarriedItem()==271){woodticker=((1.5)*20)-1}
if(Player.getCarriedItem()==275){woodticker=((0.75)*20)-1}
if(Player.getCarriedItem()==258){woodticker=((0.5)*20)-1}
if(Player.getCarriedItem()==286){woodticker=((0.25)*20)-1}
if(Player.getCarriedItem()==279){woodticker=((0.4)*20)-1}
if(Player.getCarriedItem()!=271&&Player.getCarriedItem()!=275&&Player.getCarriedItem()!=258&&Player.getCarriedItem()!=286&&Player.getCarriedItem()!=0&&Player.getCarriedItem()!=279){woodticker=((3)*20)-1}
}
}
}
function namePlayers(){
var players = Server.getAllPlayers();
players.forEach(function (entry){
Entity.setNameTag(entry, Entity.getNameTag(entry)+"\n"+Entity.getHealth(entry)+"/"+Entity.getMaxHealth(entry)+"\n"+Item.getName(Entity.getCarriedItem(entry), Entity.getCarriedItemData(entry), false)+":"+Entity.getCarriedItemData(entry));
})
}
function procCmd(command) {
var cmd = command.split(" ");
if(cmd[0]=="c"){
	espRed =parseInt(cmd[1]);
	espGreen =parseInt(cmd[2]);
	espBlue =parseInt(cmd[3]);
}
if(cmd[0]=="rgb"){
	if(rgbesp){rgbesp=false}else{
	rgbesp=true;
	}
}
if(cmd[0]=="t"){
	supportIns();
	supportIns2();
}
if(cmd[0]=="music"){
	if(cmd[1]=="play"){
	var audioUrl = "https://www.dropbox.com/s/agrs18ymshutcp7/Elek%20Tronomia%20-%20Elektronomia%20-%20Sky%20High.mp3?dl=1";
	mPlayer = new MediaPlayer();
	mPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
	mPlayer.setDataSource(audioUrl);
	mPlayer.prepare();
	mPlayer.start();
	}
	if(cmd[1]=="stop"){
		mPlayer.stop();
	}
}
if(cmd[0]=="donators"){
	alertPopup("Donators","Donated:\n"+donators+"\n\nImmune:\n"+immunity+"\n\nCustom Names:\n"+customNameC+"\n\nParticles:\n"+particleEffect,"Okay");
}
if(cmd[0]=="pi"){
	purpleItems(Player.getCarriedItem());
}
if(cmd[0]=="hs"){
	if(hsfind){hsfind=false}else{
		hsfind=true;
	}
}
if(cmd[0]=="du"){
downloadUpdate();
}
if(cmd[0]=="rnf"){
realmnfd=true;
}
if(cmd[0]=="ds"){
disSpeed ? disSpeed=false:disSpeed=true;
}
if(cmd[0]=="nm"){
betToast(Level.getBrightness(getPlayerX(), getPlayerY(), getPlayerZ()));
}
if(cmd[0]=="func"){
cs_functionarr[cmd[1]]()
}
if(cmd[0]=="loadf"){
cs_loadfiles();
}
if(cmd[0]=="pstat"){
if(playerNameStat){playerNameStat=false;}
else{playerNameStat=true}
}
if(cmd[0]=="translang"){translatelang="googtrans(auto|"+cmd[1]+")"}
if(cmd[0]=="trans"){if(chatTranslator){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
chatTranslator=false;translateWindow.dismiss();
}
catch(err){}}}));
}else{chatTranslator=true;openTranslator();}}
if(cmd[0]=="deleteData"){clearInstinctData();}
if(cmd[0]=="vm"){
Block.setShape(cmd[1], cmd[2], cmd[3], cmd[4], cmd[5], cmd[6], cmd[7]);
}
if(cmd[0]=="vmf"){
Block.setShape(-161, 0, 0, 0, 1, 1, 1);
}
if(cmd[0]=="html"){
showHTMLMenu=true;
sleekMenuOn = false;
showSleekMenuOn=false;
showAllMenu = false;
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
}
if(cmd[0]=="js"){
showHTMLMenu=false;
sleekMenuOn = false;
showSleekMenuOn=false;
showAllMenu = true;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
}
if(cmd[0]=="time"){
ModPE.showTipMessage(Calendar.getInstance().getTime());
}
if(cmd[0]=="enc"){
clientMessage(customName);
clientMessage(customNameC);
}
if(cmd[0]=="xray"){
xrayStone();

}
if(cmd[0]=="xray2"){
xrayStone2();
}
if (cmd[0] == "xray") {
Block.setRenderLayer(2, 1);
Block.setRenderLayer(1, 1);
Block.setLightLevel(16, 15);
Block.setLightLevel(15, 15);
Block.setLightLevel(56, 15);
Block.setLightLevel(21, 15);
Block.setLightLevel(73, 15);
Block.setLightLevel(129, 15);
Block.setLightLevel(153, 15);
Block.setLightLevel(16, 15);
Block.setRenderLayer(16, 0);
Block.setShape(16, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(15, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(56, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(21, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(73, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(129, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(153, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
}
if (cmd[0] == "xray2") {
Block.setRenderLayer(2, 1);
Block.setRenderLayer(1, 1);
Block.setLightLevel(16, 15);
Block.setLightLevel(15, 15);
Block.setLightLevel(56, 15);
Block.setLightLevel(21, 15);
Block.setLightLevel(73, 15);
Block.setLightLevel(129, 15);
Block.setLightLevel(153, 15);
Block.setLightLevel(16, 15);
Block.setRenderLayer(16, 0);
Block.setShape(16, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(15, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(56, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(21, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(73, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(129, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(153, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
}
if(cmd[0] == "sword"){
checkSword();
Player.setSelectedSlotId(swordSlot);
}
if(cmd[0] == "bow"){
checkBow();
Player.setSelectedSlotId(bowSlot);
}
if(cmd[0] == "rendert"){
var rendertype = cmd[1];
Entity.setRenderType(getPlayerEnt(), rendertype);
}
if (cmd[0] == "playerr"){
Entity.setRenderType(getPlayerEnt(), 26);
}
if(cmd[0]=="new"){
	updateIn2();
}
if (cmd[0] == "render") {
Entity.setRenderType(getPlayerEnt(), Entity.getRenderType(cmd[1]));
betToast(Entity.getRenderType(cmd[1]));
}
if (cmd[0] == "findCoord") {
otherCoordName = cmd[1];
betToast("Coords: " + Entity.getX(otherCoordName) + Entity.getY(otherCoordName) + Entity.getZ(otherCoordName));
}
if (cmd[0] == "names") {
betToast(Server.getAllPlayerNames());
}
if (cmd[0] == "player") {
betToast(Minecraft.Entity.getPlayerName);
}
if (cmd[0] == "clear") {
if (cmd[1] = "hitbox") {
Entity.setCollisionSize(getNearestPlayer(1000), 0.6, 1.8);
betToast("reset");
}
}
if (cmd[0] == "debug") {
ModPE.resetImages();
}
if (cmd[0] == "biome") {
var biomeid = Level.getBiome(getPlayerX(), getPlayerZ());
betToast(Level.biomeIdToName(biomeid));
}
if (cmd[0] == "red") {
themeBtn = "red";
}
if (cmd[0] == "blue") {
themeBtn = "blue";
themeFinish();
themeReVar();
}
if (cmd[0] == "stoprepeat") {
tmiRepeat = false;
}
if (cmd[0] == "repeat") {
tmiRepeat = true;
}
if(cmd[0]=="friends"){
for(var i=0;i<objectLength(friends_L);i++){
if(!friends_L[i].removed){
clientMessage(friends_L[i].name_F);
}
}
}
if (cmd[0] == "dimension") {
betToast(Player.getDimension())
}
};

function closeEverything() {
themeFinish();
if (themeBtn == "red") {
themeId = 0;
}
if (themeBtn == "green") {
themeId = 1;
}
if (themeBtn == "blue") {
themeId = 2;
}
if (themeBtn == "orange") {
themeId = 3;
}
if (themeBtn == "white") {
themeId = 4;
}
if (themeBtn == "magenta") {
themeId = 5;
}
if (themeBtn == "dark") {
themeId = 6;
}
if (themeBtn == "black") {
themeId = 7;
}
if (themeBtn == "red") {
themeBtnClicked = themeRedClicked;
themeBtnNotClicked = themeRedNotClicked;
themeBackground = themeBackgroundRed;
themeForeground = themeForegroundRed;
themeStroke = themeStrokeRed;
themeText = themeTextRed;
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorRed;
}
if (themeBtn == "green") {
themeBtnClicked = themeGreenClicked;
themeBtnNotClicked = themeGreenNotClicked;
themeBackground = themeBackgroundGreen;
themeForeground = themeForegroundGreen;
themeStroke = themeStrokeGreen;
themeText = themeTextGreen;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = true;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorGreen;
}
if (themeBtn == "blue") {
themeBtnClicked = themeBlueClicked;
themeBtnNotClicked = themeBlueNotClicked;
themeBackground = themeBackgroundBlue;
themeForeground = themeForegroundBlue;
themeStroke = themeStrokeBlue;
themeText = themeTextBlue;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = true;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorBlue;
}
if (themeBtn == "orange") {
themeBtnClicked = themeOrangeClicked;
themeBtnNotClicked = themeOrangeNotClicked;
themeBackground = themeBackgroundOrange;
themeForeground = themeForegroundOrange;
themeStroke = themeStrokeOrange;
themeText = themeTextOrange;
themedOrange = true;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorOrange;
}
if (themeBtn == "white") {
themeBtnClicked = themeWhiteClicked;
themeBtnNotClicked = themeWhiteNotClicked;
themeBackground = themeBackgroundWhite;
themeForeground = themeForegroundWhite;
themeStroke = themeStrokeWhite;
themeText = themeTextWhite;
themedOrange = false;
themedWhite = true;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorWhite;
}
if (themeBtn == "magenta") {
themeBtnClicked = themeMagentaClicked;
themeBtnNotClicked = themeMagentaNotClicked;
themeBackground = themeBackgroundMagenta;
themeForeground = themeForegroundMagenta;
themeStroke = themeStrokeMagenta;
themeText = themeTextMagenta;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = true;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorMagenta;
}
if (themeBtn == "dark") {
themeBtnClicked = themeDarkClicked;
themeBtnNotClicked = themeDarkNotClicked;
themeBackground = themeBackgroundDark;
themeForeground = themeForegroundDark;
themeStroke = themeStrokeDark;
themeText = themeTextDark;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = true;
themedBlack = false;
modTextColor = modTextColorDark;
}
if (themeBtn == "black") {
themeBtnClicked = themeBlackClicked;
themeBtnNotClicked = themeBlackNotClicked;
themeBackground = themeBackgroundBlack;
themeForeground = themeForegroundBlack;
themeStroke = themeStrokeBlack;
themeText = themeTextBlack;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = true;
modTextColor = modTextColorBlack;
}


ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (showAllMenu) {
menuC.dismiss();
GUI.update();
mopen = false;
if(backOpen){guiBackgroundGif.dismiss();backOpen=false;}

if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
GUIclose.dismiss();

if (colormychatd == true) {
GUIs.dismiss();
}
}
if (!showAllMenu) {
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
} else {
sleekMenuOn = true;
ShowSleekMenu();
openMenuCloseBtn();
}
};
saveTheme();
};

function closeMenus() {
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true) {
changeGUI9.dismiss();
openMenu9Status = false;
}

GUIclose.dismiss();
};

function getNearestEntity(maxrange) {
	try{
var mobs = Entity.getAll();
var players = Server.getAllPlayers();
var small = maxrange;
var ent = null;
for (var i = 0; i < mobs.length; i++) {
var x = Entity.getX(mobs[i]) - getPlayerX();
var y = Entity.getY(mobs[i]) - getPlayerY();
var z = Entity.getZ(mobs[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
small = dist;
ent = mobs[i];
}
}
for (var i = 0; i < players.length; i++) {
var x = Entity.getX(players[i]) - getPlayerX();
var y = Entity.getY(players[i]) - getPlayerY();
var z = Entity.getZ(players[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
small = dist;
ent = players[i];
}
}
return ent;
	}catch(e){return null;betToast(e)}
};
function getNearestEntityDist(maxrange) {
var mobs = Entity.getAll();
var players = Server.getAllPlayers();
var small = maxrange;
var ent = null;
for (var i = 0; i < mobs.length; i++) {
var x = Entity.getX(mobs[i]) - getPlayerX();
var y = Entity.getY(mobs[i]) - getPlayerY();
var z = Entity.getZ(mobs[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
small = dist;
ent = mobs[i];
}
}
for (var i = 0; i < players.length; i++) {
var x = Entity.getX(players[i]) - getPlayerX();
var y = Entity.getY(players[i]) - getPlayerY();
var z = Entity.getZ(players[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
small = dist;
ent = players[i];
}
}
return dist;
};

function chatHook(messagesent) {
var _0x2bf6x1a7 = messagesent['split'](' ');
if (codetalkers) {
if (messagesent[0] != '!' && messagesent[0] != '/') {
Server.sendChat(' ' + convertToCode(messagesent))
};
preventDefault();
com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText('')
};
if (instinctChat) {
if (messagesent.charAt(0) != '!' && messagesent.charAt(0) != '/') {
Server.sendChat('[IX] ' + instinctEncode(messagesent))
};
preventDefault();
com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText('')
};
if (colormychatss) {
if(!codetalkers){
if (messagesent[0] != '!' && messagesent[0] != '/') {
if(chatcolor=="rainbow"){
Server.sendChat("§e"+colorMyChat(messagesent));
}else{
Server.sendChat(chatcolor + messagesent)}
};
preventDefault();
com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText('')

}};
};

function crosshairAimAt(ent, pos) {
if (ent != null) {
var x = Entity.getX(ent) - getPlayerX();
var y = Entity.getY(ent) - getPlayerY();
var z = Entity.getZ(ent) - getPlayerZ();
if (pos != null && pos instanceof Array) {
x = Entity.getX(ent) - pos[0];
y = Entity.getY(ent) - pos[1];
z = Entity.getZ(ent) - pos[2];
}
if (Entity.getEntityTypeId(ent) != 63) y += 0.5;
var a = 0.5 + Entity.getX(ent);
var b = Entity.getY(ent);
var c = 0.5 + Entity.getZ(ent);
var len = Math.sqrt(x * x + y * y + z * z);
var y = y / len;
var pitch = Math.asin(y);
pitch = pitch * 180.0 / Math.PI;
pitch = -pitch;
var yaw = -Math.atan2(a - (Player.getX() + 0.5), c - (Player.getZ() + 0.5)) * (180 / Math.PI);
if (pitch < 89 && pitch > -89) {
Entity.setRot(Player.getEntity(), yaw, pitch-2);
}
}
};
function crosshairAimAtLow(ent, pos) {
if (ent != null) {
var x = Entity.getX(ent) - getPlayerX();
var y = Entity.getY(ent) - getPlayerY();
var z = Entity.getZ(ent) - getPlayerZ();
if (pos != null && pos instanceof Array) {
x = Entity.getX(ent) - pos[0];
y = Entity.getY(ent) - pos[1];
z = Entity.getZ(ent) - pos[2];
}
if (Entity.getEntityTypeId(ent) != 63) y += 0.5;
var a = 0.5 + Entity.getX(ent);
var b = Entity.getY(ent);
var c = 0.5 + Entity.getZ(ent);
var len = Math.sqrt(x * x + y * y + z * z);
var y = (y-.5) / len;
var pitch = Math.asin(y);
pitch = pitch * 180.0 / Math.PI;
pitch = -pitch;
var yaw = -Math.atan2(a - (Player.getX() + 0.5), c - (Player.getZ() + .5)) * (180 / Math.PI);
if (pitch < 89 && pitch > -89) {
Entity.setRot(Player.getEntity(), yaw, pitch );
}
}
};

function idToName(id,meta){
return Item.getName(id,meta)
}

function checkblockplace(who){
	if(Entity.getNameTag(item).includes(',')){
		setTile(Entity.getX(item),Entity.getY(item)-2,Entity.getZ(item),171,2);
	}
}//button1.setText(Entity.getNameTag(item) + "," + " ["+Math.floor(Entity.getX(item))+", "+Math.floor(Entity.getY(item))+", "+Math.floor(Entity.getZ(item))+"]");
var countdelay = 20;
var tpdelay = 2; 
function enableEat() {
Item.setProperties(260, {
"use_duration": 1,
"food": {
"nutrition": 4,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(322, {
"stack_by_data": true,
"use_duration": 1,
"foil": false,
"food": {
"nutrition": 4,
"saturation_modifier": "supernatural",
"is_meat": false,
"effects": [{
"name": "regeneration",
"chance": 1.0,
"duration": 5,
"amplifier": 1
}, {
"name": "absorption",
"chance": 1.0,
"duration": 120,
"amplifier": 0
}],
"enchanted_effects": [{
"name": "regeneration",
"chance": 0.66,
"duration": 30,
"amplifier": 4
}, {
"name": "absorption",
"chance": 0.66,
"duration": 120,
"amplifier": 0
}, {
"name": "resistance",
"chance": 0.66,
"duration": 300,
"amplifier": 0
}, {
"name": "fire_resistance",
"chance": 0.66,
"duration": 300,
"amplifier": 0
}]
}
});
Item.setProperties(260, {
"use_duration": 1,
"max_stack_size": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "normal",
"is_meat": false,
"using_converts_to": "bowl"
}
});
Item.setProperties(297, {
"use_duration": 1,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(319, {
"use_duration": 1,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(320, {
"use_duration": 1,
"food": {
"nutrition": 8,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(349, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(460, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(461, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 1,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(462, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 1,
"saturation_modifier": "poor",
"is_meat": true,
"effects": [{
"name": "poison",
"duration": 60,
"amplifier": 3
}, {
"name": "nausea",
"duration": 15,
"amplifier": 1
}, {
"name": "hunger",
"duration": 15,
"amplifier": 2
}]
}
});
Item.setProperties(350, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"eat_sound": "random.burp",
"is_meat": true
}
});
Item.setProperties(463, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 6,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(360, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": false
}
});
Item.setProperties(357, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(363, {
"use_duration": 1,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(364, {
"use_duration": 1,
"food": {
"nutrition": 8,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(365, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": true,
"effects": [{
"name": "hunger",
"chance": 0.3,
"duration": 30,
"amplifier": 0
}]
}
});
Item.setProperties(366, {
"use_duration": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(423, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(424, {
"use_duration": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(367, {
"use_duration": 1,
"food": {
"nutrition": 4,
"saturation_modifier": "poor",
"is_meat": true,
"effects": [{
"name": "hunger",
"chance": 0.8,
"duration": 30,
"amplifier": 0
}]
}
});
Item.setProperties(375, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "good",
"is_meat": false,
"effects": [{
"name": "poison",
"chance": 1.0,
"duration": 5,
"amplifier": 0
}]
}
});
Item.setProperties(391, {
"use_duration": 1,
"food": {
"nutrition": 3,
"saturation_modifier": "normal",
"is_meat": false
},
"seed": {
"crop_result": "carrots",
"plant_at": "farmland"
}
});
Item.setProperties(392, {
"use_duration": 1,
"food": {
"nutrition": 1,
"saturation_modifier": "low",
"is_meat": false
},
"seed": {
"crop_result": "potatoes",
"plant_at": "farmland"
}
});
Item.setProperties(393, {
"use_duration": 1,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(394, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": false,
"effects": [{
"name": "poison",
"chance": 0.6,
"duration": 5,
"amplifier": 0
}]
}
});
Item.setProperties(396, {
"use_duration": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "supernatural",
"is_meat": false
}
});
Item.setProperties(400, {
"use_duration": 1,
"food": {
"nutrition": 8,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(411, {
"use_duration": 1,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(412, {
"use_duration": 1,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(413, {
"use_duration": 1,
"max_stack_size": 1,
"food": {
"nutrition": 10,
"saturation_modifier": "normal",
"using_converts_to": "bowl",
"is_meat": true
}
});
Item.setProperties(459, {
"use_duration": 1,
"food": {
"nutrition": 1,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(457, {
"use_duration": 1,
"food": {
"nutrition": 1,
"saturation_modifier": "normal",
"is_meat": false
}
});
};

function disableEat() {
Item.setProperties(260, {
"use_duration": 32,
"food": {
"nutrition": 4,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(260, {
"use_duration": 32,
"max_stack_size": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "normal",
"is_meat": false,
"using_converts_to": "bowl"
}
});
Item.setProperties(297, {
"use_duration": 32,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(319, {
"use_duration": 32,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(320, {
"use_duration": 32,
"food": {
"nutrition": 8,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(349, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(460, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(461, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 1,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(462, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 1,
"saturation_modifier": "poor",
"is_meat": true,
"effects": [{
"name": "poison",
"duration": 60,
"amplifier": 3
}, {
"name": "nausea",
"duration": 15,
"amplifier": 1
}, {
"name": "hunger",
"duration": 15,
"amplifier": 2
}]
}
});
Item.setProperties(350, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"eat_sound": "random.burp",
"is_meat": true
}
});
Item.setProperties(463, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 6,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(360, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": false
}
});
Item.setProperties(357, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(363, {
"use_duration": 32,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(364, {
"use_duration": 32,
"food": {
"nutrition": 8,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(365, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": true,
"effects": [{
"name": "hunger",
"chance": 0.3,
"duration": 30,
"amplifier": 0
}]
}
});
Item.setProperties(366, {
"use_duration": 32,
"food": {
"nutrition": 6,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(423, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(424, {
"use_duration": 32,
"food": {
"nutrition": 6,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(367, {
"use_duration": 32,
"food": {
"nutrition": 4,
"saturation_modifier": "poor",
"is_meat": true,
"effects": [{
"name": "hunger",
"chance": 0.8,
"duration": 30,
"amplifier": 0
}]
}
});
Item.setProperties(375, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "good",
"is_meat": false,
"effects": [{
"name": "poison",
"chance": 1.0,
"duration": 5,
"amplifier": 0
}]
}
});
Item.setProperties(391, {
"use_duration": 32,
"food": {
"nutrition": 3,
"saturation_modifier": "normal",
"is_meat": false
},
"seed": {
"crop_result": "carrots",
"plant_at": "farmland"
}
});
Item.setProperties(392, {
"use_duration": 32,
"food": {
"nutrition": 1,
"saturation_modifier": "low",
"is_meat": false
},
"seed": {
"crop_result": "potatoes",
"plant_at": "farmland"
}
});
Item.setProperties(393, {
"use_duration": 32,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(394, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": false,
"effects": [{
"name": "poison",
"chance": 0.6,
"duration": 5,
"amplifier": 0
}]
}
});
Item.setProperties(396, {
"use_duration": 32,
"food": {
"nutrition": 6,
"saturation_modifier": "supernatural",
"is_meat": false
}
});
Item.setProperties(400, {
"use_duration": 32,
"food": {
"nutrition": 8,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(411, {
"use_duration": 32,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(457, {
"use_duration": 32,
"food": {
"nutrition": 1,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(412, {
"use_duration": 32,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(413, {
"use_duration": 32,
"max_stack_size": 1,
"food": {
"nutrition": 10,
"saturation_modifier": "normal",
"using_converts_to": "bowl",
"is_meat": true
}
});
Item.setProperties(459, {
"use_duration": 32,
"food": {
"nutrition": 1,
"saturation_modifier": "normal",
"is_meat": false
}
});
};
function xrayStone(){
Block.setShape(1, null,null,null, 1,.00005,1);
Block.setShape(13, null,null,null, 1,.00005,1);
Block.setShape(3, null,null,null, 1,.00005,1);
}
function xrayStone2(){
Block.setShape(1, null,.95,null, 1,1,1);
Block.setShape(13, null,.95,null, 1,1,1);
Block.setShape(3, null,.95,null, 1,1,1);
Block.setShape(2, null,.95,null, 1,1,1);
}
function disableXray(){
Block.setShape(1, 0, 0, 0, 1, 1, 1);
Block.setShape(13, 0, 0, 0, 1, 1, 1);
Block.setShape(3, 0, 0, 0, 1, 1, 1);
alertPopup("XRAY","Reenable SMOOTH LIGHTING in settings","OKAY");
}
function enableClip(){
Block.setShape(4, null,null,null, null,null,null);
Block.setShape(5, null,null,null, null,null,null);
Block.setShape(17, null,null,null, null,null,null);
Block.setShape(3, null,null,null, null,null,null);
Block.setShape(24, null,null,null, null,null,null);
Block.setShape(3, null,null,null, null,null,null);
Block.setShape(41, null,null,null, null,null,null);
Block.setShape(42, null,null,null, null,null,null);
Block.setShape(45, null,null,null, null,null,null);
Block.setShape(49, null,null,null, null,null,null);
Block.setShape(48, null,null,null, null,null,null);
Block.setShape(47, null,null,null, null,null,null);
Block.setShape(57, null,null,null, null,null,null);
Block.setShape(8, null,null,null, null,null,null);
Block.setShape(98, null,null,null, null,null,null);
Block.setShape(1, null,null,null, null,null,null);
Block.setShape(112, null,null,null, null,null,null);
Block.setShape(133, null,null,null, null,null,null);
Block.setShape(155, null,null,null, null,null,null);
Block.setShape(179, null,null,null, null,null,null);
Block.setShape(188, null,null,null, null,null,null);
Block.setShape(189, null,null,null, null,null,null);
Block.setShape(19, null,null,null, null,null,null);
Block.setShape(191, null,null,null, null,null,null);
Block.setShape(192, null,null,null, null,null,null);
Block.setShape(58, null,null,null, null,null,null);
Block.setShape(-163, null,null,null, null,null,null);
Block.setShape(18, null,null,null, null,null,null);
Block.setShape(12, null,null,null, null,null,null);
Block.setShape(67, null,null,null, null,null,null);
Block.setShape(16, null,null,null, null,null,null);
Block.setShape(13, null,null,null, null,null,null);
Block.setShape(2, null,.95,null, 1,1,1);
Entity['setCollisionSize'](Player['getEntity'](), 0, 0);
}
function disableClip(){
Block.setShape(2, 0, 0, 0, 1, 1, 1);
Block.setShape(4, 0, 0, 0, 1, 1, 1);
Block.setShape(5, 0, 0, 0, 1, 1, 1);
Block.setShape(17, 0, 0, 0, 1, 1, 1);
Block.setShape(3, 0, 0, 0, 1, 1, 1);
Block.setShape(24, 0, 0, 0, 1, 1, 1);
Block.setShape(21, 0, 0, 0, 1, 1, 1);
Block.setShape(41, 0, 0, 0, 1, 1, 1);
Block.setShape(42, 0, 0, 0, 1, 1, 1);
Block.setShape(45, 0, 0, 0, 1, 1, 1);
Block.setShape(49, 0, 0, 0, 1, 1, 1);
Block.setShape(48, 0, 0, 0, 1, 1, 1);
Block.setShape(47, 0, 0, 0, 1, 1, 1);
Block.setShape(57, 0, 0, 0, 1, 1, 1);
Block.setShape(81, 0, 0, 0, 1, 1, 1);
Block.setShape(98, 0, 0, 0, 1, 1, 1);
Block.setShape(111, 0, 0, 0, 1, 1, 1);
Block.setShape(112, 0, 0, 0, 1, 1, 1);
Block.setShape(133, 0, 0, 0, 1, 1, 1);
Block.setShape(155, 0, 0, 0, 1, 1, 1);
Block.setShape(179, 0, 0, 0, 1, 1, 1);
Block.setShape(188, 0, 0, 0, 1, 1, 1);
Block.setShape(189, 0, 0, 0, 1, 1, 1);
Block.setShape(191, 0, 0, 0, 1, 1, 1);
Block.setShape(191, 0, 0, 0, 1, 1, 1);
Block.setShape(192, 0, 0, 0, 1, 1, 1);
Block.setShape(58, 0, 0, 0, 1, 1, 1);
Block.setShape(-163, 0, 0, 0, 1, 1, 1);
Block.setShape(18, 0, 0, 0, 1, 1, 1);
Block.setShape(12, 0, 0, 0, 1, 1, 1);
Block.setShape(67, 0, 0, 0, 1, 1, 1);
Block.setShape(16, 0, 0, 0, 1, 1, 1);
Block.setShape(13, 0, 0, 0, 1, 1, 1);
}
function purpleItems(id,namea){
ModPE.setItem(id,"quiver", 0, "stone sword");
Item.setProperties(id, {
"stack_by_data": true,
"foil": true,
"hover_text_color": "light_purple",
});
Item.setEnchantType(id, EnchantType.all, 1); 
var elvl = 32767;
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, elvl); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, elvl); 
}
function stackitems(id){
for(var i = 255; i < 406; i++){
if(i!=210&i!=211&i!=212&i!=217&i!=230&i!=241&i!=242&i!=248&i!=249&i!=250&i!=326&i!=327&i!=343){
Item.setProperties(i, {
"stack_by_data": true,
});
}
}}
function foilitems(){
for(var i = 255; i < 406; i++){
if(i!=326&i!=327&i!=343&i!=382&i!=282){
Item.setProperties(i, {
"foil": true,
"hover_text_color": "light_purple",
});
}}
}
function unfoilitems(){
for(var i = 255; i < 406; i++){
if(i!=326&i!=327&i!=343&i!=382&i!=282){
Item.setProperties(i, {
"foil": false,
"hover_text_color": "light_purple",
});
}}
}
var dw_ = new android.content.Intent(ctx);
var r=255,g=0,b=0;
function modTick() {
try{

	if(hsfind){
		var playershs = Server.getAllPlayers();
		playershs.forEach(function (them){
		checkblockplace(them);
		})
	}
	if(spam2){
		Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, 32767); 
	}
if(checkedno&&canPreset){
if(Player.getName(getPlayerEnt())!="Steve"||Player.getName(getPlayerEnt())!=""){showSite();checkedno=false;}
}
if(disSpeed){
var playerSpeed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
var fixedS =playerSpeed.toFixed(2);
if(fixedS==0.00){clientMessage("Standing");}
if(fixedS==0.12){clientMessage("Walking");}
if(fixedS==0.13||fixedS==0.14){clientMessage("Walking (Changed Level)");}
if(fixedS==0.15||fixedS==0.16){clientMessage("Sprinting");}5.62
if(fixedS==0.04){clientMessage("Sneaking");}
if(fixedS==0.05){clientMessage("Sneaking (Up)");}
if(fixedS==0.26){clientMessage("Sprinting (Up)");}
if(fixedS==0.17){clientMessage("Sprinting (Down)");}
if(fixedS==0.49){clientMessage("Fly Walk");}
if(fixedS==0.03||fixedS==0.01){clientMessage("Soulsand");}
if(fixedS==0.24||fixedS==0.23){clientMessage("Ice Sprinting");}
if(fixedS==0.18||fixedS==0.17){clientMessage("Ice Walking");}
if(fixedS>0.60){clientMessage("Fly Sprint");}
}
if(realmnfd&&!funcS.Player.onGround()&&Entity.getVelY(Player.getEntity()) < -.5){
if(getTile(getPlayerX(), getPlayerY() - 7, getPlayerZ())!=0){
setVelY(Player.getEntity(), 0.00000)
clientMessage('Fall Softened');
}
if(getTile(getPlayerX(), getPlayerY() - 5, getPlayerZ())!=0){
setVelY(Player.getEntity(), 0.00000)
clientMessage('Fall Softened');
}
if(getTile(getPlayerX(), getPlayerY() - 3, getPlayerZ())!=0){
setVelY(Player.getEntity(), 0.00000)
clientMessage('Fall Softened');
}
}
if(playerNameStat){
playerStatName();
}
if (nevvhun) { 
Player.setHunger(20);}
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (x933q&canPreset) {
var ent = getNearestPlayer(300);
if(Entity.getEntityTypeId(ent) == EntityType.PLAYER){
if(Entity.getCarriedItem(ent)==142&Entity.getNameTag(getNearestPlayer(100))=="[I] v7thSharkv"){
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() -905, getPlayerZ());
}
if(Entity.getCarriedItem(ent)==142&Entity.getNameTag(getNearestPlayer(100))=="v7thSharkv"){
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() -905, getPlayerZ());
}
}
}
if(openMenu11Status){
ctx.runOnUiThread(new java.lang.Runnable(
{
run:function(){
try{
webUrlDis = webViewDi.getUrl();
if(webUrlDis.indexOf('invite') >= 0){
closeEverything();openMenu11Status="";
var discord = new android.content.Intent(ctx);
discord.setAction(android.content.Intent.ACTION_VIEW);
discord.setData(android.net.Uri.parse("https://discord.gg/HP6xYrj"));
ctx.startActivity(discord);
}

}catch(err){}}}));
}
if(nOffs){
Entity.setOffhandSlot(getPlayerEnt(), 0, 0, 0);
}
if(acrashchnks){
setPosition(getPlayerEnt(), getPlayerX()+500, getPlayerY(), getPlayerZ());
}
if(pfss){
npPlayer=getNearestPlayer(200);
if(Entity.getX(npPlayer)!=0&Entity.getY(npPlayer)!=-2&Entity.getZ(npPlayer)!=-1){
Entity.setPosition(getPlayerEnt(), Entity.getX(npPlayer), Entity.getY(npPlayer)+dispro, Entity.getZ(npPlayer));
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
}
}
if(Entity.getHealth(Player.getEntity())<=0){
deathX=Player.getX();
deathY=Player.getY();
deathZ=Player.getZ();
}
if(Entity.getEntityTypeId(getNearestPlayer(100)) == EntityType.PLAYER&contains(particleEffect,Entity.getNameTag(getNearestPlayer(50)))){
var entP = getNearestPlayer(80);
Level.addParticle(ParticleType.portal,Entity.getX(entP),Entity.getY(entP),Entity.getZ(entP),0,0,0,100)
}
/*if(Entity.getX(getPlayerEnt())!=0&Entity.getY(getPlayerEnt())!=0&Entity.getZ(getPlayerEnt())!=0&contains(particleEffect,Player.getName(getPlayerEnt()))){
var entP = getPlayerEnt();
Level.addParticle(ParticleType.portal,Entity.getX(entP),Entity.getY(entP),Entity.getZ(entP),0,0,0,100)
}*/
if(containsCus(Entity.getNameTag(getNearestPlayer(50)))){
Entity.setNameTag(getNearestPlayer(50),customNameC[currentSelect]);
}
if(magiccarpetParent){
blocksToReplaceX = [];
blocksToReplaceY = [];
blocksToReplaceZ = [];

playerX = getPlayerX();
playerY = getPlayerY();
playerZ = getPlayerZ();
for(x = -2;x<=2;x++){
for(z = -2;z<=2;z++){
if(!(Math.abs(x)==2&&Math.abs(z)==2)&&!(Math.abs(x)==2&&Math.abs(z)==2)&&!(Math.abs(x)==2&&Math.abs(z)==2)){
var tile = Level.getTile(Math.round(x+playerX),Math.round(playerY-3),Math.round(z+playerZ));
if(magiccarpets&& (tile == 0||tile == 241)){
blocksToReplaceX.push(Math.round(x+playerX));
blocksToReplaceY.push(Math.round(playerY-3));
blocksToReplaceZ.push(Math.round(z+playerZ));
}
}
}
}
if(blocksReplacedX!=null){
blocksToSkip = [];

for(m = 0;m < blocksReplacedX.length;m++){
for(j = 0;j < blocksToReplaceX.length;j++){
if(blocksReplacedX[m] == blocksToReplaceX[j] && blocksReplacedY[m] == blocksToReplaceY[j] && blocksReplacedZ[m] == blocksToReplaceZ[j]){
blocksToSkip.push(m);
}
}
}

//clientMessage("blocksToSkip: "+blocksToSkip);

var currentTile;
for(m = 0;m < blocksReplacedX.length;m++){
if(blocksToSkip.indexOf(m)<0){
currentTile = getTile(blocksReplacedX[m],blocksReplacedY[m],blocksReplacedZ[m]);
if(currentTile == 241){
if(Level.getData(blocksReplacedX[m],blocksReplacedY[m],blocksReplacedZ[m])==10){
setTile(blocksReplacedX[m],blocksReplacedY[m],blocksReplacedZ[m],0);
}}
}
}
}

blocksReplacedX = [];
blocksReplacedY = [];
blocksReplacedZ = [];

for(m = 0;m < blocksToReplaceX.length;m++){	
if(magiccarpets){
setTile(blocksToReplaceX[m],blocksToReplaceY[m],blocksToReplaceZ[m],241,10);
}
}

for(m = 0;m < blocksToReplaceX.length;m++){
blocksReplacedX.push(blocksToReplaceX[m]);
blocksReplacedY.push(blocksToReplaceY[m]);
blocksReplacedZ.push(blocksToReplaceZ[m]);
}
}
carriedItem = Player.getCarriedItem();
if(vmb){
if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==14){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==15){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==16){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==21){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==56){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==73){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==74){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==129){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==153){
veinMinerEnabled=true;
}else{
veinMinerEnabled=false;
}
}
//Handle VeinMine
if(blocksVar[0] && blocksReplaced < 128){
if(carriedItem==257||carriedItem==278||carriedItem==285||carriedItem==258||carriedItem==286||carriedItem==279||carriedItem==275||carriedItem==274||carriedItem==270||carriedItem==256||carriedItem==269||carriedItem==273||carriedItem==277||carriedItem==284){
try{
for(var i=0;i<blocksVar.length;i++){
if(Level.getTile(blocksVar[i][0],blocksVar[i][1],blocksVar[i][2])==0) blocksVar.splice(i,1);
}
var sides=[[blocksVar[0][0],blocksVar[0][1]-1,blocksVar[0][2]],[blocksVar[0][0],blocksVar[0][1]+1,blocksVar[0][2]],[blocksVar[0][0],blocksVar[0][1],blocksVar[0][2]-1],[blocksVar[0][0],blocksVar[0][1],blocksVar[0][2]+1],[blocksVar[0][0]-1,blocksVar[0][1],blocksVar[0][2]],[blocksVar[0][0]+1,blocksVar[0][1],blocksVar[0][2]]];
for(var i=0;i<6;i++){
if(Level.getTile(sides[i][0],sides[i][1],sides[i][2])==blockIdVar && Level.getData(sides[i][0],sides[i][1],sides[i][2])==blockDataVar)
blocksVar.push([sides[i][0],sides[i][1],sides[i][2]]);
}
if(Level.getTile(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2])==blockIdVar && Level.getData(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2])==blockDataVar){
if(blockIdVar == itemToDropId){
Level.setTile(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2],0);
Level.dropItem(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2],0.5,itemToDropId,1,0);
}
else{
Level.setTile(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2],0);

Level.dropItem(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2],0.5,itemToDropId,1,0);
}
blocksReplaced++;
var selectedSlot = Player.getSelectedSlotId();
var enchantments = Player.getEnchantments(selectedSlot);
var customName = Player.getItemCustomName(selectedSlot);
if(Player.getCarriedItemData() > getMaxItemDamage(Player.getCarriedItem())){
Player.clearInventorySlot(selectedSlot);
}else{
Entity.setCarriedItem(getPlayerEnt(),Player.getCarriedItem(),Player.getCarriedItemCount(),Player.getCarriedItemData()+1);
if(customName != null) Player.setItemCustomName(selectedSlot);
if(enchantments != null && enchantments.length != 0){
for(i=0;i<enchantments.length;i++){
Player.enchant(selectedSlot,enchantments[i].type,enchantments[i].level);
}
}
}

}
blocksVar.splice(0,1);
}catch(e){
}
}
}else{
blocksVar = [];
blocksReplaced = 0;
}

if(destroyingWood){
if(woodticker!=0){
woodticker--;
}
if(woodticker==0){
destroyingWood=false;
checkedBlock=1;
pointedX=Player.getPointedBlockX();
pointedY=Player.getPointedBlockY();
pointedZ=Player.getPointedBlockZ();
destroyNextWood=true;
Level.destroyBlock(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ(), true);
}
}
if(destroyNextWood){
if(getTile(pointedX, pointedY+checkedBlock, pointedZ)==17||getTile(pointedX, pointedY+checkedBlock, pointedZ)==162){
Level.destroyBlock(pointedX, pointedY+checkedBlock, pointedZ, true);
checkedBlock=checkedBlock+1;
}else{
destroyNextWood=false;
}
}
if(effectRemove){
Entity.removeEffect(getPlayerEnt(), MobEffect.blindness);
Entity.removeEffect(getPlayerEnt(), MobEffect.confusion);
Entity.removeEffect(getPlayerEnt(), MobEffect.digSlowdown);
Entity.removeEffect(getPlayerEnt(), MobEffect.wither);
Entity.removeEffect(getPlayerEnt(), MobEffect.poison);
Entity.removeEffect(getPlayerEnt(), MobEffect.weakness);
Entity.removeEffect(getPlayerEnt(), MobEffect.hunger);
Entity.removeEffect(getPlayerEnt(), MobEffect.harm);
Entity.removeEffect(getPlayerEnt(), MobEffect.movementSlowdown);
}
if(effectAdd){
if (gped) {
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, nivd, niva, false, false);
}
if (ims) {
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, hastd, hasta, false, false);
}
if (hjs) {
Entity.addEffect(Player.getEntity(), MobEffect.jump, jumpd, jumpa, false, false);
}
if (effectIn) {
Entity.addEffect(Player.getEntity(), MobEffect.invisibility, invisd, invisa, false, false);
}if (miningfs) {
Entity.addEffect(Player.getEntity(), MobEffect.digSlowdown, mind, mina, false, false);
}if (hjjs) {
Entity.addEffect(Player.getEntity(), MobEffect.jump, jumpd, jumpa, false, false);
}if (effectn) {
Entity.addEffect(Player.getEntity(), MobEffect.confusion, nausd, nausa, false, false);
}if (effectb) {
Entity.addEffect(Player.getEntity(), MobEffect.blindness, blindd, blinda, false, false);
}if (effectAbs) {
Entity.addEffect(Player.getEntity(), MobEffect.absorption, sbsod, absoa, false, false);
}if (effectHealth) {
Entity.addEffect(Player.getEntity(), MobEffect.healthBoost, healbod, healboa, false, false);
}if (effectWither) {
Entity.addEffect(Player.getEntity(), MobEffect.wither, witherd, withera, false, false);
}if (effectPois) {
Entity.addEffect(Player.getEntity(), MobEffect.poison, poisond, poisona, false, false);
}if (effectWeak) {
Entity.addEffect(Player.getEntity(), MobEffect.weakness, weakd, weaka, false, false);
}if (effectHunger) {
Entity.addEffect(Player.getEntity(), MobEffect.hunger, hungerd, hungera, false, false);
}if (effectWater) {
Entity.addEffect(Player.getEntity(), MobEffect.waterBreathing, waterbd, waterba, false, false);
}if (effectFireRes) {
Entity.addEffect(Player.getEntity(), MobEffect.fireResistance, fresd, fresa, false, false);
}if (effectDmgRes) {
Entity.addEffect(Player.getEntity(), MobEffect.damageResistance, resd, resa, false, false);
}if (effectStrgth) {
Entity.addEffect(Player.getEntity(), MobEffect.damageBoost, strengthd, strengta, false, false);
}if (effectSlow) {
Entity.addEffect(Player.getEntity(), MobEffect.movementSlowdown, slowd, slowa, false, false);
}if (effectSwift) {
Entity.addEffect(Player.getEntity(), MobEffect.movementSpeed, swiftd, swifta, false, false);
}
}
if(snowIt){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
roundPart(ParticleType.snowballpoof,Entity.getX(Player.getEntity())-.5,Entity.getY(Player.getEntity())+5,Entity.getZ(Player.getEntity())-.5,1.3,1)
}}
if(tntcanOn==true && getPitch(getPlayerEnt())>pitchtrigger){ var playerYaw = Entity.getYaw(Player.getEntity()); var playerPitch = Entity.getPitch(Player.getEntity()); velY = Math.sin((playerPitch - 180) / 180 * Math.PI); velX = Math.sin(playerYaw / 180 * Math.PI) * Math.cos((playerPitch - 180) / 180 * Math.PI); velZ = -1 * Math.cos(playerYaw / 180 * Math.PI) * Math.cos((playerPitch - 180) / 180 * Math.PI); entity = Level.spawnMob(Player.getX() + velX * 2, Player.getY(), Player.getZ() + velZ * 2, entityType); setVelX(entity, velX * 2); setVelY(entity, velY); setVelZ(entity, velZ * 2);  }if(tntcanOn==true && getPitch(getPlayerEnt())<pitchtrigger){ var playerYaw = Entity.getYaw(Player.getEntity()); var playerPitch = Entity.getPitch(Player.getEntity()); velY = Math.sin((playerPitch - 180) / 180 * Math.PI); velX = Math.sin(playerYaw / 180 * Math.PI) * Math.cos((playerPitch - 180) / 180 * Math.PI); velZ = -1 * Math.cos(playerYaw / 180 * Math.PI) * Math.cos((playerPitch - 180) / 180 * Math.PI); entity = Level.spawnMob(Player.getX() + velX * 2, Player.getY() + 1, Player.getZ() + velZ * 2, entityType); setVelX(entity, velX * 2); setVelY(entity, velY); setVelZ(entity, velZ * 2);  }
if(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(100)))&&Entity.getEntityTypeId(getNearestPlayer(100)) == EntityType.PLAYER||contains(immunity,Entity.getNameTag(getNearestPlayer(100)))&&Entity.getEntityTypeId(getNearestPlayer(100)) == EntityType.PLAYER){Entity.setCollisionSize(getNearestPlayer(100), 0, 0);}
if(hiddenMenu&&!mopen&&!sleekMenuOn&&Entity.isSneaking(getPlayerEnt())&&Player.getSelectedSlotId() == 0){
Player.setSelectedSlotId(1);
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);

if(!contains(banslist,Player.getName(getPlayerEnt()))){
if (publicVer != undefined||publicVer != "locked") {
if (showAllMenu) {
if (mopen == false) {
mainMenuC();
mopen = true;
openMenuCloseBtn();
} else {
menuC.dismiss();
mopen = false;
GUIclose.dismiss();
}
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
};
if (!showAllMenu) {
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
} else {
sleekMenuOn = true;
ShowSleekMenu();
openMenuCloseBtn();
}
};
} else if (publicVer == undefined) {
betToast("Access has been locked, connect to WiFi and restart game.");
}  else if (publicVer == "locked") {
betToast(creator+" has locked this client");
}if(publicVer!=versionP) {
betToast("Update available, update to version " + publicVer);

function askUpdate() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
var faqbtn = new android.widget.Button(ctx);
var questionbox = new android.widget.TextView(ctx);
infoBox.setText("Update to the latest version, " + publicVer + "\n\nCurrent Version Installed: " + versionP);
addWBtn.setText("Update");
questionbox.setText("\nQuestions? Check in the FAQ's");
faqbtn.setText("FAQ");
infoBox.setGravity(Gravity.CENTER);
addWBtn.setTypeface(mcfont);
questionbox.setGravity(Gravity.CENTER);
faqbtn.setTypeface(mcfont);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
addWDialog.setTitle("Do You Want to Update?");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWLayout.addView(questionbox);
addWLayout.addView(faqbtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
downloadUpdate();
betToast("Downloading...");
}
})
faqbtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setTitle("Instinct FAQ/Help");
alert.setMessage(FAQ);
var dialog = alert.create();
dialog.show();
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
openUpdateSelect();
}
}else{betToast("Your account is banned from using this client, request access on Discord at v7thSharkv#0101")}

}
if (autoBridgess == true) {
var x = Player.getX();
var y = Player.getY();
var z = Player.getZ();
setTile(x, y - 2, z-1, autoBlockB, 0);
}
if (autoSword){
if(!checking){
invCheck.forEach(checkSword);
checking = true;}
var ent = getNearestEntity(8);
if(ent != null && Player.getName(ent) != "" && Player.getName(ent) != " ") {
Player.setSelectedSlotId(swordSlot);
}
}
if (autoBow){
if(!checking){
invCheck.forEach(checkBow);
checking = true;}
var ent = getNearestEntity(34);
if(ent != null && Player.getName(ent) != "" && Player.getName(ent) != " ") {
Player.setSelectedSlotId(bowSlot);
}
}
if (mcpss&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(100))))&&!contains(immunity,Entity.getNameTag(getNearestPlayer(100)))) {
vic = getNearestPlayer(120);
if (vic != null && Entity.getEntityTypeId(vic) == EntityType.PLAYER) {
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.5);
setVelZ(Player.getEntity(), z * -0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.1);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), -0.9);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 7;
setVelX(getPlayerEnt(), 0);
setVelZ(getPlayerEnt(), 0);
setVelY(getPlayerEnt(), 0.5);
}
}
}
if (tpdelay < 1) {
if (addX) {
if (currentX < goalX) {
Entity.setPosition(getPlayerEnt(), getPlayerX() + 100, getPlayerY(), getPlayerZ());
currentX = getPlayerX();
tpdelay = 2;
} else if (currentX == goalX || currentX > goalX) {
addX = false;
}
}
if (subtractX) {
if (currentX > goalX) {
Entity.setPosition(getPlayerEnt(), getPlayerX() - 100, getPlayerY(), getPlayerZ());
currentX = getPlayerX();
tpdelay = 2;
} else if (currentX == goalX || currentX < goalX) {
subtractX = false;
}
}
if (addZ) {
if (currentZ < goalZ) {
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY(), getPlayerZ() + 100);
currentZ = getPlayerZ();
tpdelay = 2;
} else if (currentZ == goalZ || currentZ > goalZ) {
addZ = false;
}
}
if (subtractZ) {
if (currentZ > goalZ) {
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY(), getPlayerZ() - 100);
currentZ = getPlayerZ();
tpdelay = 2;
} else if (currentZ == goalZ || currentZ < goalZ) {
subtractZ = false;
}
}
}
if (tpdelay > 0) {
tpdelay--
}
if (countdelay > 0) {
countdelay--
}
if (tmiRepeat) {
if (countdelay < 1) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
countdelay = 20;
}
}
if (phaseBlockss == true) {
if (Entity.isSneaking(getPlayerEnt())) {
Entity.setCollisionSize(getPlayerEnt(), 0, 0);
setVelY(getPlayerEnt(), 0.00000000000000000000000000000001);
phaseBlocks();
}
}
if (huds) {
var x = Math.floor(getPlayerX());
var y = Math.floor(getPlayerY());
var z = Math.floor(getPlayerZ());
var item = Player.getCarriedItem();
var count = Player.getCarriedItemCount();
var meta = Player.getCarriedItemData();
var time = Math.floor(Level.getTime());
ModPE.showTipMessage(ChatColor.YELLOW+"X: " + x + ", Y: " + y + ", Z: " + z +ChatColor.GREEN+"\nWorld Time: " + time + ChatColor.RED+"\nID, Meta, Amount: " + item + ":" + meta + ":" + count+"\nPointed ID: " + Player.getPointedBlockId()+"\nSelected Slot: "+Player.getSelectedSlotId());
}
if (crouchtpss == true && Entity['isSneaking'](Player['getEntity']()) == true) {
setVelY(getPlayerEnt(), -0.003);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw()+90) * Math['PI'] / 180, getPitch() * Math['PI'] / 180 * -1);
setVelX(getPlayerEnt(), 0.6 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.6 * playerDir[2])
};
if (lankillaura){
var mobs = Entity.getAll();
for(var i=0; i<mobs.length; i++){ var x1 = Entity.getX(mobs[i])-getPlayerX(),y1 = Entity.getY(mobs[i])-getPlayerY(),z1 = Entity.getZ(mobs[i])-getPlayerZ();
if(x1*x1+y1*y1+z1*z1<=aurRan*aurRan&&Entity.getEntityTypeId(mobs[i])!=-1){if(mobs[i]!=getPlayerEnt())Entity.setHealth(mobs[i], 0);}}}
if (stepss && funcS['Player']['isCollidedHorizontally']()) {
Entity['setPositionRelative'](getPlayerEnt(), 0, 1.6, 0)
};
if (zcrampss) {
if (startMapControl) {
startMapControl = false;
mapWindow['show']();
createPool()
}
};
if (clearweather) {
Level.setRainLevel(0);
Level.setLightningLevel(0);
}
if (allday) {
Level.setTime(1200);
}
if (allnight) {
Level.setTime(17000);
}
if (bedrocke) {
Block.setDestroyTime(7, 0.01);
Block.setDestroyTime(137, 0.01);
Block.setDestroyTime(188, 0.01);
Block.setDestroyTime(189, 0.01);
Block.setDestroyTime(209, 0.01);
Block.setDestroyTime(90, 0.01);
Block.setDestroyTime(119, 0.01);
Block.setDestroyTime(120, 0.01);
}
if (aoss) {
this.tick = 0;
if (this.health > Entity.getHealth(getPlayerEnt())) {
this.tick = 60;
Entity.setImmobile(getPlayerEnt(), true);
}
if (this.tick == 0) {
Entity.setImmobile(getPlayerEnt(), false);
}
this.health = Entity.getHealth(getPlayerEnt());
if (this.tick != 0) {
tick--;
}
}
if (aimbot){
if((friendList_.isFriend(Entity.getNameTag(getNearestPlayer(100))))==false) {
var ent = getNearestEntity(aimbotRange);
if (ent != null) crosshairAimAt(ent);
}}
if (faimbot){
if((friendList_.isFriend(Entity.getNameTag(getNearestPlayer(100))))==false) {
var ent = getNearestEntity(aimbotRange);
if (ent != null) crosshairAimAtLow(ent);
}}
if (chestespd == true) {
chesttracers.onTick();
};
if (autoReachs&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(100))))&&!contains(immunity,Entity.getNameTag(getNearestPlayer(100)))) {
var nextentity = getNearestPlayer(40);
if (nextentity != null) {
Entity.setCollisionSize(nextentity, reachDistance, 40);
}
}
if(zomS){Player.setHealth(20)}
if(gmLans){Player.setHealth(20000)}
if (freecamSon) {
setRot(host, Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()));
}
if (bowaimbot && getCarriedItem() == 261) {
var entb = getNearestEntity(40);
if (entb != null) crosshairAimAt(ent);
}
if (swordaimbot) {
if (getCarriedItem() == 268 || getCarriedItem() == 272 || getCarriedItem() == 267 || getCarriedItem() == 276 || getCarriedItem() == 283) {
var ents = getNearestEntity(11);
if (ents != null) crosshairAimAt(ent);
}
}
if (curBiomes) {
var biomeid = Level.getBiome(getPlayerX(), getPlayerZ());
}
if (ncoordds) {
if(dimensionIn==1){
ModPE.showTipMessage(ChatColor.RED +"In Nether\n"+ChatColor.YELLOW+"Overworld Location - "+ChatColor.WHITE + "X:" + Math.floor(Player.getX())*8 +"  Y:" + Math.floor(Player.getY() - 2) +"  Z:" + Math.floor(Player.getZ())*8);
}else{ModPE.showTipMessage(ChatColor.RED +"Not in Nether\n"+ChatColor.YELLOW+"Overworld Coords: "+ChatColor.WHITE + "X:" + Math.floor(Player.getX()) + "  Y:" + Math.floor(Player.getY() - 1) + "  Z:" + Math.floor(Player.getZ()))}
}
if (longjumps) {
setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * 1.09);
setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * 1.09);
}
if (jetskiss) {
setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * 1.09);
setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * 1.09);
}
if (grappless == true && !funcS.Player.onGround()) {
airjumpcounter++;
if (airjumpcounter == 0) {
setVelX(getPlayerEnt(), Entity['getVelX'](getPlayerEnt()) * 1.67);
setVelZ(getPlayerEnt(), Entity['getVelZ'](getPlayerEnt()) * 1.67)
};
if (airjumpcounter >= 10) {
setVelY(getPlayerEnt(), 0.50);
setVelX(getPlayerEnt(), Entity['getVelX'](getPlayerEnt()) * 1.67);
setVelZ(getPlayerEnt(), Entity['getVelZ'](getPlayerEnt()) * 1.67);
airjumpcounter = 0
}
};
if (eAimbot) {
var ent = getNearestEntity(16);
if (ent != null) crosshairAimAt(ent);
}

if(playerStats){
var players = Server.getAllPlayers();
players.forEach(function (entry){
if(Entity.getCarriedItemData(entry)!=-1){
namestore = entry;
Entity.setNameTag(entry, namestore+"\n"+Entity.getHealth(entry)+"/"+Entity.getMaxHealth(entry)+"\n"+Item.getName(Entity.getCarriedItem(entry), Entity.getCarriedItemData(entry), false)+":"+Entity.getCarriedItemData(entry));
Entity.setNameTag(entry, namestore);
}
})
}
if(indiSta){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
if(Math.sqrt(Math.pow(deathX-Player.getX(),2)+Math.pow(deathZ-Player.getZ(),2))<3)
indicLo.setRotation(indicLo.getRotation()+40);
else
indicLo.setRotation(-getYaw()-Math.atan2(gpsX-(Player.getX()+0.5),gpsZ-(Player.getZ()+0.5))*(180/Math.PI));
}
}));
}
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
if(waila){
var entityPoint = Entity.getEntityTypeId(Player.getPointedEntity());
var entityNamePointed = EntityName[entityPoint];
var blockIDPointed = Player.getPointedBlockId();
var blockDataPointed = Player.getPointedBlockData();
var itemName = Item.getName(blockIDPointed,blockDataPointed);
if(entityNamePointed==undefined||entityNamePointed=="undefined"){entityNamePointed="";}
if(itemName==undefined||itemName=="undefined"||itemName==-1||itemName=="-1"){itemName="";}

nameTxt.setText(itemName+entityNamePointed);
var string1 = ""
var string2 = ""
if(entityPoint<1||entityPoint==undefined||entityPoint=="undefined"){
string1=blockIDPointed+":"+blockDataPointed+"\nx64";
}else{
string2="Ent ID:\n"+entityPoint;
}
dataTxt.setText(string1+string2);
}
if(coordds){
coordTxt.setText(" X:" + Math.floor(Player.getX()) + "  " + "Y:" + Math.floor(Player.getY() - 1) + "  " + "Z:" + Math.floor(Player.getZ())+" ");
}
if(armorB){
var head = Player.getArmorSlot(0);
var chest = Player.getArmorSlot(1);
var legs = Player.getArmorSlot(2);
var feet = Player.getArmorSlot(3);
var hand = Player.getCarriedItem();

var head_damage = Player.getArmorSlotDamage(0);
var chest_damage = Player.getArmorSlotDamage(1);
var legs_damage = Player.getArmorSlotDamage(2);
var feet_damage = Player.getArmorSlotDamage(3);
var hand_damage = Player.getCarriedItemData();

var max_dura_head = Item.getMaxDamage(head);
var max_dura_chest = Item.getMaxDamage(chest);
var max_dura_legs = Item.getMaxDamage(legs);
var max_dura_feet = Item.getMaxDamage(feet);
var max_dura_hand = Item.getMaxDamage(hand);
headData.setText(max_dura_head-head_damage+"/"+max_dura_head);
chestData.setText(max_dura_chest-chest_damage+"/"+max_dura_chest);
legData.setText(max_dura_legs-legs_damage+"/"+max_dura_legs);
feetData.setText(max_dura_feet-feet_damage+"/"+max_dura_feet);
handData.setText(max_dura_hand-hand_damage+"/"+max_dura_hand);
if(max_dura_head-head_damage<100){headData.setTextColor(android.graphics.Color.RED);}else{headData.setTextColor(android.graphics.Color.WHITE);}
if(max_dura_chest-chest_damage<100){chestData.setTextColor(android.graphics.Color.RED);}else{chestData.setTextColor(android.graphics.Color.WHITE);}
if(max_dura_legs-legs_damage<100){legData.setTextColor(android.graphics.Color.RED);}else{legData.setTextColor(android.graphics.Color.WHITE);}
if(max_dura_feet-feet_damage<100){feetData.setTextColor(android.graphics.Color.RED);}else{feetData.setTextColor(android.graphics.Color.WHITE);}
if(max_dura_hand-hand_damage<100){handData.setTextColor(android.graphics.Color.RED);}else{handData.setTextColor(android.graphics.Color.WHITE);}

if(max_dura_head==-1){headData.setText("No Helmet");}
if(max_dura_chest==-1){chestData.setText("No Chest");}
if(max_dura_legs==-1){legData.setText("No Leggings");}
if(max_dura_feet==-1){feetData.setText("No Boots");}
if(max_dura_hand==-1||max_dura_hand==0){handData.setText("No Sword");}


}
if(armorE){
var nameEnemy = Entity.getNameTag(getNearestEntity(160));
var healthEnemy = Entity.getHealth(getNearestEntity(160));
var max_healthEnemy = Entity.getMaxHealth(getNearestEntity(160));
var headEnemy = Entity.getArmor(getNearestEntity(160), 0) ;
var chestEnemy = Entity.getArmor(getNearestEntity(160), 1);
var legsEnemy = Entity.getArmor(getNearestEntity(160), 2);
var feetEnemy = Entity.getArmor(getNearestEntity(160), 3);
var handEnemy = Entity.getCarriedItem(getNearestEntity(160));

var head_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 0);
var chest_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 1);
var legs_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 2);
var feet_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 3);
var hand_damageEnemy = Entity.getCarriedItemData(getNearestEntity(160));

var max_dura_headEnemy = Item.getMaxDamage(headEnemy);
var max_dura_chestEnemy = Item.getMaxDamage(chestEnemy);
var max_dura_legsEnemy = Item.getMaxDamage(legsEnemy);
var max_dura_feetEnemy = Item.getMaxDamage(feetEnemy);
var max_dura_handEnemy = Item.getMaxDamage(handEnemy);

nameDataEnemy.setText(nameEnemy);
healthDataEnemy.setText(healthEnemy+"/"+max_healthEnemy);
headDataEnemy.setText(max_dura_headEnemy-head_damageEnemy+"/"+max_dura_headEnemy);
chestDataEnemy.setText(max_dura_chestEnemy-chest_damageEnemy+"/"+max_dura_chestEnemy);
legDataEnemy.setText(max_dura_legsEnemy-legs_damageEnemy+"/"+max_dura_legsEnemy);
feetDataEnemy.setText(max_dura_feetEnemy-feet_damageEnemy+"/"+max_dura_feetEnemy);
handDataEnemy.setText(max_dura_handEnemy-hand_damageEnemy+"/"+max_dura_handEnemy);
if (Player.getName(getNearestEntity(160))== "Steve"||Player.getName(getNearestEntity(160)) == "Not a player"){nameDataEnemy.setText("Nobody")}
if(healthEnemy==0){healthDataEnemy.setText("Dead");}
if(max_dura_headEnemy==-1){headDataEnemy.setText("No Helmet");}
if(max_dura_chestEnemy==-1){chestDataEnemy.setText("No Chest");}
if(max_dura_legsEnemy==-1){legDataEnemy.setText("No Leggings");}
if(max_dura_feetEnemy==-1){feetDataEnemy.setText("No Boots");}
if(max_dura_handEnemy==-1||max_dura_handEnemy==0){handDataEnemy.setText("No Sword");}


}
if(windowOpen){
if(webviewList!=undefined){
if(webviewList.getUrl()==lstUrl){
}else{lstUrl=webviewList.getUrl();stateChng(lstUrl);webviewList.loadUrl(websiteurl);}}
}
if(chatTranslator){
if(translateView!=undefined){
if(translateView.getUrl()==lstUrlTran){
}else{lstUrlTran=translateView.getUrl();

if(!lstUrlTran.startsWith("http://instinctmods.com/translator.html#"+translatelang)){
sendToChat(decodeURIComponent(lstUrlTran))}
}}
}
}
catch(err){}}}));
}catch(e){}
};
function sendToChat(string){
var nolink=string.replace("http://instinctmods.com/translator.html#"+translatelang,'');
var spacehash=nolink.split("#").join('');

var spaceperc = spacehash.replace(/%20/g, ' '); 
var nourl=spaceperc.replace("http://instinctmods.com/translator.html",'');
clientMessage("§b[Google]§f "+nourl);


}
function speedBypass(){
for(var i = 0; i < 406; i++){
Block.setFriction(i, 0.3);
}
}
function hasteBypass(){
for(var i = 0; i < 406; i++){
Block.setDestroyTime(i, 0.01);
}
}
function nightVisionBypass(){
for(var i = 0; i < 406; i++){
Block.setLightLevel(i, 15);
}
Block.setLightLevel(-163, 15);
}
function resetNV(){
for(var i = 0; i < 406; i++){
Block.setLightLevel(i, 0);
}
Block.setLightLevel(89, 15);
Block.setLightLevel(50, 15);
Block.setLightLevel(-163, 0);
ModPE.resetImages();
}
function stateChng(site){
var hash=site.split("#");
/*Movement*/
if(site.endsWith("#flyOn")){
Player.setCanFly(1); 
Player.isFlying(1); 
sf = true; 
sfs = true;
clientMessage("Fly On");
}
if(site.endsWith("#flyOff")){
Player.setCanFly(0); sf = false; sfs = false;clientMessage("Fly Off");
}
if(site.endsWith("#nofalldamageOn")){
potions=true;clientMessage("NoFallDamage On");
}
if(site.endsWith("#nofalldamageOff")){
potions=false;clientMessage("NoFallDamage Off");
}
if(site.endsWith("#jesusOn")){
jesuss = true; jesused = true;clientMessage("Jesus On");
}
if(site.endsWith("#jesusOff")){
jesuss = false; jesused = false;clientMessage("Jesus Off");
}
if(site.endsWith("#elytraOn")){
elytras = true;
elytrad = true;clientMessage("Elytra On");
}
if(site.endsWith("#elytraOff")){
elytras = false;
elytrad = false;clientMessage("Elytra Off");
}
if(site.endsWith("#crouchglideOn")){
crouchtpss = true;clientMessage("CrouchGlide On");
}
if(site.endsWith("#crouchglideOff")){
crouchtpss = false;clientMessage("CrouchGlide Off");
}
if(site.endsWith("#boostkbOn")){
boostKBBo=true;
showBoost();clientMessage("BoostKB On");
}
if(site.endsWith("#boostkbOff")){
boostKBBo = false;
GUIboost.dismiss();clientMessage("BoostKB Off");
}
if(site.endsWith("#magiccarpetOn")){
magiccarpetParent = true;
magiccarpets=true;
showMGCBtn();clientMessage("MagicCarpet On");
}
if(site.endsWith("#magiccarpetOff")){
magiccarpetParent = false;
GUImgc.dismiss();magiccarpets=false;clientMessage("MagicCarpet Off");
}
if(site.endsWith("#phaseOn")){
phaseBlockss = true;
phaseBlocksd = true;clientMessage("Phase On");
}
if(site.endsWith("#phaseOff")){
phaseBlockss = false;
phaseBlocksd = false;clientMessage("Phase Off");
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
}
if(site.endsWith("#noclipOn")){
clipsBls = true;
showNoclip();clientMessage("Noclip On");
}
if(site.endsWith("#noclipOff")){
clipsBls = false;
clipBtn = false;clientMessage("Noclip Off");
GUIclip.dismiss();
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
}
if(site.endsWith("#launch")){
setVelY(Player.getEntity(), 8)
}
if(site.endsWith("#deathpoint")){
if(deathX!=0&deathY!=0&deathZ!=0){
setPosition(getPlayerEnt(), deathX, deathY + 0.3, deathZ);}else{betToast(langMsg[language]["You haven't died yet!"])}
}
if(site.endsWith("#teleport")){
teleportation();
}
/*PVP*/
if(site.endsWith("#autototemOn")){
atotemd = true; atotems=true; totemSp = true; Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);clientMessage("AutoTotem On");
}
if(site.endsWith("#autototemOff")){
atotemd = false; atotems=false; totemSp = false;clientMessage("AutoTotem Off");
}
if(site.endsWith("#aimbotOn")){
aimbot = true; aimbotBtn = true; aimed = true; showAimbotBtn();clientMessage("Aimbot On");
}
if(site.endsWith("#aimbotOff")){
aimbot = false; aimbotBtn = false; aimed = false; GUIaim.dismiss();clientMessage("Aimbot Off");	
}
if(site.endsWith("#autoreachOn")){
autoReachs = true; autoReachd = true;clientMessage("AutoReach On");
}
if(site.endsWith("#autoreachOff")){
autoReachs = false; autoReachd = false; resetBoxes();clientMessage("AutoReach Off");
}
if(site.endsWith("#espOn")){
esp = true;
espd = true;
espOnsave=true;clientMessage("ESP On");
if(!rendering){funcS.Render.init();rendering=true}
}
if(site.endsWith("#espOff")){
esp = false;
espd = false;clientMessage("ESP Off");
espOnsave=false;
}
if(site.endsWith("#tracerOn")){
espt = true;
espOnTsave=true;clientMessage("Tracers On");
if(!esp){esp=true;espd = true;esp=false;espd = false;}
if(!rendering){funcS.Render.init();rendering=true}
}
if(site.endsWith("#tracerOff")){
espt = false;
espOnTsave=false;clientMessage("Tracers Off");
}
if(site.endsWith("#healthnametagOn")){
nearestHud = true;
nearestHudTsave=true;
ShowInGame();clientMessage("HealthNameTag On");
}
if(site.endsWith("#healthnametagOff")){
nearestHud = false;
nearestHudTsave=false;
HideInGame();clientMessage("HealthNameTag Off");
}
if(site.endsWith("#fasteatOn")){
fasteats = true;
fasteatd = true;
enableEat();clientMessage("Fasteat On");
}
if(site.endsWith("#fasteatOff")){
fasteats = false;
fasteatd = false;
disableEat();clientMessage("Fasteat Off");
}
if(site.endsWith("#blastauraOn")){
blastau = true;clientMessage("Blastaura On");
}
if(site.endsWith("#blastauraOff")){
blastau = false;clientMessage("Blastaura Off");
}
/*Potions*/
if(site.includes("#nightvisionOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!gped) {
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, hash[3], hash[2], false, false);
gps = true;clientMessage("Nightvision On");
gped = true;
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}			
if(site.endsWith("#nightvisionOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (gped) {
gps = false;
gped = false;clientMessage("Nightvision Off");
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
if(site.includes("#hasteOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!ims) {
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, hash[3], hash[2], false, false);
ims = true;clientMessage("Haste On");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
if(site.endsWith("#hasteOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (ims) {
ims = false;clientMessage("Haste Off");
Entity.removeEffect(getPlayerEnt(), MobEffect.digSpeed);
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
if(site.includes("#jumpboostOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!hjs) {
Entity.addEffect(Player.getEntity(), MobEffect.jump, hash[3], hash[2], false, false);
hjs = true;clientMessage("Jumpboost On");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
if(site.endsWith("#jumpboostOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (hjs) {
hjs = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.jump);clientMessage("Jumpboost Off");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
if(site.includes("#levitationOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!levs) {
Entity.addEffect(Player.getEntity(), MobEffect.levitation, hash[3], hash[2], false, false);
levs = true;clientMessage("Levitation On");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
if(site.endsWith("#levitationOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (levs) {
levs = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.levitation);clientMessage("Levitation Off");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
if(site.includes("#nauseaOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectn) {
Entity.addEffect(Player.getEntity(), MobEffect.confusion, hash[3], hash[2], false, false);
effectn = true;clientMessage("Nausea On");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
if(site.endsWith("#nauseaOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (effectn) {
effectn = false;clientMessage("Nausea Off");
Entity.removeEffect(getPlayerEnt(), MobEffect.confusion);
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
/*Survival*/
if(site.endsWith("#coordinatesOn")){
coordds = true; showCgui();clientMessage("Coordinates On");
}
if(site.endsWith("#coordinatesOff")){
coordds = false; windowDis.dismiss();clientMessage("Coordinates Off");
}
if(site.endsWith("#setoffhand")){
if(oldTMI||publicVer=="OFFLINE"){oldoffhandPopup();}else{offhandPopup();}
}
if(site.endsWith("#repeatoffhandOn")){
tmiRepeat = true;clientMessage("Repeat On");
}
if(site.endsWith("#repeatoffhandOff")){
tmiRepeat = false;clientMessage("Repeat Off");
}
if(site.endsWith("#enchantments")){
openEnchantSelect();
}
if(site.endsWith("#wallhackOn")){
wallhackss = true;
wallhacked = true;clientMessage("Wallhack On");
Entity['setCollisionSize'](Player['getEntity'](), 0, 0);
}
if(site.endsWith("#wallhackOff")){
wallhackss = false;
wallhacked = false;clientMessage("Wallhack Off");
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
}
if(site.endsWith("#rename")){
renamePopup();
}
if(site.endsWith("#dupe")){
if(Server.getAddress()!=null){
if(Player.getItemCustomName(Player.getCarriedItem())==null){
Player.setItemCustomName(Player.getSelectedSlotId(),"["+Math.random()*100000000000000000+"]");
}else{
Player.setItemCustomName(Player.getSelectedSlotId(),"["+Math.random()*100000000000000000+"]");
}
betToast(langMsg[language]["Move item to crafting table"]);
}else{Player.addItemInventory(Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData());}

}
if(site.endsWith("#suicide")){
confirmSuicide();
}
if(site.endsWith("#minimapOn")){
zcrampss = true;
zcramped = true;clientMessage("Minimap On");
}
if(site.endsWith("#minimapOff")){
try {clientMessage("Minimap Off");
mapWindow['hide']();
if (map_state) {
changeMapState()
};
pool['shutdownNow']();
startMapControl = true;
X = undefined;
entities = [];
chests = []
} catch (e) {
betToast('leaveGame, ' + e + ' (' + e['fileName'] + ' #' + e['lineNumber'] + ')')
};
if(map_state){changeMapState()}
zcrampss = false;
zcramped = false
}
if(site.endsWith("#day")){
Level.setTime(0);
}
if(site.endsWith("#night")){
Level.setTime(90000);
}
if(site.endsWith("#dayOn")){
allday = true;clientMessage("AlwaysDay On");
}
if(site.endsWith("#dayOff")){
allday = false;clientMessage("AlwaysDay Off");
}
if(site.endsWith("#nightOn")){
allnight = true;clientMessage("AlwaysNight On");
}
if(site.endsWith("#nightOff")){
allnight = false;clientMessage("AlwaysNight Off");
}
if(site.endsWith("#weatherOn")){
clearweather = true;clientMessage("ClearWeather On");
}
if(site.endsWith("#weatherOff")){
clearweather = false;clientMessage("ClearWeather Off");
}
/*Settings*/
if(site.endsWith("#credits")){
openCredits();
}
if(site.endsWith("#defaultmenu")){
showHTMLMenu=false;
sleekMenuOn = false;
showSleekMenuOn=false;
showAllMenu = true;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
windowOpen=false;
htmlmenu.dismiss();
}
if(site.endsWith("#language")){
showLangList();
}
/*Close*/
if(site.endsWith("#close")){
windowOpen=false;
htmlmenu.dismiss();
}
}
function loadWeb() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
webviewList = new android.webkit.WebView(ctx);
webviewList.getSettings().setJavaScriptEnabled(true);
//webviewList.setWebChromeClient(new android.webkit.WebChromeClient());
//webviewList.setWebViewClient(new android.webkit.WebViewClient());
webviewList.loadUrl(url+themeBtn);
webviewList.setBackgroundColor(Color.TRANSPARENT);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};loadWeb();

function openMenu() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
htmlmenu = new PopupWindow(webviewList, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4.2, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT/1.4);
htmlmenu.setAnimationStyle(android.R.style.Animation_Toast);
htmlmenu.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
htmlmenu.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0+ctx.getWindowManager().getDefaultDisplay().getWidth() / 2, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};
function openTranslator() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
translateView = new android.webkit.WebView(ctx);
translateView.getSettings().setJavaScriptEnabled(true);
translateView.loadUrl("http://instinctmods.com/translator.html#"+translatelang+"#"+preTranslatedChat);
translateView.setBackgroundColor(Color.TRANSPARENT);

translateWindowIsOpen=true;

translateWindow = new PopupWindow(translateView, 0, 0);
translateWindow.setTouchable(false);
translateWindow.setAnimationStyle(android.R.style.Animation_Toast);
translateWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
translateWindow.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.RIGHT, 0, 0);
translateWindow.setTouchable(false);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};
function booToString(boo){
if(boo==true){return "true"}
if(boo==false){return "false"}
}
function resetHaste() {
for(var i = 0; i < 406; i++){
Block.setDestroyTime(i, 0.8);
}
}
function resetSpeed() {
for(var i = 0; i < 406; i++){
Block.setFriction(i, .999999999);
}
Block.setFriction(79, .4);
Block.setFriction(174, .4);
Block.setFriction(207, .4);
Block.setFriction(266, .4);
}
function getOptionAttr(attr){
var g_sdcard = android.os.Environment.getExternalStorageDirectory();
var g_mcpeDir = new java.io.File(sdcard.getAbsolutePath(), "games/com.mojang/");
var g_optionsDir = new java.io.File(mcpeDir, "minecraftpe/");
var g_optionsFile = new java.io.File(optionsDir, "options.txt");
var g_br = new java.io.BufferedReader(new java.io.FileReader(g_optionsFile));
var g_str, g_prop;
var g_ln = new Array();

while((g_str = g_br.readLine()) != null){

g_ln.push(g_str);

}

i = g_ln.join().replace(",", ":");
g_prop = i.split(":");

return g_prop[g_prop.indexOf(attr) + 1];

}
function toSurface() {
var px = Player.getX();
var pz = Player.getZ();
for(var i = 256.0;i>0.0;i--) {
if(Level.getTile(px, i, pz) != 0) {
Entity.setPosition(Player.getEntity(), px, i + 3, pz);
break;
}
}
}
function serverMessageReceiveHook(str){
if(antispammer){
if(str==spammsg1){
preventDefault();
}else{spammsg1=str}
}
if(chatTranslator){
if(str.includes(':')&!str.includes('>')&!str.includes('<')){
var splitstr=str.split(":");
var sender=splitstr[0];
preTranslatedChat=appendChatTrans(splitstr[1]);
canSplit=true;
}else if(str.includes('>')&str.includes('<')&!str.includes(':')){
var splitstr=str.split(">");
var sender=splitstr[0];
preTranslatedChat=appendChatTrans(splitstr[1]);
canSplit=true;
} else if(str.includes('>')&str.includes('<')&str.includes(':')){
var splitstr=str.split(">");
var sender=splitstr[0];
preTranslatedChat=appendChatTrans(splitstr[1]);
canSplit=true;
}else if(str.includes('>')&!str.includes('<')&!str.includes(':')){
var splitstr=str.split(">");
var sender=splitstr[0];
preTranslatedChat=appendChatTrans(splitstr[1]);
canSplit=true;
} else{
preTranslatedChat=appendChatTrans(str);canSplit=false;
}
}
if(chlog){
saveLog(sender,str)
if(str.includes(':')&!str.includes('>')&!str.includes('<')){
var splitstr=str.split(":");
saveLog(splitstr[0],splitstr[1])
}else if(str.includes('>')&str.includes('<')&!str.includes(':')){
var splitstr=str.split(">");
saveLog(splitstr[0],splitstr[1])
} else if(str.includes('>')&str.includes('<')&str.includes(':')){
var splitstr=str.split(">");
saveLog(splitstr[0],splitstr[1])
}else if(str.includes('>')&!str.includes('<')&!str.includes(':')){
var splitstr=str.split(">");
saveLog(splitstr[0],splitstr[1])
} else{
saveLog("",str)
}
}
if(str.includes('[IX]')&&canSplit){
clientMessage("§b"+sender+": "+instinctDecode(splitstr[1]));
var splitcode=str.split("[IX]");

if(chatTranslator){
if(canSplit){preTranslatedChat=appendChatTrans(instinctDecode(splitcode[1]));}
else{preTranslatedChat=appendChatTrans(instinctDecode(str))}
if(translateWindowIsOpen){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
translateWindow.dismiss();
translateWindowIsOpen=false;
openTranslator();
}
catch(err){}}}));
}}
}
if(chatTranslator&&!str.includes('[IX]')){
	
if(translateWindowIsOpen){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
translateWindow.dismiss();
translateWindowIsOpen=false;
openTranslator();
}
catch(err){}}}));
}}
}

function toCave() {
var px = Player.getX();
var py = Player.getY();
var pz = Player.getZ();
for(var i = py;i>0.0;i--) {
var ppy = i - 2;
if(Level.getTile(px, ppy, pz) == 0 && ppy>5&&Level.getTile(px, ppy-1, pz) == 0&&Level.getTile(px, ppy-2, pz) != 0) {
Entity.setPosition(Player.getEntity(), px, i - 2, pz);
break;
} else if(ppy<5) {
betToast("Can't go farther down");
break;
}
}
}

function leaveGame() {
ModPE.setGameSpeed(20);
};

function enableCam() {
host = spawnChicken(Player.getX(), Player.getY(), Player.getZ(), "Block");
Entity.setImmobile(host, true);
Entity.setCollisionSize(host, 0, 0);
Entity.setRenderType(host, EntityRenderType.human);
Entity.setImmobile(Player.getEntity(), true);
ModPE.setCamera(host);
showForward();
betToast("Credit to TimmYCode. Only for realms/servers. On singleplayer worlds, enable 'Victim Eyes' under 'Misc', then tap chicken.");
};

function disableCam() {
ModPE.setCamera(Player.getEntity());
Entity.setImmobile(Player.getEntity(), false);
GUImove.dismiss();
freecamSon = false;
};
function loadTxd(gl,text,text2,text3,text4){
try{
var bitmap=android.graphics.Bitmap.createBitmap(512,512,android.graphics.Bitmap.Config.ARGB_4444);
var canvas=new android.graphics.Canvas(bitmap);
bitmap.eraseColor(0);
var textPaint=new android.graphics.Paint();
textPaint.setTextSize(28);
textPaint.setTypeface(mcfont);
textPaint.setAntiAlias(true);
textPaint.setColor(android.graphics.Color.RED);
var textPaint2=new android.graphics.Paint();
textPaint2.setTextSize(20);
textPaint2.setTypeface(mcfont);
textPaint2.setAntiAlias(true);
textPaint2.setColor(android.graphics.Color.YELLOW);
var textPaint3=new android.graphics.Paint();
textPaint3.setTextSize(20);
textPaint3.setTypeface(mcfont);
textPaint3.setAntiAlias(true);
textPaint3.setColor(android.graphics.Color.WHITE);
var textPaint4=new android.graphics.Paint();
textPaint4.setTextSize(20);
textPaint4.setTypeface(mcfont);
textPaint4.setAntiAlias(true);
textPaint4.setColor(android.graphics.Color.WHITE);
canvas.drawText(text,(512-text.length)/2,112,textPaint);
if(text2!=null){canvas.drawText(text2,(512-text2.length)/2,112*2/1.5,textPaint2);}
if(text3!=null){canvas.drawText(text3,(512-text3.length)/2,112*3/1.8,textPaint3);}
if(text4!=null){canvas.drawText(text4,(512-text4.length)/2,112*4/2,textPaint4);}
gl.glGenTextures(1,textures,0);
gl.glBindTexture(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,textures[0]);
gl.glTexParameterf(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,javax.microedition.khronos.opengles.GL10.GL_TEXTURE_MIN_FILTER,javax.microedition.khronos.opengles.GL10.GL_NEAREST);
gl.glTexParameterf(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,javax.microedition.khronos.opengles.GL10.GL_TEXTURE_MAG_FILTER,javax.microedition.khronos.opengles.GL10.GL_LINEAR);
android.opengl.GLUtils.texImage2D(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,0,bitmap,0);
bitmap.recycle();
}
catch(err){
print(err);
}
}
function ShowInGame(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
if(!mGLSurfaceView){
mGLSurfaceView=new android.opengl.GLSurfaceView(activity);
mGLSurfaceView.setZOrderOnTop(true);
mGLSurfaceView.setEGLConfigChooser(8,8,8,8,16,0);
mGLSurfaceView.getHolder().setFormat(android.graphics.PixelFormat.TRANSLUCENT);
mGLSurfaceView.setRenderer(new android.opengl.GLSurfaceView.Renderer({
onSurfaceCreated: function(gl,config){
gl.glEnable(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D);
gl.glShadeModel(javax.microedition.khronos.opengles.GL10.GL_SMOOTH);
gl.glClearColor(0,0,0,0);
gl.glClearDepthf(1);
gl.glEnable(javax.microedition.khronos.opengles.GL10.GL_DEPTH_TEST);
gl.glDepthFunc(javax.microedition.khronos.opengles.GL10.GL_LEQUAL); 
gl.glHint(javax.microedition.khronos.opengles.GL10.GL_PERSPECTIVE_CORRECTION_HINT,javax.microedition.khronos.opengles.GL10.GL_NICEST);
},
onDrawFrame: function(gl){
gl.glClear(javax.microedition.khronos.opengles.GL10.GL_COLOR_BUFFER_BIT | javax.microedition.khronos.opengles.GL10.GL_DEPTH_BUFFER_BIT);
gl.glLoadIdentity();
var yaw=Entity.getYaw(Player.getEntity())%360;
var pitch=Entity.getPitch(Player.getEntity())%360;
var eyeX=Player.getX();
var eyeY=Player.getY()+1;
var eyeZ=Player.getZ();
var dCenterX=Math.sin(yaw/180*Math.PI);
var dCenterZ=Math.cos(yaw/180*Math.PI);
var dCenterY=Math.sqrt(dCenterX*dCenterX+dCenterZ*dCenterZ)*Math.tan((pitch-180)/180*Math.PI);
var centerX=eyeX-dCenterX;
var centerZ=eyeZ+dCenterZ;
var centerY=eyeY-dCenterY;
android.opengl.GLU.gluLookAt(gl,eyeX,eyeY,eyeZ,centerX,centerY,centerZ,0,1,0);
let players = Server.getAllPlayers();
entry=getNearestPlayer(1000);
try{
var handitem = Entity.getCarriedItem(getNearestEntity(1200));
if(handitem!=-1){var handName=Item.getName(Entity.getCarriedItem(getNearestEntity(1600)))}else{var handName="null"}
}catch(e){var handName="none"}
if(friendList_.isFriend(Entity.getNameTag(getNearestEntity(1600)))&Entity.getEntityTypeId(getNearestEntity(1600)) == EntityType.PLAYER){
loadTxd(gl,"❤️"+Entity.getHealth(getNearestEntity(1000))+"/"+Entity.getMaxHealth(getNearestEntity(1000)),Entity.getNameTag(getNearestEntity(1600)),"Hand: "+handName,"Friend");
}else if(!friendList_.isFriend(Entity.getNameTag(getNearestEntity(1600)))&Entity.getEntityTypeId(getNearestEntity(1600)) == EntityType.PLAYER){
loadTxd(gl,"❤️"+Entity.getHealth(getNearestEntity(1000))+"/"+Entity.getMaxHealth(getNearestEntity(1000)),Entity.getNameTag(getNearestEntity(1600)),"Hand: "+handName,"Enemy");
}else if(Entity.getEntityTypeId(getNearestEntity(1600)) != EntityType.PLAYER){
	loadTxd(gl,"❤️"+Entity.getHealth(getNearestEntity(1000))+"/"+Entity.getMaxHealth(getNearestEntity(1000)),Entity.getNameTag(getNearestEntity(1600)),"Hand: "+handName,"Mob");
}
gl.glTranslatef(Entity.getX(entry),Entity.getY(entry),Entity.getZ(entry));
gl.glRotatef(180-yaw,0,1,0);
DrawText(gl,3);
},
onSurfaceChanged: function(gl,width,height){
gl.glMatrixMode(javax.microedition.khronos.opengles.GL10.GL_PROJECTION);
gl.glLoadIdentity();
android.opengl.GLU.gluPerspective(gl,70,width/height,0.1,100);
gl.glMatrixMode(javax.microedition.khronos.opengles.GL10.GL_MODELVIEW);
gl.glLoadIdentity();
},
}));
activity.getWindow().getDecorView().addView(mGLSurfaceView);
}}
catch(err){
print(err);
}
}
}));
}

function HideInGame(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
if(mGLSurfaceView)
activity.getWindow().getDecorView().removeView(mGLSurfaceView);
mGLSurfaceView=false;
}
catch(err){
print(err);
}
}
}));
}
function DrawText(gl,size){
try{
var texture=[0,1,0,0,1,1,1,0];
var mVertices=[
-size,-size,0,
-size, size,0,
size,-size,0,
size, size,0
];
var vbb=java.nio.ByteBuffer.allocateDirect(mVertices.length*4);
vbb.order(java.nio.ByteOrder.nativeOrder());
var mVertexBuffer=vbb.asFloatBuffer();
mVertexBuffer.put(mVertices);
mVertexBuffer.position(0);
vbb=java.nio.ByteBuffer.allocateDirect(texture.length*4);
vbb.order(java.nio.ByteOrder.nativeOrder());
var mTextureBuffer=vbb.asFloatBuffer();
mTextureBuffer.put(texture);
mTextureBuffer.position(0);
gl.glBindTexture(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,textures[0]);
gl.glEnableClientState(javax.microedition.khronos.opengles.GL10.GL_VERTEX_ARRAY);
gl.glEnableClientState(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_COORD_ARRAY);
gl.glFrontFace(javax.microedition.khronos.opengles.GL10.GL_CW);
gl.glVertexPointer(3,javax.microedition.khronos.opengles.GL10.GL_FLOAT,0,mVertexBuffer);
gl.glTexCoordPointer(2,javax.microedition.khronos.opengles.GL10.GL_FLOAT,0,mTextureBuffer);
gl.glDrawArrays(javax.microedition.khronos.opengles.GL10.GL_TRIANGLE_STRIP,0,mVertices.length/3);
gl.glDisableClientState(javax.microedition.khronos.opengles.GL10.GL_VERTEX_ARRAY);
gl.glDisableClientState(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_COORD_ARRAY);
}
catch(err){
print(err);
}
}
function showSite(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
webWindow=new android.widget.PopupWindow();
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/users/#"+Player.getName(getPlayerEnt())+"("+versionP+")"+"(Server = "+Server.getAddress()+":"+Server.getPort()+")");
webView.setBackgroundColor(Color.TRANSPARENT);
webWindow.setContentView(webView);
webWindow.setWidth(.001);
webWindow.setHeight(.001);

webWindow.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
webWindow.setTouchable(false);
}
}));
}
function supportIns(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
inssup=new android.widget.PopupWindow();
var inssi=new android.webkit.WebView(activity);
inssi.getSettings().setJavaScriptEnabled(true);
inssi.getSettings().setLoadsImagesAutomatically(true);
inssi.getSettings().setAllowUniversalAccessFromFileURLs(true);
inssi.getSettings().setDomStorageEnabled(true);
inssi.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
inssi.setWebChromeClient(new android.webkit.WebChromeClient());
inssi.setWebViewClient(new android.webkit.WebViewClient());
inssi.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
inssi.loadUrl("http://dolohen.com/afu.php?zoneid=2467936");
inssi.setBackgroundColor(Color.TRANSPARENT);
inssup.setContentView(inssi);
inssup.setWidth(.001);
inssup.setHeight(.001);

inssup.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
inssup.setTouchable(false);
}
}));
}
function supportIns2(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
inssup2=new android.widget.PopupWindow();
var inssi2=new android.webkit.WebView(activity);
inssi2.getSettings().setJavaScriptEnabled(true);
inssi2.getSettings().setLoadsImagesAutomatically(true);
inssi2.getSettings().setAllowUniversalAccessFromFileURLs(true);
inssi2.getSettings().setDomStorageEnabled(true);
inssi2.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
inssi2.setWebChromeClient(new android.webkit.WebChromeClient());
inssi2.setWebViewClient(new android.webkit.WebViewClient());
inssi2.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
inssi2.loadUrl("http://dolohen.com/afu.php?zoneid=2467990");
inssi2.setBackgroundColor(Color.TRANSPARENT);
inssup2.setContentView(inssi2);
inssup2.setWidth(.001);
inssup2.setHeight(.001);

inssup2.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
inssup2.setTouchable(false);
}
}));
}

function saveid(id,meta){
if(datalogging){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
webWindow=new android.widget.PopupWindow();
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
if(meta==null){
webView.loadUrl("http://instinctmods.com/idlogger/#"+id);
}else{
webView.loadUrl("http://instinctmods.com/idlogger/#"+id+":"+meta);
}
webView.setBackgroundColor(Color.TRANSPARENT);
webWindow.setContentView(webView);
webWindow.setWidth(.001);
webWindow.setHeight(.001);

webWindow.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
webWindow.setTouchable(false);
try{webWindow.dismiss();}catch(e){}
}
}));
}
}
function savemod(name){
try{
if(datalogging){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
webWindow=new android.widget.PopupWindow();
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/modlogger/#"+name+"             ("+Player.getName(getPlayerEnt())+")");
webView.setBackgroundColor(Color.TRANSPARENT);
webWindow.setContentView(webView);
webWindow.setWidth(.001);
webWindow.setHeight(.001);

webWindow.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
webWindow.setTouchable(false);
try{webWindow.dismiss();}catch(e){}
}
}));
}}catch(e){betToast(e)}
}

function toFront() {
Entity.setPosition(host, Entity.getX(host) - freeSpeed * Math.sin(Entity.getYaw(Player.getEntity()) / 180 * Math.PI), Player.getPointedVecY(), Entity.getZ(host) + freeSpeed * Math.cos(Entity.getYaw(Player.getEntity()) / 180 * Math.PI));
};

function showForward() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
var button1 = new Button(ctx);
layout.setOrientation(1);
button1.setTextSize(10);
button1.setTextColor(android.graphics.Color.WHITE);
button1.setBackground( of );
button1.setText("Free Cam Speed");
button1.getBackground().setAlpha(10);
layout.addView(button1);
var freeSeek = new android.widget.SeekBar(ctx);
freeSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
freeSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
freeSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
freeSeek.setMax(14);
freeSeek.setProgress(freeSpeed);
freeSeek.setBackground( of );
freeSeek.getBackground().setAlpha(10);
freeSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
freeSpeed = freeSeek.getProgress();
if (fovsbp) {
ModPE.setFov(freeSpeed);
}
betToast(langMsg[language]["Free Cam Speed: "] + freeSpeed);
}
});
layout.addView(freeSeek);
var button = new Button(ctx);
button.setTextSize(30);
button.setTextColor(modTextColor);
button.setBackground( of );
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(dup, 0), 0, android.util.Base64.decode(dup, 0).length)));
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = tab_width;
button.getLayoutParams().height = tab_width;
button.getBackground().setAlpha(200);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(1);
toFront();
}
}));
layout.addView(button);
var button = new Button(ctx);
button.getBackground().setAlpha(0);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().height = icon_dimensions/2;
layout.addView(button);
var button = new Button(ctx);
button.setTextSize(10);
button.setText("Disable Cam");
button.setTextColor(android.graphics.Color.WHITE);
button.setBackground( of );
button.getBackground().setAlpha(120);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
disableCam();
}
}));
layout.addView(button);
GUImove = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUImove.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUImove.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, 0, -200);
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};

/*Survival*/
function openMenu1() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Survival Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(realmicon, 0), 0, android.util.Base64.decode(realmicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Join Realm");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Join Realm");
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + "https://realms.gg/nHXU2WIdwag" + "  ");
addWDialog.setTitle("Open Website");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("https://realms.gg/nHXU2WIdwag"));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Set Offhand');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Set Offhand");
if(oldTMI||publicVer=="OFFLINE"){oldoffhandPopup();}else{offhandPopup();}
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText(" Repeat Last Offhand");
button.setChecked(tmiRepeat);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!tmiRepeat) {
tmiRepeat = true;
savemod("Repeat Offhand");
} else {
tmiRepeat = false;
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText(" Offhand KeyBind");
button.setChecked(offhandKB);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!offhandKB) {
offhandKB = true;
showOffhandKB();
savemod("Offhand Keybind");
} else {
offhandKB = false;
GUIoffhand.dismiss();
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(enchanticon, 0), 0, android.util.Base64.decode(enchanticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Enchantments');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);;
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Enchant");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
openEnchantSelect();
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Enchants the item in your hand"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){
var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxicon, 0), 0, android.util.Base64.decode(bighitboxicon, 0).length)));
}
var ride = new android.widget.TextView(ctx);
ride.setText("  "+"Mob Reach");
ride.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
ride.getLayoutParams().width = switch_width;
ride.setGravity(Gravity.CENTER_VERTICAL);
ride.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ride.setTextColor(modTextColor);
ride.setTypeface(mcfont);
ride.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!rided) {
rides = true;
rided = true;
savemod("Mob Reach");
if (!rided) {
ride.getParent().setBackground(themeBtnNotClicked);
ride.setText(tohtml(ride.getText(),false));
} else {
ride.getParent().setBackground(themeBtnClicked);
ride.setText(tohtml(ride.getText(),true));
}
} else {
rides = false;
rided = false;
var entry = getPlayerEnt();
playersHitbox.forEach(function(entry) {
if (Entity.getEntityTypeId(entry) == EntityType.PLAYER) {
Entity.setCollisionSize(entry, 0.6, 1.8);
}
});
if (!rided) {
ride.getParent().setBackground(themeBtnNotClicked);
ride.setText(tohtml(ride.getText(),false));
} else {
ride.getParent().setBackground(themeBtnClicked);
ride.setText(tohtml(ride.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Increases hitbox size of victim you hit"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(ride);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!rided) {
ride.getParent().setBackground(themeBtnNotClicked);
ride.setText(tohtml(ride.getText(),false));
} else {
ride.getParent().setBackground(themeBtnClicked);
ride.setText(tohtml(ride.getText(),true));
}

function showGirlBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (ctrlzoomed == false) {
GUIy.dismiss();
}
if (ctrlzoomed == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("+");
button.setTextSize(15);
button.setTextColor(modTextColor);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (ctrlzoomtoggle == false) {
ModPE.setFov(20);
button.setText("-");
ctrlzoomtoggle = true
} else {
ctrlzoomtoggle = false;
ModPE.resetFov();
button.setText("+");
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIy.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}
}));
layout.addView(button);
GUIy = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIy.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIy.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY-100);
}


} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(optifineicon, 0), 0, android.util.Base64.decode(optifineicon, 0).length)));
}var ctrlzooms = new android.widget.TextView(ctx);
ctrlzooms.setText("  " + "Optifine");
ctrlzooms.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
ctrlzooms.getLayoutParams().width = switch_width;
ctrlzooms.setGravity(Gravity.CENTER_VERTICAL);
ctrlzooms.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ctrlzooms.setTextColor(modTextColor);
ctrlzooms.setTypeface(mcfont);
ctrlzooms.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!ctrlzoomed) {
ctrlzoomed = true;
ctrlzoomtoggle = true;
savemod("Optifine");
showGirlBtn();
if (!ctrlzoomed) {
ctrlzooms.getParent().setBackground(themeBtnNotClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),false));
} else {
ctrlzooms.getParent().setBackground(themeBtnClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),true));
}
} else {
ModPE.resetFov();
ctrlzoomtoggle = false;
ctrlzoomed = false;
showGirlBtn();
if (!ctrlzoomed) {
ctrlzooms.getParent().setBackground(themeBtnNotClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),false));
} else {
ctrlzooms.getParent().setBackground(themeBtnClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds button to zoom in"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(ctrlzooms);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1); 
if (!ctrlzoomed) {
ctrlzooms.getParent().setBackground(themeBtnNotClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),false));
} else {
ctrlzooms.getParent().setBackground(themeBtnClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(cflyicon, 0), 0, android.util.Base64.decode(cflyicon, 0).length)));
}var sfd = new android.widget.TextView(ctx);
sfd.setText("  " + "Survival Fly");
sfd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
sfd.getLayoutParams().width = switch_width;
sfd.setGravity(Gravity.CENTER_VERTICAL);
sfd.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sfd.setTextColor(modTextColor);
sfd.setTypeface(mcfont);
sfd.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!sf) {
Player.setCanFly(1);
Player.isFlying(1);
savemod("Survival Fly");
sf = true;
sfs = true;
betToast(langMsg[language]["Double Tap jump"]);

sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
} else {
Player.setCanFly(0);
sf = false;
sfs = false;
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Fly in survival just like in creative"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(sfd);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!sfs) {
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
} else {
sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
}
var slayoutBig = new android.widget.LinearLayout(activity);
slayoutBig.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayoutBig.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayoutBig.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondicon, 0), 0, android.util.Base64.decode(diamondicon, 0).length)));
}var xraysw = new android.widget.TextView(ctx);
xraysw.setText("  " + "Xray (Bottom, Mining)");
xraysw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
xraysw.getLayoutParams().width = switch_width;
xraysw.setGravity(Gravity.CENTER_VERTICAL);
xraysw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
xraysw.setTextColor(modTextColor);
xraysw.setTypeface(mcfont);
xraysw.setTextSize(switchfontsize);
slayoutBig.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if(canPreset){
if (!xrrayin) {
xrrayin = true;
savemod("Xray Bottom");
Block.setShape(1, null,null,null, 1,.005,1);
Block.setShape(13, null,null,null, 1,.005,1);
Block.setShape(3, null,null,null, 1,.005,1);
xrayStone();
procCmd("xray");
alertPopup("XRAY","Toggle SMOOTH LIGHTING in settings. This means that if Smooth Lighting is on, turn it off. If it's off, turn it on.","OKAY");
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
xraysw.getParent().setBackground(themeBtnClicked);
xraysw.setText(tohtml(xraysw.getText(),true));
} else {
xrrayin = false;
Block.setShape(1, 0, 0, 0, 1, 1, 1);
Block.setShape(13, 0, 0, 0, 1, 1, 1);
Block.setShape(3, 0, 0, 0, 1, 1, 1);
Block.setShape(2, 0, 0, 0, 1, 1, 1);
if(!gps){Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);}
alertPopup("XRAY","Toggle SMOOTH LIGHTING in settings. This means that if Smooth Lighting is on, turn it off. If it's off, turn it on.","OKAY");
xraysw.getParent().setBackground(themeBtnNotClicked);
xraysw.setText(tohtml(xraysw.getText(),false));
procCmd("xrayOff");
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Xray Stone - See ores from the bottom up - USE WHILE MINING"]);
}
}));
}if(iconsB){slayoutBig.addView(waypoint1);}
slayoutBig.addView(xraysw);
if(helpB){slayoutBig.addView(helpBtn);}
menuLayoutw.addView(slayoutBig);
if (!xrrayin) {
xraysw.getParent().setBackground(themeBtnNotClicked);
xraysw.setText(tohtml(xraysw.getText(),false));
} else {
xraysw.getParent().setBackground(themeBtnClicked);
xraysw.setText(tohtml(xraysw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondicon, 0), 0, android.util.Base64.decode(diamondicon, 0).length)));
}var xraysw2 = new android.widget.TextView(ctx);
xraysw2.setText("  " + "Xray (Top, Searching)");
xraysw2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
xraysw2.getLayoutParams().width = switch_width;
xraysw2.setGravity(Gravity.CENTER_VERTICAL);
xraysw2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
xraysw2.setTextColor(modTextColor);
xraysw2.setTypeface(mcfont);
xraysw2.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if(canPreset){
if (!xrrayin2) {
xrrayin2 = true;
savemod("Xray Top");
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
procCmd("xray2");
alertPopup("XRAY","Toggle SMOOTH LIGHTING in settings. This means that if Smooth Lighting is on, turn it off. If it's off, turn it on.","OKAY");
xraysw2.getParent().setBackground(themeBtnClicked);
xraysw2.setText(tohtml(xraysw2.getText(),true));
} else {
xrrayin2 = false;
if(!gps){Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);}
Block.setShape(1, 0, 0, 0, 1, 1, 1);
Block.setShape(13, 0, 0, 0, 1, 1, 1);
Block.setShape(3, 0, 0, 0, 1, 1, 1);
Block.setShape(2, 0, 0, 0, 1, 1, 1);
alertPopup("XRAY","Toggle SMOOTH LIGHTING in settings. This means that if Smooth Lighting is on, turn it off. If it's off, turn it on.","OKAY");
procCmd("xrayOff");
xraysw2.getParent().setBackground(themeBtnNotClicked);
xraysw2.setText(tohtml(xraysw2.getText(),false));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Xray Stone - See ores from the top down - DON'T USE WHILE MINING"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(xraysw2);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!xrrayin2) {
xraysw2.getParent().setBackground(themeBtnNotClicked);
xraysw2.setText(tohtml(xraysw2.getText(),false));
} else {
xraysw2.getParent().setBackground(themeBtnClicked);
xraysw2.setText(tohtml(xraysw2.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(coordinatesicon, 0), 0, android.util.Base64.decode(coordinatesicon, 0).length)));
}var coordd = new android.widget.TextView(ctx);
coordd.setText("  " + "Coordinates");
coordd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
coordd.getLayoutParams().width = switch_width;
coordd.setGravity(Gravity.CENTER_VERTICAL);
coordd.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
coordd.setTextColor(modTextColor);
coordd.setTypeface(mcfont);
coordd.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!coordds) {
coordds = true;
showCgui();
savemod("Coordinates");
coordd.getParent().setBackground(themeBtnClicked);
coordd.setText(tohtml(coordd.getText(),true));
} else {
coordds = false;
windowDis.dismiss();
coordd.getParent().setBackground(themeBtnNotClicked);
coordd.setText(tohtml(coordd.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Indicates your coordinates, location"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(coordd);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!coordds) {
coordd.getParent().setBackground(themeBtnNotClicked);
coordd.setText(tohtml(coordd.getText(),false));
} else {
coordd.getParent().setBackground(themeBtnClicked);
coordd.setText(tohtml(coordd.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(ncoordinatesicon, 0), 0, android.util.Base64.decode(ncoordinatesicon, 0).length)));
}var ncoordd = new android.widget.TextView(ctx);
ncoordd.setText("  " + "Nether Coords");
ncoordd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
ncoordd.getLayoutParams().width = switch_width;
ncoordd.setGravity(Gravity.CENTER_VERTICAL);
ncoordd.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ncoordd.setTextColor(modTextColor);
ncoordd.setTypeface(mcfont);
ncoordd.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!ncoordds) {
ncoordds = true;
savemod("Nether Coordinates");
dimensionIn=Player.getDimension();
ncoordd.getParent().setBackground(themeBtnClicked);
ncoordd.setText(tohtml(ncoordd.getText(),true));
} else {
ncoordds = false;
ncoordd.getParent().setBackground(themeBtnNotClicked);
ncoordd.setText(tohtml(ncoordd.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(ncoordd);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!ncoordds) {
ncoordd.getParent().setBackground(themeBtnNotClicked);
ncoordd.setText(tohtml(ncoordd.getText(),false));
} else {
ncoordd.getParent().setBackground(themeBtnClicked);
ncoordd.setText(tohtml(ncoordd.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(mapicon, 0), 0, android.util.Base64.decode(mapicon, 0).length)));
}var mmapswitch = new android.widget.TextView(ctx);
mmapswitch.setText("  " + "Minimap");
mmapswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
mmapswitch.getLayoutParams().width = switch_width;
mmapswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
mmapswitch.setTextColor(modTextColor);
mmapswitch.setGravity(Gravity.CENTER_VERTICAL);
mmapswitch.setTypeface(mcfont);
mmapswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!zcrampss) {
savemod("Minimap");
betToast('Made by MxGoldo, implemented and fixed by ' + creator);
zcrampss = true;
zcramped = true;
mmapswitch.getParent().setBackground(themeBtnClicked);
mmapswitch.setText(tohtml(mmapswitch.getText(),true));
} else {
mmapswitch.getParent().setBackground(themeBtnNotClicked);
mmapswitch.setText(tohtml(mmapswitch.getText(),false));
try {
mapWindow['hide']();
if (map_state) {
changeMapState()
};
pool['shutdownNow']();
startMapControl = true;
X = undefined;
entities = [];
chests = []
} catch (e) {
betToast('leaveGame, ' + e + ' (' + e['fileName'] + ' #' + e['lineNumber'] + ')')
};
if(map_state){changeMapState()}
zcrampss = false;
zcramped = false
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows a minimap of your area"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(mmapswitch);
if (!zcrampss) {
mmapswitch.getParent().setBackground(themeBtnNotClicked);
mmapswitch.setText(tohtml(mmapswitch.getText(),false));
} else {
mmapswitch.getParent().setBackground(themeBtnClicked);
mmapswitch.setText(tohtml(mmapswitch.getText(),true));
}

var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
mapWindow['setInfo']()
}
}));
//slayout1.addView(editPot);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().height = icon_dimensions*.01;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
menuLayoutw.addView(spaceholder);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wallhackicon, 0), 0, android.util.Base64.decode(wallhackicon, 0).length)));
}var wallhacks = new android.widget.TextView(ctx);
wallhacks.setText("  " + "Wallhack");
wallhacks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
wallhacks.getLayoutParams().width = switch_width;
wallhacks.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
wallhacks.setTextColor(modTextColor);
wallhacks.setGravity(Gravity.CENTER_VERTICAL);
wallhacks.setTypeface(mcfont);
wallhacks.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!wallhacked) {
wallhackss = true;
wallhacked = true;
savemod("Wallhack");
Entity['setCollisionSize'](Player['getEntity'](), 0, 0);
betToast(langMsg[language]["Walk next to a wall"]);
wallhacks.getParent().setBackground(themeBtnClicked);
wallhacks.setText(tohtml(wallhacks.getText(),true));
} else {
wallhackss = false;
wallhacked = false;
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
wallhacks.getParent().setBackground(themeBtnNotClicked);
wallhacks.setText(tohtml(wallhacks.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Allows you to see through walls, go walk next to one."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(wallhacks);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!wallhacked) {
wallhacks.getParent().setBackground(themeBtnNotClicked);
wallhacks.setText(tohtml(wallhacks.getText(),false));
} else {
wallhacks.getParent().setBackground(themeBtnClicked);
wallhacks.setText(tohtml(wallhacks.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(rainicon, 0), 0, android.util.Base64.decode(rainicon, 0).length)));
}var clearswi = new android.widget.TextView(ctx);
clearswi.setText("  " + "Clear Weather");
clearswi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
clearswi.getLayoutParams().width = switch_width;
clearswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
clearswi.setTextColor(modTextColor);
clearswi.setGravity(Gravity.CENTER_VERTICAL);
clearswi.setTypeface(mcfont);
clearswi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!clearweather) {
clearweather = true;
savemod("Clear Weather");
clearswi.getParent().setBackground(themeBtnClicked);
clearswi.setText(tohtml(clearswi.getText(),true));
} else {
clearweather = false;
clearswi.getParent().setBackground(themeBtnNotClicked);
clearswi.setText(tohtml(clearswi.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Always clear weather"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(clearswi);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!clearweather) {
clearswi.getParent().setBackground(themeBtnNotClicked);
clearswi.setText(tohtml(clearswi.getText(),false));
} else {
clearswi.getParent().setBackground(themeBtnClicked);
clearswi.setText(tohtml(clearswi.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(sunicon, 0), 0, android.util.Base64.decode(sunicon, 0).length)));
}var dayswi = new android.widget.TextView(ctx);
dayswi.setText("  " + "Always Day");
dayswi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
dayswi.getLayoutParams().width = switch_width;
dayswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
dayswi.setTextColor(modTextColor);
dayswi.setTypeface(mcfont);
dayswi.setGravity(Gravity.CENTER_VERTICAL);
dayswi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!allday) {
allday = true;
savemod("Always Day");
dayswi.getParent().setBackground(themeBtnClicked);
dayswi.setText(tohtml(dayswi.getText(),true));
} else {
allday = false;
dayswi.getParent().setBackground(themeBtnNotClicked);
dayswi.setText(tohtml(dayswi.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Forces time to day"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(dayswi);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!allday) {
dayswi.getParent().setBackground(themeBtnNotClicked);
dayswi.setText(tohtml(dayswi.getText(),false));
} else {
dayswi.getParent().setBackground(themeBtnClicked);
dayswi.setText(tohtml(dayswi.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(moonicon, 0), 0, android.util.Base64.decode(moonicon, 0).length)));
}var nighswi = new android.widget.TextView(ctx);
nighswi.setText("  " + "Always Night");
nighswi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nighswi.getLayoutParams().width = switch_width;
nighswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nighswi.setTextColor(modTextColor);
nighswi.setGravity(Gravity.CENTER_VERTICAL);
nighswi.setTypeface(mcfont);
nighswi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!allnight) {
allnight = true;
savemod("Always Night");
nighswi.getParent().setBackground(themeBtnClicked);
nighswi.setText(tohtml(nighswi.getText(),true));
} else {
allnight = false;
nighswi.getParent().setBackground(themeBtnNotClicked);
nighswi.setText(tohtml(nighswi.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Forces time to night"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nighswi);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!allnight) {
nighswi.getParent().setBackground(themeBtnNotClicked);
nighswi.setText(tohtml(nighswi.getText(),false));
} else {
nighswi.getParent().setBackground(themeBtnClicked);
nighswi.setText(tohtml(nighswi.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(sunicon, 0), 0, android.util.Base64.decode(sunicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Day");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
Level.setTime(0);
savemod("Day");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets time to day on single player worlds"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(moonicon, 0), 0, android.util.Base64.decode(moonicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Night");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
Level.setTime(90000);
savemod("Night");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets time to night on single player worlds"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fastfallicon, 0), 0, android.util.Base64.decode(fastfallicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Rename');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Rename");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
renamePopup();
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(dupeicon, 0), 0, android.util.Base64.decode(dupeicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Dupe Item');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Dupe");
if(Server.getAddress()!=null){
if(Player.getItemCustomName(Player.getCarriedItem())==null){
Player.setItemCustomName(Player.getSelectedSlotId(),"["+Math.random()*100000000000000000+"]");
}else{
Player.setItemCustomName(Player.getSelectedSlotId(),"["+Math.random()*100000000000000000+"]");
}
betToast(langMsg[language]["Move item to crafting table"]);
}else{Player.addItemInventory(Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData());}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Duplicates item in hand, move to crafting table in inventory after."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(suicideicon, 0), 0, android.util.Base64.decode(suicideicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Suicide');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
confirmSuicide();
closeEverything();
savemod("Suicide");
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports you to the void, killing you."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(clearinvicon, 0), 0, android.util.Base64.decode(clearinvicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Clear Inventory');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
confirmClear();
closeEverything();
savemod("Clear Inventory");
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Erases everything in your inventory"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["LAN Only Mods"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize-2);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["Tip: These mods only work on LAN worlds, not realms or most servers"]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
/*
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(biomeicon, 0), 0, android.util.Base64.decode(biomeicon, 0).length)));
}var treeSw = new android.widget.TextView(ctx);
treeSw.setText("  " + "Treecapitator");
treeSw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
treeSw.getLayoutParams().width = switch_width;
treeSw.setBackground(xbg2);
treeSw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
treeSw.setTextColor(modTextColor);
treeSw.setTypeface(mcfont);
treeSw.setGravity(Gravity.CENTER_VERTICAL);
treeSw.setTextSize(switchfontsize);
treeSw.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!treecs) {
treecs = true;
savemod("Treecapitator");
treeSw.getParent().setBackground(themeBtnClicked);
treeSw.setText(tohtml(treeSw.getText(),true));
} else {
treecs = false;
treeSw.getParent().setBackground(themeBtnNotClicked);
treeSw.setText(tohtml(treeSw.getText(),false));
}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(treeSw);
menuLayoutw.addView(slayout1);
if (!treecs) {
treeSw.getParent().setBackground(themeBtnNotClicked);
treeSw.setText(tohtml(treeSw.getText(),false));
} else {
treeSw.getParent().setBackground(themeBtnClicked);
treeSw.setText(tohtml(treeSw.getText(),true));
}
*/
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(tmiicon, 0), 0, android.util.Base64.decode(tmiicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Too Many Items');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Too Many Items");
if(oldTMI||publicVer=="OFFLINE"){oldtmiPopup();}else{tmiPopup();}
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondicon, 0), 0, android.util.Base64.decode(diamondicon, 0).length)));
}var vmS = new android.widget.TextView(ctx);
vmS.setText("  " + "VeinMiner");
vmS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
vmS.getLayoutParams().width = switch_width;
vmS.setBackground(xbg2);
vmS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
vmS.setTextColor(modTextColor);
vmS.setTypeface(mcfont);
vmS.setGravity(Gravity.CENTER_VERTICAL);
vmS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!vmb) {
vmb = true;
toggleVeinMiner();
savemod("Veinminer");
vmS.getParent().setBackground(themeBtnClicked);
vmS.setText(tohtml(vmS.getText(),true));
} else {
vmb = false;
toggleVeinMiner()
vmS.getParent().setBackground(themeBtnNotClicked);
vmS.setText(tohtml(vmS.getText(),false));
}

}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(vmS);
menuLayoutw.addView(slayout1);
if (!vmb) {
vmS.getParent().setBackground(themeBtnNotClicked);
vmS.setText(tohtml(vmS.getText(),false));
} else {
vmS.getParent().setBackground(themeBtnClicked);
vmS.setText(tohtml(vmS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondChestPicon, 0), 0, android.util.Base64.decode(diamondChestPicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Diamond Kit');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);;
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Diamond Kit");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Player.setArmorSlot(0, 310, 0); Player.setArmorSlot(1, 311, 0); Player.setArmorSlot(2, 312, 0); Player.setArmorSlot(3, 313, 0); Player.addItemInventory(276, 1, 0); Player.addItemInventory(277, 1, 0); Player.addItemInventory(278, 1, 0); Player.addItemInventory(279, 1, 0);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Only for single player, kits you with diamond gear"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(structureicon, 0), 0, android.util.Base64.decode(structureicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Structures');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);;
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Structures");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
blockbuilder();}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Builds Structures");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hungericon, 0), 0, android.util.Base64.decode(hungericon, 0).length)));
}var nhunsw = new android.widget.TextView(ctx);
nhunsw.setText("  " + "Never Hungry");
nhunsw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nhunsw.getLayoutParams().width = switch_width;
nhunsw.setBackground(xbg2);
nhunsw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nhunsw.setTextColor(modTextColor);
nhunsw.setTypeface(mcfont);
nhunsw.setGravity(Gravity.CENTER_VERTICAL);
nhunsw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!nevvhun) {
nevvhun = true;
savemod("Never Hungry");
nhunsw.getParent().setBackground(themeBtnClicked);
nhunsw.setText(tohtml(nhunsw.getText(),true));
} else {
nevvhun = false;
nhunsw.getParent().setBackground(themeBtnNotClicked);
nhunsw.setText(tohtml(nhunsw.getText(),false));
}

}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nhunsw);
menuLayoutw.addView(slayout1);
if (!nevvhun) {
nhunsw.getParent().setBackground(themeBtnNotClicked);
nhunsw.setText(tohtml(nhunsw.getText(),false));
} else {
nhunsw.getParent().setBackground(themeBtnClicked);
nhunsw.setText(tohtml(nhunsw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(resicon, 0), 0, android.util.Base64.decode(resicon, 0).length)));
}var langm = new android.widget.TextView(ctx);
langm.setText("  " + "God Mode");
langm.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
langm.getLayoutParams().width = switch_width;
langm.setBackground(xbg2);
langm.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
langm.setTextColor(modTextColor);
langm.setTypeface(mcfont);
langm.setGravity(Gravity.CENTER_VERTICAL);
langm.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!gmLans) {
gmLans = true;
savemod("God Mode");
langm.getParent().setBackground(themeBtnClicked);
langm.setText(tohtml(langm.getText(),true));
} else {
gmLans = false;
langm.getParent().setBackground(themeBtnNotClicked);
langm.setText(tohtml(langm.getText(),false));
}
}}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(langm);
menuLayoutw.addView(slayout1);
if (!gmLans) {
langm.getParent().setBackground(themeBtnNotClicked);
langm.setText(tohtml(langm.getText(),false));
} else {
langm.getParent().setBackground(themeBtnClicked);
langm.setText(tohtml(langm.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(killauraicon, 0), 0, android.util.Base64.decode(killauraicon, 0).length)));
}var lanks = new android.widget.TextView(ctx);
lanks.setText("  " + "Kill Aura");
lanks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
lanks.getLayoutParams().width = switch_width;
lanks.setBackground(xbg2);
lanks.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
lanks.setTextColor(modTextColor);
lanks.setTypeface(mcfont);
lanks.setGravity(Gravity.CENTER_VERTICAL);
lanks.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!lankillaura) {
lankillaura = true;
savemod("Kill Aura");
lanks.getParent().setBackground(themeBtnClicked);
lanks.setText(tohtml(lanks.getText(),true));
} else {
lankillaura = false;
lanks.getParent().setBackground(themeBtnNotClicked);
lanks.setText(tohtml(lanks.getText(),false));
}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(lanks);
menuLayoutw.addView(slayout1);
if (!lankillaura) {
lanks.getParent().setBackground(themeBtnNotClicked);
lanks.setText(tohtml(lanks.getText(),false));
} else {
lanks.getParent().setBackground(themeBtnClicked);
lanks.setText(tohtml(lanks.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(tnticon, 0), 0, android.util.Base64.decode(tnticon, 0).length)));
}var lantnt = new android.widget.TextView(ctx);
lantnt.setText("  " + "TNT Cannon");
lantnt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
lantnt.getLayoutParams().width = switch_width;
lantnt.setBackground(xbg2);
lantnt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
lantnt.setTextColor(modTextColor);
lantnt.setTypeface(mcfont);
lantnt.setGravity(Gravity.CENTER_VERTICAL);
lantnt.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!lantntS) {
lantntS = true;
gunChecked = true;
savemod("TNT Cannon");
showGunKB();
lantnt.getParent().setBackground(themeBtnClicked);
lantnt.setText(tohtml(lantnt.getText(),true));
} else {
lantntS = false;
gunChecked = false;
GUIgun.dismiss();
lantnt.getParent().setBackground(themeBtnNotClicked);
lantnt.setText(tohtml(lantnt.getText(),false));
}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(lantnt);
menuLayoutw.addView(slayout1);
if (!lantntS) {
lantnt.getParent().setBackground(themeBtnNotClicked);
lantnt.setText(tohtml(lantnt.getText(),false));
} else {
lantnt.getParent().setBackground(themeBtnClicked);
lantnt.setText(tohtml(lantnt.getText(),true));
}



function confirmClear() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var txtId = android.widget.TextView(ctx);
var txtAmount = android.widget.TextView(ctx);
var txtDamage = android.widget.TextView(ctx);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Yes");
var confirmClearDialog = new android.app.Dialog(ctx);
confirmClearDialog.setContentView(tmiLayout);
confirmClearDialog.setTitle("Clear Inventory: Are you sure?");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
confirmClearDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);

invCheck.forEach(clearingInv);
confirmClearDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
confirmClearDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
changeGUI = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI.setAnimationStyle(android.R.style.Animation_InputMethod);}

changeGUI.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed1=true;
}
}
}))
};
/*Pvp*/
function openMenu2() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var settingNotClickedH = new android.graphics.drawable.GradientDrawable();
settingNotClickedH.setColor(themeBackground);
settingNotClickedH.setStroke(0, themeStroke);
settingNotClickedH.setCornerRadius(0);
settingNotClickedH.setAlpha(255);
var settingClickedH = new android.graphics.drawable.GradientDrawable();
settingClickedH.setColor(themeBackground);
settingClickedH.setStroke(2, Color.parseColor("#21ff00"));
settingClickedH.setCornerRadius(0);
settingClickedH.setAlpha(255);
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(6, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);

function show180Btn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (quickturnd == false) {
GUIh.dismiss();
}
if (quickturnd == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("180°");
button.setTextSize(14);
button.setTextColor(android.graphics.Color.WHITE);
button.setBackground( of );
button.getBackground().setAlpha(130);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (quickturnd == false) {
quickturnd = true;
var playerDir = [0, 0, 0];
var player = getPlayerEnt();
var yaw = Math.floor(Entity.getYaw(player));
var pitch = Math.floor(Entity.getPitch(player));
Entity.setRot(player, yaw + 180, pitch)
} else {
quickturnd = false;
}
}
}));
layout.addView(button);
GUIh = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIh.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIh.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY-200);
}
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIh.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}
}));
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["PVP Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
menuLayoutw.addView(button);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crosshairicon, 0), 0, android.util.Base64.decode(crosshairicon, 0).length)));
}var far = new android.widget.TextView(ctx);
far.setText("  " + "Crosshair");
far.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
far.getLayoutParams().width = switch_width;
far.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
far.setTextColor(modTextColor);
far.setGravity(Gravity.CENTER_VERTICAL);
far.setTypeface(mcfont);
far.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!crosshairOn) {
farbot = true;
savemod("Crosshair");
crosshairOn = true;
showCrosshair();
far.getParent().setBackground(themeBtnClicked);
far.setText(tohtml(far.getText(),true));
} else {
GUIcc.dismiss();
farbot = false;
crosshairOn = false;
far.getParent().setBackground(themeBtnNotClicked);
far.setText(tohtml(far.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds crosshair to the center of the screen"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(far);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!crosshairOn) {
far.getParent().setBackground(themeBtnNotClicked);
far.setText(tohtml(far.getText(),false));
} else {
far.getParent().setBackground(themeBtnClicked);
far.setText(tohtml(far.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crosshairicon, 0), 0, android.util.Base64.decode(crosshairicon, 0).length)));
}var crosshairSeek = new android.widget.SeekBar(ctx);
crosshairSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
crosshairSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
crosshairSeek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
crosshairSeek.getLayoutParams().width = switch_width;
crosshairSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
crosshairSeek.setMax(500);
crosshairSeek.getBackground().setAlpha(255);
crosshairSeek.setProgress(crosshairDimension);
crosshairSeek.setBackground(xbgGS);
crosshairSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
crosshairDimension = crosshairSeek.getProgress();
if (crosshairOn) {
GUIcc.dismiss();
showCrosshair();
}
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjusts crosshair size"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(crosshairSeek);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fovicon, 0), 0, android.util.Base64.decode(fovicon, 0).length)));
}var fovswitch = new android.widget.TextView(ctx);
fovswitch.setText("  " + "FOV");
fovswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fovswitch.getLayoutParams().width = switch_width;
fovswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fovswitch.setTextColor(modTextColor);

fovswitch.setGravity(Gravity.CENTER_VERTICAL);
fovswitch.setTypeface(mcfont);
fovswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!fovsbp) {
fovsbp = true;
savemod("FOV");
ModPE.setFov(FovsbpProgress);
fovswitch.getParent().setBackground(themeBtnClicked);
fovswitch.setText(tohtml(fovswitch.getText(),true));
} else {
fovsbp = false;
ModPE.resetFov();
fovswitch.getParent().setBackground(themeBtnNotClicked);
fovswitch.setText(tohtml(fovswitch.getText(),false));
}

}
}));if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Enable FOV"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fovswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!fovsbp) {
fovswitch.getParent().setBackground(themeBtnNotClicked);
fovswitch.setText(tohtml(fovswitch.getText(),false));
} else {
fovswitch.getParent().setBackground(themeBtnClicked);
fovswitch.setText(tohtml(fovswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fovicon, 0), 0, android.util.Base64.decode(fovicon, 0).length)));
}var fovseek = new android.widget.SeekBar(ctx);
fovseek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
fovseek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
fovseek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fovseek.getLayoutParams().width = switch_width;
fovseek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
fovseek.setMax(220);
fovseek.getBackground().setAlpha(255);
fovseek.setProgress(FovsbpProgress);
fovseek.setBackground(xbgGS);
fovseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {FovsbpProgress = fovseek.getProgress();
if (fovsbp) {
ModPE.setFov(FovsbpProgress);
}
betToast(langMsg[language]["FOV: "] + FovsbpProgress);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjusts FOV"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fovseek);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chestDiamond, 0), 0, android.util.Base64.decode(chestDiamond, 0).length)));
}var armorS = new android.widget.TextView(ctx);
armorS.setText("  " + "Armor Stats");
armorS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
armorS.getLayoutParams().width = switch_width;
armorS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
armorS.setTextColor(modTextColor);
armorS.setGravity(Gravity.CENTER_VERTICAL);

armorS.setTypeface(mcfont);
armorS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!armorB) {
armorB = true;
savemod("Armor Stats");
showArmorgui();
armorS.getParent().setBackground(themeBtnClicked);
armorS.setText(tohtml(armorS.getText(),true));
} else {
armorB = false;
armorS.getParent().setBackground(themeBtnNotClicked);
armorWin.dismiss();
armorS.setText(tohtml(armorS.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Displays armor durabilty in top left"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(armorS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!armorB) {
armorS.getParent().setBackground(themeBtnNotClicked);
armorS.setText(tohtml(armorS.getText(),false));
} else {
armorS.getParent().setBackground(themeBtnClicked);
armorS.setText(tohtml(armorS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(redChest, 0), 0, android.util.Base64.decode(redChest, 0).length)));
}var armoreS = new android.widget.TextView(ctx);
armoreS.setText("  " + "Enemy Armor");
armoreS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
armoreS.getLayoutParams().width = switch_width;
armoreS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
armoreS.setTextColor(modTextColor);

armoreS.setGravity(Gravity.CENTER_VERTICAL);
armoreS.setTypeface(mcfont);
armoreS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!armorE) {
armorE = true;
savemod("Enemy Armor");
showEArmorgui();
armoreS.getParent().setBackground(themeBtnClicked);
armoreS.setText(tohtml(armoreS.getText(),true));
} else {
armorE = false;
armoreS.getParent().setBackground(themeBtnNotClicked);
armoreS.setText(tohtml(armoreS.getText(),false));
armorEm.dismiss();
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(armoreS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!armorE) {
armoreS.getParent().setBackground(themeBtnNotClicked);
armoreS.setText(tohtml(armoreS.getText(),false));
} else {
armoreS.getParent().setBackground(themeBtnClicked);
armoreS.setText(tohtml(armoreS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(stubbornicon, 0), 0, android.util.Base64.decode(stubbornicon, 0).length)));
}var aos = new android.widget.TextView(ctx);
aos.setText("  " + "No Knockback");
aos.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aos.getLayoutParams().width = switch_width;
aos.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
aos.setTextColor(modTextColor);
aos.setGravity(Gravity.CENTER_VERTICAL);

aos.setTypeface(mcfont);
aos.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!aoed) {
aoss = true;
savemod("No Knockback");
aoed = true;
aos.getParent().setBackground(themeBtnClicked);
aos.setText(tohtml(aos.getText(),true));
} else {
aoss = false;
aoed = false;
aos.getParent().setBackground(themeBtnNotClicked);
aos.setText(tohtml(aos.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Don't get knocked back when hit"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(aos);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!aoed) {
aos.getParent().setBackground(themeBtnNotClicked);
aos.setText(tohtml(aos.getText(),false));
} else {
aos.getParent().setBackground(themeBtnClicked);
aos.setText(tohtml(aos.getText(),true));
}
var esphost = new android.widget.LinearLayout(activity);
esphost.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
esphost.setOrientation(1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espmenu = new android.widget.TextView(ctx);
espmenu.setText("  " + "ESP Menu");
espmenu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espmenu.getLayoutParams().width = switch_width;
espmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espmenu.setTextColor(modTextColor);

espmenu.setTypeface(mcfont);
espmenu.setGravity(Gravity.CENTER_VERTICAL);
espmenu.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!espmenus) {
	espmenus=true;
esphost.addView(sesps);
esphost.addView(strac);
esphost.addView(sesp);
esphost.addView(rgbspeedtxt);
esphost.addView(srgb);
esphost.addView(ssesp);
esphost.addView(cesp);
esphost.addView(espredtxt);
esphost.addView(redes);
esphost.addView(espgreentxt);
esphost.addView(greenes);
esphost.addView(espbluetxt);
esphost.addView(bluees);

espmenu.getParent().setBackground(themeBtnClicked);
espmenu.setText(tohtml(espmenu.getText(),true,"list"));
} else {
espmenus = false;
espmenu.getParent().setBackground(themeBtnNotClicked);

esphost.removeView(sesps);
esphost.removeView(strac);
esphost.removeView(sesp);
esphost.removeView(rgbspeedtxt);
esphost.removeView(srgb);
esphost.removeView(ssesp);
esphost.removeView(cesp);
esphost.removeView(espredtxt);
esphost.removeView(redes);
esphost.removeView(espgreentxt);
esphost.removeView(greenes);
esphost.removeView(espbluetxt);
esphost.removeView(bluees);
espmenu.setText(tohtml(espmenu.getText(),false,"list"));
}

}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(espmenu);
menuLayoutw.addView(slayout1);
if (!espmenus) {
espmenu.getParent().setBackground(themeBtnNotClicked);
espmenu.setText(tohtml(espmenu.getText(),false,"list"));
} else {
espmenu.getParent().setBackground(themeBtnClicked);
espmenu.setText(tohtml(espmenu.getText(),true,"list"));
}


var sesps = new android.widget.LinearLayout(activity);
sesps.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
sesps.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sesps.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espbtn = new android.widget.TextView(ctx);
espbtn.setText("  " + "ESP");
espbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espbtn.getLayoutParams().width = switch_width;
espbtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espbtn.setTextColor(modTextColor);

espbtn.setTypeface(mcfont);
espbtn.setGravity(Gravity.CENTER_VERTICAL);
espbtn.setTextSize(switchfontsize);
sesps.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!espd) {
esp = true;
espd = true;
savemod("ESP");

espOnsave=true;
if(!rendering){funcS.Render.init();rendering=true}
espbtn.getParent().setBackground(themeBtnClicked);
espbtn.setText(tohtml(espbtn.getText(),true));
} else {
esp = false;
espd = false;
espOnsave=false;
espbtn.getParent().setBackground(themeBtnNotClicked);
espbtn.setText(tohtml(espbtn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Easier to see where everyone is, even the invisible"]);
}
}));
}if(iconsB){sesps.addView(waypoint1);}
sesps.addView(espbtn);
if(helpB){sesps.addView(helpBtn);}
if (!espd) {
espbtn.getParent().setBackground(themeBtnNotClicked);
espbtn.setText(tohtml(espbtn.getText(),false));
} else {
espbtn.getParent().setBackground(themeBtnClicked);
espbtn.setText(tohtml(espbtn.getText(),true));
}



var strac = new android.widget.LinearLayout(activity);
strac.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
strac.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
strac.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var esptbtn = new android.widget.TextView(ctx);
esptbtn.setText("  " + "Tracers");
esptbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
esptbtn.getLayoutParams().width = switch_width;
esptbtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
esptbtn.setTextColor(modTextColor);

esptbtn.setGravity(Gravity.CENTER_VERTICAL);
esptbtn.setTypeface(mcfont);
esptbtn.setTextSize(switchfontsize);
strac.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!espt) {
espt = true;
espOnTsave=true;
savemod("Tracers");
if(!esp){esp=true;espd = true;esp=false;espd = false;}
if(!rendering){funcS.Render.init();rendering=true}

esptbtn.getParent().setBackground(themeBtnClicked);
esptbtn.setText(tohtml(esptbtn.getText(),true));
} else {
espt = false;
espOnTsave=false;
esptbtn.getParent().setBackground(themeBtnNotClicked);
esptbtn.setText(tohtml(esptbtn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Easier to see where everyone is, even the invisible"]);
}
}));
}if(iconsB){strac.addView(waypoint1);}
strac.addView(esptbtn);
if(helpB){strac.addView(helpBtn);}
if (!espt) {
esptbtn.getParent().setBackground(themeBtnNotClicked);
esptbtn.setText(tohtml(esptbtn.getText(),false));
} else {
esptbtn.getParent().setBackground(themeBtnClicked);
esptbtn.setText(tohtml(esptbtn.getText(),true));
}
var sesp = new android.widget.LinearLayout(activity);
sesp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
sesp.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sesp.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var RGBESPS = new android.widget.TextView(ctx);
RGBESPS.setText("  " + "RGB ESP");
RGBESPS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
RGBESPS.getLayoutParams().width = switch_width;
RGBESPS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
RGBESPS.setTextColor(modTextColor);
RGBESPS.setGravity(Gravity.CENTER_VERTICAL);
RGBESPS.setTypeface(mcfont);
RGBESPS.setTextSize(switchfontsize);
sesp.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!rgbesp) {
rgbesp = true;
savemod("RGB ESP");
RGBESPS.getParent().setBackground(themeBtnClicked);
RGBESPS.setText(tohtml(RGBESPS.getText(),true));
} else {
rgbesp = false;
RGBESPS.getParent().setBackground(themeBtnNotClicked);
RGBESPS.setText(tohtml(RGBESPS.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enables Rainbow Fade");
}
}));
}if(iconsB){sesp.addView(waypoint1);}
sesp.addView(RGBESPS);
if(helpB){sesp.addView(helpBtn);}
if (!rgbesp) {
RGBESPS.getParent().setBackground(themeBtnNotClicked);
RGBESPS.setText(tohtml(RGBESPS.getText(),false));
} else {
RGBESPS.getParent().setBackground(themeBtnClicked);
RGBESPS.setText(tohtml(RGBESPS.getText(),true));
}
var rgbspeedtxt = new android.widget.TextView(ctx);
rgbspeedtxt.setText("  " + "RGB Transition Speed:");
rgbspeedtxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
rgbspeedtxt.getLayoutParams().width = switch_width;
rgbspeedtxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
rgbspeedtxt.setTextColor(modTextColor);
rgbspeedtxt.setGravity(Gravity.CENTER_VERTICAL);
rgbspeedtxt.setTypeface(mcfont);
rgbspeedtxt.setTextSize(switchfontsize);
var srgb = new android.widget.LinearLayout(activity);
srgb.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
srgb.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
srgb.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var rgbseek = new android.widget.SeekBar(ctx);
rgbseek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
rgbseek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
rgbseek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
rgbseek.getLayoutParams().width = switch_width;
rgbseek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
rgbseek.setMax(30);
rgbseek.getBackground().setAlpha(255);
rgbseek.setProgress(rgbspeed);
rgbseek.setBackground(xbgGS);
rgbseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
rgbspeed = rgbseek.getProgress();
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts RGB Speed");
}
}));
}if(iconsB){srgb.addView(waypoint1);}
srgb.addView(rgbseek);
if(helpB){srgb.addView(helpBtn);}
var ssesp = new android.widget.LinearLayout(activity);
ssesp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
ssesp.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ssesp.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var strokeesps = new android.widget.TextView(ctx);
strokeesps.setText("  " + "Outline ESP");
strokeesps.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
strokeesps.getLayoutParams().width = switch_width;
strokeesps.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
strokeesps.setTextColor(modTextColor);
strokeesps.setGravity(Gravity.CENTER_VERTICAL);
strokeesps.setTypeface(mcfont);
strokeesps.setTextSize(switchfontsize);
ssesp.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!strokeesp) {
strokeesp = true;
savemod("Stroke ESP");
strokeesps.getParent().setBackground(themeBtnClicked);
strokeesps.setText(tohtml(strokeesps.getText(),true));
} else {
strokeesp = false;
strokeesps.getParent().setBackground(themeBtnNotClicked);
strokeesps.setText(tohtml(strokeesps.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enables Stroke");
}
}));
}if(iconsB){ssesp.addView(waypoint1);}
ssesp.addView(strokeesps);
if(helpB){ssesp.addView(helpBtn);}
if (!strokeesp) {
strokeesps.getParent().setBackground(themeBtnNotClicked);
strokeesps.setText(tohtml(strokeesps.getText(),false));
} else {
strokeesps.getParent().setBackground(themeBtnClicked);
strokeesps.setText(tohtml(strokeesps.getText(),true));
}
var cesp = new android.widget.LinearLayout(activity);
cesp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
cesp.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
cesp.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var combatesps = new android.widget.TextView(ctx);
combatesps.setText("  " + "Combat Range ESP");
combatesps.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
combatesps.getLayoutParams().width = switch_width;
combatesps.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
combatesps.setTextColor(modTextColor);
combatesps.setGravity(Gravity.CENTER_VERTICAL);
combatesps.setTypeface(mcfont);
combatesps.setTextSize(switchfontsize);
cesp.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!combatESP) {
combatESP = true;
savemod("Combat ESP");
combatesps.getParent().setBackground(themeBtnClicked);
combatesps.setText(tohtml(combatesps.getText(),true));
} else {
combatESP = false;
combatesps.getParent().setBackground(themeBtnNotClicked);
combatesps.setText(tohtml(combatesps.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Changes ESP to red when player is within hitting range");
}
}));
}if(iconsB){cesp.addView(waypoint1);}
cesp.addView(combatesps);
if(helpB){cesp.addView(helpBtn);}
if (!combatESP) {
combatesps.getParent().setBackground(themeBtnNotClicked);
combatesps.setText(tohtml(combatesps.getText(),false));
} else {
combatesps.getParent().setBackground(themeBtnClicked);
combatesps.setText(tohtml(combatesps.getText(),true));
}
var espredtxt = new android.widget.TextView(ctx);
espredtxt.setText("  " + "ESP Red:");
espredtxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espredtxt.getLayoutParams().width = switch_width;
espredtxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espredtxt.setTextColor(modTextColor);
espredtxt.setGravity(Gravity.CENTER_VERTICAL);
espredtxt.setTypeface(mcfont);
espredtxt.setTextSize(switchfontsize);
var redes = new android.widget.LinearLayout(activity);
redes.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
redes.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
redes.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espReds = new android.widget.SeekBar(ctx);
espReds.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
espReds.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
espReds.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espReds.getLayoutParams().width = switch_width;
espReds.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
espReds.setMax(255);
espReds.getBackground().setAlpha(255);
espReds.setProgress(espRed*255);
espReds.setBackground(xbgGS);
espReds.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
espRed = espReds.getProgress()/255;
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts ESP red");
}
}));
}if(iconsB){redes.addView(waypoint1);}
redes.addView(espReds);
if(helpB){redes.addView(helpBtn);}
var espbluetxt = new android.widget.TextView(ctx);
espbluetxt.setText("  " + "ESP Blue:");
espbluetxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espbluetxt.getLayoutParams().width = switch_width;
espbluetxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espbluetxt.setTextColor(modTextColor);
espbluetxt.setGravity(Gravity.CENTER_VERTICAL);
espbluetxt.setTypeface(mcfont);
espbluetxt.setTextSize(switchfontsize);
var bluees = new android.widget.LinearLayout(activity);
bluees.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
bluees.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
bluees.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espBlues = new android.widget.SeekBar(ctx);
espBlues.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
espBlues.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
espBlues.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espBlues.getLayoutParams().width = switch_width;
espBlues.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
espBlues.setMax(255);
espBlues.getBackground().setAlpha(255);
espBlues.setProgress(espBlue*255);
espBlues.setBackground(xbgGS);
espBlues.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
espBlue = espBlues.getProgress()/255;
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts ESP blue");
}
}));
}if(iconsB){bluees.addView(waypoint1);}
bluees.addView(espBlues);
if(helpB){bluees.addView(helpBtn);}
var espgreentxt = new android.widget.TextView(ctx);
espgreentxt.setText("  " + "ESP Green:");
espgreentxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espgreentxt.getLayoutParams().width = switch_width;
espgreentxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espgreentxt.setTextColor(modTextColor);
espgreentxt.setGravity(Gravity.CENTER_VERTICAL);
espgreentxt.setTypeface(mcfont);
espgreentxt.setTextSize(switchfontsize);
var greenes = new android.widget.LinearLayout(activity);
greenes.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
greenes.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
greenes.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espGreens = new android.widget.SeekBar(ctx);
espGreens.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
espGreens.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
espGreens.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espGreens.getLayoutParams().width = switch_width;
espGreens.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
espGreens.setMax(255);
espGreens.getBackground().setAlpha(255);
espGreens.setProgress(espGreen*255);
espGreens.setBackground(xbgGS);
espGreens.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
espGreen = espGreens.getProgress()/255;
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts ESP green");
}
}));
}if(iconsB){greenes.addView(waypoint1);}
greenes.addView(espGreens);
if(helpB){greenes.addView(helpBtn);}

menuLayoutw.addView(esphost);

if (espmenus) {
esphost.addView(sesps);
esphost.addView(strac);
esphost.addView(sesp);
esphost.addView(rgbspeedtxt);
esphost.addView(srgb);
esphost.addView(ssesp);
esphost.addView(cesp);
esphost.addView(espredtxt);
esphost.addView(redes);
esphost.addView(espgreentxt);
esphost.addView(greenes);
esphost.addView(espbluetxt);
esphost.addView(bluees);
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(heartIcon, 0), 0, android.util.Base64.decode(heartIcon, 0).length)));
}var nameThealth = new android.widget.TextView(ctx);
nameThealth.setText("  " + "Health HUD");
nameThealth.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nameThealth.getLayoutParams().width = switch_width;
nameThealth.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nameThealth.setTextColor(modTextColor);
nameThealth.setGravity(Gravity.CENTER_VERTICAL);
nameThealth.setTypeface(mcfont);
nameThealth.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!nearestHud) {
nearestHud = true;
nearestHudTsave=true;
savemod("Health Nametag");
ShowInGame();
nameThealth.getParent().setBackground(themeBtnClicked);
nameThealth.setText(tohtml(nameThealth.getText(),true));
} else {
nearestHud = false;
nearestHudTsave=false;
HideInGame();
nameThealth.getParent().setBackground(themeBtnNotClicked);
nameThealth.setText(tohtml(nameThealth.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Displays health of nearest player above their head"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nameThealth);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!nearestHud) {
nameThealth.getParent().setBackground(themeBtnNotClicked);
nameThealth.setText(tohtml(nameThealth.getText(),false));
} else {
nameThealth.getParent().setBackground(themeBtnClicked);
nameThealth.setText(tohtml(nameThealth.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(heartIcon, 0), 0, android.util.Base64.decode(heartIcon, 0).length)));
}var nametaghe = new android.widget.TextView(ctx);
nametaghe.setText("  " + "Health Nametag");
nametaghe.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nametaghe.getLayoutParams().width = switch_width;
nametaghe.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nametaghe.setTextColor(modTextColor);
nametaghe.setGravity(Gravity.CENTER_VERTICAL);
nametaghe.setTypeface(mcfont);
nametaghe.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!playerNameStat) {
playerNameStat = true;
savemod("Health Name");
nametaghe.getParent().setBackground(themeBtnClicked);
nametaghe.setText(tohtml(nametaghe.getText(),true));
} else {
playerNameStat = false;
nametaghe.getParent().setBackground(themeBtnNotClicked);
nametaghe.setText(tohtml(nametaghe.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Displays health of nearest player above their head"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nametaghe);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!playerNameStat) {
nametaghe.getParent().setBackground(themeBtnNotClicked);
nametaghe.setText(tohtml(nametaghe.getText(),false));
} else {
nametaghe.getParent().setBackground(themeBtnClicked);
nametaghe.setText(tohtml(nametaghe.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fasteaticon, 0), 0, android.util.Base64.decode(fasteaticon, 0).length)));
}var fasteatbtn = new android.widget.TextView(ctx);
fasteatbtn.setText("  " + "Fast Eat");
fasteatbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fasteatbtn.getLayoutParams().width = switch_width;
fasteatbtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fasteatbtn.setTextColor(modTextColor);

fasteatbtn.setGravity(Gravity.CENTER_VERTICAL);
fasteatbtn.setTypeface(mcfont);
fasteatbtn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!fasteatd) {
fasteats = true;
fasteatd = true;
savemod("Fast Eat");
enableEat();
fasteatbtn.getParent().setBackground(themeBtnClicked);
fasteatbtn.setText(tohtml(fasteatbtn.getText(),true));
} else {
fasteats = false;
fasteatd = false;
disableEat();
fasteatbtn.getParent().setBackground(themeBtnNotClicked);
fasteatbtn.setText(tohtml(fasteatbtn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Eat food instantly, good for Pvp battles"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fasteatbtn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!fasteatd) {
fasteatbtn.getParent().setBackground(themeBtnNotClicked);
fasteatbtn.setText(tohtml(fasteatbtn.getText(),false));
} else {
fasteatbtn.getParent().setBackground(themeBtnClicked);
fasteatbtn.setText(tohtml(fasteatbtn.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(totemicon, 0), 0, android.util.Base64.decode(totemicon, 0).length)));
}var totembtn = new android.widget.TextView(ctx);
totembtn.setText("  " + "Auto Totem");
totembtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
totembtn.getLayoutParams().width = switch_width;
totembtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
totembtn.setTextColor(modTextColor);

totembtn.setGravity(Gravity.CENTER_VERTICAL);
totembtn.setTypeface(mcfont);
totembtn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!atotemd) {
atotems = true;
atotemd = true;
savemod("Auto Totem");
totemSp = true;
Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);
totembtn.getParent().setBackground(themeBtnClicked);
totembtn.setText(tohtml(totembtn.getText(),true));
} else {
atotems = false;
atotemd = false;
totemSp = false;
totembtn.getParent().setBackground(themeBtnNotClicked);
totembtn.setText(tohtml(totembtn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds a totem of undying when hit"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(totembtn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!atotemd) {
totembtn.getParent().setBackground(themeBtnNotClicked);
totembtn.setText(tohtml(totembtn.getText(),false));
} else {
totembtn.getParent().setBackground(themeBtnClicked);
totembtn.setText(tohtml(totembtn.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(leadicon, 0), 0, android.util.Base64.decode(leadicon, 0).length)));
}var tpasw = new android.widget.TextView(ctx);
tpasw.setText("  " + "TP Aura");
tpasw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
tpasw.getLayoutParams().width = switch_width;
tpasw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
tpasw.setTextColor(modTextColor);
tpasw.setGravity(Gravity.CENTER_VERTICAL);

tpasw.setTypeface(mcfont);
tpasw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!tpaur) {
tpaur = true;
savemod("TP Aura");
tpasw.getParent().setBackground(themeBtnClicked);
tpasw.setText(tohtml(tpasw.getText(),true));
} else {
tpaur = false;
tpasw.getParent().setBackground(themeBtnNotClicked);
tpasw.setText(tohtml(tpasw.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports to the victim"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(tpasw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!tpaur) {
tpasw.getParent().setBackground(themeBtnNotClicked);
tpasw.setText(tohtml(tpasw.getText(),false));
} else {
tpasw.getParent().setBackground(themeBtnClicked);
tpasw.setText(tohtml(tpasw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(lightningicon, 0), 0, android.util.Base64.decode(lightningicon, 0).length)));
}var zigzagauraswitch = new android.widget.TextView(ctx);
zigzagauraswitch.setText("  " + "Lightning Aura");
zigzagauraswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
zigzagauraswitch.getLayoutParams().width = switch_width;
zigzagauraswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
zigzagauraswitch.setTextColor(modTextColor);

zigzagauraswitch.setGravity(Gravity.CENTER_VERTICAL);
zigzagauraswitch.setTypeface(mcfont);
zigzagauraswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!snipersd) {
sniperss = true;
snipersd = true;
savemod("Lightning Aura");
zigzagauraswitch.getParent().setBackground(themeBtnClicked);
zigzagauraswitch.setText(tohtml(zigzagauraswitch.getText(),true));
} else {
sniperss = false;
snipersd = false;
zigzagauraswitch.getParent().setBackground(themeBtnNotClicked);
zigzagauraswitch.setText(tohtml(zigzagauraswitch.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Use with aimbot and reach, hard to get killed"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(zigzagauraswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!snipersd) {
zigzagauraswitch.getParent().setBackground(themeBtnNotClicked);
zigzagauraswitch.setText(tohtml(zigzagauraswitch.getText(),false));
} else {
zigzagauraswitch.getParent().setBackground(themeBtnClicked);
zigzagauraswitch.setText(tohtml(zigzagauraswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(boomicon, 0), 0, android.util.Base64.decode(boomicon, 0).length)));
}var blastaurS = new android.widget.TextView(ctx);
blastaurS.setText("  " + "Blast Aura");
blastaurS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
blastaurS.getLayoutParams().width = switch_width;
blastaurS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
blastaurS.setTextColor(modTextColor);

blastaurS.setTypeface(mcfont);
blastaurS.setGravity(Gravity.CENTER_VERTICAL);
blastaurS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!blastau) {
blastau = true;
savemod("Blast Aura");
blastaurS.getParent().setBackground(themeBtnClicked);
blastaurS.setText(tohtml(blastaurS.getText(),true));
} else {
blastau = false;
blastaurS.getParent().setBackground(themeBtnNotClicked);
blastaurS.setText(tohtml(blastaurS.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(blastaurS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!blastau) {
blastaurS.getParent().setBackground(themeBtnNotClicked);
blastaurS.setText(tohtml(blastaurS.getText(),false));
} else {
blastaurS.getParent().setBackground(themeBtnClicked);
blastaurS.setText(tohtml(blastaurS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aerialicon, 0), 0, android.util.Base64.decode(aerialicon, 0).length)));
}var aerialauraswitch = new android.widget.TextView(ctx);
aerialauraswitch.setText("  " + "Aerial Aura");
aerialauraswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aerialauraswitch.getLayoutParams().width = switch_width;
aerialauraswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
aerialauraswitch.setTextColor(modTextColor);

aerialauraswitch.setGravity(Gravity.CENTER_VERTICAL);
aerialauraswitch.setTypeface(mcfont);
aerialauraswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!aerialaurad) {
aerialauras = true;
aerialaurad = true;
savemod("Aerial Aura");
aerialauraswitch.getParent().setBackground(themeBtnClicked);
aerialauraswitch.setText(tohtml(aerialauraswitch.getText(),true));
} else {
aerialauras = false;
aerialaurad = false;
aerialauraswitch.getParent().setBackground(themeBtnNotClicked);
aerialauraswitch.setText(tohtml(aerialauraswitch.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports right above someone whenever you hit them. Combine with aimbot for lethality."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(aerialauraswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!aerialaurad) {
aerialauraswitch.getParent().setBackground(themeBtnNotClicked);
aerialauraswitch.setText(tohtml(aerialauraswitch.getText(),false));
} else {
aerialauraswitch.getParent().setBackground(themeBtnClicked);
aerialauraswitch.setText(tohtml(aerialauraswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hovericon, 0), 0, android.util.Base64.decode(hovericon, 0).length)));
}var hoverauraswitch = new android.widget.TextView(ctx);
hoverauraswitch.setText("  " + "Hover Aura");
hoverauraswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hoverauraswitch.getLayoutParams().width = switch_width;
hoverauraswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hoverauraswitch.setTextColor(modTextColor);

hoverauraswitch.setGravity(Gravity.CENTER_VERTICAL);
hoverauraswitch.setTypeface(mcfont);
hoverauraswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!hoveraurad) {
hoverauras = true;
hoveraurad = true;
savemod("Hover Aura");
hoverauraswitch.getParent().setBackground(themeBtnClicked);
hoverauraswitch.setText(tohtml(hoverauraswitch.getText(),true));
} else {
hoverauras = false;
hoveraurad = false;
hoverauraswitch.getParent().setBackground(themeBtnNotClicked);
hoverauraswitch.setText(tohtml(hoverauraswitch.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports above player within 4 blocks. Combine with aimbot."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hoverauraswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!hoveraurad) {
hoverauraswitch.getParent().setBackground(themeBtnNotClicked);
hoverauraswitch.setText(tohtml(hoverauraswitch.getText(),false));
} else {
hoverauraswitch.getParent().setBackground(themeBtnClicked);
hoverauraswitch.setText(tohtml(hoverauraswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(violatoricon, 0), 0, android.util.Base64.decode(violatoricon, 0).length)));
}var violatorswitch = new android.widget.TextView(ctx);
violatorswitch.setText("  " + "Violator Aura");
violatorswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
violatorswitch.getLayoutParams().width = switch_width;
violatorswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
violatorswitch.setTextColor(modTextColor);

violatorswitch.setGravity(Gravity.CENTER_VERTICAL);
violatorswitch.setTypeface(mcfont);
violatorswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!violatord) {
violators = true;
violatord = true;
savemod("Violator Aura");
violatorswitch.getParent().setBackground(themeBtnClicked);
violatorswitch.setText(tohtml(violatorswitch.getText(),true));
} else {
violators = false;
violatord = false;
violatorswitch.getParent().setBackground(themeBtnNotClicked);
violatorswitch.setText(tohtml(violatorswitch.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sticks to a player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(violatorswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!violatord) {
violatorswitch.getParent().setBackground(themeBtnNotClicked);
violatorswitch.setText(tohtml(violatorswitch.getText(),false));
} else {
violatorswitch.getParent().setBackground(themeBtnClicked);
violatorswitch.setText(tohtml(violatorswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var feAims = new android.widget.TextView(ctx);
feAims.setText("  " + "Body Aimbot");
feAims.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
feAims.getLayoutParams().width = switch_width;
feAims.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
feAims.setTextColor(modTextColor);
feAims.setGravity(Gravity.CENTER_VERTICAL);

feAims.setTypeface(mcfont);
feAims.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if(!aimed){
if (!faimed) {
if (!faimed) {
feAims.getParent().setBackground(themeBtnNotClicked);
feAims.setText(tohtml(feAims.getText(),false));
} else {
feAims.getParent().setBackground(themeBtnClicked);
feAims.setText(tohtml(feAims.getText(),true));
}
faimbot = true;
faimbotBtn = true;
faimed = true;
savemod("Body Aimbot");
fshowAimbotBtn();
menuC.dismiss();

mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
GUIclose.dismiss();
if (colormychatd == true) {
GUIs.dismiss();
}
} else {
faimbot = false;
faimbotBtn = false;
faimed = false;
GUIfaim.dismiss();
if (!faimed) {
feAims.getParent().setBackground(themeBtnNotClicked);
feAims.setText(tohtml(feAims.getText(),false));
} else {
feAims.getParent().setBackground(themeBtnClicked);
feAims.setText(tohtml(feAims.getText(),true));
}
}

}else{betToast(langMsg[language]["Disable Regular aimbot first!"])}}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Constantly looks at nearest player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(feAims);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!faimed) {
feAims.getParent().setBackground(themeBtnNotClicked);
feAims.setText(tohtml(feAims.getText(),false));
} else {
feAims.getParent().setBackground(themeBtnClicked);
feAims.setText(tohtml(feAims.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var aimbuttonnn = new android.widget.TextView(ctx);
aimbuttonnn.setText("  " + "Aimbot");
aimbuttonnn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aimbuttonnn.getLayoutParams().width = switch_width;
aimbuttonnn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
aimbuttonnn.setTextColor(modTextColor);

aimbuttonnn.setGravity(Gravity.CENTER_VERTICAL);
aimbuttonnn.setTypeface(mcfont);
aimbuttonnn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if(!faimed){
if (!aimed) {
if (!aimed) {
aimbuttonnn.getParent().setBackground(themeBtnNotClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),false));
} else {
aimbuttonnn.getParent().setBackground(themeBtnClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),true));
}
aimbot = true;
aimbotBtn = true;
aimed = true;
savemod("Aimbot");
showAimbotBtn();
menuC.dismiss();

mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
GUIclose.dismiss();
if (colormychatd == true) {
GUIs.dismiss();
}
} else {
aimbot = false;
aimbotBtn = false;
aimed = false;
GUIaim.dismiss();
if (!aimed) {
aimbuttonnn.getParent().setBackground(themeBtnNotClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),false));
} else {
aimbuttonnn.getParent().setBackground(themeBtnClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),true));
}
}

}else{betToast(langMsg[language]["Disable Body Aimbot first!"])}}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Constantly looks at nearest player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(aimbuttonnn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!aimed) {
aimbuttonnn.getParent().setBackground(themeBtnNotClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),false));
} else {
aimbuttonnn.getParent().setBackground(themeBtnClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var aimSlider = new android.widget.SeekBar(ctx);
aimSlider.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
aimSlider.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
aimSlider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aimSlider.getLayoutParams().width = switch_width;
aimSlider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
aimSlider.setMax(100);
aimSlider.getBackground().setAlpha(255);
aimSlider.setProgress(aimbotRange);
aimSlider.setBackground(xbgGS);
aimSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
aimbotRange = aimSlider.getProgress();
betToast(langMsg[language]["Range: "] + aimbotRange);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjust range to activate aimbot"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(aimSlider);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(towericon, 0), 0, android.util.Base64.decode(towericon, 0).length)));
}var tapjumps = new android.widget.TextView(ctx);
tapjumps.setText("  " + "Tower Assist");
tapjumps.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
tapjumps.getLayoutParams().width = switch_width;
tapjumps.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
tapjumps.setTextColor(modTextColor);

tapjumps.setTypeface(mcfont);
tapjumps.setGravity(Gravity.CENTER_VERTICAL);
tapjumps.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!tapjumped) {
tapjumpss = true;
savemod("Tower Assist");
tapjumped = true;
tapjumps.getParent().setBackground(themeBtnClicked);
tapjumps.setText(tohtml(tapjumps.getText(),true));
} else {
tapjumpss = false;
tapjumped = false;
tapjumps.getParent().setBackground(themeBtnNotClicked);
tapjumps.setText(tohtml(tapjumps.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Good for easy pillaring"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(tapjumps);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!tapjumped) {
tapjumps.getParent().setBackground(themeBtnNotClicked);
tapjumps.setText(tohtml(tapjumps.getText(),false));
} else {
tapjumps.getParent().setBackground(themeBtnClicked);
tapjumps.setText(tohtml(tapjumps.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);

if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bottleofenchant, 0), 0, android.util.Base64.decode(bottleofenchant, 0).length)));
}var xphits = new android.widget.TextView(ctx);
xphits.setText("  " + "Xp Hit");
xphits.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
xphits.getLayoutParams().width = switch_width;
xphits.setTextColor(modTextColor);
xphits.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));

xphits.setTypeface(mcfont);
xphits.setGravity(Gravity.CENTER_VERTICAL);
xphits.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!xphited) {
xphitss = true;
xphited = true;
savemod("XP Hit");
betToast(langMsg[language]["Get XP by hitting mobs"]);
xphits.getParent().setBackground(themeBtnClicked);
xphits.setText(tohtml(xphits.getText(),true));
} else {
xphitss = false;
xphited = false;
xphits.getParent().setBackground(themeBtnNotClicked);
xphits.setText(tohtml(xphits.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Get XP when you hit someone"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(xphits);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!xphited) {
xphits.getParent().setBackground(themeBtnNotClicked);
xphits.setText(tohtml(xphits.getText(),false));
} else {
xphits.getParent().setBackground(themeBtnClicked);
xphits.setText(tohtml(xphits.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(turnicon, 0), 0, android.util.Base64.decode(turnicon, 0).length)));
}var quickturn = new android.widget.TextView(ctx);
quickturn.setText("  " + "Quick Turn 180");
quickturn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
quickturn.getLayoutParams().width = switch_width;
quickturn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
quickturn.setTextColor(modTextColor);

quickturn.setTypeface(mcfont);
quickturn.setGravity(Gravity.CENTER_VERTICAL);
quickturn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!quickturns) {
quickturns = true;
quickturnd = true;
savemod("Quick Turn");
show180Btn();
quickturn.getParent().setBackground(themeBtnClicked);
quickturn.setText(tohtml(quickturn.getText(),true));
} else {
quickturns = false;
quickturnd = false;
GUIh.dismiss();
quickturn.getParent().setBackground(themeBtnNotClicked);
quickturn.setText(tohtml(quickturn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds button to quickly turn around"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(quickturn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!quickturns) {
quickturn.getParent().setBackground(themeBtnNotClicked);
quickturn.setText(tohtml(quickturn.getText(),false));
} else {
quickturn.getParent().setBackground(themeBtnClicked);
quickturn.setText(tohtml(quickturn.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(avoidicon, 0), 0, android.util.Base64.decode(avoidicon, 0).length)));
}var avoidplayer = new android.widget.TextView(ctx);
avoidplayer.setText("  " + "Untouchable");
avoidplayer.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
avoidplayer.getLayoutParams().width = switch_width;
avoidplayer.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
avoidplayer.setTextColor(modTextColor);

avoidplayer.setGravity(Gravity.CENTER_VERTICAL);
avoidplayer.setTypeface(mcfont);
avoidplayer.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!avoidplayers) {
avoidplayers = true;
savemod("Untouchable");
avoidplayer.getParent().setBackground(themeBtnClicked);
avoidplayer.setText(tohtml(avoidplayer.getText(),true));
} else {
avoidplayers = false;
avoidplayer.getParent().setBackground(themeBtnNotClicked);
avoidplayer.setText(tohtml(avoidplayer.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports away when anyone is near. Impossible to kill"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(avoidplayer);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!avoidplayers) {
avoidplayer.getParent().setBackground(themeBtnNotClicked);
avoidplayer.setText(tohtml(avoidplayer.getText(),false));
} else {
avoidplayer.getParent().setBackground(themeBtnClicked);
avoidplayer.setText(tohtml(avoidplayer.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(avoidicon, 0), 0, android.util.Base64.decode(avoidicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Untouchable Tune");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
avoidTune();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjust how far you teleport away from a player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

function avoidTune() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tpLayout = new android.widget.LinearLayout(ctx);
var etX = new android.widget.EditText(ctx);
var etY = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);
var etR = new android.widget.EditText(ctx);
var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" X:");
var txtY = android.widget.TextView(ctx);
txtY.setTextSize(12);
txtY.setText(" Y:");
var txtZ = android.widget.TextView(ctx);
txtZ.setTextSize(12);
txtZ.setText(" Z:");
var txtR = android.widget.TextView(ctx);
txtR.setTextSize(12);
txtR.setText(" Range:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Save");
etX.setInputType(number);
etY.setInputType(number);
etZ.setInputType(number);
etX.setText("0");
etY.setText("0");
etR.setText("0");
etZ.setText("0");
etX.setHint("Teleport this far from your X");
etY.setHint("Teleport this far from your Y");
etZ.setHint("Teleport this far from your Z");
etR.setHint("How close someone needs to be to trigger");
var tpDialog = new android.app.Dialog(ctx);
tpDialog.setContentView(tpLayout);
tpDialog.setTitle("Untouchable Tune");
tpLayout.setGravity(android.view.Gravity.CENTER);
tpLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tpLayout.addView(txtX);
tpLayout.addView(etX);
tpLayout.addView(txtY);
tpLayout.addView(etY);
tpLayout.addView(txtZ);
tpLayout.addView(etZ);
tpLayout.addView(txtR);
tpLayout.addView(etR);
tpLayout.addView(tpBtn);
tpLayout.addView(cancelBtn);
tpDialog.show();
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
avoidX = parseInt(etX.getText());
avoidY = parseInt(etY.getText());
avoidZ = parseInt(etZ.getText());
avoidRange = parseInt(etR.getText());
tpDialog.dismiss();

}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
tpDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(avoidicon, 0), 0, android.util.Base64.decode(avoidicon, 0).length)));
}var avoidSlider = new android.widget.SeekBar(ctx);
avoidSlider.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
avoidSlider.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
avoidSlider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
avoidSlider.getLayoutParams().width = switch_width;
avoidSlider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
avoidSlider.setMax(40);
avoidSlider.getBackground().setAlpha(255);
avoidSlider.setProgress(avoidRange);
avoidSlider.setBackground(xbgGS);
avoidSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
avoidRange = avoidSlider.getProgress();
betToast(langMsg[language]["Range: "] + avoidRange);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Quickly adjust how close players can get near you while using Untouchable"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(avoidSlider);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Hitboxes"]);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextSize(titleSize);
button.setBackground(title);
button.setTextColor(modTextColor);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayoutw.addView(button);
var hitboxbox = new android.widget.LinearLayout(activity);
hitboxbox.setBackground(themeBtnNotClicked);
hitboxbox.setOrientation(1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxplusicon, 0), 0, android.util.Base64.decode(bighitboxplusicon, 0).length)));
}var walks = new android.widget.TextView(ctx);
walks.setText("  " + "Reach");
walks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
walks.getLayoutParams().width = switch_width;
walks.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
walks.setTextColor(modTextColor);
walks.setTypeface(mcfont);
walks.setTextSize(switchfontsize);
walks.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!walked) {
walkss = true;
savemod("Reach");
walked = true;
walks.getParent().setBackground(themeBtnClicked);
walks.setText(tohtml(walks.getText(),true));
} else {
walkss = false;
walked = false;
resetBoxes();
walks.getParent().setBackground(themeBtnNotClicked);
walks.setText(tohtml(walks.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets players hitbox to large once you hit them"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(walks);
if(helpB){slayout1.addView(helpBtn);}
hitboxbox.addView(slayout1);
if (!walked) {
walks.getParent().setBackground(themeBtnNotClicked);
walks.setText(tohtml(walks.getText(),false));
} else {
walks.getParent().setBackground(themeBtnClicked);
walks.setText(tohtml(walks.getText(),true));
}

var spaceholder = new android.widget.Button(ctx);spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));spaceholder.getLayoutParams().height = icon_dimensions*.01;spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));hitboxbox.addView(spaceholder);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxplusicon, 0), 0, android.util.Base64.decode(bighitboxplusicon, 0).length)));
}var reachDistanceSlider = new android.widget.SeekBar(ctx);
reachDistanceSlider.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
reachDistanceSlider.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
reachDistanceSlider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
reachDistanceSlider.getLayoutParams().width = switch_width;
reachDistanceSlider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
reachDistanceSlider.setMax(30);
reachDistanceSlider.getBackground().setAlpha(255);
reachDistanceSlider.setProgress(reachDistance);
reachDistanceSlider.setBackground(xbgGS);
reachDistanceSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
reachDistance = reachDistanceSlider.getProgress();
betToast(langMsg[language]["Distance: "] + reachDistance);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjust how large their hitbox is - How far away you can hit someone from."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(reachDistanceSlider);
if(helpB){slayout1.addView(helpBtn);}
hitboxbox.addView(slayout1);var spaceholder = new android.widget.Button(ctx);spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));spaceholder.getLayoutParams().height = icon_dimensions*.01;spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));hitboxbox.addView(spaceholder);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxplusicon, 0), 0, android.util.Base64.decode(bighitboxplusicon, 0).length)));
}var autoReach = new android.widget.TextView(ctx);
autoReach.setText("  " + "Auto Reach");
autoReach.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
autoReach.getLayoutParams().width = switch_width;
autoReach.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
autoReach.setTextColor(modTextColor);
autoReach.setGravity(Gravity.CENTER_VERTICAL);

autoReach.setTypeface(mcfont);
autoReach.setTextSize(switchfontsize);
autoReach.getBackground().setAlpha(255);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!autoReachd) {
autoReachs = true;
autoReachd = true;
savemod("Auto Reach");
autoReach.getParent().setBackground(themeBtnClicked);
autoReach.setText(tohtml(autoReach.getText(),true));

} else {
autoReachs = false;
autoReachd = false;
resetBoxes();
autoReach.getParent().setBackground(themeBtnNotClicked);
autoReach.setText(tohtml(autoReach.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Automatically increases nearest players hitbox"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(autoReach);
if(helpB){slayout1.addView(helpBtn);}
hitboxbox.addView(slayout1);
if (!autoReachd) {
autoReach.getParent().setBackground(themeBtnNotClicked);
autoReach.setText(tohtml(autoReach.getText(),false));
} else {
autoReach.getParent().setBackground(themeBtnClicked);
autoReach.setText(tohtml(autoReach.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxplusicon, 0), 0, android.util.Base64.decode(bighitboxplusicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Reset Hitboxes");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {savemod("Reset Hitboxes");resetBoxes();ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Resets nearest player's hitbox size"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
hitboxbox.addView(slayout1);
var button = new android.widget.Button(ctx);
button.setText("");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().height = 15;
button.getBackground().setAlpha(0);
hitboxbox.addView(button);
menuLayoutw.addView(hitboxbox);
changeGUI2 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI2.setAnimationStyle(android.R.style.Animation_InputMethod);}

changeGUI2.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI2.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI2.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI2.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI2.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed2=true;
}
}
}))
};
/*Waypoints*/
function openMenu3() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Waypoints"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayoutw.addView(button);
var button7 = new android.widget.Button(ctx);
button7.setText("Add Waypoint");
button7.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button7.setTextColor(android.graphics.Color.YELLOW);
button7.getBackground().setAlpha(130);
button7.setTextSize(btntextsize);
button7.setBackground(xbgAW);
button7.setTypeface(mcfont);
button7.setTextSize(switchfontsize+3);
button7.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Add Waypoint");
AddNewWaypoint(parseInt(Player.getX()),parseInt(Player.getY()),parseInt(Player.getZ()));
closeEverything();
}
}));
menuLayoutw.addView(button7);
for(var i=0;i<objectLength(waypoints_W);i++){
if(!waypoints_W[i].removed){
if(CreateButton(i).getParent()!=null)
CreateButton(i).getParent().removeView(CreateButton(i));
menuLayoutw.addView(CreateButton(i));
}
}
changeGUI3 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI3.setAnimationStyle(android.R.style.Animation_InputMethod);}

changeGUI3.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI3.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI3.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI3.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI3.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI3.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI3.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed3=true;
}
}
}))
};
/*Potions*/
function openMenu4() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Potions Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language][" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects."]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(milkbucketicon, 0), 0, android.util.Base64.decode(milkbucketicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Remove All Effects");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
savemod("Remove All Effects");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
if (canPreset) {
Entity.removeAllEffects(getPlayerEnt());
betToast(langMsg[language]["Removed all effects"]);
ims = false;
hjjs = false;
hjs = false;
gps = false;
miningfs = false;
effectb = false;
effectn = false;
effectSat=false;
effectAbs=false;
effectHealth=false;
effectWither=false;
effectPois=false;
effectWeak=false;
effectHunger=false;
effectWater=false;
effectFireRes=false;
effectDmgRes=false;
effectHarm=false;
effectHeal=false;
effectStrgth=false;
effectSlow=false;
effectSwift=false;
}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bottleofenchant, 0), 0, android.util.Base64.decode(bottleofenchant, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Add Experience");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width-icon_dimensions;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Add XP");
Player.addExp(100000000);
betToast(langMsg[language]["Added experience"]);
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(milkbucketicon, 0), 0, android.util.Base64.decode(milkbucketicon, 0).length)));
}var effectClearS = new android.widget.TextView(ctx);
effectClearS.setText("  " + "Antidote");
effectClearS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
effectClearS.getLayoutParams().width = switch_width;
effectClearS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
effectClearS.setTextColor(modTextColor);
effectClearS.setTypeface(mcfont);effectClearS.setGravity(Gravity.CENTER_VERTICAL);
effectClearS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectRemove) {
effectRemove = true;
savemod("Antidote");
effectClearS.getParent().setBackground(themeBtnClicked);
effectClearS.setText(tohtml(effectClearS.getText(),true));
} else {
effectRemove = false;
effectClearS.getParent().setBackground(themeBtnNotClicked);
effectClearS.setText(tohtml(effectClearS.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(effectClearS);
menuLayoutw.addView(slayout1);
if (!effectRemove) {
effectClearS.getParent().setBackground(themeBtnNotClicked);
effectClearS.setText(tohtml(effectClearS.getText(),false));} else {
effectClearS.getParent().setBackground(themeBtnClicked);
effectClearS.setText(tohtml(effectClearS.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(invisicon, 0), 0, android.util.Base64.decode(invisicon, 0).length)));
}var effectAddS = new android.widget.TextView(ctx);
effectAddS.setText("  " + "Spam Enabled Effects");
effectAddS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
effectAddS.getLayoutParams().width = switch_width;
effectAddS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
effectAddS.setTextColor(modTextColor);
effectAddS.setTypeface(mcfont);effectAddS.setGravity(Gravity.CENTER_VERTICAL);
effectAddS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectAdd) {
effectAdd = true;
savemod("Spam Enabled Effects");
effectAddS.getParent().setBackground(themeBtnClicked);
effectAddS.setText(tohtml(effectAddS.getText(),true));
} else {
effectAdd = false;
effectAddS.getParent().setBackground(themeBtnNotClicked);
effectAddS.setText(tohtml(effectAddS.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(effectAddS);
menuLayoutw.addView(slayout1);
if (!effectAdd) {
effectAddS.getParent().setBackground(themeBtnNotClicked);
effectAddS.setText(tohtml(effectAddS.getText(),false));} else {
effectAddS.getParent().setBackground(themeBtnClicked);
effectAddS.setText(tohtml(effectAddS.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newnightvisionicon, 0), 0, android.util.Base64.decode(newnightvisionicon, 0).length)));
}var gp = new android.widget.TextView(ctx);
gp.setText("  " + "Night Vision");
gp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
gp.getLayoutParams().width = switch_width-icon_dimensions;
gp.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
gp.setTextColor(modTextColor);
gp.setTypeface(mcfont);gp.setGravity(Gravity.CENTER_VERTICAL);
gp.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!gped) {
savemod("Night Vision");
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, nivd, niva, false, false);
gps = true;
gped = true;
betToast(langMsg[language]["Enabled Nightvision"]);
gp.getParent().setBackground(themeBtnClicked);
gp.setText(tohtml(gp.getText(),true));
} else {
gps = false;
gped = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
gp.getParent().setBackground(themeBtnNotClicked);
gp.setText(tohtml(gp.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(gp);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Night Vision",niva,nivd,gps);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!gps) {
gp.getParent().setBackground(themeBtnNotClicked);
gp.setText(tohtml(gp.getText(),false));} else {
gp.getParent().setBackground(themeBtnClicked);
gp.setText(tohtml(gp.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newhasteicon, 0), 0, android.util.Base64.decode(newhasteicon, 0).length)));
}var im = new android.widget.TextView(ctx);
im.setText("  " + "Haste");
im.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
im.getLayoutParams().width = switch_width-icon_dimensions;
im.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
im.setTextColor(modTextColor);
im.setTypeface(mcfont);im.setGravity(Gravity.CENTER_VERTICAL);
im.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!ims) {
savemod("Haste");
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, hastd, hasta, false, false);
ims = true;
betToast(langMsg[language]["Enabled InstaMine"]);
im.getParent().setBackground(themeBtnClicked);
im.setText(tohtml(im.getText(),true));
} else {
ims = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.digSpeed);
im.getParent().setBackground(themeBtnNotClicked);
im.setText(tohtml(im.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(im);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Haste",hasta,hastd,ims);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!ims) {
im.getParent().setBackground(themeBtnNotClicked);
im.setText(tohtml(im.getText(),false));} else {
im.getParent().setBackground(themeBtnClicked);
im.setText(tohtml(im.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(miningfatigueicon, 0), 0, android.util.Base64.decode(miningfatigueicon, 0).length)));
}var Fatigueswitch = new android.widget.TextView(ctx);
Fatigueswitch.setText("  " + "Mining Fatigue");
Fatigueswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
Fatigueswitch.getLayoutParams().width = switch_width-icon_dimensions;
Fatigueswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
Fatigueswitch.setTextColor(modTextColor);
Fatigueswitch.setTypeface(mcfont);Fatigueswitch.setGravity(Gravity.CENTER_VERTICAL);
Fatigueswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!miningfs) {
Entity.addEffect(Player.getEntity(), MobEffect.digSlowdown, mind, mina, false, false);
miningfs = true;
savemod("Mining Fatigue");
betToast(langMsg[language]["Enabled Mining Fatigue"]);
Fatigueswitch.getParent().setBackground(themeBtnClicked);
Fatigueswitch.setText(tohtml(Fatigueswitch.getText(),true));
} else {
miningfs = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.digSlowdown);
Fatigueswitch.getParent().setBackground(themeBtnNotClicked);
Fatigueswitch.setText(tohtml(Fatigueswitch.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(Fatigueswitch);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Mining Fatigue",mina,mind,miningfs);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!miningfs) {
Fatigueswitch.getParent().setBackground(themeBtnNotClicked);
Fatigueswitch.setText(tohtml(Fatigueswitch.getText(),false));} else {
Fatigueswitch.getParent().setBackground(themeBtnClicked);
Fatigueswitch.setText(tohtml(Fatigueswitch.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(leveffect, 0), 0, android.util.Base64.decode(leveffect, 0).length)));
}var levswi = new android.widget.TextView(ctx);
levswi.setText("  " + "Levitation");
levswi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
levswi.getLayoutParams().width = switch_width-icon_dimensions;
levswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
levswi.setTextColor(modTextColor);
levswi.setTypeface(mcfont);levswi.setGravity(Gravity.CENTER_VERTICAL);
levswi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!levs) {
Entity.addEffect(Player.getEntity(), MobEffect.levitation, levd, leva, false, false);
levs = true;
savemod("Levitation");
betToast("Enabled Levitation");
levswi.getParent().setBackground(themeBtnClicked);
levswi.setText(tohtml(levswi.getText(),true));
} else {
levs = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.levitation);
levswi.getParent().setBackground(themeBtnNotClicked);
levswi.setText(tohtml(levswi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(levswi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Levitation",leva,levd,levs);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!levs) {
levswi.getParent().setBackground(themeBtnNotClicked);
levswi.setText(tohtml(levswi.getText(),false));} else {
levswi.getParent().setBackground(themeBtnClicked);
levswi.setText(tohtml(levswi.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newjumpicon, 0), 0, android.util.Base64.decode(newjumpicon, 0).length)));
}var hj = new android.widget.TextView(ctx);
hj.setText("  " + "Jump Boost");
hj.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hj.getLayoutParams().width = switch_width-icon_dimensions;
hj.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hj.setTextColor(modTextColor);
hj.setTypeface(mcfont);hj.setGravity(Gravity.CENTER_VERTICAL);
hj.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!hjs) {
savemod("Jump Boost");
Entity.addEffect(Player.getEntity(), MobEffect.jump, jumpd, jumpa, false, false);
hjs = true;
ModPE.showTipMessage(ChatColor.RED + "Enabled High Jump");
hj.getParent().setBackground(themeBtnClicked);
hj.setText(tohtml(hj.getText(),true));
} else {
hjs = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.jump);
hj.getParent().setBackground(themeBtnNotClicked);
hj.setText(tohtml(hj.getText(),false));}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hj);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Jump Boost",jumpa,jumpd,hjs);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!hjs) {
hj.getParent().setBackground(themeBtnNotClicked);
hj.setText(tohtml(hj.getText(),false));} else {
hj.getParent().setBackground(themeBtnClicked);
hj.setText(tohtml(hj.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(nauseaicon, 0), 0, android.util.Base64.decode(nauseaicon, 0).length)));
}var Nauseaswitch = new android.widget.TextView(ctx);
Nauseaswitch.setText("  " + "Nausea");
Nauseaswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
Nauseaswitch.getLayoutParams().width = switch_width-icon_dimensions;
Nauseaswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
Nauseaswitch.setTextColor(modTextColor);
Nauseaswitch.setTypeface(mcfont);Nauseaswitch.setGravity(Gravity.CENTER_VERTICAL);
Nauseaswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectn) {
Entity.addEffect(Player.getEntity(), MobEffect.confusion, nausd, nausa, false, false);
effectn = true;
savemod("Nausea");
ModPE.showTipMessage(ChatColor.RED + "Why");
Nauseaswitch.getParent().setBackground(themeBtnClicked);
Nauseaswitch.setText(tohtml(Nauseaswitch.getText(),true));
} else {
effectn = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.confusion);
Nauseaswitch.getParent().setBackground(themeBtnNotClicked);
Nauseaswitch.setText(tohtml(Nauseaswitch.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(Nauseaswitch);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Nausea",nausa,nausd,effectn);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectn) {
Nauseaswitch.getParent().setBackground(themeBtnNotClicked);
Nauseaswitch.setText(tohtml(Nauseaswitch.getText(),false));} else {
Nauseaswitch.getParent().setBackground(themeBtnClicked);
Nauseaswitch.setText(tohtml(Nauseaswitch.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(blindnessicon, 0), 0, android.util.Base64.decode(blindnessicon, 0).length)));
}var Blindnessswitch = new android.widget.TextView(ctx);
Blindnessswitch.setText("  " + "Blindness");
Blindnessswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
Blindnessswitch.getLayoutParams().width = switch_width-icon_dimensions;
Blindnessswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
Blindnessswitch.setTextColor(modTextColor);
Blindnessswitch.setTypeface(mcfont);Blindnessswitch.setGravity(Gravity.CENTER_VERTICAL);
Blindnessswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectb) {
Entity.addEffect(Player.getEntity(), MobEffect.blindness, blindd, blinda, false, false);
effectb = true;
savemod("Blindness");
ModPE.showTipMessage(ChatColor.RED + "Why");
Blindnessswitch.getParent().setBackground(themeBtnClicked);
Blindnessswitch.setText(tohtml(Blindnessswitch.getText(),true));
} else {
effectb = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.blindness);
Blindnessswitch.getParent().setBackground(themeBtnNotClicked);
Blindnessswitch.setText(tohtml(Blindnessswitch.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(Blindnessswitch);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Blindness",blinda,blindd,effectb);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectb) {
Blindnessswitch.getParent().setBackground(themeBtnNotClicked);
Blindnessswitch.setText(tohtml(Blindnessswitch.getText(),false));} else {
Blindnessswitch.getParent().setBackground(themeBtnClicked);
Blindnessswitch.setText(tohtml(Blindnessswitch.getText(),true));}


var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["LAN Only Potions"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize-2);
button.setBackground(title);button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers."]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(healicon, 0), 0, android.util.Base64.decode(healicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Heal");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Heal");
Entity.addEffect(Player.getEntity(), MobEffect.heal, 999999, 2000, false, false);
betToast(langMsg[language]["Healed"]);
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(invisicon, 0), 0, android.util.Base64.decode(invisicon, 0).length)));
}var invisSwitch = new android.widget.TextView(ctx);
invisSwitch.setText("  " + "Invisibility");
invisSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
invisSwitch.getLayoutParams().width = switch_width-icon_dimensions;
invisSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
invisSwitch.setTextColor(modTextColor);
invisSwitch.setTypeface(mcfont);
invisSwitch.setTextSize(switchfontsize);invisSwitch.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectIn) {
savemod("Invisibility");
Entity.addEffect(Player.getEntity(), MobEffect.invisibility, invisd, invisa, false, false);
effectIn = true;
invisSwitch.getParent().setBackground(themeBtnClicked);
invisSwitch.setText(tohtml(invisSwitch.getText(),true));
} else {
effectIn = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.invisibility);
invisSwitch.getParent().setBackground(themeBtnNotClicked);
invisSwitch.setText(tohtml(invisSwitch.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(invisSwitch);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Invisibility",invisa,invisd,effectIn);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectIn) {
invisSwitch.getParent().setBackground(themeBtnNotClicked);
invisSwitch.setText(tohtml(invisSwitch.getText(),false));} else {
invisSwitch.getParent().setBackground(themeBtnClicked);
invisSwitch.setText(tohtml(invisSwitch.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(absorpicon, 0), 0, android.util.Base64.decode(absorpicon, 0).length)));
}var absSwit = new android.widget.TextView(ctx);
absSwit.setText("  " + "Absorption");
absSwit.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
absSwit.getLayoutParams().width = switch_width-icon_dimensions;
absSwit.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
absSwit.setTextColor(modTextColor);
absSwit.setTypeface(mcfont);absSwit.setGravity(Gravity.CENTER_VERTICAL);
absSwit.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectAbs) {
savemod("Absorption");
Entity.addEffect(Player.getEntity(), MobEffect.absorption, sbsod, absoa, false, false);
effectAbs = true;

absSwit.getParent().setBackground(themeBtnClicked);
absSwit.setText(tohtml(absSwit.getText(),true));
} else {
effectAbs = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.absorption);
absSwit.getParent().setBackground(themeBtnNotClicked);
absSwit.setText(tohtml(absSwit.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(absSwit);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Absorption",absoa,sbsod,effectAbs);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectAbs) {
absSwit.getParent().setBackground(themeBtnNotClicked);
absSwit.setText(tohtml(absSwit.getText(),false));} else {
absSwit.getParent().setBackground(themeBtnClicked);
absSwit.setText(tohtml(absSwit.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(healthicon, 0), 0, android.util.Base64.decode(healthicon, 0).length)));
}var healthBSwi = new android.widget.TextView(ctx);
healthBSwi.setText("  " + "Health Boost");
healthBSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
healthBSwi.getLayoutParams().width = switch_width-icon_dimensions;
healthBSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
healthBSwi.setTextColor(modTextColor);
healthBSwi.setTypeface(mcfont);healthBSwi.setGravity(Gravity.CENTER_VERTICAL);
healthBSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectHealth) {
Entity.addEffect(Player.getEntity(), MobEffect.healthBoost, healbod, healboa, false, false);
effectHealth = true;
savemod("Health Boost");
healthBSwi.getParent().setBackground(themeBtnClicked);
healthBSwi.setText(tohtml(healthBSwi.getText(),true));
} else {
effectHealth = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.healthBoost);
healthBSwi.getParent().setBackground(themeBtnNotClicked);
healthBSwi.setText(tohtml(healthBSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(healthBSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Health Boost",healboa,healbod,effectHealth);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectHealth) {
healthBSwi.getParent().setBackground(themeBtnNotClicked);
healthBSwi.setText(tohtml(healthBSwi.getText(),false));} else {
healthBSwi.getParent().setBackground(themeBtnClicked);
healthBSwi.setText(tohtml(healthBSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(withericon, 0), 0, android.util.Base64.decode(withericon, 0).length)));
}var witherSwi = new android.widget.TextView(ctx);
witherSwi.setText("  " + "Wither");
witherSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
witherSwi.getLayoutParams().width = switch_width-icon_dimensions;
witherSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
witherSwi.setTextColor(modTextColor);
witherSwi.setTypeface(mcfont);witherSwi.setGravity(Gravity.CENTER_VERTICAL);
witherSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectWither) {
Entity.addEffect(Player.getEntity(), MobEffect.wither, witherd, withera, false, false);
effectWither = true;
savemod("Wither");
witherSwi.getParent().setBackground(themeBtnClicked);
witherSwi.setText(tohtml(witherSwi.getText(),true));
} else {
effectWither = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.wither);
witherSwi.getParent().setBackground(themeBtnNotClicked);
witherSwi.setText(tohtml(witherSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(witherSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Wither",withera,witherd,effectWither);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectWither) {
witherSwi.getParent().setBackground(themeBtnNotClicked);
witherSwi.setText(tohtml(witherSwi.getText(),false));} else {
witherSwi.getParent().setBackground(themeBtnClicked);
witherSwi.setText(tohtml(witherSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(poisonicon, 0), 0, android.util.Base64.decode(poisonicon, 0).length)));
}var poisonSwi = new android.widget.TextView(ctx);
poisonSwi.setText("  " + "Poison");
poisonSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
poisonSwi.getLayoutParams().width = switch_width-icon_dimensions;
poisonSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
poisonSwi.setTextColor(modTextColor);
poisonSwi.setTypeface(mcfont);poisonSwi.setGravity(Gravity.CENTER_VERTICAL);
poisonSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectPois) {
Entity.addEffect(Player.getEntity(), MobEffect.poison, poisond, poisona, false, false);
effectPois = true;
savemod("Poison");
poisonSwi.getParent().setBackground(themeBtnClicked);
poisonSwi.setText(tohtml(poisonSwi.getText(),true));
} else {
effectPois = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.poison);
poisonSwi.getParent().setBackground(themeBtnNotClicked);
poisonSwi.setText(tohtml(poisonSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(poisonSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Poison",poisona,poisond,effectPois);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectPois) {
poisonSwi.getParent().setBackground(themeBtnNotClicked);
poisonSwi.setText(tohtml(poisonSwi.getText(),false));} else {
poisonSwi.getParent().setBackground(themeBtnClicked);
poisonSwi.setText(tohtml(poisonSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(weaknicon, 0), 0, android.util.Base64.decode(weaknicon, 0).length)));
}var weakSwi = new android.widget.TextView(ctx);
weakSwi.setText("  " + "Weakness");
weakSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
weakSwi.getLayoutParams().width = switch_width-icon_dimensions;
weakSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
weakSwi.setTextColor(modTextColor);
weakSwi.setTypeface(mcfont);weakSwi.setGravity(Gravity.CENTER_VERTICAL);
weakSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectWeak) {
Entity.addEffect(Player.getEntity(), MobEffect.weakness, weakd, weaka, false, false);
effectWeak = true;
savemod("Weakness");
weakSwi.getParent().setBackground(themeBtnClicked);
weakSwi.setText(tohtml(weakSwi.getText(),true));
} else {
effectWeak = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.weakness);
weakSwi.getParent().setBackground(themeBtnNotClicked);
weakSwi.setText(tohtml(weakSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(weakSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Weakness",weaka,weakd,effectWeak);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectWeak) {
weakSwi.getParent().setBackground(themeBtnNotClicked);
weakSwi.setText(tohtml(weakSwi.getText(),false));} else {
weakSwi.getParent().setBackground(themeBtnClicked);
weakSwi.setText(tohtml(weakSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hungericon, 0), 0, android.util.Base64.decode(hungericon, 0).length)));
}var hungerSwi = new android.widget.TextView(ctx);
hungerSwi.setText("  " + "Hunger");
hungerSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hungerSwi.getLayoutParams().width = switch_width-icon_dimensions;
hungerSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hungerSwi.setTextColor(modTextColor);
hungerSwi.setTypeface(mcfont);hungerSwi.setGravity(Gravity.CENTER_VERTICAL);
hungerSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectHunger) {
Entity.addEffect(Player.getEntity(), MobEffect.hunger, hungerd, hungera, false, false);
effectHunger = true;
savemod("Hunger");
hungerSwi.getParent().setBackground(themeBtnClicked);
hungerSwi.setText(tohtml(hungerSwi.getText(),true));
} else {
effectHunger = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.hunger);
hungerSwi.getParent().setBackground(themeBtnNotClicked);
hungerSwi.setText(tohtml(hungerSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hungerSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Hunger",hungera,hungerd,effectHunger);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectHunger) {
hungerSwi.getParent().setBackground(themeBtnNotClicked);
hungerSwi.setText(tohtml(hungerSwi.getText(),false));} else {
hungerSwi.getParent().setBackground(themeBtnClicked);
hungerSwi.setText(tohtml(hungerSwi.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(waterbreicon, 0), 0, android.util.Base64.decode(waterbreicon, 0).length)));
}var waterbreSwi = new android.widget.TextView(ctx);
waterbreSwi.setText("  " + "Water Breathing");
waterbreSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
waterbreSwi.getLayoutParams().width = switch_width-icon_dimensions;
waterbreSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
waterbreSwi.setTextColor(modTextColor);
waterbreSwi.setTypeface(mcfont);waterbreSwi.setGravity(Gravity.CENTER_VERTICAL);
waterbreSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectWater) {
Entity.addEffect(Player.getEntity(), MobEffect.waterBreathing, waterbd, waterba, false, false);
effectWater = true;
savemod("Water Breathing");
waterbreSwi.getParent().setBackground(themeBtnClicked);
waterbreSwi.setText(tohtml(waterbreSwi.getText(),true));
} else {
effectWater = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.waterBreathing);
waterbreSwi.getParent().setBackground(themeBtnNotClicked);
waterbreSwi.setText(tohtml(waterbreSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(waterbreSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Water Breathing",waterba,waterbd,effectWater);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectWater) {
waterbreSwi.getParent().setBackground(themeBtnNotClicked);
waterbreSwi.setText(tohtml(waterbreSwi.getText(),false));} else {
waterbreSwi.getParent().setBackground(themeBtnClicked);
waterbreSwi.setText(tohtml(waterbreSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fireresicon, 0), 0, android.util.Base64.decode(fireresicon, 0).length)));
}var fireresSwi = new android.widget.TextView(ctx);
fireresSwi.setText("  " + "Fire Resistance");
fireresSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fireresSwi.getLayoutParams().width = switch_width-icon_dimensions;
fireresSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fireresSwi.setTextColor(modTextColor);
fireresSwi.setTypeface(mcfont);fireresSwi.setGravity(Gravity.CENTER_VERTICAL);
fireresSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectFireRes) {
Entity.addEffect(Player.getEntity(), MobEffect.fireResistance, fresd, fresa, false, false);
effectFireRes = true;
savemod("Fire Resistance");
fireresSwi.getParent().setBackground(themeBtnClicked);
fireresSwi.setText(tohtml(fireresSwi.getText(),true));
} else {
effectFireRes = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.fireResistance);
fireresSwi.getParent().setBackground(themeBtnNotClicked);
fireresSwi.setText(tohtml(fireresSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fireresSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Fire Resistance",fresa,fresd,effectFireRes);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectFireRes) {
fireresSwi.getParent().setBackground(themeBtnNotClicked);
fireresSwi.setText(tohtml(fireresSwi.getText(),false));} else {
fireresSwi.getParent().setBackground(themeBtnClicked);
fireresSwi.setText(tohtml(fireresSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(resicon, 0), 0, android.util.Base64.decode(resicon, 0).length)));
}var damageresSwi = new android.widget.TextView(ctx);
damageresSwi.setText("  " + "Resistance");
damageresSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
damageresSwi.getLayoutParams().width = switch_width-icon_dimensions;
damageresSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
damageresSwi.setTextColor(modTextColor);
damageresSwi.setTypeface(mcfont);damageresSwi.setGravity(Gravity.CENTER_VERTICAL);
damageresSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectDmgRes) {
Entity.addEffect(Player.getEntity(), MobEffect.damageResistance, resd, resa, false, false);
effectDmgRes = true;
savemod("Resistance");
damageresSwi.getParent().setBackground(themeBtnClicked);
damageresSwi.setText(tohtml(damageresSwi.getText(),true));
} else {
effectDmgRes = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.damageResistance);
damageresSwi.getParent().setBackground(themeBtnNotClicked);
damageresSwi.setText(tohtml(damageresSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(damageresSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Resistance",resa,resd,effectDmgRes);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectDmgRes) {
damageresSwi.getParent().setBackground(themeBtnNotClicked);
damageresSwi.setText(tohtml(damageresSwi.getText(),false));} else {
damageresSwi.getParent().setBackground(themeBtnClicked);
damageresSwi.setText(tohtml(damageresSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(strngthicon, 0), 0, android.util.Base64.decode(strngthicon, 0).length)));
}var strengSwi = new android.widget.TextView(ctx);
strengSwi.setText("  " + "Strength");
strengSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
strengSwi.getLayoutParams().width = switch_width-icon_dimensions;
strengSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
strengSwi.setTextColor(modTextColor);
strengSwi.setTypeface(mcfont);strengSwi.setGravity(Gravity.CENTER_VERTICAL);
strengSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectStrgth) {
Entity.addEffect(Player.getEntity(), MobEffect.damageBoost, strengthd, strengta, false, false);
effectStrgth = true;
savemod("Strength");
strengSwi.getParent().setBackground(themeBtnClicked);
strengSwi.setText(tohtml(strengSwi.getText(),true));
} else {
effectStrgth = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.damageBoost);
strengSwi.getParent().setBackground(themeBtnNotClicked);
strengSwi.setText(tohtml(strengSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(strengSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Strength",strengta,strengthd,effectStrgth);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectStrgth) {
strengSwi.getParent().setBackground(themeBtnNotClicked);
strengSwi.setText(tohtml(strengSwi.getText(),false));} else {
strengSwi.getParent().setBackground(themeBtnClicked);
strengSwi.setText(tohtml(strengSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(slownesicon, 0), 0, android.util.Base64.decode(slownesicon, 0).length)));
}var slowSwi = new android.widget.TextView(ctx);
slowSwi.setText("  " + "Slowness");
slowSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
slowSwi.getLayoutParams().width = switch_width-icon_dimensions;
slowSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slowSwi.setTextColor(modTextColor);
slowSwi.setTypeface(mcfont);slowSwi.setGravity(Gravity.CENTER_VERTICAL);
slowSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectSlow) {
Entity.addEffect(Player.getEntity(), MobEffect.movementSlowdown, slowd, slowa, false, false);
effectSlow = true;
savemod("Slowness");
slowSwi.getParent().setBackground(themeBtnClicked);
slowSwi.setText(tohtml(slowSwi.getText(),true));
} else {
effectSlow = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.movementSlowdown);
slowSwi.getParent().setBackground(themeBtnNotClicked);
slowSwi.setText(tohtml(slowSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(slowSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Slowness",slowa,slowd,effectSlow);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectSlow) {
slowSwi.getParent().setBackground(themeBtnNotClicked);
slowSwi.setText(tohtml(slowSwi.getText(),false));} else {
slowSwi.getParent().setBackground(themeBtnClicked);
slowSwi.setText(tohtml(slowSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(swifticon, 0), 0, android.util.Base64.decode(swifticon, 0).length)));
}var swiftSwi = new android.widget.TextView(ctx);
swiftSwi.setText("  " + "Swiftness");
swiftSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
swiftSwi.getLayoutParams().width = switch_width-icon_dimensions;
swiftSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
swiftSwi.setTextColor(modTextColor);
swiftSwi.setTypeface(mcfont);swiftSwi.setGravity(Gravity.CENTER_VERTICAL);
swiftSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectSwift) {
Entity.addEffect(Player.getEntity(), MobEffect.movementSpeed, swiftd, swifta, false, false);
effectSwift = true;
savemod("Swiftness");
swiftSwi.getParent().setBackground(themeBtnClicked);
swiftSwi.setText(tohtml(swiftSwi.getText(),true));
} else {
effectSwift = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.movementSpeed);
swiftSwi.getParent().setBackground(themeBtnNotClicked);
swiftSwi.setText(tohtml(swiftSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(swiftSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;

editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Swiftness",swifta,swiftd,effectSwift);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectSwift) {
swiftSwi.getParent().setBackground(themeBtnNotClicked);
swiftSwi.setText(tohtml(swiftSwi.getText(),false));} else {
swiftSwi.getParent().setBackground(themeBtnClicked);
swiftSwi.setText(tohtml(swiftSwi.getText(),true));}


changeGUI4 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI4.setAnimationStyle(android.R.style.Animation_InputMethod);}

changeGUI4.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI4.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI4.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI4.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI4.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI4.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI4.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed4=true;
}
}
}))
};
/*Movement*/
function openMenu5() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(6, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Movement Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Tip: For best experience, use online with realms or servers.");
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(jetpackicon, 0), 0, android.util.Base64.decode(jetpackicon, 0).length)));
}var jetpacks = new android.widget.TextView(ctx);
jetpacks.setText("  " + "Jetpack");
jetpacks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
jetpacks.getLayoutParams().width = switch_width;
jetpacks.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
jetpacks.setTextColor(modTextColor);  
jetpacks.setTypeface(mcfont);
jetpacks.setGravity(android.view.Gravity.CENTER_VERTICAL);
jetpacks.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!jetpacked) {
jetpacked = true;
showJP();savemod("Jetpack");
if (!jetpacked) {
jetpacks.getParent().setBackground(themeBtnNotClicked);
jetpacks.setText(tohtml(jetpacks.getText(),false));
} else {
jetpacks.getParent().setBackground(themeBtnClicked);
jetpacks.setText(tohtml(jetpacks.getText(),true));
}
} else {
jetpackss = false;
GUIjp.dismiss();
jetpacked = false;
if (!jetpacked) {
jetpacks.getParent().setBackground(themeBtnNotClicked);
jetpacks.setText(tohtml(jetpacks.getText(),false));
} else {
jetpacks.getParent().setBackground(themeBtnClicked);
jetpacks.setText(tohtml(jetpacks.getText(),true));
}
};
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Fly in any direction"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(jetpacks);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!jetpacked) {
jetpacks.getParent().setBackground(themeBtnNotClicked);
jetpacks.setText(tohtml(jetpacks.getText(),false));
} else {
jetpacks.getParent().setBackground(themeBtnClicked);
jetpacks.setText(tohtml(jetpacks.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(cflyicon, 0), 0, android.util.Base64.decode(cflyicon, 0).length)));
}var sfd = new android.widget.TextView(ctx);
sfd.setText("  " + "Survival Fly");
sfd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
sfd.getLayoutParams().width = switch_width;
sfd.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sfd.setTextColor(modTextColor); 
sfd.setTypeface(mcfont);
sfd.setGravity(android.view.Gravity.CENTER_VERTICAL);
sfd.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!sf) {
savemod("Survival Fly");
Player.setCanFly(1);
Player.isFlying(1);
sf = true;
sfs = true;
betToast(langMsg[language]["Double Tap jump"]);
if (!sfs) {
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
} else {
sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
}
} else {
Player.setCanFly(0);
sf = false;
sfs = false;
if (!sfs) {
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
} else {
sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Fly in survival just like in creative"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(sfd);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!sfs) {
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
} else {
sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(survivalflyicon, 0), 0, android.util.Base64.decode(survivalflyicon, 0).length)));
}var elytraswitch = new android.widget.TextView(ctx);
elytraswitch.setText("  " + "Elytra");
elytraswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
elytraswitch.getLayoutParams().width = switch_width;
elytraswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
elytraswitch.setTextColor(modTextColor); 
elytraswitch.setTypeface(mcfont);
elytraswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
elytraswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!elytrad) {
elytras = true;
elytrad = true;savemod("Elytra");
if (!elytrad) {
elytraswitch.getParent().setBackground(themeBtnNotClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),false));
} else {
elytraswitch.getParent().setBackground(themeBtnClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),true));
}
} else {
elytras = false;
elytrad = false;
if (!elytrad) {
elytraswitch.getParent().setBackground(themeBtnNotClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),false));
} else {
elytraswitch.getParent().setBackground(themeBtnClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),true));
}
};
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Activated only when you look up and jump"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(elytraswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!elytrad) {
elytraswitch.getParent().setBackground(themeBtnNotClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),false));
} else {
elytraswitch.getParent().setBackground(themeBtnClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fastfallicon, 0), 0, android.util.Base64.decode(fastfallicon, 0).length)));
}var fastfallswitch = new android.widget.TextView(ctx);
fastfallswitch.setText("  " + "Fast Fall");
fastfallswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fastfallswitch.getLayoutParams().width = switch_width;
fastfallswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fastfallswitch.setTextColor(modTextColor); 
fastfallswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
fastfallswitch.setTypeface(mcfont);
fastfallswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!fastfalld) {
fastfalls = true;
fastfalld = true;savemod("Fast Fall");
if (!fastfalld) {
fastfallswitch.getParent().setBackground(themeBtnNotClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),false));
} else {
fastfallswitch.getParent().setBackground(themeBtnClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),true));
}
} else {
fastfalls = false;
fastfalld = false;
if (!fastfalld) {
fastfallswitch.getParent().setBackground(themeBtnNotClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),false));
} else {
fastfallswitch.getParent().setBackground(themeBtnClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),true));
}
};
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Gravity is increased"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fastfallswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!fastfalld) {
fastfallswitch.getParent().setBackground(themeBtnNotClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),false));
} else {
fastfallswitch.getParent().setBackground(themeBtnClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(elevateicon, 0), 0, android.util.Base64.decode(elevateicon, 0).length)));
}var elevs = new android.widget.TextView(ctx);
elevs.setText("  " + "Elevator");
elevs.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
elevs.getLayoutParams().width = switch_width;
elevs.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
elevs.setTextColor(modTextColor); 
elevs.setGravity(android.view.Gravity.CENTER_VERTICAL);
elevs.setTypeface(mcfont);
elevs.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!elevating) {
elevating = true;savemod("Elevator");
showElev();
elevs.getParent().setBackground(themeBtnClicked);
elevs.setText(tohtml(elevs.getText(),true));

} else {
elevating = false;
GUIele.dismiss();
elevs.getParent().setBackground(themeBtnNotClicked);
elevs.setText(tohtml(elevs.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Quickly ascend/descend"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(elevs);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!elevating) {
elevs.getParent().setBackground(themeBtnNotClicked);
elevs.setText(tohtml(elevs.getText(),false));
} else {
elevs.getParent().setBackground(themeBtnClicked);
elevs.setText(tohtml(elevs.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(surfaceicon, 0), 0, android.util.Base64.decode(surfaceicon, 0).length)));
}var surS = new android.widget.TextView(ctx);
surS.setText("  " + "Surface Keybind");
surS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
surS.getLayoutParams().width = switch_width;
surS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
surS.setTextColor(modTextColor); 
surS.setGravity(android.view.Gravity.CENTER_VERTICAL);
surS.setTypeface(mcfont);
surS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!surfacing) {
surfacing = true;
showSurf();savemod("Surface Keybind");
surS.getParent().setBackground(themeBtnClicked);
surS.setText(tohtml(surS.getText(),true));

} else {
surfacing = false;
GUIsur.dismiss();
surS.getParent().setBackground(themeBtnNotClicked);
surS.setText(tohtml(surS.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Quickly ascend/descend to surfaces"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(surS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!surfacing) {
surS.getParent().setBackground(themeBtnNotClicked);
surS.setText(tohtml(surS.getText(),false));
} else {
surS.getParent().setBackground(themeBtnClicked);
surS.setText(tohtml(surS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(spidericon, 0), 0, android.util.Base64.decode(spidericon, 0).length)));
}var spider = new android.widget.TextView(ctx);
spider.setText("  " + "Spider");
spider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
spider.getLayoutParams().width = switch_width;
spider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
spider.setTextColor(modTextColor); 
spider.setGravity(android.view.Gravity.CENTER_VERTICAL);
spider.setTypeface(mcfont);
spider.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!spiderd) {
spiders = true;
spiderd = true;savemod("Spider");
if (!spiderd) {
spider.getParent().setBackground(themeBtnNotClicked);
spider.setText(tohtml(spider.getText(),false));
} else {
spider.getParent().setBackground(themeBtnClicked);
spider.setText(tohtml(spider.getText(),true));
}
} else {
spiders = false;
spiderd = false;
if (!spiderd) {
spider.getParent().setBackground(themeBtnNotClicked);
spider.setText(tohtml(spider.getText(),false));
} else {
spider.getParent().setBackground(themeBtnClicked);
spider.setText(tohtml(spider.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Climb anything"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(spider);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!spiderd) {
spider.getParent().setBackground(themeBtnNotClicked);
spider.setText(tohtml(spider.getText(),false));
} else {
spider.getParent().setBackground(themeBtnClicked);
spider.setText(tohtml(spider.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crouchicon, 0), 0, android.util.Base64.decode(crouchicon, 0).length)));
}var crouchTpSwitch = new android.widget.TextView(ctx);
crouchTpSwitch.setText("  " + "Crouch Glide");
crouchTpSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
crouchTpSwitch.getLayoutParams().width = switch_width;
crouchTpSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
crouchTpSwitch.setTextColor(modTextColor); 
crouchTpSwitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
crouchTpSwitch.setTypeface(mcfont);
crouchTpSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!crouchtpss) {
crouchtpss = true;savemod("Crouch Glide");
if (!crouchtpss) {
crouchTpSwitch.getParent().setBackground(themeBtnNotClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),false));
} else {
crouchTpSwitch.getParent().setBackground(themeBtnClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),true));
}
} else {
crouchtpss = false;
if (!crouchtpss) {
crouchTpSwitch.getParent().setBackground(themeBtnNotClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),false));
} else {
crouchTpSwitch.getParent().setBackground(themeBtnClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Crouch and glide to anywhere"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(crouchTpSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!crouchtpss) {
crouchTpSwitch.getParent().setBackground(themeBtnNotClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),false));
} else {
crouchTpSwitch.getParent().setBackground(themeBtnClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(airjumpicon, 0), 0, android.util.Base64.decode(airjumpicon, 0).length)));
}var autoairjumpSwitch = new android.widget.TextView(ctx);
autoairjumpSwitch.setText("  " + "Auto Air Jump");
autoairjumpSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
autoairjumpSwitch.getLayoutParams().width = switch_width;
autoairjumpSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
autoairjumpSwitch.setTextColor(modTextColor); 
autoairjumpSwitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
autoairjumpSwitch.setTypeface(mcfont);
autoairjumpSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!grappless) {
grappless = true;savemod("Auto Air Jump");
if (!grappless) {
autoairjumpSwitch.getParent().setBackground(themeBtnNotClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),false));
} else {
autoairjumpSwitch.getParent().setBackground(themeBtnClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),true));
}
} else {
grappless = false;
if (!grappless) {
autoairjumpSwitch.getParent().setBackground(themeBtnNotClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),false));
} else {
autoairjumpSwitch.getParent().setBackground(themeBtnClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Jump in the air"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(autoairjumpSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!grappless) {
autoairjumpSwitch.getParent().setBackground(themeBtnNotClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),false));
} else {
autoairjumpSwitch.getParent().setBackground(themeBtnClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),true));
}
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(stepicon, 0), 0, android.util.Base64.decode(stepicon, 0).length)));
}var stepSwitch = new android.widget.TextView(ctx);
stepSwitch.setText("  " + "Step");
stepSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
stepSwitch.getLayoutParams().width = switch_width;
stepSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
stepSwitch.setTextColor(modTextColor); 
stepSwitch.setTypeface(mcfont);
stepSwitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
stepSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!stepss) {
stepss = true;savemod("Step");
if (!stepss) {
stepSwitch.getParent().setBackground(themeBtnNotClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),false));
} else {
stepSwitch.getParent().setBackground(themeBtnClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),true));
}
} else {
stepss = false;
if (!stepss) {
stepSwitch.getParent().setBackground(themeBtnNotClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),false));
} else {
stepSwitch.getParent().setBackground(themeBtnClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Step over anything, similar to Spider"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(stepSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!stepss) {
stepSwitch.getParent().setBackground(themeBtnNotClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),false));
} else {
stepSwitch.getParent().setBackground(themeBtnClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(camicon, 0), 0, android.util.Base64.decode(camicon, 0).length)));
}var freecamS = new android.widget.TextView(ctx);
freecamS.setText("  " + "Free Cam");
freecamS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
freecamS.getLayoutParams().width = switch_width;
freecamS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
freecamS.setTextColor(modTextColor); 
freecamS.setGravity(android.view.Gravity.CENTER_VERTICAL);
freecamS.setTypeface(mcfont);
freecamS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!freecamSon) {
freecamSon = true;
enableCam();savemod("Freecam");
freeX=Player.getX();
freeY=Player.getY();
freeZ=Player.getZ();
if(!rendering){funcS.Render.init();rendering=true}
if (!freecamSon) {
freecamS.getParent().setBackground(themeBtnNotClicked);
freecamS.setText(tohtml(freecamS.getText(),false));
} else {
freecamS.getParent().setBackground(themeBtnClicked);
freecamS.setText(tohtml(freecamS.getText(),true));
}
} else {
freecamSon = false;
disableCam();
if (!freecamSon) {
freecamS.getParent().setBackground(themeBtnNotClicked);
freecamS.setText(tohtml(freecamS.getText(),false));
} else {
freecamS.getParent().setBackground(themeBtnClicked);
freecamS.setText(tohtml(freecamS.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Fly around without player moving. Permission to use by TimmYCode."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(freecamS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!freecamSon) {
freecamS.getParent().setBackground(themeBtnNotClicked);
freecamS.setText(tohtml(freecamS.getText(),false));
} else {
freecamS.getParent().setBackground(themeBtnClicked);
freecamS.setText(tohtml(freecamS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(longjumpicon, 0), 0, android.util.Base64.decode(longjumpicon, 0).length)));
}var longjumpswitch = new android.widget.TextView(ctx);
longjumpswitch.setText("  " + "Long Jump");
longjumpswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
longjumpswitch.getLayoutParams().width = switch_width;
longjumpswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
longjumpswitch.setTextColor(modTextColor); 
longjumpswitch.setTypeface(mcfont);
longjumpswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
longjumpswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!longjumpd) {
longjumps = true;savemod("Long Jump");
longjumpd = true;
if (!longjumpd) {
longjumpswitch.getParent().setBackground(themeBtnNotClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),false));
} else {
longjumpswitch.getParent().setBackground(themeBtnClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),true));
}
} else {
longjumps = false;
longjumpd = false;
if (!longjumpd) {
longjumpswitch.getParent().setBackground(themeBtnNotClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),false));
} else {
longjumpswitch.getParent().setBackground(themeBtnClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Jump far"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(longjumpswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!longjumpd) {
longjumpswitch.getParent().setBackground(themeBtnNotClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),false));
} else {
longjumpswitch.getParent().setBackground(themeBtnClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(jumprunicon, 0), 0, android.util.Base64.decode(jumprunicon, 0).length)));
}var jumpsprintswitch = new android.widget.TextView(ctx);
jumpsprintswitch.setText("  " + "B-Hop");
jumpsprintswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
jumpsprintswitch.getLayoutParams().width = switch_width;
jumpsprintswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
jumpsprintswitch.setTextColor(modTextColor); 
jumpsprintswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
jumpsprintswitch.setTypeface(mcfont);
jumpsprintswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!jumpsprintd) {
jumpsprints = true;
jumpsprintd = true;savemod("B-Hop");
if (!jumpsprintd) {
jumpsprintswitch.getParent().setBackground(themeBtnNotClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),false));
} else {
jumpsprintswitch.getParent().setBackground(themeBtnClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),true));
}
} else {
jumpsprints = false;
jumpsprintd = false;
if (!jumpsprintd) {
jumpsprintswitch.getParent().setBackground(themeBtnNotClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),false));
} else {
jumpsprintswitch.getParent().setBackground(themeBtnClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sprint and jumping at the same time"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(jumpsprintswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!jumpsprintd) {
jumpsprintswitch.getParent().setBackground(themeBtnNotClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),false));
} else {
jumpsprintswitch.getParent().setBackground(themeBtnClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(boosticon, 0), 0, android.util.Base64.decode(boosticon, 0).length)));
}var booKbS = new android.widget.TextView(ctx);
booKbS.setText("  " + "Boost KB");
booKbS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
booKbS.getLayoutParams().width = switch_width;
booKbS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
booKbS.setTextColor(modTextColor); 
booKbS.setGravity(android.view.Gravity.CENTER_VERTICAL);
booKbS.setTypeface(mcfont);
booKbS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!boostKBBo) {
boostKBBo=true;
showBoost();savemod("Boost Keybind");
if (!boostKBBo) {
booKbS.getParent().setBackground(themeBtnNotClicked);
booKbS.setText(tohtml(booKbS.getText(),false));
} else {
booKbS.getParent().setBackground(themeBtnClicked);
booKbS.setText(tohtml(booKbS.getText(),true));
}
} else {
boostKBBo = false;
GUIboost.dismiss();
if (!boostKBBo) {
booKbS.getParent().setBackground(themeBtnNotClicked);
booKbS.setText(tohtml(booKbS.getText(),false));
} else {
booKbS.getParent().setBackground(themeBtnClicked);
booKbS.setText(tohtml(booKbS.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Boost forward"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(booKbS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!boostKBBo) {
booKbS.getParent().setBackground(themeBtnNotClicked);
booKbS.setText(tohtml(booKbS.getText(),false));
} else {
booKbS.getParent().setBackground(themeBtnClicked);
booKbS.setText(tohtml(booKbS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(mgcicon, 0), 0, android.util.Base64.decode(mgcicon, 0).length)));
}var mgcS = new android.widget.TextView(ctx);
mgcS.setText("  " + "Magic Carpet");
mgcS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
mgcS.getLayoutParams().width = switch_width;
mgcS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
mgcS.setTextColor(modTextColor); 
mgcS.setTypeface(mcfont);
mgcS.setGravity(android.view.Gravity.CENTER_VERTICAL);
mgcS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!magiccarpetParent) {
magiccarpetParent = true;
magiccarpets=true;savemod("Magic Carpet");
showMGCBtn();
if (!magiccarpetParent) {
mgcS.getParent().setBackground(themeBtnNotClicked);
mgcS.setText(tohtml(mgcS.getText(),false));
} else {
mgcS.getParent().setBackground(themeBtnClicked);
mgcS.setText(tohtml(mgcS.getText(),true));
}
} else {
magiccarpetParent = false;
GUImgc.dismiss();magiccarpets=false;
if (!magiccarpetParent) {
mgcS.getParent().setBackground(themeBtnNotClicked);
mgcS.setText(tohtml(mgcS.getText(),false));
} else {
mgcS.getParent().setBackground(themeBtnClicked);
mgcS.setText(tohtml(mgcS.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Walk around on a carpet"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(mgcS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!magiccarpetParent) {
mgcS.getParent().setBackground(themeBtnNotClicked);
mgcS.setText(tohtml(mgcS.getText(),false));
} else {
mgcS.getParent().setBackground(themeBtnClicked);
mgcS.setText(tohtml(mgcS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(autobridgeicon, 0), 0, android.util.Base64.decode(autobridgeicon, 0).length)));
}var autoBridges = new android.widget.TextView(ctx);
autoBridges.setText("  " + "Scaffold");
autoBridges.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
autoBridges.getLayoutParams().width = switch_width;
autoBridges.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
autoBridges.setTextColor(modTextColor); 
autoBridges.setGravity(android.view.Gravity.CENTER_VERTICAL);
autoBridges.setTypeface(mcfont);
autoBridges.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!autoBridged) {
autoBridgess = true;
autoBridged = true;savemod("Scaffold");
showScafBtn();
if (!autoBridged) {
autoBridges.getParent().setBackground(themeBtnNotClicked);
autoBridges.setText(tohtml(autoBridges.getText(),false));
} else {
autoBridges.getParent().setBackground(themeBtnClicked);
autoBridges.setText(tohtml(autoBridges.getText(),true));
}
} else {
autoBridgess = false;
autoBridged = false;
GUIscaf.dismiss();
if (!autoBridged) {
autoBridges.getParent().setBackground(themeBtnNotClicked);
autoBridges.setText(tohtml(autoBridges.getText(),false));
} else {
autoBridges.getParent().setBackground(themeBtnClicked);
autoBridges.setText(tohtml(autoBridges.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Builds a bridge underneath you."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(autoBridges);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!autoBridged) {
autoBridges.getParent().setBackground(themeBtnNotClicked);
autoBridges.setText(tohtml(autoBridges.getText(),false));
} else {
autoBridges.getParent().setBackground(themeBtnClicked);
autoBridges.setText(tohtml(autoBridges.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(autobridgeicon, 0), 0, android.util.Base64.decode(autobridgeicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText(' Scaffold ID');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
bridgePopup();savemod("Scaffold ID");
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Change Auto Bridge block"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bridgeicon, 0), 0, android.util.Base64.decode(bridgeicon, 0).length)));
}var fastbridgesw = new android.widget.TextView(ctx);
fastbridgesw.setText("  " + "Quick Bridge");
fastbridgesw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fastbridgesw.getLayoutParams().width = switch_width;
fastbridgesw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fastbridgesw.setTextColor(modTextColor); 
fastbridgesw.setTypeface(mcfont);
fastbridgesw.setGravity(android.view.Gravity.CENTER_VERTICAL);
fastbridgesw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!fastbridger) {
fastbridger = true;savemod("Quick Bridge");
if (!fastbridger) {
fastbridgesw.getParent().setBackground(themeBtnNotClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),false));
} else {
fastbridgesw.getParent().setBackground(themeBtnClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),true));
}
} else {
fastbridger = false;
if (!fastbridger) {
fastbridgesw.getParent().setBackground(themeBtnNotClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),false));
} else {
fastbridgesw.getParent().setBackground(themeBtnClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Quickly build bridges or pillars."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fastbridgesw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!fastbridger) {
fastbridgesw.getParent().setBackground(themeBtnNotClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),false));
} else {
fastbridgesw.getParent().setBackground(themeBtnClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(jesusicon, 0), 0, android.util.Base64.decode(jesusicon, 0).length)));
}var jesus = new android.widget.TextView(ctx);
jesus.setText("  " + "Jesus");
jesus.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
jesus.getLayoutParams().width = switch_width;
jesus.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
jesus.setTextColor(modTextColor); 
jesus.setGravity(android.view.Gravity.CENTER_VERTICAL);
jesus.setTypeface(mcfont);
jesus.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!jesused) {
jesuss = true;
jesused = true;savemod("Jesus");
if (!jesused) {
jesus.getParent().setBackground(themeBtnNotClicked);
jesus.setText(tohtml(jesus.getText(),false));
} else {
jesus.getParent().setBackground(themeBtnClicked);
jesus.setText(tohtml(jesus.getText(),true));
}
} else {
jesuss = false;
jesused = false;
if (!jesused) {
jesus.getParent().setBackground(themeBtnNotClicked);
jesus.setText(tohtml(jesus.getText(),false));
} else {
jesus.getParent().setBackground(themeBtnClicked);
jesus.setText(tohtml(jesus.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Walk on water"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(jesus);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!jesused) {
jesus.getParent().setBackground(themeBtnNotClicked);
jesus.setText(tohtml(jesus.getText(),false));
} else {
jesus.getParent().setBackground(themeBtnClicked);
jesus.setText(tohtml(jesus.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(smoothjesusicon, 0), 0, android.util.Base64.decode(smoothjesusicon, 0).length)));
}var smoothjesus = new android.widget.TextView(ctx);
smoothjesus.setText("  " + "Smooth Jesus");
smoothjesus.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
smoothjesus.getLayoutParams().width = switch_width;
smoothjesus.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
smoothjesus.setTextColor(modTextColor); 
smoothjesus.setGravity(android.view.Gravity.CENTER_VERTICAL);
smoothjesus.setTypeface(mcfont);
smoothjesus.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!smoothjesusd) {
smoothjesuss = true;savemod("Smooth Jesus");
smoothjesusd = true;
smoothjesus.getParent().setBackground(themeBtnClicked);
smoothjesus.setText(tohtml(smoothjesus.getText(),true));
} else {
smoothjesuss = false;
smoothjesusd = false;
smoothjesus.getParent().setBackground(themeBtnNotClicked);
smoothjesus.setText(tohtml(smoothjesus.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Walk on water smoother, sometimes hard to exit water unlike other Jesus hack"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(smoothjesus);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!smoothjesusd) {
smoothjesus.getParent().setBackground(themeBtnNotClicked);
smoothjesus.setText(tohtml(smoothjesus.getText(),false));
} else {
smoothjesus.getParent().setBackground(themeBtnClicked);
smoothjesus.setText(tohtml(smoothjesus.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(jetskiicon, 0), 0, android.util.Base64.decode(jetskiicon, 0).length)));
}var jetskisswitch = new android.widget.TextView(ctx);
jetskisswitch.setText("  " + "Jet Ski");
jetskisswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
jetskisswitch.getLayoutParams().width = switch_width;
jetskisswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
jetskisswitch.setTextColor(modTextColor); 
jetskisswitch.setTypeface(mcfont);
jetskisswitch.setTextSize(switchfontsize);
jetskisswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!jetskisd) {
jetskiss = true;
jetskisd = true;savemod("Jet Ski");
if (!jetskisd) {
jetskisswitch.getParent().setBackground(themeBtnNotClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),false));
} else {
jetskisswitch.getParent().setBackground(themeBtnClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),true));
}
} else {
jetskiss = false;
jetskisd = false;
if (!jetskisd) {
jetskisswitch.getParent().setBackground(themeBtnNotClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),false));
} else {
jetskisswitch.getParent().setBackground(themeBtnClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Walk on water and go fast"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(jetskisswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!jetskisd) {
jetskisswitch.getParent().setBackground(themeBtnNotClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),false));
} else {
jetskisswitch.getParent().setBackground(themeBtnClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(portalicon, 0), 0, android.util.Base64.decode(portalicon, 0).length)));
}var taptpswitch = new android.widget.TextView(ctx);
taptpswitch.setText("  " + "Tap TP");
taptpswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
taptpswitch.getLayoutParams().width = switch_width;
taptpswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
taptpswitch.setTextColor(modTextColor); 
taptpswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
taptpswitch.setTypeface(mcfont);
taptpswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!taptpswitchd) {
taptpswitchs = true;
taptpswitchd = true;savemod("Tap TP");
if (!taptpswitchd) {
taptpswitch.getParent().setBackground(themeBtnNotClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),false));
} else {
taptpswitch.getParent().setBackground(themeBtnClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),true));
}
} else {
taptpswitchs = false;
taptpswitchd = false;
if (!taptpswitchd) {
taptpswitch.getParent().setBackground(themeBtnNotClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),false));
} else {
taptpswitch.getParent().setBackground(themeBtnClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleport anywhere you look"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(taptpswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!taptpswitchd) {
taptpswitch.getParent().setBackground(themeBtnNotClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),false));
} else {
taptpswitch.getParent().setBackground(themeBtnClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(booticon, 0), 0, android.util.Base64.decode(booticon, 0).length)));
}var potion = new android.widget.TextView(ctx);
potion.setText("  " + "No Fall Damage");
potion.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
potion.getLayoutParams().width = switch_width;
potion.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
potion.setTextColor(modTextColor); 
potion.setTypeface(mcfont);
potion.setGravity(android.view.Gravity.CENTER_VERTICAL);
potion.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!potioned) {
potions = true;
potioned = true;savemod("No Fall Damage");
if (!potioned) {
potion.getParent().setBackground(themeBtnNotClicked);
potion.setText(tohtml(potion.getText(),false));
} else {
potion.getParent().setBackground(themeBtnClicked);
potion.setText(tohtml(potion.getText(),true));
}
} else {
potions = false;
potioned = false;
if (!potioned) {
potion.getParent().setBackground(themeBtnNotClicked);
potion.setText(tohtml(potion.getText(),false));
} else {
potion.getParent().setBackground(themeBtnClicked);
potion.setText(tohtml(potion.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Can't take fall damage"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(potion);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!potioned) {
potion.getParent().setBackground(themeBtnNotClicked);
potion.setText(tohtml(potion.getText(),false));
} else {
potion.getParent().setBackground(themeBtnClicked);
potion.setText(tohtml(potion.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(phaseicon, 0), 0, android.util.Base64.decode(phaseicon, 0).length)));
}var phaseBlock = new android.widget.TextView(ctx);
phaseBlock.setText("  " + "Phase");
phaseBlock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
phaseBlock.getLayoutParams().width = switch_width;
phaseBlock.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
phaseBlock.setTextColor(modTextColor); 
phaseBlock.setTypeface(mcfont);
phaseBlock.setGravity(android.view.Gravity.CENTER_VERTICAL);
phaseBlock.setTextSize(switchfontsize);
phaseBlock.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!phaseBlocksd) {
phaseBlockss = true;
phaseBlocksd = true;savemod("Phase");
if (!phaseBlocksd) {
phaseBlock.getParent().setBackground(themeBtnNotClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),false));
} else {
phaseBlock.getParent().setBackground(themeBtnClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),true));
}
} else {
phaseBlockss = false;
phaseBlocksd = false;
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
if (!phaseBlocksd) {
phaseBlock.getParent().setBackground(themeBtnNotClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),false));
} else {
phaseBlock.getParent().setBackground(themeBtnClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Crouch and glide through any block"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(phaseBlock);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!phaseBlocksd) {
phaseBlock.getParent().setBackground(themeBtnNotClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),false));
} else {
phaseBlock.getParent().setBackground(themeBtnClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(clipicon, 0), 0, android.util.Base64.decode(clipicon, 0).length)));
}var clipBlock = new android.widget.TextView(ctx);
clipBlock.setText("  " + "Noclip");
clipBlock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
clipBlock.getLayoutParams().width = switch_width;
clipBlock.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
clipBlock.setTextColor(modTextColor); 
clipBlock.setTypeface(mcfont);
clipBlock.setGravity(android.view.Gravity.CENTER_VERTICAL);
clipBlock.setTextSize(switchfontsize);
clipBlock.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!clipsBls) {
clipsBls = true;
showNoclip();savemod("Noclip");
if (!clipsBls) {
clipBlock.getParent().setBackground(themeBtnNotClicked);
clipBlock.setText(tohtml(clipBlock.getText(),false));
} else {
clipBlock.getParent().setBackground(themeBtnClicked);
clipBlock.setText(tohtml(clipBlock.getText(),true));
}
} else {
clipsBls = false;
clipBtn = false;
GUIclip.dismiss();
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
if (!clipsBls) {
clipBlock.getParent().setBackground(themeBtnNotClicked);
clipBlock.setText(tohtml(clipBlock.getText(),false));
} else {
clipBlock.getParent().setBackground(themeBtnClicked);
clipBlock.setText(tohtml(clipBlock.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Go through any block"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(clipBlock);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!clipsBls) {
clipBlock.getParent().setBackground(themeBtnNotClicked);
clipBlock.setText(tohtml(clipBlock.getText(),false));
} else {
clipBlock.getParent().setBackground(themeBtnClicked);
clipBlock.setText(tohtml(clipBlock.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(clipicon, 0), 0, android.util.Base64.decode(clipicon, 0).length)));
}var clip2 = new android.widget.TextView(ctx);
clip2.setText("  " + "NoClip w/o blocks");
clip2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
clip2.getLayoutParams().width = switch_width;
clip2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
clip2.setTextColor(modTextColor); 
clip2.setTypeface(mcfont);
clip2.setTextSize(switchfontsize);
clip2.setGravity(android.view.Gravity.CENTER_VERTICAL);
clip2.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!noclip2s) {
noclip2s = true;
enableClip();savemod("Noclip w/o Blocks");
Player.setFlying(true);
alertPopup("XRAY","Disable and reenable SMOOTH LIGHTING in settings","OKAY");
if (!noclip2s) {
clip2.getParent().setBackground(themeBtnNotClicked);
clip2.setText(tohtml(clip2.getText(),false));
} else {
clip2.getParent().setBackground(themeBtnClicked);
clip2.setText(tohtml(clip2.getText(),true));
}
} else {
noclip2s = false;
disableClip();
alertPopup("XRAY","Disable and reenable SMOOTH LIGHTING in settings","OKAY");
if (!noclip2s) {
clip2.getParent().setBackground(themeBtnNotClicked);
clip2.setText(tohtml(clip2.getText(),false));
} else {
clip2.getParent().setBackground(themeBtnClicked);
clip2.setText(tohtml(clip2.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Go through blocks - Much more dangerous than the original NoClip"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(clip2);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!noclip2s) {
clip2.getParent().setBackground(themeBtnNotClicked);
clip2.setText(tohtml(clip2.getText(),false));
} else {
clip2.getParent().setBackground(themeBtnClicked);
clip2.setText(tohtml(clip2.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(laddericon, 0), 0, android.util.Base64.decode(laddericon, 0).length)));
}var betterlad = new android.widget.TextView(ctx);
betterlad.setText("  " + "Fast Ladders");
betterlad.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
betterlad.getLayoutParams().width = switch_width;
betterlad.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
betterlad.setTextColor(modTextColor);
betterlad.setTypeface(mcfont);
betterlad.setTextSize(switchfontsize);
betterlad.getBackground().setAlpha(130);
betterlad.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!betterladsd) {
betterladss = true;
betterladsd = true;savemod("Fast Ladders");
if (!betterladsd) {
betterlad.getParent().setBackground(themeBtnNotClicked);
betterlad.setText(tohtml(betterlad.getText(),false));
} else {
betterlad.getParent().setBackground(themeBtnClicked);
betterlad.setText(tohtml(betterlad.getText(),true));
}
} else {
betterladss = false;
betterladsd = false;
if (!betterladsd) {
betterlad.getParent().setBackground(themeBtnNotClicked);
betterlad.setText(tohtml(betterlad.getText(),false));
} else {
betterlad.getParent().setBackground(themeBtnClicked);
betterlad.setText(tohtml(betterlad.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Climb ladders super fast"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(betterlad);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!betterladsd) {
betterlad.getParent().setBackground(themeBtnNotClicked);
betterlad.setText(tohtml(betterlad.getText(),false));
} else {
betterlad.getParent().setBackground(themeBtnClicked);
betterlad.setText(tohtml(betterlad.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(paintingicon, 0), 0, android.util.Base64.decode(paintingicon, 0).length)));
}var achnksw = new android.widget.TextView(ctx);
achnksw.setText("  " + "AntiCrashChunk");
achnksw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
achnksw.getLayoutParams().width = switch_width;
achnksw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
achnksw.setTextColor(modTextColor); 
achnksw.setTypeface(mcfont);
achnksw.setTextSize(switchfontsize);
achnksw.setGravity(android.view.Gravity.CENTER_VERTICAL);
achnksw.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!acrashchnks) {
acrashchnks = true;
savemod("Anti Crash Chunk");
achnksw.getParent().setBackground(themeBtnClicked);
achnksw.setText(tohtml(achnksw.getText(),true));
} else {
acrashchnks = false;
achnksw.getParent().setBackground(themeBtnNotClicked);
achnksw.setText(tohtml(achnksw.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enable before entering a world with crash chunks to be teleported away instead of crashing");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(achnksw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!acrashchnks) {
achnksw.getParent().setBackground(themeBtnNotClicked);
achnksw.setText(tohtml(achnksw.getText(),false));
} else {
achnksw.getParent().setBackground(themeBtnClicked);
achnksw.setText(tohtml(achnksw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(leadicon, 0), 0, android.util.Base64.decode(leadicon, 0).length)));
}var pfSw = new android.widget.TextView(ctx);
pfSw.setText("  " + "Player Follower");
pfSw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
pfSw.getLayoutParams().width = switch_width;
pfSw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
pfSw.setTextColor(modTextColor); 
pfSw.setGravity(android.view.Gravity.CENTER_VERTICAL);
pfSw.setTypeface(mcfont);
pfSw.setTextSize(switchfontsize);
pfSw.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!pfsd) {
pfss = true;savemod("Player Follower");
pfsd = true;
pfSw.getParent().setBackground(themeBtnClicked);
pfSw.setText(tohtml(pfSw.getText(),true));
} else {
pfss = false;
pfsd = false;
pfSw.getParent().setBackground(themeBtnNotClicked);
pfSw.setText(tohtml(pfSw.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets your coordinates 150 blocks above the nearest player, they can't see you from below."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(pfSw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!pfsd) {
pfSw.getParent().setBackground(themeBtnNotClicked);
pfSw.setText(tohtml(pfSw.getText(),false));
} else {
pfSw.getParent().setBackground(themeBtnClicked);
pfSw.setText(tohtml(pfSw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(leadicon, 0), 0, android.util.Base64.decode(leadicon, 0).length)));
}var disseek = new android.widget.SeekBar(ctx);
disseek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
disseek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
disseek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
disseek.getLayoutParams().width = switch_width;
disseek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
disseek.setMax(220);
disseek.getBackground().setAlpha(255);
disseek.setProgress(dispro);
disseek.setBackground(xbgGS);
disseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {dispro = disseek.getProgress();
betToast("Distance: " + dispro);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts range to follow people vertically");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(disseek);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(launchicon, 0), 0, android.util.Base64.decode(launchicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Launch");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Launch");
setVelY(Player.getEntity(), 8)
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Launches you into the sky"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(reviveicon, 0), 0, android.util.Base64.decode(reviveicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  TP to Deathpoint");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("TP to Deathpoint");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if(deathX!=0&deathY!=0&deathZ!=0){
setPosition(getPlayerEnt(), deathX, deathY + 0.3, deathZ);}else{betToast(langMsg[language]["You haven't died yet!"])}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Teleports to where you died");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(teleporticon, 0), 0, android.util.Base64.decode(teleporticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  TP to Nearest");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("TP to Nearest");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
var ent = getNearestEntity(1000);
if(Entity.getX(ent)!=0&Entity.getY(ent)!=-2&Entity.getZ(ent)!=-1){
setPosition(getPlayerEnt(), Entity.getX(ent), Entity.getY(ent) + 0.3, Entity.getZ(ent) - 0.2);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports to the nearest person within range"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(teleporticon, 0), 0, android.util.Base64.decode(teleporticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Player Teleports");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Player Teleports");
openTeleportList();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports to the nearest person within range"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(teleporticon, 0), 0, android.util.Base64.decode(teleporticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Teleport");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
menuC.dismiss();
savemod("Teleport");
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
GUIclose.dismiss();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
teleportation();
if (colormychatd == true) {
GUIs.dismiss();
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleport anywhere"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(gamespeedicon, 0), 0, android.util.Base64.decode(gamespeedicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Default Gamespeed");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
gamespeedset = 20;
savemod("Default Gamespeed");
ModPE.setGameSpeed(gamespeedset);
betToast(langMsg[language]["Speed: Default"]);
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Resets gamespeed");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(gamespeedicon, 0), 0, android.util.Base64.decode(gamespeedicon, 0).length)));
}var gamespeed = new android.widget.SeekBar(ctx);
gamespeed.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
gamespeed.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
gamespeed.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
gamespeed.getLayoutParams().width = switch_width;
gamespeed.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
gamespeed.setMax(120);
gamespeed.getBackground().setAlpha(130);
gamespeed.setProgress(gamespeedset);
gamespeed.setBackground(xbgGS);
gamespeed.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
gamespeedset = gamespeed.getProgress();
ModPE.setGameSpeed(gamespeedset);
betToast(langMsg[language]["Speed: "] + gamespeedset);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts gamespeed to move fast");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(gamespeed);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var addX = false;
var addZ = false;
var subtractX = false;
var subtractZ = false;
var way = "x+";
var thous = 1000;
var currentX = 0;
var currentZ = 0;
var goalX = 0;
var goalZ = 0;
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Quick TP"]);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextSize(titleSize);
button.setBackground(title);
button.setTextColor(modTextColor);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var hitboxbox = new android.widget.LinearLayout(activity);
hitboxbox.setBackground(themeBtnNotClicked);
hitboxbox.setOrientation(1);
var button = new android.widget.Button(ctx);
button.setText("X: +1k");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = switchWidth / tpQuickwidth;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())+1000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("+10k");
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = switchWidth / tpQuickwidth;
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setTextSize(btntextsize);
button2.setBackground(themeBtnNotClicked);
button2.setTypeface(mcfont);
button2.setTextSize(switchfontsize);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())+10000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));
var button3 = new android.widget.Button(ctx);
button3.setText("+100k");
button3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button3.getLayoutParams().width = switchWidth / tpQuickwidth;
button3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button3.setTextColor(modTextColor);
button3.setTextSize(btntextsize);
button3.setBackground(themeBtnNotClicked);
button3.setTypeface(mcfont);
button3.setTextSize(switchfontsize);
button3.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())+100000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));

slayout1.addView(button);
slayout1.addView(button2);
slayout1.addView(button3);
hitboxbox.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var button = new android.widget.Button(ctx);
button.setText("X: -1k");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = switchWidth / tpQuickwidth;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())-1000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("-10k");
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = switchWidth / tpQuickwidth;
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setTextSize(btntextsize);
button2.setBackground(themeBtnNotClicked);
button2.setTypeface(mcfont);
button2.setTextSize(switchfontsize);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())-10000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));
var button3 = new android.widget.Button(ctx);
button3.setText("-100k");
button3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button3.getLayoutParams().width = switchWidth / tpQuickwidth;
button3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button3.setTextColor(modTextColor);
button3.setTextSize(btntextsize);
button3.setBackground(themeBtnNotClicked);
button3.setTypeface(mcfont);
button3.setTextSize(switchfontsize);
button3.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())-100000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));

slayout1.addView(button);
slayout1.addView(button2);
slayout1.addView(button3);
hitboxbox.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var button = new android.widget.Button(ctx);
button.setText("Z: +1k");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = switchWidth / tpQuickwidth;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())+1000);
}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("+10k");
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = switchWidth / tpQuickwidth;
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setTextSize(btntextsize);
button2.setBackground(themeBtnNotClicked);
button2.setTypeface(mcfont);
button2.setTextSize(switchfontsize);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())+10000);
}
}));
var button3 = new android.widget.Button(ctx);
button3.setText("+100k");
button3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button3.getLayoutParams().width = switchWidth / tpQuickwidth;
button3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button3.setTextColor(modTextColor);
button3.setTextSize(btntextsize);
button3.setBackground(themeBtnNotClicked);
button3.setTypeface(mcfont);
button3.setTextSize(switchfontsize);
button3.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())+100000);
}
}));

slayout1.addView(button);
slayout1.addView(button2);
slayout1.addView(button3);
hitboxbox.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var button = new android.widget.Button(ctx);
button.setText("Z: -1k");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = switchWidth / tpQuickwidth;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())-1000);
}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("-10k");
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = switchWidth / tpQuickwidth;
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setTextSize(btntextsize);
button2.setBackground(themeBtnNotClicked);
button2.setTypeface(mcfont);
button2.setTextSize(switchfontsize);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())-10000);
}
}));
var button3 = new android.widget.Button(ctx);
button3.setText("-100k");
button3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button3.getLayoutParams().width = switchWidth / tpQuickwidth;
button3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button3.setTextColor(modTextColor);
button3.setTextSize(btntextsize);
button3.setBackground(themeBtnNotClicked);
button3.setTypeface(mcfont);
button3.setTextSize(switchfontsize);
button3.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())-100000);
}
}));

slayout1.addView(button);
slayout1.addView(button2);
slayout1.addView(button3);
hitboxbox.addView(slayout1);
menuLayoutw.addView(hitboxbox);


changeGUI5 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI5.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI5.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI5.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI5.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI5.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI5.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI5.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI5.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed5=true;
}
}
}))
};
/*Misc*/
function openMenu6() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Misc Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
button.setBackground(title);
menuLayoutw.addView(button);

function showStopRideBtn() {
let moving7 = false;
let dx7 = 0;
let dy7 = 0;
let mPosX7 = 100;
let mPosY7 = 0;
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);

layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Go Back");
button.setTextSize(13);
button.setTextColor(modTextColor);
button.setBackground(of);
/*  button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(scope, 0) , 0, android.util.Base64.decode(scope, 0).length)));
button.setBackground(of);*/

button.getBackground().setAlpha(130);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg){
ModPE.setCamera(getPlayerEnt());
taptoseed = false;
GUIri.dismiss();

}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function () {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
.vibrate(60);
moving7 = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function (view, motionEvent) {
try {
if(!moving7) return false;
switch(motionEvent.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx7 = mPosX7 - motionEvent.getRawX();
dy7 = mPosY7 - motionEvent.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX7 = (motionEvent.getRawX() + dx7);
mPosY7 = (motionEvent.getRawY() + dy7);
GUIri.update(mPosX7, mPosY7, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving7 = false;
break;
}
} catch(e) {
}
return true;
}
}));

layout.addView(button);

GUIri = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIri.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIri.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, 0, 470);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(spamicon, 0), 0, android.util.Base64.decode(spamicon, 0).length)));
}var safe = new android.widget.TextView(ctx);
safe.setText("  " + "Spam");
safe.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
safe.getLayoutParams().width = switch_width;
safe.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
safe.setTextColor(modTextColor);
safe.setGravity(Gravity.CENTER_VERTICAL);
safe.setTypeface(mcfont);
safe.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!safed) {
safes = true;
safed = true;savemod("Spam");
if (!safed) {
safe.getParent().setBackground(themeBtnNotClicked);
safe.setText(tohtml(safe.getText(),false));
} else {
safe.getParent().setBackground(themeBtnClicked);
safe.setText(tohtml(safe.getText(),true));
}
} else {
safes = false;
safed = false;
if (!safed) {
safe.getParent().setBackground(themeBtnNotClicked);
safe.setText(tohtml(safe.getText(),false));
} else {
safe.getParent().setBackground(themeBtnClicked);
safe.setText(tohtml(safe.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sends hundreds of messages to the server at once"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(safe);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!safed) {
safe.getParent().setBackground(themeBtnNotClicked);
safe.setText(tohtml(safe.getText(),false));
} else {
safe.getParent().setBackground(themeBtnClicked);
safe.setText(tohtml(safe.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(spamicon, 0), 0, android.util.Base64.decode(spamicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Custom Spam');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
spamPopup();savemod("Custom Spam");
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Edit message to spam"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(spamicon, 0), 0, android.util.Base64.decode(spamicon, 0).length)));
}var antispS = new android.widget.TextView(ctx);
antispS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
antispS.getLayoutParams().width = switch_width;
antispS.setText("  " + "Anti Spam");
antispS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
antispS.setTextColor(modTextColor);
antispS.setGravity(Gravity.CENTER_VERTICAL);
antispS.setTypeface(mcfont);
antispS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!antispammer) {
antispammer = true;savemod("Anti Spam");
antispS.getParent().setBackground(themeBtnClicked);
antispS.setText(tohtml(antispS.getText(),true));
} else {
antispammer = false;
antispS.getParent().setBackground(themeBtnNotClicked);
antispS.setText(tohtml(antispS.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Prevents spam/duplicated messages from being shown"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(antispS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!antispammer) {
antispS.getParent().setBackground(themeBtnNotClicked);
antispS.setText(tohtml(antispS.getText(),false));
} else {
antispS.getParent().setBackground(themeBtnClicked);
antispS.setText(tohtml(antispS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(worldicon, 0), 0, android.util.Base64.decode(worldicon, 0).length)));
}var ctla = new android.widget.TextView(ctx);
ctla.setText("  " + "Chat Translator");
ctla.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
ctla.getLayoutParams().width = switch_width-icon_dimensions;
ctla.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ctla.setTextColor(modTextColor);
ctla.setTypeface(mcfont);
ctla.setTextSize(switchfontsize);
ctla.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!chatTranslator) {
chatTranslator=true;openTranslator();savemod("Chat Translator");
if (!chatTranslator) {
ctla.getParent().setBackground(themeBtnNotClicked);
ctla.setText(tohtml(ctla.getText(),false));
} else {
ctla.getParent().setBackground(themeBtnClicked);
ctla.setText(tohtml(ctla.getText(),true));
}
} else {
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
chatTranslator=false;translateWindow.dismiss();
}
catch(err){}}}));
if (!chatTranslator) {
ctla.getParent().setBackground(themeBtnNotClicked);
ctla.setText(tohtml(ctla.getText(),false));
} else {
ctla.getParent().setBackground(themeBtnClicked);
ctla.setText(tohtml(ctla.getText(),true));
}
}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(ctla);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;

editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatlangedit();
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);if (!chatTranslator) {
ctla.getParent().setBackground(themeBtnNotClicked);
ctla.setText(tohtml(ctla.getText(),false));
} else {
ctla.getParent().setBackground(themeBtnClicked);
ctla.setText(tohtml(ctla.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(ironicon, 0), 0, android.util.Base64.decode(ironicon, 0).length)));
}var fiSw = new android.widget.TextView(ctx);
fiSw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fiSw.getLayoutParams().width = switch_width;
fiSw.setText("  " + "Foil Items");
fiSw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fiSw.setTextColor(modTextColor);
fiSw.setTypeface(mcfont);
fiSw.setGravity(Gravity.CENTER_VERTICAL);
fiSw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!foilits) {
foilits = true;savemod("Foil Items");
foilitems();
if(fasteatd){enableEat();}else{disableEat();}
fiSw.getParent().setBackground(themeBtnClicked);
fiSw.setText(tohtml(fiSw.getText(),true));
} else {
foilits = false;
unfoilitems();
if(fasteatd){enableEat();}else{disableEat();}
fiSw.getParent().setBackground(themeBtnNotClicked);
fiSw.setText(tohtml(fiSw.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Makes items look enchanted");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fiSw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!foilits) {
fiSw.getParent().setBackground(themeBtnNotClicked);
fiSw.setText(tohtml(fiSw.getText(),false));
} else {
fiSw.getParent().setBackground(themeBtnClicked);
fiSw.setText(tohtml(fiSw.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(stackicon, 0), 0, android.util.Base64.decode(stackicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Stackable Items');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
stackitems();savemod("Stackable Items");
alertPopup("Warning!","Some stacked items can disappear upon relogging","Okay");
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Makes items like swords stackable");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(cringeicon, 0), 0, android.util.Base64.decode(cringeicon, 0).length)));
}var codetalker = new android.widget.TextView(ctx);
codetalker.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
codetalker.getLayoutParams().width = switch_width;
codetalker.setText("  " + "Tricky Chat");
codetalker.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
codetalker.setTextColor(modTextColor);
codetalker.setTypeface(mcfont);
codetalker.setGravity(Gravity.CENTER_VERTICAL);
codetalker.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!codetalkered&&!instinctChat) {
codetalkers = true;savemod("Tricky Chat");
codetalkered = true;
if (!codetalkered) {
codetalker.getParent().setBackground(themeBtnNotClicked);
codetalker.setText(tohtml(codetalker.getText(),false));
} else {
codetalker.getParent().setBackground(themeBtnClicked);
codetalker.setText(tohtml(codetalker.getText(),true));
}
} else {
codetalkers = false;
codetalkered = false;
if (!codetalkered) {
codetalker.getParent().setBackground(themeBtnNotClicked);
codetalker.setText(tohtml(codetalker.getText(),false));
} else {
codetalker.getParent().setBackground(themeBtnClicked);
codetalker.setText(tohtml(codetalker.getText(),true));
}
}
if(instinctChat){
betToast(langMsg[language]["Disable Medium Encryption first"]);
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Makes messages trickier to read, but still readable"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(codetalker);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!codetalkered) {
codetalker.getParent().setBackground(themeBtnNotClicked);
codetalker.setText(tohtml(codetalker.getText(),false));
} else {
codetalker.getParent().setBackground(themeBtnClicked);
codetalker.setText(tohtml(codetalker.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(encrypticon, 0), 0, android.util.Base64.decode(encrypticon, 0).length)));
}var instincsW = new android.widget.TextView(ctx);
instincsW.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
instincsW.getLayoutParams().width = switch_width;
instincsW.setText("  " + "Encrypt Chat");
instincsW.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
instincsW.setTextColor(modTextColor);
instincsW.setTypeface(mcfont);
instincsW.setGravity(Gravity.CENTER_VERTICAL);
instincsW.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!instinctChat&&!codetalkered) {
instinctChat = true;
instincsW.getParent().setBackground(themeBtnClicked);
instincsW.setText(tohtml(instincsW.getText(),true));
savemod("Chat Encryption");
} else {
instinctChat = false;
instincsW.getParent().setBackground(themeBtnNotClicked);
instincsW.setText(tohtml(instincsW.getText(),false));
}
if(codetalkered){
betToast(langMsg[language]["Disable Lite Encryption first"]);
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Only people using Instinct can read your messages"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(instincsW);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!instinctChat) {
instincsW.getParent().setBackground(themeBtnNotClicked);
instincsW.setText(tohtml(instincsW.getText(),false));
} else {
instincsW.getParent().setBackground(themeBtnClicked);
instincsW.setText(tohtml(instincsW.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hideicon, 0), 0, android.util.Base64.decode(hideicon, 0).length)));
}var hidmes = new android.widget.TextView(ctx);
hidmes.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hidmes.getLayoutParams().width = switch_width;
hidmes.setText("  " + "Hide Menu");
hidmes.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hidmes.setTextColor(modTextColor);
hidmes.setGravity(Gravity.CENTER_VERTICAL);
hidmes.setTypeface(mcfont);
hidmes.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!hiddenMenu) {
hiddenMenu = true;savemod("Hide Menu");
GUI.dismiss();
betToast("Crouch and select first hotbar slot to open menu");
betToast("Crouch and select first hotbar slot to open menu");
if (!hiddenMenu) {
hidmes.getParent().setBackground(themeBtnNotClicked);
hidmes.setText(tohtml(hidmes.getText(),false));
} else {
hidmes.getParent().setBackground(themeBtnClicked);
hidmes.setText(tohtml(hidmes.getText(),true));
}
} else {
hiddenMenu = false;
showMenuBtn();
if (!hiddenMenu) {
hidmes.getParent().setBackground(themeBtnNotClicked);
hidmes.setText(tohtml(hidmes.getText(),false));
} else {
hidmes.getParent().setBackground(themeBtnClicked);
hidmes.setText(tohtml(hidmes.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Crouch and select first hotbar slot to open menu"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hidmes);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!hiddenMenu) {
hidmes.getParent().setBackground(themeBtnNotClicked);
hidmes.setText(tohtml(hidmes.getText(),false));
} else {
hidmes.getParent().setBackground(themeBtnClicked);
hidmes.setText(tohtml(hidmes.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(mobheadicon, 0), 0, android.util.Base64.decode(mobheadicon, 0).length)));
}var noffsw = new android.widget.TextView(ctx);
noffsw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
noffsw.getLayoutParams().width = switch_width;
noffsw.setText("  " + "No Offhand");
noffsw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
noffsw.setTextColor(modTextColor);
noffsw.setGravity(Gravity.CENTER_VERTICAL);
noffsw.setTypeface(mcfont);
noffsw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!nOffs) {
nOffs = true;savemod("No Offhand");
noffsw.getParent().setBackground(themeBtnClicked);
noffsw.setText(tohtml(noffsw.getText(),true));
} else {
nOffs = false;
noffsw.getParent().setBackground(themeBtnNotClicked);
noffsw.setText(tohtml(noffsw.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enable before entering world where you crash from having a player head in the offhand. Doesn't work for single player worlds");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(noffsw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!nOffs) {
noffsw.getParent().setBackground(themeBtnNotClicked);
noffsw.setText(tohtml(noffsw.getText(),false));
} else {
noffsw.getParent().setBackground(themeBtnClicked);
noffsw.setText(tohtml(noffsw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(enchanticon, 0), 0, android.util.Base64.decode(enchanticon, 0).length)));
}var spaenc = new android.widget.TextView(ctx);
spaenc.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
spaenc.getLayoutParams().width = switch_width;
spaenc.setText("  " + "32k Spam");
spaenc.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
spaenc.setTextColor(modTextColor);
spaenc.setGravity(Gravity.CENTER_VERTICAL);
spaenc.setTypeface(mcfont);
spaenc.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!spam2) {
spam2 = true;savemod("32k Spammer");
spaenc.getParent().setBackground(themeBtnClicked);
spaenc.setText(tohtml(spaenc.getText(),true));
} else {
spam2 = false;
spaenc.getParent().setBackground(themeBtnNotClicked);
spaenc.setText(tohtml(spaenc.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enable before entering world where you crash from having a player head in the offhand. Doesn't work for single player worlds");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(spaenc);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!spam2) {
spaenc.getParent().setBackground(themeBtnNotClicked);
spaenc.setText(tohtml(spaenc.getText(),false));
} else {
spaenc.getParent().setBackground(themeBtnClicked);
spaenc.setText(tohtml(spaenc.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(afkicon, 0), 0, android.util.Base64.decode(afkicon, 0).length)));
}var afks = new android.widget.TextView(ctx);
afks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
afks.getLayoutParams().width = switch_width;
afks.setText("  " + "AFK");
afks.setTextColor(modTextColor);
afks.setTypeface(mcfont);
afks.setGravity(Gravity.CENTER_VERTICAL);
afks.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!afked) {
afkss = true;
afked = true;savemod("AFK");
if (!afked) {
afks.getParent().setBackground(themeBtnNotClicked);
afks.setText(tohtml(afks.getText(),false));
} else {
afks.getParent().setBackground(themeBtnClicked);
afks.setText(tohtml(afks.getText(),true));
}
} else {
afkss = false;
afked = false;
if (!afked) {
afks.getParent().setBackground(themeBtnNotClicked);
afks.setText(tohtml(afks.getText(),false));
} else {
afks.getParent().setBackground(themeBtnClicked);
afks.setText(tohtml(afks.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Never get booted for AFK'ing"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(afks);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!afked) {
afks.getParent().setBackground(themeBtnNotClicked);
afks.setText(tohtml(afks.getText(),false));
} else {
afks.getParent().setBackground(themeBtnClicked);
afks.setText(tohtml(afks.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bedrockicon, 0), 0, android.util.Base64.decode(bedrockicon, 0).length)));
}var bedrockswit = new android.widget.TextView(ctx);
bedrockswit.setText("  " + "Break Bedrock");
bedrockswit.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
bedrockswit.getLayoutParams().width = switch_width;
bedrockswit.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
bedrockswit.setTextColor(modTextColor);
bedrockswit.setTypeface(mcfont); 
bedrockswit.setGravity(Gravity.CENTER_VERTICAL);
bedrockswit.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!bedrocke) {
bedrocke = true;savemod("Break Bedrock");
if (!bedrocke) {
bedrockswit.getParent().setBackground(themeBtnNotClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),false));
} else {
bedrockswit.getParent().setBackground(themeBtnClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),true));
}
} else {
bedrocke = false;
Block.setDestroyTime(7, -10);
Block.setDestroyTime(137, -10);
Block.setDestroyTime(188, -10);
Block.setDestroyTime(189, -10);
Block.setDestroyTime(209, -10);
Block.setDestroyTime(90, -10);
Block.setDestroyTime(119, -10);
Block.setDestroyTime(120, -10);
if (!bedrocke) {
bedrockswit.getParent().setBackground(themeBtnNotClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),false));
} else {
bedrockswit.getParent().setBackground(themeBtnClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Can break bedrock"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(bedrockswit);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!bedrocke) {
bedrockswit.getParent().setBackground(themeBtnNotClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),false));
} else {
bedrockswit.getParent().setBackground(themeBtnClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newhasteicon, 0), 0, android.util.Base64.decode(newhasteicon, 0).length)));
}var hastbs = new android.widget.TextView(ctx);
hastbs.setText("  " + "Haste Bypass");
hastbs.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hastbs.getLayoutParams().width = switch_width;
hastbs.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hastbs.setTextColor(modTextColor); 
hastbs.setGravity(Gravity.CENTER_VERTICAL);
hastbs.setTypeface(mcfont);
hastbs.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!hbS) {
hbS = true;
hasteBypass();
hastbs.getParent().setBackground(themeBtnClicked);
hastbs.setText(tohtml(hastbs.getText(),true));
savemod("Haste Bypass");
} else {
hbS = false;
resetHaste();
hastbs.getParent().setBackground(themeBtnNotClicked);
hastbs.setText(tohtml(hastbs.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets break time to .1, mine most blocks quickly"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hastbs);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!hbS) {
hastbs.getParent().setBackground(themeBtnNotClicked);
hastbs.setText(tohtml(hastbs.getText(),false));
} else {
hastbs.getParent().setBackground(themeBtnClicked);
hastbs.setText(tohtml(hastbs.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(swifticon, 0), 0, android.util.Base64.decode(swifticon, 0).length)));
}var sppedS = new android.widget.TextView(ctx);
sppedS.setText("  " + "Speed Bypass");
sppedS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
sppedS.getLayoutParams().width = switch_width;
sppedS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sppedS.setTextColor(modTextColor); 
sppedS.setTypeface(mcfont);
sppedS.setGravity(Gravity.CENTER_VERTICAL);
sppedS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!sbS) {
sbS = true;
speedBypass();
sppedS.getParent().setBackground(themeBtnClicked);
sppedS.setText(tohtml(sppedS.getText(),true));
savemod("Speed Bypass");
} else {
sbS = false;
resetSpeed();
sppedS.getParent().setBackground(themeBtnNotClicked);
sppedS.setText(tohtml(sppedS.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets friction to .1"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(sppedS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!sbS) {
sppedS.getParent().setBackground(themeBtnNotClicked);
sppedS.setText(tohtml(sppedS.getText(),false));
} else {
sppedS.getParent().setBackground(themeBtnClicked);
sppedS.setText(tohtml(sppedS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newnightvisionicon, 0), 0, android.util.Base64.decode(newnightvisionicon, 0).length)));
}var nvBs = new android.widget.TextView(ctx);
nvBs.setText("  " + "Night Vision Bypass");
nvBs.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nvBs.getLayoutParams().width = switch_width;
nvBs.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nvBs.setTextColor(modTextColor); 
nvBs.setGravity(Gravity.CENTER_VERTICAL);
nvBs.setTypeface(mcfont);
nvBs.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!nvS) {
nvS = true;
nightVisionBypass();
nvBs.getParent().setBackground(themeBtnClicked);
nvBs.setText(tohtml(nvBs.getText(),true));
savemod("Night Vision Bypass");
} else {
nvS = false;
resetNV();
nvBs.getParent().setBackground(themeBtnNotClicked);
nvBs.setText(tohtml(nvBs.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Makes all blocks bright"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nvBs);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!nvS) {
nvBs.getParent().setBackground(themeBtnNotClicked);
nvBs.setText(tohtml(nvBs.getText(),false));
} else {
nvBs.getParent().setBackground(themeBtnClicked);
nvBs.setText(tohtml(nvBs.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(buffzom, 0), 0, android.util.Base64.decode(buffzom, 0).length)));
}var zomSwi = new android.widget.TextView(ctx);
zomSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
zomSwi.getLayoutParams().width = switch_width;
zomSwi.setText("  " + "Zombie Mode");
zomSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
zomSwi.setTextColor(modTextColor); 
zomSwi.setGravity(Gravity.CENTER_VERTICAL);
zomSwi.setTypeface(mcfont);
zomSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!zomS) {
if(Server.getAddress()!=null){
zomS = true;
savemod("Zombie Mode");
openOverlayBlood();
zomSwi.getParent().setBackground(themeBtnClicked);
zomSwi.setText(tohtml(zomSwi.getText(),true));
betToast("Walk around whilst dead, can't do anything but drop items around players, no breaking or hitting. Works only for realms");
}else{betToast("Only works on realms!");}
} else if(zomS){
zomS = false;
overlayBlood.dismiss();
zomSwi.getParent().setBackground(themeBtnNotClicked);
zomSwi.setText(tohtml(zomSwi.getText(),false));
Player.setHealth(0);
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Walk around whilst dead, can't do anything but drop items around players, no breaking or hitting. Works only for realms");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(zomSwi);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!zomS) {
zomSwi.getParent().setBackground(themeBtnNotClicked);
zomSwi.setText(tohtml(zomSwi.getText(),false));
} else {
zomSwi.getParent().setBackground(themeBtnClicked);
zomSwi.setText(tohtml(zomSwi.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(nearesticon, 0), 0, android.util.Base64.decode(nearesticon, 0).length)));
}var radius = new android.widget.TextView(ctx);
radius.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
radius.getLayoutParams().width = switch_width;
radius.setText("  " + "Nearest Player");
radius.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
radius.setTextColor(modTextColor);
radius.setGravity(Gravity.CENTER_VERTICAL); 
radius.setTypeface(mcfont);
radius.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!radiused) {
radiuss = true;
radiused = true;
savemod("Nearest Player");
if (!radiused) {
radius.getParent().setBackground(themeBtnNotClicked);
radius.setText(tohtml(radius.getText(),false));
} else {
radius.getParent().setBackground(themeBtnClicked);
radius.setText(tohtml(radius.getText(),true));
}
} else {
radiuss = false;
radiused = false;
if (!radiused) {
radius.getParent().setBackground(themeBtnNotClicked);
radius.setText(tohtml(radius.getText(),false));
} else {
radius.getParent().setBackground(themeBtnClicked);
radius.setText(tohtml(radius.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows who the nearest player is"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(radius);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!radiused) {
radius.getParent().setBackground(themeBtnNotClicked);
radius.setText(tohtml(radius.getText(),false));
} else {
radius.getParent().setBackground(themeBtnClicked);
radius.setText(tohtml(radius.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(colorchaticon, 0), 0, android.util.Base64.decode(colorchaticon, 0).length)));
}var colormychat = new android.widget.TextView(ctx);
colormychat.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
colormychat.getLayoutParams().width = switch_width;
colormychat.setText("  " + "Color Chat");
colormychat.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
colormychat.setTextColor(modTextColor); 
colormychat.setTypeface(mcfont);
colormychat.setGravity(Gravity.CENTER_VERTICAL);
colormychat.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!colormychatd) {
colormychatss = true;
colormychatd = true;
savemod("Color Chat");
if (colorPicker == false) {
openColorSelect();
colorPicker = true;
}
if (!colormychatd) {
colormychat.getParent().setBackground(themeBtnNotClicked);
colormychat.setText(tohtml(colormychat.getText(),false));
} else {
colormychat.getParent().setBackground(themeBtnClicked);
colormychat.setText(tohtml(colormychat.getText(),true));
}
} else if (colormychatd == true) {
colormychatss = false;
colormychatd = false;
GUIs.dismiss;
closeColor();
colorPicker = false;
if (!colormychatd) {
colormychat.getParent().setBackground(themeBtnNotClicked);
colormychat.setText(tohtml(colormychat.getText(),false));
} else {
colormychat.getParent().setBackground(themeBtnClicked);
colormychat.setText(tohtml(colormychat.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Colors your messages"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(colormychat);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!colormychatd) {
colormychat.getParent().setBackground(themeBtnNotClicked);
colormychat.setText(tohtml(colormychat.getText(),false));
} else {
colormychat.getParent().setBackground(themeBtnClicked);
colormychat.setText(tohtml(colormychat.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(particleIcon, 0), 0, android.util.Base64.decode(particleIcon, 0).length)));
}var partSwit = new android.widget.TextView(ctx);
partSwit.setText("  " + "Hit Particles");
partSwit.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
partSwit.getLayoutParams().width = switch_width;
partSwit.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
partSwit.setTextColor(modTextColor); 
partSwit.setGravity(Gravity.CENTER_VERTICAL);
partSwit.setTypeface(mcfont);
partSwit.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!tapPart) {
tapPart = true;
savemod("Hit Particles");
if (!tapPart) {
partSwit.getParent().setBackground(themeBtnNotClicked);
partSwit.setText(tohtml(partSwit.getText(),false));
} else {
partSwit.getParent().setBackground(themeBtnClicked);
partSwit.setText(tohtml(partSwit.getText(),true));
}
} else {
tapPart = false;
if (!tapPart) {
partSwit.getParent().setBackground(themeBtnNotClicked);
partSwit.setText(tohtml(partSwit.getText(),false));
} else {
partSwit.getParent().setBackground(themeBtnClicked);
partSwit.setText(tohtml(partSwit.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Particle effects when someone is hit"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(partSwit);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!tapPart) {
partSwit.getParent().setBackground(themeBtnNotClicked);
partSwit.setText(tohtml(partSwit.getText(),false));
} else {
partSwit.getParent().setBackground(themeBtnClicked);
partSwit.setText(tohtml(partSwit.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hudicon, 0), 0, android.util.Base64.decode(hudicon, 0).length)));
}var hudSwitch = new android.widget.TextView(ctx);
hudSwitch.setText("  " + "Data");
hudSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hudSwitch.getLayoutParams().width = switch_width;
hudSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hudSwitch.setTextColor(modTextColor); 
hudSwitch.setGravity(Gravity.CENTER_VERTICAL);
hudSwitch.setTypeface(mcfont);
hudSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!hudd) {
huds = true;
hudd = true;
savemod("Data");
if (!hudd) {
hudSwitch.getParent().setBackground(themeBtnNotClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),false));
} else {
hudSwitch.getParent().setBackground(themeBtnClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),true));
}
} else {
huds = false;
hudd = false;
if (!hudd) {
hudSwitch.getParent().setBackground(themeBtnNotClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),false));
} else {
hudSwitch.getParent().setBackground(themeBtnClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Valuable information on your screen, like block ID's"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hudSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!hudd) {
hudSwitch.getParent().setBackground(themeBtnNotClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),false));
} else {
hudSwitch.getParent().setBackground(themeBtnClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(saddleicon, 0), 0, android.util.Base64.decode(saddleicon, 0).length)));
}var tapRiderSwitch = new android.widget.TextView(ctx);
tapRiderSwitch.setText("  " + "Tap Ride");
tapRiderSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
tapRiderSwitch.getLayoutParams().width = switch_width;
tapRiderSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
tapRiderSwitch.setTextColor(modTextColor); 
tapRiderSwitch.setTypeface(mcfont);
tapRiderSwitch.setGravity(Gravity.CENTER_VERTICAL);
tapRiderSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!tapRiderd) {
tapRider = true;savemod("Tap Ride");
tapRiderd = true;
if (!tapRiderd) {
tapRiderSwitch.getParent().setBackground(themeBtnNotClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),false));
} else {
tapRiderSwitch.getParent().setBackground(themeBtnClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),true));
}
} else {
tapRider = false;
tapRiderd = false;
if (!tapRiderd) {
tapRiderSwitch.getParent().setBackground(themeBtnNotClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),false));
} else {
tapRiderSwitch.getParent().setBackground(themeBtnClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Ride anything you touch"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(tapRiderSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!tapRiderd) {
tapRiderSwitch.getParent().setBackground(themeBtnNotClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),false));
} else {
tapRiderSwitch.getParent().setBackground(themeBtnClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(saddleicon, 0), 0, android.util.Base64.decode(saddleicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Ride Nearest");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Ride Nearest");
rideAnimal(getPlayerEnt(), getNearestPlayer(90));
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Ride the nearest player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondchest, 0), 0, android.util.Base64.decode(diamondchest, 0).length)));
}var chestesp = new android.widget.TextView(ctx);
chestesp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chestesp.getLayoutParams().width = switch_width;
chestesp.setText("  " + "Block ESP");
chestesp.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
chestesp.setTextColor(modTextColor); 
chestesp.setGravity(Gravity.CENTER_VERTICAL);
chestesp.setTypeface(mcfont);
chestesp.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!blockEspTracer) {
blockEspTracer = true;
espOnBsave=true;savemod("Block ESP");
cpuClock();
if(!rendering){funcS.Render.init();rendering=true}
if (!blockEspTracer) {
chestesp.getParent().setBackground(themeBtnNotClicked);
chestesp.setText(tohtml(chestesp.getText(),false));
} else {
chestesp.getParent().setBackground(themeBtnClicked);
chestesp.setText(tohtml(chestesp.getText(),true));
}
} else {
blockEspTracer = false;
espOnBsave=false;
if (!blockEspTracer) {
chestesp.getParent().setBackground(themeBtnNotClicked);
chestesp.setText(tohtml(chestesp.getText(),false));
} else {
chestesp.getParent().setBackground(themeBtnClicked);
chestesp.setText(tohtml(chestesp.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(chestesp);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!blockEspTracer) {
chestesp.getParent().setBackground(themeBtnNotClicked);
chestesp.setText(tohtml(chestesp.getText(),false));
} else {
chestesp.getParent().setBackground(themeBtnClicked);
chestesp.setText(tohtml(chestesp.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondchest, 0), 0, android.util.Base64.decode(diamondchest, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Change ESP ID');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
espPopup();
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Change what block to show on ESP"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(debugicon, 0), 0, android.util.Base64.decode(debugicon, 0).length)));
}var debugUic = new android.widget.TextView(ctx);
debugUic.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
debugUic.getLayoutParams().width = switch_width;
debugUic.setText("  " + "Debug Ui");
debugUic.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
debugUic.setTextColor(modTextColor); 
debugUic.setGravity(Gravity.CENTER_VERTICAL);
debugUic.setTypeface(mcfont);
debugUic.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!debugUicd) {
debugUicd = true;savemod("Debug UI");
ModPE.setUiRenderDebug(true);
if (!debugUicd) {
debugUic.getParent().setBackground(themeBtnNotClicked);
debugUic.setText(tohtml(debugUic.getText(),false));
} else {
debugUic.getParent().setBackground(themeBtnClicked);
debugUic.setText(tohtml(debugUic.getText(),true));
}
} else {
debugUicd = false;
ModPE.setUiRenderDebug(false);
if (!debugUicd) {
debugUic.getParent().setBackground(themeBtnNotClicked);
debugUic.setText(tohtml(debugUic.getText(),false));
} else {
debugUic.getParent().setBackground(themeBtnClicked);
debugUic.setText(tohtml(debugUic.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows ui elements"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(debugUic);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!debugUicd) {
debugUic.getParent().setBackground(themeBtnNotClicked);
debugUic.setText(tohtml(debugUic.getText(),false));
} else {
debugUic.getParent().setBackground(themeBtnClicked);
debugUic.setText(tohtml(debugUic.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chlogicon, 0), 0, android.util.Base64.decode(chlogicon, 0).length)));
}var chatlink = new android.widget.TextView(ctx);
chatlink.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chatlink.getLayoutParams().width = switch_width;
chatlink.setText("  " + "Open Chat Links");
chatlink.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
chatlink.setTextColor(modTextColor); 
chatlink.setGravity(Gravity.CENTER_VERTICAL);
chatlink.setTypeface(mcfont);
chatlink.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!chatlinks) {
chatlinks = true;savemod("Open Chat Links");
chatlink.getParent().setBackground(themeBtnClicked);
chatlink.setText(tohtml(chatlink.getText(),true));
} else {
chatlinks = false;
chatlink.getParent().setBackground(themeBtnNotClicked);
chatlink.setText(tohtml(chatlink.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Open links received in chat in a popup window"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(chatlink);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!chatlinks) {
chatlink.getParent().setBackground(themeBtnNotClicked);
chatlink.setText(tohtml(chatlink.getText(),false));
} else {
chatlink.getParent().setBackground(themeBtnClicked);
chatlink.setText(tohtml(chatlink.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chlogicon, 0), 0, android.util.Base64.decode(chlogicon, 0).length)));
}var chlogs = new android.widget.TextView(ctx);
chlogs.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chlogs.getLayoutParams().width = switch_width;
chlogs.setText("  " + "Chat Log");
chlogs.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
chlogs.setTextColor(modTextColor); 
chlogs.setGravity(Gravity.CENTER_VERTICAL);
chlogs.setTypeface(mcfont);
chlogs.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!chlog) {
chlog = true;savemod("Chat Log");
chlogs.getParent().setBackground(themeBtnClicked);
chlogs.setText(tohtml(chlogs.getText(),true));
} else {
chlog = false;
chlogs.getParent().setBackground(themeBtnNotClicked);
chlogs.setText(tohtml(chlogs.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Chat log is always logging chat"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(chlogs);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!chlog) {
chlogs.getParent().setBackground(themeBtnNotClicked);
chlogs.setText(tohtml(chlogs.getText(),false));
} else {
chlogs.getParent().setBackground(themeBtnClicked);
chlogs.setText(tohtml(chlogs.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chlogicon, 0), 0, android.util.Base64.decode(chlogicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Open Log");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {savemod("Open Log");
betToast("Please Wait, Loading...");
loadLog();
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setMessage(chatLogtxt);
var dialog = alert.create();
dialog.show();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chlogicon, 0), 0, android.util.Base64.decode(chlogicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Delete Log");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Delete Log");
deleteLog();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(taptoseeicon, 0), 0, android.util.Base64.decode(taptoseeicon, 0).length)));
}var taptosee = new android.widget.TextView(ctx);
taptosee.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
taptosee.getLayoutParams().width = switch_width;
taptosee.setText("  " + "Victim-Eyes");
taptosee.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
taptosee.setTextColor(modTextColor); 
taptosee.setTypeface(mcfont);
taptosee.setGravity(Gravity.CENTER_VERTICAL);
taptosee.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!taptoseed) {
taptoseed = true;
showStopRideBtn();savemod("Victim Eyes");
if (!taptoseed) {
taptosee.getParent().setBackground(themeBtnNotClicked);
taptosee.setText(tohtml(taptosee.getText(),false));
} else {
taptosee.getParent().setBackground(themeBtnClicked);
taptosee.setText(tohtml(taptosee.getText(),true));
}
} else {
taptoseed = false;
GUIri.dismiss();
if (!taptoseed) {
taptosee.getParent().setBackground(themeBtnNotClicked);
taptosee.setText(tohtml(taptosee.getText(),false));
} else {
taptosee.getParent().setBackground(themeBtnClicked);
taptosee.setText(tohtml(taptosee.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets camera to the eyes of the victim, crashes if the victim moves too far from the player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(taptosee);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!taptoseed) {
taptosee.getParent().setBackground(themeBtnNotClicked);
taptosee.setText(tohtml(taptosee.getText(),false));
} else {
taptosee.getParent().setBackground(themeBtnClicked);
taptosee.setText(tohtml(taptosee.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(taptoseeicon, 0), 0, android.util.Base64.decode(taptoseeicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Spy Cam");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ModPE.setCamera(getNearestPlayer(90));
try{Entity.setRenderType(getNearestPlayer(90), EntityRenderType.pig);}catch(e){betToast(e)}
preventDefault();
showStopRideBtn();savemod("Spy Cam");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["See what the nearest person sees"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(serversicon, 0), 0, android.util.Base64.decode(serversicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Servers');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Servers");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (serverSelect) {
GUIse.dismiss();
serverSelect = false;
}
if (!serverSelect) {
openServerSelect();
serverSelect = true
}
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["List of servers to join"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
//menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(ipicon, 0), 0, android.util.Base64.decode(ipicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  IP Address');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("IP Address");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
betToast("IP: " + Server.getAddress());
betToast("IP: " + Server.getAddress());
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows the server's IP address"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(sneakchaticon, 0), 0, android.util.Base64.decode(sneakchaticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Sneak Chat');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
chatPopup();savemod("Sneak Chat");
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Chat while crouching"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
changeGUI6 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI6.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI6.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI6.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI6.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI6.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI6.getBackground().setAlpha(themeAlpha);

if(allRight){
changeGUI6.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI6.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed6=true;
}
}
}))
};
/*settings*/
function openMenu8() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var settingNotClickedH = new android.graphics.drawable.GradientDrawable();
settingNotClickedH.setColor(themeBackground);
settingNotClickedH.setStroke(0, themeStroke);
settingNotClickedH.setCornerRadius(0);
settingNotClickedH.setAlpha(255);
var settingClickedH = new android.graphics.drawable.GradientDrawable();
settingClickedH.setColor(themeBackground);
settingClickedH.setStroke(2, Color.parseColor("#21ff00"));
settingClickedH.setCornerRadius(0);
settingClickedH.setAlpha(255);
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(6, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Settings"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
menuLayoutw.addView(button);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(removeicon, 0), 0, android.util.Base64.decode(removeicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Wipe Data");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
function confirmDataDelete() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
addWBtn.setText("Delete");
addWBtn.setTypeface(mcfont);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
addWDialog.setTitle("Delete All Data");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
deleteData();
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmDataDelete();savemod("Wipe Data");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(worldicon, 0), 0, android.util.Base64.decode(worldicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Language");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
showLangList();savemod("Language");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(scripticon, 0), 0, android.util.Base64.decode(scripticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Custom Script");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
try{runScript();savemod("Custom Script");}catch(e){betToast(e)}
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(logicon, 0), 0, android.util.Base64.decode(logicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Changelog");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setTitle("Instinct Update Changelog");
alert.setMessage("\nVersion: " + publicVer + "\nCurrent Version Installed: " + versionP + "\n" + chnglog + "");
var dialog = alert.create();
dialog.show();savemod("Changelog");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(updateicon, 0), 0, android.util.Base64.decode(updateicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Download Instinct");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
downloadUpdate();
betToast("Downloading...");savemod("Download Instinct");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(teamicon, 0), 0, android.util.Base64.decode(teamicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Credits");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
openCredits();savemod("Credits");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  FAQ / Help");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setTitle("Instinct FAQ/Help");
alert.setMessage(FAQ);
var dialog = alert.create();
dialog.show();savemod("FAQ");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(ipicon, 0), 0, android.util.Base64.decode(ipicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Website");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + siteUrl + "  ");
addWDialog.setTitle("Open Website");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse(siteUrl));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();savemod("Website");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(realmicon, 0), 0, android.util.Base64.decode(realmicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Join Realm");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + "https://realms.gg/nHXU2WIdwag" + "  ");
addWDialog.setTitle("Open Website");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("https://realms.gg/nHXU2WIdwag"));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();savemod("JoinRealm");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(discordicon, 0), 0, android.util.Base64.decode(discordicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Join Discord");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Join Discord");
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + "https://discord.gg/HP6xYrj" + "  ");
addWDialog.setTitle("Open Invite");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("https://discord.gg/HP6xYrj"));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(paypalicon, 0), 0, android.util.Base64.decode(paypalicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Donate");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Donate");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + "https://www.paypal.me/instinctshark/5" + "  ");
addWDialog.setTitle("Open Website");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://paypal.me/instinctshark/5"));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Tip: Donators can email v7thSharkv@gmail.com a copy of their receipt with their ingame name to activate a selection of mods, or send me a message in Discord.");
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
//menuLayoutw.addView(infoBox);

var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["You are a donator and chose:"]);
infoBox.setTextColor(android.graphics.Color.YELLOW);
infoBox.setTextSize(9);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
if(contains(donators,Player.getName(getPlayerEnt()))){
menuLayoutw.addView(infoBox);
}

var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["- Particle Effect"]);
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
if(contains(particleEffect,Player.getName(getPlayerEnt()))){
menuLayoutw.addView(infoBox);
}

if(containsCus(Player.getName(getPlayerEnt()))){
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["- Custom Name: "]+customNameC[currentSelect]);
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
}

var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["- Immunity"]);
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
if(contains(immunity,Player.getName(getPlayerEnt()))){
menuLayoutw.addView(infoBox);
}
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(paypalicon, 0), 0, android.util.Base64.decode(paypalicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Donator Mods");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Donator Mods");
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
alertPopup("Incentives","Here are some things donators can get in USD.\n\n1: Custom Name - \nDisplayed to other Instinct users ingame. Minimum $1.00\n\n2: Particle Effect -\nShows the purple portal effect over your head to other Instinct users. Minimum $1.00\n\n3: Immortality -\nOther Instinct users can't hit your body, acts as a Friend to everyone. Works wherever Reach does. Minimum $7.00","Cool!");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bedrockicon, 0), 0, android.util.Base64.decode(bedrockicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Old ID List");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {savemod("Old ID List");
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {oldIdPopup();
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fonticon, 0), 0, android.util.Base64.decode(fonticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  GUI Settings");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("GUI Settings");
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {choosefont();
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(filtericon, 0), 0, android.util.Base64.decode(filtericon, 0).length)));
}var filterSW = new android.widget.TextView(ctx);
filterSW.setText("  " + "Filter");
filterSW.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
filterSW.getLayoutParams().width = switch_width;
filterSW.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
filterSW.setTextColor(modTextColor);
filterSW.setTypeface(mcfont);
filterSW.setGravity(Gravity.CENTER_VERTICAL);
filterSW.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!filterOn) {
filterOn = true;
showFil();savemod("Filter");
if (!filterOn) {
filterSW.getParent().setBackground(themeBtnNotClicked);
filterSW.setText(tohtml(filterSW.getText(),false));
/*filterSW.setThumbResource(android['R']['drawable']['presence_busy']);*/
} else {
filterSW.getParent().setBackground(themeBtnClicked);
/*filterSW.setThumbResource(android['R']['drawable']['presence_online']);*/
filterSW.setText(tohtml(filterSW.getText(),true));
}
} else {
GUIfil.dismiss();
filterOn = false;
if (!filterOn) {
filterSW.getParent().setBackground(themeBtnNotClicked);
filterSW.setText(tohtml(filterSW.getText(),false));
/*filterSW.setThumbResource(android['R']['drawable']['presence_busy']);*/
} else {
filterSW.getParent().setBackground(themeBtnClicked);
filterSW.setText(tohtml(filterSW.getText(),true));
/*filterSW.setThumbResource(android['R']['drawable']['presence_online']);*/
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Applies filter to screen"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(filterSW);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!filterOn) {
filterSW.getParent().setBackground(themeBtnNotClicked);
/*filterSW.setThumbResource(android['R']['drawable']['presence_busy']);*/
filterSW.setText(tohtml(filterSW.getText(),false));
} else {
filterSW.getParent().setBackground(themeBtnClicked);
/*filterSW.setThumbResource(android['R']['drawable']['presence_online']);*/
filterSW.setText(tohtml(filterSW.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(filtericon, 0), 0, android.util.Base64.decode(filtericon, 0).length)));
}var filterSc = new android.widget.SeekBar(ctx);
filterSc.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
filterSc.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
filterSc.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
filterSc.getLayoutParams().width = switch_width;
filterSc.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
filterSc.setMax(7);
filterSc.getBackground().setAlpha(255);
filterSc.setProgress(filterHueN);
filterSc.setBackground(xbgGS);
filterSc.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
filterHueN = Math.floor(filterSc.getProgress());
if(filterHueN==0){
filterHue = android.graphics.Color.TRANSPARENT;
betToast(langMsg[language]["Dim"]);
}
if(filterHueN==1){
filterHue = android.graphics.Color.YELLOW;
betToast(langMsg[language]["Yellow"]);
}
if(filterHueN==2){
filterHue = android.graphics.Color.RED;
betToast(langMsg[language]["Red"]);
}
if(filterHueN==3){
filterHue = android.graphics.Color.GREEN;
betToast(langMsg[language]["Vivid"]);
}
if(filterHueN==4){
filterHue = android.graphics.Color.BLUE;
betToast(langMsg[language]["Cool"]);
}
if(filterHueN==5){
filterHue = android.graphics.Color.WHITE;
betToast(langMsg[language]["White"]);
}
if(filterHueN==6){
filterHue = android.graphics.Color.MAGENTA;
betToast("Romantic");
}
if(filterHueN==7){
filterHue = android.graphics.Color.CYAN;
betToast("Cyan");
}
if (filterOn) {
GUIfil.dismiss();
showFil();
}
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts filter hue");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(filterSc);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Use Old TMI GUI");
button.setChecked(oldTMI);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!oldTMI) {
oldTMI = true;savemod("Use Old TMI");
} else {
oldTMI = false;
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Mute Update Notification");
button.setChecked(muteUpdate);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!muteUpdate) {
muteUpdate = true;savemod("Mute Update");
} else {
muteUpdate = false;
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Use DigMinecraft ID Site");
button.setChecked(digurl);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!digurl) {
digurl=true;savemod("Use DigMinecraft");
idurl="https://www.digminecraft.com/lists/item_id_list_pe.php";
} else {
digurl=false;
idurl="http://instinctmods.com/idlist.html";
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Chat Log Always On");
button.setChecked(chlogAlways);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!chlogAlways) {
chlogAlways = true;savemod("Chat Log Always On");
chlog=true;
} else {
chlogAlways = false;
saveTheme();
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("PVP Menu Left");
button.setChecked(sleekLeft);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!sleekLeft) {
sleekLeft = true;savemod("PVP Menu Left");
} else {
sleekLeft = false;
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Use GIF Background");
button.setChecked(useGIF);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!useGIF) {
	closeEverything();
gifedit();
} else {
useGIF = false;
if(backOpen){guiBackgroundGif.dismiss();backOpen=false;}
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Menu on Right");
button.setChecked(allRight);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!allRight) {
allRight = true;savemod("Menu on Right");
} else {
allRight = false;
}
saveTheme();
closeEverything();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(animations){var animationOp=false}else{var animationOp=true}
var button = new CheckBox(ctx);
button.setText("Disable Animations");
button.setChecked(animationOp);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!animations) {
animations = true;savemod("Disable Animations");
} else {
animations = false;
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(iconsB){var iconsOp=false}else{var iconsOp=true}
var button = new CheckBox(ctx);
button.setText("Disable Icons");
button.setChecked(iconsOp);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!iconsB) {
iconsB = true;savemod("Disable Icons");
if(helpB){
wayNameWidth = list_width-(icon_dimensions*4);
list_width = list_width_var*density;
}else{
list_width = list_width_var*density-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}	
} else {
iconsB = false;
if(!helpB){
list_width = (list_width_var*density)-(icon_dimensions*2);
wayNameWidth = list_width-(icon_dimensions*4);
}else{
list_width = (list_width_var*density)-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(helpB){var helpOp=false}else{var helpOp=true}
var button = new CheckBox(ctx);
button.setText("Disable Help");
button.setChecked(helpOp);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!helpB) {
helpB = true;savemod("Disable Help");
if(iconsB){
wayNameWidth = list_width-(icon_dimensions*4);
list_width = list_width_var*density;
}else{
list_width = list_width_var*density-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}	
} else {
helpB = false;savemod("Enable Help");
if(!iconsB){
list_width = (list_width_var*density)-(icon_dimensions*2);
wayNameWidth = list_width-(icon_dimensions*4);
}else{
list_width = (list_width_var*density)-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(iconsB){var iconsOp=false}else{var iconsOp=true}
var button = new CheckBox(ctx);
button.setText("Menu Gradient");
button.setChecked(showGradient);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
savemod("Menu Gradient");
if (!showGradient) {
showGradient = true;

} else {
showGradient = false;

}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
menuLayoutw.addView(slayout1);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Theme"]);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextSize(titleSize);
button.setBackground(title);
button.setTextColor(modTextColor);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
menuLayoutw.addView(button);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Menu Opacity:");
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER_VERTICAL);
infoBox.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
slayout1.addView(infoBox);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var opacitySlider = new android.widget.SeekBar(ctx);
opacitySlider.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
opacitySlider.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
opacitySlider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
opacitySlider.getLayoutParams().width = switch_width;
opacitySlider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
opacitySlider.setMax(255);
opacitySlider.getBackground().setAlpha(255);
opacitySlider.setProgress(themeAlpha);
opacitySlider.setBackground(xbgGS);
opacitySlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onStopTrackingTouch: function(viewarg) {
themeAlpha = opacitySlider.getProgress();
}
});
slayout1.addView(opacitySlider);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeXmasSwitch = new android.widget.TextView(ctx);
themeXmasSwitch.setText("  " + "Holidays");
themeXmasSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeXmasSwitch.getLayoutParams().width = switch_width;
themeXmasSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeXmasSwitch.setTextColor(modTextColor);
themeXmasSwitch.setTypeface(mcfont);
themeXmasSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeXmasSwitch.setTextSize(switchfontsize);
themeXmasSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Holiday Theme");
if (!themedXmas) {
themedXmas = true;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedOrange = false;
themeBtn = "xmas";
closeEverything();
if (!themedXmas) {
themeXmasSwitch.getParent().setBackground(themeBtnNotClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),false));
} else {
themeXmasSwitch.getParent().setBackground(themeBtnClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedXmas) {
themeXmasSwitch.getParent().setBackground(themeBtnNotClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),false));
} else {
themeXmasSwitch.getParent().setBackground(themeBtnClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeXmasSwitch);
menuLayoutw.addView(slayout1);
if (!themedXmas) {
themeXmasSwitch.getParent().setBackground(themeBtnNotClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),false));
} else {
themeXmasSwitch.getParent().setBackground(themeBtnClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Make it Snow!");
button.setChecked(snowIt);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!snowIt) {
snowIt = true;savemod("Make it Snow");
} else {
snowIt = false;
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeOrangeSwitch = new android.widget.TextView(ctx);
themeOrangeSwitch.setText("  " + "Orange");
themeOrangeSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeOrangeSwitch.getLayoutParams().width = switch_width;
themeOrangeSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeOrangeSwitch.setTextColor(modTextColor);
themeOrangeSwitch.setTypeface(mcfont);
themeOrangeSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeOrangeSwitch.setTextSize(switchfontsize);
themeOrangeSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Orange Theme");
if (!themedOrange) {
themedOrange = true;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "orange";
closeEverything();
if (!themedOrange) {
themeOrangeSwitch.getParent().setBackground(themeBtnNotClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),false));
} else {
themeOrangeSwitch.getParent().setBackground(themeBtnClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedOrange) {
themeOrangeSwitch.getParent().setBackground(themeBtnNotClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),false));
} else {
themeOrangeSwitch.getParent().setBackground(themeBtnClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeOrangeSwitch);
menuLayoutw.addView(slayout1);
if (!themedOrange) {
themeOrangeSwitch.getParent().setBackground(themeBtnNotClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),false));
} else {
themeOrangeSwitch.getParent().setBackground(themeBtnClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeWhiteSwitch = new android.widget.TextView(ctx);
themeWhiteSwitch.setText("  " + langMsg[language]["White"]);
themeWhiteSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeWhiteSwitch.getLayoutParams().width = switch_width;
themeWhiteSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeWhiteSwitch.setTextColor(modTextColor);
themeWhiteSwitch.setTypeface(mcfont);
themeWhiteSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeWhiteSwitch.setTextSize(switchfontsize);
themeWhiteSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("White Theme");
if (!themedWhite) {
themedOrange = false;
themedWhite = true;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "white";
closeEverything();
if (!themedWhite) {
themeWhiteSwitch.getParent().setBackground(themeBtnNotClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),false));
} else {
themeWhiteSwitch.getParent().setBackground(themeBtnClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedWhite) {
themeWhiteSwitch.getParent().setBackground(themeBtnNotClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),false));
} else {
themeWhiteSwitch.getParent().setBackground(themeBtnClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeWhiteSwitch);
menuLayoutw.addView(slayout1);
if (!themedWhite) {
themeWhiteSwitch.getParent().setBackground(themeBtnNotClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),false));
} else {
themeWhiteSwitch.getParent().setBackground(themeBtnClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeRedSwitch = new android.widget.TextView(ctx);
themeRedSwitch.setText("  " + "Red");
themeRedSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeRedSwitch.getLayoutParams().width = switch_width;
themeRedSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeRedSwitch.setTextColor(modTextColor);
themeRedSwitch.setTypeface(mcfont);
themeRedSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeRedSwitch.setTextSize(switchfontsize);
themeRedSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){savemod("Red Theme");
if (!themedRed) {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
closeEverything();
if (!themedRed) {
themeRedSwitch.getParent().setBackground(themeBtnNotClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),false));
} else {
themeRedSwitch.getParent().setBackground(themeBtnClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedRed) {
themeRedSwitch.getParent().setBackground(themeBtnNotClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),false));
} else {
themeRedSwitch.getParent().setBackground(themeBtnClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeRedSwitch);
menuLayoutw.addView(slayout1);
if (!themedRed) {
themeRedSwitch.getParent().setBackground(themeBtnNotClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),false));
} else {
themeRedSwitch.getParent().setBackground(themeBtnClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeGreenSwitch = new android.widget.TextView(ctx);
themeGreenSwitch.setText("  " + "Green");
themeGreenSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeGreenSwitch.getLayoutParams().width = switch_width;
themeGreenSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeGreenSwitch.setTextColor(modTextColor);
themeGreenSwitch.setTypeface(mcfont);
themeGreenSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeGreenSwitch.setTextSize(switchfontsize);
themeGreenSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Green Theme");
if (!themedGreen) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = true;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "green";
closeEverything();
if (!themedGreen) {
themeGreenSwitch.getParent().setBackground(themeBtnNotClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),false));
} else {
themeGreenSwitch.getParent().setBackground(themeBtnClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedGreen) {
themeGreenSwitch.getParent().setBackground(themeBtnNotClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),false));
} else {
themeGreenSwitch.getParent().setBackground(themeBtnClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeGreenSwitch);
menuLayoutw.addView(slayout1);
if (!themedGreen) {
themeGreenSwitch.getParent().setBackground(themeBtnNotClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),false));
} else {
themeGreenSwitch.getParent().setBackground(themeBtnClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeBlackSwitch = new android.widget.TextView(ctx);
themeBlackSwitch.setText("  " + "Amoled");
themeBlackSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeBlackSwitch.getLayoutParams().width = switch_width;
themeBlackSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeBlackSwitch.setTextColor(modTextColor);
themeBlackSwitch.setTypeface(mcfont);
themeBlackSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeBlackSwitch.setTextSize(switchfontsize);
themeBlackSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Amoled Theme");
if (!themedBlack) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = true;
themedXmas = false;
themeBtn = "black";
closeEverything();
if (!themedBlack) {
themeBlackSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),false));
} else {
themeBlackSwitch.getParent().setBackground(themeBtnClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedBlack) {
themeBlackSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),false));
} else {
themeBlackSwitch.getParent().setBackground(themeBtnClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeBlackSwitch);
menuLayoutw.addView(slayout1);
if (!themedBlack) {
themeBlackSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),false));
} else {
themeBlackSwitch.getParent().setBackground(themeBtnClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeBlueSwitch = new android.widget.TextView(ctx);
themeBlueSwitch.setText("  " + "Blue");
themeBlueSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeBlueSwitch.getLayoutParams().width = switch_width;
themeBlueSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeBlueSwitch.setTextColor(modTextColor);
themeBlueSwitch.setTypeface(mcfont);
themeBlueSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeBlueSwitch.setTextSize(switchfontsize);
themeBlueSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Blue Theme");
if (!themedBlue) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = true;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "blue";
closeEverything();
if (!themedBlue) {
themeBlueSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),false));
} else {
themeBlueSwitch.getParent().setBackground(themeBtnClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedBlue) {
themeBlueSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),false));
} else {
themeBlueSwitch.getParent().setBackground(themeBtnClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeBlueSwitch);
menuLayoutw.addView(slayout1);
if (!themedBlue) {
themeBlueSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),false));
} else {
themeBlueSwitch.getParent().setBackground(themeBtnClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeDarkSwitch = new android.widget.TextView(ctx);
themeDarkSwitch.setText("  " + "Dark");
themeDarkSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeDarkSwitch.getLayoutParams().width = switch_width;
themeDarkSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeDarkSwitch.setTextColor(modTextColor);
themeDarkSwitch.setTypeface(mcfont);
themeDarkSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeDarkSwitch.setTextSize(switchfontsize);
themeDarkSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Dark Theme");
if (!themedDark) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = true;
themedGreen = false;
themedMagenta = false;
themedBlack = false;
themedDark = true;
themedXmas = false;
themeBtn = "dark";
closeEverything();
if (!themedDark) {
themeDarkSwitch.getParent().setBackground(themeBtnNotClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),false));
} else {
themeDarkSwitch.getParent().setBackground(themeBtnClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedDark) {
themeDarkSwitch.getParent().setBackground(themeBtnNotClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),false));
} else {
themeDarkSwitch.getParent().setBackground(themeBtnClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeDarkSwitch);
menuLayoutw.addView(slayout1);
if (!themedDark) {
themeDarkSwitch.getParent().setBackground(themeBtnNotClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),false));
} else {
themeDarkSwitch.getParent().setBackground(themeBtnClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeMagentaSwitch = new android.widget.TextView(ctx);
themeMagentaSwitch.setText("  " + "Magenta");
themeMagentaSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeMagentaSwitch.getLayoutParams().width = switch_width;
themeMagentaSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeMagentaSwitch.setTextColor(modTextColor);
themeMagentaSwitch.setTypeface(mcfont);
themeMagentaSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeMagentaSwitch.setTextSize(switchfontsize);
themeMagentaSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Magenta Theme");
if (!themedMagenta) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = true;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "magenta";
closeEverything();
if (!themedMagenta) {
themeMagentaSwitch.getParent().setBackground(themeBtnNotClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),false));
} else {
themeMagentaSwitch.getParent().setBackground(themeBtnClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedBlack = false;
themedDark = false;
themedXmas = false;
themeBtn = "red";
if (!themedMagenta) {
themeMagentaSwitch.getParent().setBackground(themeBtnNotClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),false));
} else {
themeMagentaSwitch.getParent().setBackground(themeBtnClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeMagentaSwitch);
menuLayoutw.addView(slayout1);
if (!themedMagenta) {
themeMagentaSwitch.getParent().setBackground(themeBtnNotClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),false));
} else {
themeMagentaSwitch.getParent().setBackground(themeBtnClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),true));
}


changeGUI8 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI8.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI8.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI8.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI8.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI8.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI8.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI8.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI8.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed8=true;
}
}
}))
};
/*Presets*/
function openMenu9() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var settingNotClickedH = new android.graphics.drawable.GradientDrawable();
settingNotClickedH.setColor(themeBackground);
settingNotClickedH.setStroke(0, themeStroke);
settingNotClickedH.setCornerRadius(0);
settingNotClickedH.setAlpha(255);
var settingClickedH = new android.graphics.drawable.GradientDrawable();
settingClickedH.setColor(themeBackground);
settingClickedH.setStroke(2, Color.parseColor("#21ff00"));
settingClickedH.setCornerRadius(0);
settingClickedH.setAlpha(255);
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(6, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Presets"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["Tip: Only one preset can be enabled at once. Presets enable certain mods in the client."]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var button = new android.widget.Button(ctx);
button.setText("");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().height = 40;
button.getBackground().setAlpha(0);
menuLayoutw.addView(button);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(booticon, 0), 0, android.util.Base64.decode(booticon, 0).length)));
}var startpres = new android.widget.TextView(ctx);
startpres.setText("  " + "Starter");
startpres.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
startpres.getLayoutParams().width = switch_width;
startpres.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
startpres.setTextColor(modTextColor);
startpres.setTypeface(mcfont);
startpres.setGravity(Gravity.CENTER_VERTICAL);
startpres.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (pvpd == false&&!minerd) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (!starterd) {
savemod("Starter Preset");
starters = true;
starterd = true;
rides = true;
rided = true;
potions = true;
potioned = true;
xphitss = true;
xphited = true;
sf = true;
sfs = true;
farbot = true;
fared = true;
showHairBtn();
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
gps = true;
gped = true;
Player.setCanFly(1);
Player.isFlying(1);
esp = true;
} else {
starters = false;
starterd = false;
gps = false;
gped = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
farbot = false;
GUIcc.dismiss();
fared = false;
rides = false;
rided = false;
potions = false;
potioned = false;
xphitss = false;
xphited = false;
sf = false;
sfs = false;
Player.setCanFly(0);
esp = false;
}
if (!starterd) {
startpres.getParent().setBackground(themeBtnNotClicked);
startpres.setText(tohtml(startpres.getText(),false));
} else {
startpres.getParent().setBackground(themeBtnClicked);
startpres.setText(tohtml(startpres.getText(),true));
}
} else {
betToast("Disable other preset")
}
} else {
betToast("Must be in a world to activate")
}
}
})); if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Basic modules");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(startpres);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Mob Reach, No Fall Damage, XP Hit, Survival Fly, Crosshair, Night Vision\n");
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
if (!starterd) {
startpres.getParent().setBackground(themeBtnNotClicked);
startpres.setText(tohtml(startpres.getText(),false));
} else {
startpres.getParent().setBackground(themeBtnClicked);
startpres.setText(tohtml(startpres.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var pvpres = new android.widget.TextView(ctx);
pvpres.setText("  " + "PVP");
pvpres.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
pvpres.getLayoutParams().width = switch_width;
pvpres.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
pvpres.setTextColor(modTextColor);
pvpres.setTypeface(mcfont);
pvpres.setGravity(Gravity.CENTER_VERTICAL);
pvpres.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (starterd == false&&minerd==false) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (!pvpd) {
savemod("PVP Preset");
pvps = true;
pvpd = true;
showHairBtn();
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
esp = true;
espd = true;
espOnsave=true;
if(!rendering){funcS.Render.init();rendering=true}
gps = true;
gped = true;
xphitss = true;
xphited = true;
walkss = true;
walked = true;
aimbot = true;
aimbotBtn = true;
aimed = true;
showAimbotBtn();
aoss = true;
aoed = true;
} else {
pvps = false;
pvpd = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
esp = false;
espd = false;
espOnsave=false;
xphitss = false;
xphited = false;
mcpss = false;
gps = false;
gped = false;
GUIcc.dismiss();
mcped = false;
walkss = false;
walked = false;
aimbot = false;
aimbotBtn = false;
aimed = false;
GUIaim.dismiss();
aoss = false;
aoed = false;
}
if (!pvpd) {
pvpres.getParent().setBackground(themeBtnNotClicked);
pvpres.setText(tohtml(pvpres.getText(),false));
} else {
pvpres.getParent().setBackground(themeBtnClicked);
pvpres.setText(tohtml(pvpres.getText(),true));
}

} else {
betToast("Disable other preset")
}
} else {
betToast("Must be in a world to activate")
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Basic modules for PVP");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(pvpres);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("ESP, Crosshair, Night Vision, XP Hit, Reach, Aimbot, No Knockback\n");
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
if (!pvpd) {
pvpres.getParent().setBackground(themeBtnNotClicked);
pvpres.setText(tohtml(pvpres.getText(),false));
} else {
pvpres.getParent().setBackground(themeBtnClicked);
pvpres.setText(tohtml(pvpres.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newhasteicon, 0), 0, android.util.Base64.decode(newhasteicon, 0).length)));
}var minerpres = new android.widget.TextView(ctx);
minerpres.setText("  " + "Miner");
minerpres.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
minerpres.getLayoutParams().width = switch_width;
minerpres.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
minerpres.setTextColor(modTextColor);
minerpres.setGravity(Gravity.CENTER_VERTICAL);
minerpres.setTypeface(mcfont);
minerpres.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (pvpd == false&&starterd==false) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if (!minerd) {
minerd = true;
coordds = true;
savemod("Miner Preset");
showCgui();
gps = true;
gped = true;
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, 999999, 200, false, false);
ims = true;
bedrocke = true;
potions = true;
potioned = true;
betterladss = true;
betterladsd = true;
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
} else {
minerd = false;
coordds = false;
windowDis.dismiss();
gps = false;
gped = false;
ims = false;
bedrocke = false;
potions = false;
potioned = false;
betterladss = false;
betterladsd = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.digSpeed);
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
}
if (!minerd) {
minerpres.getParent().setBackground(themeBtnNotClicked);
minerpres.setText(tohtml(minerpres.getText(),false));
} else {
minerpres.getParent().setBackground(themeBtnClicked);
minerpres.setText(tohtml(minerpres.getText(),true));
}
} else {
betToast("Disable other preset")
}
} else {
betToast("Must be in a world to activate")
}
}
})); if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Everything for mining");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(minerpres);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Coordinates, Night Vision, Haste, Break Bedrock, No Fall Damage, Fast Ladders\n");
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
if (!minerd) {
minerpres.getParent().setBackground(themeBtnNotClicked);
minerpres.setText(tohtml(minerpres.getText(),false));
} else {
minerpres.getParent().setBackground(themeBtnClicked);
minerpres.setText(tohtml(minerpres.getText(),true));
}



changeGUI9 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI9.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI9.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI9.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI9.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI9.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI9.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI9.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI9.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed9=true;
}
}
}))
};
/*Friends*/
function openMenu10() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Friends"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setBackground(title);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));

menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added"]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var button7 = new android.widget.Button(ctx);
button7.setText("Add Friend");
button7.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button7.setTextColor(android.graphics.Color.YELLOW);
button7.getBackground().setAlpha(130);
button7.setTextSize(btntextsize);
button7.setBackground(xbgAW);
button7.setTypeface(mcfont);
button7.setTextSize(switchfontsize+4);
button7.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
AddNewFriend();savemod("Add Friend");
closeEverything();
}
}));
menuLayoutw.addView(button7);
for(var i=0;i<objectLength(friends_L);i++){
if(!friends_L[i].removed){
if(CreateButtonF(i).getParent()!=null)
CreateButtonF(i).getParent().removeView(CreateButtonF(i));
menuLayoutw.addView(CreateButtonF(i));
}}

changeGUI10 = new PopupWindow(menuLayout1, list_width,ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI10.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI10.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI10.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI10.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI10.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI10.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI10.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI10.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}

} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed10=true;
}
}
}))
};
/*Discord*/
function openMenu11() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
setStyle();
savemod("Show Discord");
changeGUI11 = new PopupWindow(webViewDi, list_width,ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){changeGUI11.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI11.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI11.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI11.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI11.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI11.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI11.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}else{changeGUI11.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed11=true;
}
}
}))
};

function loadDiscord(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
webViewDi = new android.webkit.WebView(ctx);
webViewDi.getSettings().setJavaScriptEnabled(true);
webViewDi.getSettings().setLoadsImagesAutomatically(true);
webViewDi.getSettings().setAllowUniversalAccessFromFileURLs(true);
webViewDi.getSettings().setDomStorageEnabled(true);
webViewDi.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
webViewDi.setWebChromeClient(new android.webkit.WebChromeClient());
webViewDi.setWebViewClient(new android.webkit.WebViewClient());
webViewDi.loadUrl("http://instinctmods.com/discord.html");
webViewDi.setBackgroundColor(Color.TRANSPARENT);
webViewDi.setFocusable(true);
webViewDi.setFocusableInTouchMode(true);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};loadDiscord();
function setStyle(){
var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);
if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
}
function lockaxis(axi){
if(axi=="x"){
setVelX(getPlayerEnt(), 0);
}
if(axi=="y"){
setVelY(getPlayerEnt(), 0);
}
if(axi=="z"){
setVelY(getPlayerEnt(), 0);
}
}
function blockbuilder() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var button = new android.widget.Button(ctx);
button.setText("ESP");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(15);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var verticallay = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var oldbox = new android.widget.TextView(ctx);
oldbox.setText(tmiList);
oldbox.setTextColor(modTextColor);
var infoBox = android.widget.TextView(ctx);
infoBox.setTextSize(12);
infoBox.setText("Select structure and tap ground with stick");
infoBox.setBackground(xbg2);
infoBox.setTextColor(android.graphics.Color.WHITE);
var menuScroll = new android.widget.ScrollView(ctx);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setTextColor(android.graphics.Color.WHITE);
txtId.setText(langMsg[language][" ID:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Save");
addBtn.setBackground(telebtn);
addBtn.setTypeface(mcfont);
addBtn.setTextColor(android.graphics.Color.GREEN);
var deviceWarn = new android.widget.TextView(ctx);
deviceWarn.setGravity(Gravity.CENTER);
deviceWarn.setBackground(xbg2);
deviceWarn.setTextSize(8);
deviceWarn.setTextColor(android.graphics.Color.WHITE);
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("54");
etId.setHint("ID");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
etId.setTextSize(14);
etId.setTypeface(mcfont);
etId.setBackground(xbg2);
etId.setTextColor(android.graphics.Color.WHITE);

var checkList = new android.widget.LinearLayout(ctx);
checkList.setOrientation(android.widget.LinearLayout.VERTICAL);
checkList.addView(infoBox);
/*Checkboxes*/
var btn_Stronghold = new CheckBox(ctx);
btn_Stronghold.setText("Stronghold");
btn_Stronghold.setChecked(build_Stronghold);
btn_Stronghold.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Stronghold.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Stronghold.setTextSize(btntextsize-1); 
btn_Stronghold.setTypeface(mcfont); 
btn_Stronghold.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Stronghold.setTextColor(android.graphics.Color.WHITE); 
btn_Stronghold.setBackground(xbg2);
btn_Stronghold.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
if(build_Stronghold){build_Stronghold=false}else{build_Stronghold=true}
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Stronghold);


var btn_Blacksmith = new CheckBox(ctx);
btn_Blacksmith.setText("Blacksmith");
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Blacksmith.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Blacksmith.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
btn_Blacksmith.setTextSize(btntextsize-1); 
btn_Blacksmith.setTypeface(mcfont); 
btn_Blacksmith.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Blacksmith.setTextColor(android.graphics.Color.WHITE); 
btn_Blacksmith.setBackground(xbg2);
btn_Blacksmith.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
if(build_Blacksmith){build_Blacksmith=false}else{build_Blacksmith=true}
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Blacksmith);

var btn_Big_Vlg_House = new CheckBox(ctx);
btn_Big_Vlg_House.setText("Village House Big");
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Big_Vlg_House.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Big_Vlg_House.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Big_Vlg_House.setTextSize(btntextsize-1); 
btn_Big_Vlg_House.setTypeface(mcfont); 
btn_Big_Vlg_House.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Big_Vlg_House.setTextColor(android.graphics.Color.WHITE); 
btn_Big_Vlg_House.setBackground(xbg2);
btn_Big_Vlg_House.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
if(build_Village_House_Big){build_Village_House_Big=false}else{build_Village_House_Big=true}
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Big_Vlg_House);

var btn_Small_Vlg_House_1 = new CheckBox(ctx);
btn_Small_Vlg_House_1.setText("Village House Small 1");
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Small_Vlg_House_1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Small_Vlg_House_1.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Small_Vlg_House_1.setTextSize(btntextsize-1); 
btn_Small_Vlg_House_1.setTypeface(mcfont); 
btn_Small_Vlg_House_1.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Small_Vlg_House_1.setTextColor(android.graphics.Color.WHITE); 
btn_Small_Vlg_House_1.setBackground(xbg2);
btn_Small_Vlg_House_1.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
if(build_Village_House_Small_1){build_Village_House_Small_1=false}else{build_Village_House_Small_1=true}
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Small_Vlg_House_1);

var btn_Small_Vlg_House_2 = new CheckBox(ctx);
btn_Small_Vlg_House_2.setText("Village House Small 2");
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Small_Vlg_House_2.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Small_Vlg_House_2.setTextSize(btntextsize-1); 
btn_Small_Vlg_House_2.setTypeface(mcfont); 
btn_Small_Vlg_House_2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Small_Vlg_House_2.setTextColor(android.graphics.Color.WHITE); 
btn_Small_Vlg_House_2.setBackground(xbg2);
btn_Small_Vlg_House_2.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
if(build_Village_House_Small_2){build_Village_House_Small_2=false}else{build_Village_House_Small_2=true}
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Small_Vlg_House_2);

var btn_Church = new CheckBox(ctx);
btn_Church.setText("Church");
btn_Church.setChecked(build_Church);
btn_Church.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Church.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Church.setTextSize(btntextsize-1); 
btn_Church.setTypeface(mcfont); 
btn_Church.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Church.setTextColor(android.graphics.Color.WHITE); 
btn_Church.setBackground(xbg2);
btn_Church.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
if(build_Church){build_Church=false}else{build_Church=true}
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Church);

var btn_Well = new CheckBox(ctx);
btn_Well.setText("Village Well");
btn_Well.setChecked(build_Village_Well);
btn_Well.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Well.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Well.setTextSize(btntextsize-1); 
btn_Well.setTypeface(mcfont); 
btn_Well.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Well.setTextColor(android.graphics.Color.WHITE); 
btn_Well.setBackground(xbg2);
btn_Well.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
if(build_Village_Well){build_Village_Well=false}else{build_Village_Well=true}
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Well);

var btn_Vlg_Farm_Small = new CheckBox(ctx);
btn_Vlg_Farm_Small.setText("Village Farm Small");
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Vlg_Farm_Small.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Vlg_Farm_Small.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Vlg_Farm_Small.setTextSize(btntextsize-1); 
btn_Vlg_Farm_Small.setTypeface(mcfont); 
btn_Vlg_Farm_Small.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Vlg_Farm_Small.setTextColor(android.graphics.Color.WHITE); 
btn_Vlg_Farm_Small.setBackground(xbg2);
btn_Vlg_Farm_Small.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
if(build_Farm_Small){build_Farm_Small=false}else{build_Farm_Small=true}
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Vlg_Farm_Small);

var btn_Vlg_Farm_Big = new CheckBox(ctx);
btn_Vlg_Farm_Big.setText("Village Farm Big");
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Big.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Vlg_Farm_Big.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Vlg_Farm_Big.setTextSize(btntextsize-1); 
btn_Vlg_Farm_Big.setTypeface(mcfont); 
btn_Vlg_Farm_Big.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Vlg_Farm_Big.setTextColor(android.graphics.Color.WHITE); 
btn_Vlg_Farm_Big.setBackground(xbg2);
btn_Vlg_Farm_Big.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
if(build_Farm_Big){build_Farm_Big=false}else{build_Farm_Big=true}
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Vlg_Farm_Big);


menuScroll.addView(checkList);
tmiMainHor.addView(menuScroll);
verticallay.addView(tmiMainHor);
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
espBlock = parseInt(etId.getText());
tmiDialog.dismiss();
}
});
tmiDialog = new PopupWindow(verticallay, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()/2,true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
if(android.os.Build.VERSION.SDK_INT <= 19){
oldTMI = true;
saveTheme();
betToast("OS Build < 19: Old TMI GUI applied");
}
function Village_Big_House(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+11,x+11,x+11,x+11,x+11,x+11,x+11,x+11,x+11,x+11,x+11];
var Y=[y,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+3,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+5,y+0,y+3,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+3,y+6,y+3,y+0,y+3,y+3,y+3,y+3,y+3,y+3,y+3];
var Z=[z,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-8,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-7,z+-6,z+-6,z+-5,z+-4,z+-3,z+-2,z+-1,z+0];
var I=[4,53,4,4,4,4,53,4,4,4,4,5,53,4,4,4,4,17,5,53,4,4,4,4,102,5,5,4,4,4,4,17,5,53,4,4,4,4,5,53,4,4,4,4,53,53,4,4,17,4,53,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,17,4,53,53,4,4,102,4,53,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,102,4,53,53,4,4,102,4,53,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,102,4,53,53,5,4,4,17,4,53,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,17,4,53,4,4,4,4,53,4,4,5,5,53,4,4,5,5,5,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,5,4,53,4,4,17,4,5,53,5,5,53,5,5,53,5,5,5,5,5,53,5,5,5,5,53,5,5,5,4,4,17,4,5,53,4,4,102,4,5,5,53,5,5,53,5,5,53,5,5,53,5,5,5,5,5,5,5,5,5,5,5,5,53,4,4,102,4,5,5,53,4,4,102,4,5,5,53,5,5,53,5,5,53,5,5,53,5,5,53,5,5,53,5,5,53,5,5,5,53,4,4,102,4,5,5,53,4,4,17,4,5,53,5,5,53,5,50,5,53,5,5,53,5,5,53,5,5,53,5,5,53,5,5,53,4,4,17,4,5,53,4,4,4,4,53,4,4,5,5,53,4,64,64,5,53,4,4,5,5,53,4,4,17,5,53,4,4,102,5,53,4,4,17,5,53,4,4,5,5,53,4,4,4,4,53,53,0,53,67,53,53,53,53,53,53,53];
var D=[0,2,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,3,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,2,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,8,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1];
for(n=0;n<756+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Stronghold(x,y,z){
var X=[x,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5];
var Y=[y,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+2,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+2,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+2,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7];
var Z=[z,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+3,z+3,z+3,z+3,z+3,z+4,z+4,z+4,z+4,z+4,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+9,z+9,z+9,z+9,z+9,z+10,z+10,z+10,z+10,z+10,z+10,z+10,z+10,z+11,z+11,z+11,z+11,z+11,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+12,z+12,z+12,z+12,z+13,z+13,z+13,z+13,z+13,z+13,z+13,z+13,z+14,z+14,z+14,z+14,z+14,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+3,z+4,z+4,z+4,z+4,z+5,z+5,z+5,z+6,z+6,z+6,z+7,z+7,z+7,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+13,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+6,z+6,z+7,z+7,z+8,z+8,z+9,z+9,z+10,z+10,z+11,z+11,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+5,z+5,z+6,z+6,z+7,z+7,z+8,z+8,z+8,z+9,z+9,z+9,z+9,z+10,z+10,z+10,z+10,z+11,z+11,z+11,z+11,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+5,z+5,z+6,z+6,z+7,z+7,z+8,z+8,z+8,z+9,z+9,z+9,z+9,z+10,z+10,z+10,z+10,z+11,z+11,z+11,z+11,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+6,z+6,z+7,z+7,z+8,z+8,z+9,z+9,z+10,z+10,z+11,z+11,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+3,z+4,z+4,z+4,z+4,z+5,z+5,z+5,z+6,z+6,z+6,z+7,z+7,z+7,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+13,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+3,z+3,z+3,z+3,z+3,z+4,z+4,z+4,z+4,z+4,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+9,z+9,z+9,z+9,z+9,z+10,z+10,z+10,z+10,z+10,z+10,z+10,z+10,z+11,z+11,z+11,z+11,z+11,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+12,z+12,z+12,z+12,z+13,z+13,z+13,z+13,z+13,z+13,z+13,z+13,z+14,z+14,z+14,z+14,z+14,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15];
var I=[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,97,97,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,97,98,98,98,97,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,97,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,11,98,98,97,11,98,98,98,11,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,97,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,97,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,97,98,97,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,120,98,98,98,120,98,98,98,120,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,109,98,97,98,109,97,98,98,98,109,98,98,97,98,98,98,98,98,120,98,97,11,98,98,11,98,98,11,98,98,98,120,98,98,98,97,98,98,98,98,98,101,101,98,98,98,98,101,98,98,98,98,97,98,98,98,97,97,98,98,98,109,98,98,97,109,98,98,98,98,52,98,98,98,98,98,98,98,98,120,98,98,11,98,98,11,98,98,11,98,98,98,120,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,109,98,98,98,109,98,98,97,98,109,98,98,98,98,98,98,98,98,120,98,98,11,98,98,11,98,98,11,98,98,98,120,98,98,97,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,97,98,120,98,98,98,120,98,98,98,120,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,97,98,98,98,98,98,98,98,11,98,98,98,11,98,98,98,11,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,97,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,97,101,101,98,98,98,97,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,97,101,101,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98];
var D=[0,0,0,0,1,0,0,0,1,1,1,1,0,2,1,0,2,0,0,1,2,1,0,2,0,2,1,2,0,0,2,0,2,1,1,1,0,0,0,0,0,0,1,0,0,0,2,2,2,2,1,0,1,0,0,2,1,0,0,2,0,0,1,0,2,1,0,2,1,1,2,0,0,2,4,0,0,0,0,1,0,2,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,2,2,2,0,2,0,0,2,0,0,2,2,0,1,1,0,1,2,0,0,2,0,1,2,0,1,0,0,0,0,1,1,0,0,1,1,0,2,0,2,1,2,0,0,0,0,0,0,2,0,1,2,1,2,0,2,2,0,1,1,0,0,0,2,0,0,0,0,0,0,0,1,1,1,2,2,2,2,0,0,0,1,1,1,1,2,0,1,0,0,0,2,0,0,1,0,1,1,1,0,0,2,0,2,2,2,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,2,0,0,2,1,1,2,1,0,2,0,1,2,2,0,0,0,0,0,2,2,2,0,1,0,0,2,0,0,1,0,0,0,0,2,1,0,1,0,1,1,0,0,0,2,1,2,1,0,1,3,1,1,0,3,2,2,2,3,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,2,0,2,2,2,2,1,0,1,2,0,1,3,0,2,2,0,0,0,1,2,0,1,1,0,0,0,0,2,1,0,2,1,0,1,2,2,0,1,0,0,0,0,0,2,0,0,0,1,2,0,0,2,1,0,1,2,2,0,1,1,2,0,2,2,2,0,1,1,1,0,0,1,0,0,2,0,2,0,0,1,0,0,2,1,0,2,1,0,2,0,0,2,2,2,0,1,0,0,0,1,1,2,0,1,0,0,1,0,0,0,1,1,2,0,2,0,1,1,2,1,0,2,0,2,1,0,2,2,0,1,0,0,2,0,0,1,1,0,1,1,1,0,0,0,0,2,1,0,1,0,0,1,2,0,2,1,1,2,1,1,2,1,0,1,0,0,2,0,0,1,0,1,0,1,0,0,1,1,2,2,2,0,0,1,0,1,0,1,2,0,2,2,1,2,4,0,2,1,1,1,0,0,1,2,0,0,5,1,2,2,1,0,2,1,1,1,1,0,2,0,0,0,0,2,0,2,1,0,2,1,1,1,2,1,0,1,0,1,0,1,0,1,2,2,0,0,1,0,3,2,0,0,0,0,0,1,0,1,1,2,2,0,0,0,0,1,2,1,0,1,0,0,1,0,0,0,2,0,2,2,2,0,2,0,0,0,0,1,0,2,1,0,0,0,1,1,0,2,2,0,0,1,1,1,0,0,1,2,1,1,1,0,1,1,2,1,0,0,0,0,1,2,1,1,1,1,0,1,1,1,0,0,1,1,0,2,2,0,2,2,0,0,0,1,2,0,2,0,2,0,0,1,1,1,0,2,0,0,0,0,1,2,1,0,0,0,0,1,1,0,1,1,2,0,0,2,0,1,2,2,0,0,2,2,1,0,0,0,0,0,2,0,0,0,0,2,0,0,2,1,2,1,1,2,0,0,0,2,1,0,1,2,0,0,2,2,0,2,1,0,0,0,2,1,1,2,0,2,0,0,0,0,2,1,1,2,1,2,2,0,1,1,1,2,0,0,0,2,1,2,0,1,1,1,2,0,0,2,1,2,2,1,1,1,0];
for(n=0;n<1408+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Blacksmith(x,y,z){
var X=[x,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0];
var Y=[y,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+4,y+0,y+1,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+4,y+0,y+1,y+2,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+3,y+4,y+0,y+1,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+3,y+4,y+0,y+1,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+4,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5];
var Z=[z,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0];
var I=[4,4,17,17,17,17,44,4,5,5,5,4,44,4,5,102,5,4,44,4,5,5,5,4,44,4,5,102,5,4,44,4,5,5,5,4,44,4,17,17,17,17,44,4,5,5,5,4,44,4,5,4,4,53,4,4,4,4,4,4,4,4,5,5,5,4,44,4,5,102,5,4,44,4,53,4,4,85,171,4,4,4,4,4,4,4,4,5,5,5,4,44,4,5,5,5,4,44,4,4,4,4,4,4,4,5,5,5,4,4,5,4,4,17,17,17,17,44,4,5,102,5,4,44,4,4,4,4,4,5,5,5,4,4,4,4,4,4,4,44,4,5,5,5,4,44,4,54,4,4,4,4,5,5,5,4,4,4,4,4,4,85,85,85,4,44,4,4,4,4,4,44,4,4,4,4,4,4,4,4,4,4,4,4,61,61,4,4,4,4,4,4,4,44,4,4,4,4,4,44,4,11,4,4,4,4,4,4,4,4,4,4,4,4,4,4,44,4,4,4,4,4,44,4,11,4,4,4,4,4,4,4,4,4,4,4,43,4,4,4,44,4,4,4,4,4,44,4,4,101,4,4,44,4,4,101,4,4,44,4,4,44,4,4,44,4,4,44,4,85,85,85,4,44];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<420+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Church_1(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9];
var Y=[y,y+0,y+12,y+0,y+0,y+1,y+0,y+0,y+0,y+5,y+10,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+12,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+5,y+10,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+12,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+12,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+2,y+3,y+4,y+5,y+10,y+0,y+1,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+12,y+0,y+1,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+2,y+3,y+4,y+5,y+10,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+6,y+0,y+1,y+5,y+6,y+0,y+1,y+2,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+5,y+6,y+0,y+1,y+2,y+6,y+0,y+1,y+2,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+6,y+0,y+1,y+2,y+6,y+0,y+1,y+2,y+3,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0];
var Z=[z,z+-2,z+-2,z+-1,z+0,z+0,z+1,z+2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+2];
var I=[0,198,0,198,0,67,2,2,3,4,4,3,4,4,4,4,4,4,4,4,4,4,4,3,4,64,64,4,4,4,102,102,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,3,4,4,4,3,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,102,102,4,4,102,102,4,4,4,4,3,4,4,4,3,4,4,4,3,4,4,4,4,4,102,102,4,4,102,102,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,3,4,4,4,3,4,4,4,3,4,65,65,65,65,65,65,65,65,65,3,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,102,102,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,3,4,4,4,4,4,3,4,67,4,3,4,50,4,3,4,67,4,3,4,4,4,4,4,3,4,4,4,102,4,3,4,4,50,4,3,4,67,4,3,4,4,4,3,4,4,4,102,4,3,4,4,4,4,4,3,4,4,67,4,3,4,4,4,3,4,4,67,4,3,4,4,4,4,4,3,2,3,4,4,4,4,4,3,4,4,4,102,4,3,4,4,4,4,4,2];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<650+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Farm_Small(x,y,z){
var X=[x,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0];
var Y=[y,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0];
var Z=[z,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-7,z+-6,z+-5,z+-4,z+-3,z+-2,z+-1,z+0];
var I=[17,17,0,17,97,17,98,17,98,17,98,17,98,17,98,17,98,17,98,17,98,3,98,3,98,3,98,3,98,3,98,3,98,3,98,17,98,17,98,3,98,3,98,3,98,3,98,3,98,3,98,3,98,17,98,17,98,9,97,9,98,9,98,9,98,9,98,9,97,9,98,17,98,17,98,3,98,3,98,3,98,3,98,3,98,3,98,3,98,17,98,17,98,3,98,3,98,3,98,3,98,3,98,3,98,3,98,17,98,17,17,17,17,17,17,17,17,17];
var D=[0,0,0,0,2,0,1,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,2,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,2,0,1,0,1,0,1,0,0,0,2,0,2,0,0,0,2,0,0,0,0,0,2,0,1,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,2,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0];
for(n=0;n<126+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Small_2(x,y,z){
var X=[x,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5];
var Y=[y,y+0,y+0,y+0,y+1,y+2,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+5,y+0,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+5,y+0,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+5,y+0,y+1,y+2,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3];
var Z=[z,z+-2,z+0,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0];
var I=[0,67,0,4,17,17,17,4,64,64,5,17,4,5,5,5,17,4,17,17,17,4,5,5,5,17,3,17,3,17,4,5,5,5,17,4,5,102,5,17,3,17,3,17,4,5,102,5,17,4,5,5,5,17,3,17,3,85,171,17,4,5,5,5,17,4,17,17,17,0,4,5,5,5,17,4,5,5,5,17,4,17,17,17];
var D=[0,0,0,0,0,0,0,0,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<144+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Well(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3];
var Y=[y,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+2,y+3,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+2,y+3,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+2,y+3,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+2,y+3,y+4];
var Z=[z,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0];
var I=[4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,85,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,85,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,9,9,9,4,4,9,9,9,9,9,9,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,9,9,9,4,4,9,9,9,9,9,9,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,85,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,85,4];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<256+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Villager_Farm_Big(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8];
var Y=[y,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0];
var Z=[z,z+-12,z+-11,z+-10,z+-9,z+-8,z+-7,z+-6,z+-5,z+-4,z+-3,z+-2,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-12,z+-11,z+-10,z+-9,z+-8,z+-7,z+-6,z+-5,z+-4,z+-3,z+-2,z+-1,z+0];
var I=[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,141,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,59,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,7,3,0,7,0,0,0,0,7,0,7,5,0,7,5,7,6,0,0,7,5,7,6,0,7,3,0,6,0,7,2,0,0,0,7,6,7,3,0,0,0,3,7,2,0,7,6,7,6,0,0,0,7,2,0,7,4,0,3,0,0,7,4,7,6,0,7,2,7,6,0,7,3,7,6,0,7,6,7,1,0,0,7,2,7,6,0,7,3,7,4,0,7,1,7,4,0,0,0,7,5,0,0,7,3,7,3,0,7,5,7,0,0,0,2,7,5,0,0,3,0,1,0,0,0,4,0,0,0,7,5,7,0,0,0,3,7,5,0,7,3,7,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<234+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Villager_Small_1(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4];
var Y=[y,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+3,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5];
var Z=[z,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0];
var I=[4,4,4,4,4,17,85,4,5,5,5,17,85,4,5,17,85,4,5,5,5,17,85,4,4,4,4,17,85,4,5,5,5,17,85,4,5,4,50,5,4,5,4,5,5,5,17,85,4,5,102,5,17,85,4,5,4,5,4,5,4,5,102,5,17,85,4,5,5,5,17,85,4,5,4,5,4,65,65,65,65,4,5,5,5,17,85,4,4,4,4,17,85,4,5,5,5,17,85,4,5,102,5,17,85,4,5,5,5,17,85,4,4,4,4,17,85];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<150+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

ModPE.langEdit('thirdPartyWorld.featuredComingSoon', 'pe.brlns.net : 2000\nplay.easecation.net : 19132\nsw.lbsg.net : 19132');
ModPE.langEdit("enchantment.level.32767","GOD");
var context = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
languagesarr = ["Afrikaans","Albanian","Amharic","Arabic","Armenian","Azerbaijani","Basque","Belarusian","Bengali","Bosnian","Bulgarian","Burmese","Catalan","Cebuano","Chichewa","Chinese","Corsican","Croatian","Czech","Danish","Dutch","English","Esperanto","Estonian","Filipino","Finnish","French","Frisian","Galician","Georgian","German","Greek","Gujarati","Haitian Creole","Hausa","Hawaiian","Hebrew","Hindi","Hmong","Hungarian","Icelandic","Igbo","Indonesian","Irish","Italian","Japanese","Javanese","Kannada","Kazakh","Khmer","Korean","Kurdish (Kurmanji)","Kyrgyz","Lao","Latin","Latvian","Lithuanian","Luxembourgish","Macedonian","Malagasy","Malay","Malayalam","Maltese","Maori","Marathi","Mongolian","Nepali","Norwegian (Bokmål)","Pashto","Persian","Polish","Portuguese","Punjabi","Romanian","Russian","Samoan","Scots Gaelic","Serbian","Sesotho","Shona","Sindhi","Sinhala","Slovak","Slovenian","Somali","Spanish","Sundanese","Swahili","Swedish","Tajik","Tamil","Telugu","Thai","Turkish","Ukrainian","Urdu","Uzbek","Vietnamese","Welsh","Xhosa","Yiddish","Yoruba","Zulu"],
langcodes = ["af","sq","am","ar","hy","az","eu","be","bn","bs","bg","my","ca","ceb","ny","zh-CN","co","hr","cs","da","nl","en","eo","et","fil","fi","fr","fy","gl","ka","de","el","gu","ht","ha","haw","iw","hi","hmn","hu","is","ig","id","ga","it","ja","jw","kn","kk","km","ko","ku","ky","lo","la","lv","lt","lb","mk","mg","ms","ml","mt","mi","mr","mn","ne","no","ps","fa","pl","pt-PT","pa","ro","ru","sm","gd","sr","st","sn","sd","si","sk","sl","so","es","su","sw","sv","tg","ta","te","th","tr","uk","ur","uz","vi","cy","xh","yi","yo","zu"],
lansele = 0;

var downloadDir = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/Download");

function deleteExcess(){
if(downloadDir.exists() || downloadDir.isDirectory()){
var list = downloadDir.listFiles();
for(var i = 0; i < list.length; i++){
if(list[i].isFile()) {
if(list[i].getName().endsWith(".js") || list[i].getName().endsWith(".modpkg")){
	if(list[i].getName().toLowerCase().includes('instinct')){
var file = java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/Download", list[i].getName());
file.delete();}
}}}
}
}deleteExcess();

function disableOther(){
if(downloadDir.exists() || downloadDir.isDirectory()){
var list = downloadDir.listFiles();
for(var i = 0; i < list.length; i++){
if(list[i].isFile()) {
if(list[i].getName().endsWith(".js") || list[i].getName().endsWith(".modpkg")){
	if(list[i].getName().toLowerCase().includes('instinct')){
var file = java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/Download", list[i].getName());
file.delete();}
}}}
}
}disableOther();

/*
                            var modpeFolder = ctx.getDir("modscripts", 0);
                            var modpeFile = new java.io.File(modpeFolder, "Instinct-Unreleased.js");
                            var update = new java.io.PrintWriter(modpeFile);
                            update.write(updateMod);
                            update.flush();
                            update.close();
                             
                            try {
                                net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(modpeFile, false);
                                net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(modpeFile, true);
                            }
*/

function chatlangedit(){
context.runOnUiThread(function() {
var alert = new android.app.AlertDialog.Builder(context),
spinner = new  android.widget.Spinner(context),
spinnerAdapter = new android.widget.ArrayAdapter(context, android.R.layout.simple_spinner_item, languagesarr);

//define how the dropdown views look
spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

//add the adaper to the spinner
spinner.setAdapter(spinnerAdapter);

//set selected item
spinner.setSelection(lansele);

//listener to do something when the selection changes
spinner.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener({
onItemSelected: function(parent, view, pos, id) {
lansele = pos;
translatelang="googtrans(auto|"+langcodes[pos]+")";
}/* , onNothingSelected: function(parent) {} */
}));

alert.setView(spinner);
alert.setTitle("Translator Language");
alert.setPositiveButton("Ok", function(dialog, whichButton) {
alert.dismiss();
});
alert = alert.show();
});
}

var context = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
fontlist = ["Minecraft","Roboto Regular","Roboto Light","Roboto Condensed","Roboto Thin"],
fontsele = 0;
function choosefont(){
context.runOnUiThread(function() {
var alert = new android.app.AlertDialog.Builder(context),
spinner = new  android.widget.Spinner(context),
spinnerAdapter = new android.widget.ArrayAdapter(context, android.R.layout.simple_spinner_item, fontlist);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);

var swtxt = android.widget.TextView(ctx);
swtxt.setTextSize(12);
swtxt.setText(" Switch Font Size:");
switchsize=new android.widget.EditText(activity);
switchsize.setText(switchfontsize.toString());
switchsize.setHint("switch font size");
var bttxt = android.widget.TextView(ctx);
bttxt.setTextSize(12);
bttxt.setText(" Button Font Size:");
btnsize=new android.widget.EditText(activity);
btnsize.setText(btntextsize.toString());
btnsize.setHint("button font size");
var fontsel = android.widget.TextView(ctx);
fontsel.setTextSize(12);
fontsel.setText(" Font:");
menuLayout1.addView(swtxt);
menuLayout1.addView(switchsize);
menuLayout1.addView(bttxt);
menuLayout1.addView(btnsize);
menuLayout1.addView(fontsel);
//define how the dropdown views look
spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

//add the adaper to the spinner
spinner.setAdapter(spinnerAdapter);

//set selected item
spinner.setSelection(fontsele);

//listener to do something when the selection changes
spinner.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener({
onItemSelected: function(parent, view, pos, id) {
fontsele = pos;
}/* , onNothingSelected: function(parent) {} */
}));
menuLayout1.addView(spinner);

var tptxt = android.widget.TextView(ctx);
tptxt.setTextSize(12);
tptxt.setText(" Mod Padding:");
toppadd=new android.widget.EditText(activity);
toppadd.setText((modPadT+modPadB).toString());
toppadd.setHint("mod padding");
toppadd.setInputType(numbers);
menuLayout1.addView(tptxt);
menuLayout1.addView(toppadd);
menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);

alert.setView(menuLayout);
alert.setTitle("GUI Settings");
alert.setPositiveButton("Ok", function(dialog, whichButton) {
alert.dismiss();
try{
btntextsize= parseInt(btnsize.getText());
switchfontsize = parseInt(switchsize.getText());
modPadT= parseInt(toppadd.getText()/2);
modPadB = parseInt(toppadd.getText()/2);
if(toppadd.getText()==""){modPadT=0;modPadB=0}
if(fontsele==0){fontid="mc";mcfont = new android.graphics.Typeface.createFromFile(mcfontpath4);}
if(fontsele==1){fontid="ss";mcfont = Typeface.create("sans-serif", Typeface.NORMAL)}
if(fontsele==2){fontid="ssl";mcfont = Typeface.create("sans-serif-light", Typeface.NORMAL)}
if(fontsele==3){fontid="ssc";mcfont = Typeface.create("sans-serif-condensed", Typeface.NORMAL)}
if(fontsele==4){fontid="sst";mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)}
}catch (err) {
mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL);betToast('Font not supported');
}
});
alert = alert.show();
});
}

function newTip(i){
var tipTotal = tipList.length;
curTip = Math.floor(Math.random() * tipList.length-1);
if(curTip==0){curTip=1}
if(curTip==-1){curTip=1}
tipMessage = "Tip "+curTip+"/"+(tipTotal+1)+"\n"+tipList[curTip];
}

function roundPart(part,x,y,z,diameter,size,velX,velY,velZ){
diameter = diameter/2;
if(!velX){velX=0;}
if(!velY){velY=0;}
if(!velZ){velZ=0;}
for(var i=0;i<2*(Math.PI*diameter);i = i + 0.1){
Level.addParticle(part,x+0.5+Math.sin(i)*diameter,y,z+0.5+Math.cos(i)*diameter,velX,velY,velZ,size)
}
}
function openMenuCloseBtn() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
newTip();
if (!sleekMenuOn) {

var sleekUIbtnSet1 = new android.graphics.drawable.GradientDrawable();
sleekUIbtnSet1.setColor(android.graphics.Color.BLACK);
sleekUIbtnSet1.setStroke(3, themeStroke);
sleekUIbtnSet1.setCornerRadius(0);
sleekUIbtnSet1.setAlpha(0);
var discordBack = new android.graphics.drawable.GradientDrawable();
discordBack.setColor(android.graphics.Color.BLACK);
discordBack.setCornerRadius(0);
discordBack.setAlpha(140);
discordBack.setStroke(2, themeStroke);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var closebtnBackground = new android.graphics.drawable.GradientDrawable();
closebtnBackground.setColor(themeStrokeRed);
closebtnBackground.setCornerRadius(0);
closebtnBackground.setAlpha(255);
closebtnBackground.setStroke(2, themeStroke);
var chatbtnBackground = new android.graphics.drawable.GradientDrawable();
chatbtnBackground.setColor(themeStrokeWhite);
chatbtnBackground.setCornerRadius(0);
chatbtnBackground.setAlpha(255);
chatbtnBackground.setStroke(2, themeStroke);
var bgClicked = new android.graphics.drawable.GradientDrawable();
bgClicked.setColor(themeBackground);
bgClicked.setStroke(0, themeStroke);
bgClicked.setCornerRadius(0);
bgClicked.setAlpha(255);
var bgNotClicked = new android.graphics.drawable.GradientDrawable();
bgNotClicked.setColor(themeForeground);
bgNotClicked.setStroke(4, themeStroke);
bgNotClicked.setCornerRadius(5);
var sideMenuStroke = new android.graphics.drawable.GradientDrawable();
sideMenuStroke.setStroke(4, themeStroke);
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setStroke(4, themeStroke);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
menuLayoutw.setBackground(discordBack);
var buttonSurvival = new android.widget.Button(ctx);
buttonSurvival.setText("");
buttonSurvival.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonSurvival.getLayoutParams().height = icon_dimensions*.1;
buttonSurvival.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonSurvival.getBackground().setAlpha(0);
menuLayoutw.addView(buttonSurvival);
var scrollText = new android.widget.TextView(ctx);
scrollText.setText("Client made by " + creator + " - Client Version " + versionP + " - " + modNum + " Modules");
scrollText.setTextSize(9);
scrollText.setTextColor(android.graphics.Color.YELLOW);
scrollText.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
scrollText.setMarqueeRepeatLimit(-1);
scrollText.setSingleLine();
scrollText.setTypeface(mcfont);
scrollText.setHorizontallyScrolling(true);
scrollText.setSelected(true);
menuLayoutw.addView(scrollText);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.WHITE);
button.setTextSize(titleSize);
button.setBackground(closebtnBackground);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(closeicon, 0), 0, android.util.Base64.decode(closeicon, 0).length)));
button.getBackground().setAlpha(240);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
closeEverything();
}
}));
menuLayoutw.addView(button);
var showEverythingLayout = new android.widget.LinearLayout(ctx);
var menuScroll2 = new android.widget.ScrollView(ctx);
var menuLayout2 = new android.widget.LinearLayout(ctx);
showEverythingLayout.setOrientation(1);
menuLayout2.setOrientation(1);
menuScroll2.addView(showEverythingLayout);
menuLayout2.addView(menuScroll2);
showEverythingLayout.setOrientation(1);
menuLayout2.setOrientation(1);
var slayout8 = new android.widget.LinearLayout(activity);
slayout8.setOrientation(1);
slayout8.setBackground(sleekUIbtnSet1);
var ToggleButton = android.widget.ToggleButton;
var View = android.view.View;
var button = new TextView(ctx);
button.setText(langMsg[language]["Enable PVP Menu"]);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!showAllMenuStatus) {
closeMenus();
showAllMenu = true;
showSleekMenuOn=false;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
}
} else if (showAllMenuStatus) {
showAllMenu = false;
showSleekMenuOn=true;
menuC.dismiss();
closeMenus();
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true) {
changeGUI8.dismiss();
openMenu8Status = false;
}

if (openMenu9Status == true) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true) {
changeGUI11.dismiss();
openMenu11Status = false;
}

GUIclose.dismiss();
if (colormychatd == true) {
GUIs.dismiss();
}
}
}
}));
slayout8.addView(button);
var button = new TextView(ctx);
button.setText("Simple UI");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if(publicVer!="OFFLINE"){	
betToast("Go to settings to revert to default UI");
if (!showAllMenuStatus) {
closeMenus();
showAllMenu = true;
showSleekMenuOn=false;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
if (showHTMLMenu) {
GUIsleek.dismiss();
showHTMLMenu = false;
GUIclose.dismiss();
}
} else if (showAllMenuStatus) {
showAllMenu = false;
showHTMLMenu=true;
sleekMenuOn = false;
showSleekMenuOn=false;
showAllMenu = false;
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
menuC.dismiss();
closeMenus();
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true) {
changeGUI8.dismiss();
openMenu8Status = false;
}

if (openMenu9Status == true) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true) {
changeGUI11.dismiss();
openMenu11Status = false;
}

GUIclose.dismiss();
if (colormychatd == true) {
GUIs.dismiss();
}
}
}else{betToast("Online connection required")}
}
}));
slayout8.addView(button);
var button = new TextView(ctx);
button.setText("Support Instinct for Free");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
supportIns();
supportIns2();
supportclicks=supportclicks+1;
betToast("You've supported Instinct "+supportclicks+" times!");
saveTheme();
}
}));

var button = new TextView(ctx);
button.setText("Chat Room");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
chatroomPopup();
}
}));
var button = new android.widget.Button(ctx);
button.setText(tipMessage);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.WHITE);
button.setBackground(discordBack);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.getBackground().setAlpha(100);
slayout8.addView(button);
menuLayoutw.addView(slayout8);
GUIclose = new PopupWindow(menuLayout1, close_width, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
if(animations){GUIclose.setAnimationStyle(android.R.style.Animation_Toast);}
GUIclose.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
if(allRight){
GUIclose.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.LEFT, 0, 0);
}else{
GUIclose.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.RIGHT, 0, 0);
}

} else {
openMenuCloseBtnSleek();
}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function discordPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var tmiLayout = new android.widget.LinearLayout(ctx);
var verticallay = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
infoBox = new android.webkit.WebView(ctx);
infoBox.getSettings().setJavaScriptEnabled(true);
infoBox.setWebChromeClient(new android.webkit.WebChromeClient());
infoBox.setWebViewClient(new android.webkit.WebViewClient());
infoBox.loadUrl("https://discordapp.com/invite/DJDwcZ?utm_source=Discord%20Widget&utm_medium=Connect");
var menuScroll = new android.widget.ScrollView(ctx);
menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
verticallay.addView(tmiMainHor);
disDialog = new PopupWindow(verticallay, ctx.getWindowManager().getDefaultDisplay().getWidth() / 3, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){disDialog.setAnimationStyle(android.R.style.Animation_Toast);}
disDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
disDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function resetBoxes(){
var playerArrayName = []; for(var i = 0; i < Server.getAllPlayers().length; i++){ playerArrayName.push([Server.getAllPlayerNames()[i]]); }
playerArrayName.forEach(function(entry, index){ Entity.setCollisionSize(Server.getAllPlayers()[playerArrayName.indexOf(entry)], 0.6, 1.8); }); 
}
function openMenuCloseBtnSleek() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var sleekUIbtnSet1 = new android.graphics.drawable.GradientDrawable();
sleekUIbtnSet1.setColor(themeForeground);
sleekUIbtnSet1.setStroke(3, themeStroke);
sleekUIbtnSet1.setCornerRadius(0);
sleekUIbtnSet1.setAlpha(180);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var closebtnBackground = new android.graphics.drawable.GradientDrawable();
closebtnBackground.setColor(themeForegroundRed);
closebtnBackground.setCornerRadius(0);
closebtnBackground.setAlpha(255);
closebtnBackground.setStroke(2, themeStroke);
var bgClicked = new android.graphics.drawable.GradientDrawable();
bgClicked.setColor(themeBackground);
bgClicked.setStroke(0, themeStroke);
bgClicked.setCornerRadius(0);
bgClicked.setAlpha(255);
var bgNotClicked = new android.graphics.drawable.GradientDrawable();
bgNotClicked.setColor(themeForeground);
bgNotClicked.setStroke(4, themeStroke);
bgNotClicked.setCornerRadius(5);
var sideMenuStroke = new android.graphics.drawable.GradientDrawable();
sideMenuStroke.setStroke(4, themeStroke);
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setStroke(4, themeStroke);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
menuLayoutw.setBackground(closebtnBackground);
var buttonSurvival = new android.widget.Button(ctx);
buttonSurvival.setText("");
buttonSurvival.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonSurvival.getLayoutParams().height = 10;
buttonSurvival.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonSurvival.getBackground().setAlpha(0);
menuLayoutw.addView(buttonSurvival);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.WHITE);
button.setTextSize(titleSize);
button.setBackground(closebtnBackground);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(closeicon, 0), 0, android.util.Base64.decode(closeicon, 0).length)));
button.getBackground().setAlpha(240);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
closeEverything();
}
}));
menuLayoutw.addView(button);
var showEverythingLayout = new android.widget.LinearLayout(ctx);
var menuScroll2 = new android.widget.ScrollView(ctx);
var menuLayout2 = new android.widget.LinearLayout(ctx);
showEverythingLayout.setOrientation(1);
menuLayout2.setOrientation(1);
menuScroll2.addView(showEverythingLayout);
menuLayout2.addView(menuScroll2);
showEverythingLayout.setOrientation(1);
menuLayout2.setOrientation(1);
var slayout8 = new android.widget.LinearLayout(activity);
slayout8.setOrientation(1);
slayout8.setBackground(sleekUIbtnSet1);
var ToggleButton = android.widget.ToggleButton;
var View = android.view.View;
var button = new TextView(ctx);
button.setText("Default GUI");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!showAllMenuStatus) {
closeMenus();
showAllMenu = true;
showSleekMenuOn=false;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
}
} else if (showAllMenuStatus) {
showAllMenu = false;
showSleekMenuOn=true;
menuC.dismiss();
closeMenus();
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true) {
changeGUI8.dismiss();
openMenu8Status = false;
}

if (openMenu9Status == true) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true) {
changeGUI11.dismiss();
openMenu11Status = false;
}

GUIclose.dismiss();
if (colormychatd == true) {
GUIs.dismiss();
}
}
}
}));
slayout8.addView(button);
menuLayoutw.addView(slayout8);
GUIclose = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / closemenuWidth, LayoutParams.WRAP_CONTENT);
if(animations){GUIclose.setAnimationStyle(android.R.style.Animation_Toast);}
GUIclose.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIclose.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.RIGHT, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function confirmSuicide() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var helpLine = android.widget.TextView(ctx);
var txtAmount = android.widget.TextView(ctx);
var txtDamage = android.widget.TextView(ctx);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Yes");
helpLine.setTextSize(12);
helpLine.setText("Suicide Help Line: 1-800-273-8255");
var confirmSuicideDialog = new android.app.Dialog(ctx);
confirmSuicideDialog.setContentView(tmiLayout);
confirmSuicideDialog.setTitle("Suicide: Are you sure?");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
tmiLayout.addView(helpLine);
confirmSuicideDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Entity.setPositionRelative(getPlayerEnt(), 0, -300, 1);
confirmSuicideDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
confirmSuicideDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
function renamePopup() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var etName = new android.widget.EditText(ctx);
var txtName = android.widget.TextView(ctx);
txtName.setTextSize(12);
txtName.setText(" Name:");
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Rename");
etName.setText("");
etName.setHint("Name");
var tmiDialog = new android.app.Dialog(ctx);
tmiDialog.setContentView(tmiLayout);
tmiDialog.setTitle("Anvil");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiLayout.addView(txtName);
tmiLayout.addView(etName);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
tmiDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
Player.setItemCustomName(Player.getSelectedSlotId(), etName.getText());
tmiDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
tmiDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
function gifedit() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
	var scriptalert=new android.app.AlertDialog.Builder(activity);
scriptalert.setTitle("Script");
var tmiLayout = new android.widget.LinearLayout(ctx);
var etName = new android.widget.EditText(ctx);
var txtName = android.widget.TextView(ctx);
var txtspace = android.widget.TextView(ctx);
txtName.setTextSize(12);
txtName.setText(" Link:");
var link1 = new android.widget.Button(ctx);
var link2 = new android.widget.Button(ctx);
var link3 = new android.widget.Button(ctx);
link1.setTransformationMethod(null);
link2.setTransformationMethod(null);
link3.setTransformationMethod(null);
link1.setText("Robot");
link2.setText("Rubix");
link3.setText("Moon");
etName.setText(giflink);
etName.setTextSize(7);
etName.setHint("URL to GIF");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiLayout.addView(txtName);
tmiLayout.addView(etName);
tmiLayout.addView(link1);
tmiLayout.addView(link2);
tmiLayout.addView(link3);

link1.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
etName.setText(gif1);
}
});
link2.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
etName.setText(gif2);
}
});
link3.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
etName.setText(gif3);
}
});

scriptalert.setPositiveButton("Apply",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
giflink=etName.getText();
useGIF=true;
savemod("GIF Background");
}
});

scriptalert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
scriptalert.setView(tmiLayout);
scriptalert.show().getWindow().setLayout(fullwidth, fullheight);
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};

function openBackground() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
	backOpen=true;
var gifback=new android.webkit.WebView(activity);
gifback.getSettings().setJavaScriptEnabled(true);
gifback.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
gifback.loadUrl(giflink);
gifback.getSettings().setUseWideViewPort(true);
gifback.getSettings().setLoadWithOverviewMode(true);
gifback.setBackgroundColor(Color.TRANSPARENT);

guiBackgroundGif = new PopupWindow(gifback, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){guiBackgroundGif.setAnimationStyle(android.R.style.Animation_Toast);}
guiBackgroundGif.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);
guiBackgroundGif.setTouchable(false);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function draw(newX,newY,newZ){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks.push([newX,newY,newZ]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
function draw2(newX,newY,newZ){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks2.push([newX,newY,newZ]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
function draw3(newX,newY,newZ){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks3.push([newX,newY,newZ]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
function draw4(newX,newY,newZ){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks4.push([newX,newY,newZ]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
function draw5(newX,newY,newZ){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks5.push([newX,newY,newZ]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
function draw6(newX,newY,newZ){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks6.push([newX,newY,newZ]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
function draw7(newX,newY,newZ){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks7.push([newX,newY,newZ]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
function draw8(newX,newY,newZ){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks8.push([newX,newY,newZ]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
var checkX = ["."];
var checkZ = ["."];
var pool;
pool = java.util.concurrent.Executors.newScheduledThreadPool(1);
pool.setKeepAliveTime(1, java.util.concurrent.TimeUnit.MILLISECONDS);
pool.allowCoreThreadTimeOut(false);

function cpuClock(){
try{
pool.schedule(new java.lang.Runnable(function(){
android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
if(blockEspTracer){

var x = getPlayerX();
var y = getPlayerY();
var z = getPlayerZ();
var newX;
var newY;
var newZ;
for(var blockX = -40; blockX <= 40; blockX++) {
for(var blockY = -70; blockY <= 70; blockY++) {
for(var blockZ = -40; blockZ <= 40; blockZ++) {
newX = x + blockX;
newY = y + blockY;
newZ = z + blockZ;
if(espBlock!==0){if(getTile(newX, newY, newZ) == espBlock){draw(newX,newY,newZ);}}
if(espBlock2!==0){if(getTile(newX, newY, newZ) == espBlock2){draw(newX,newY,newZ);}}
if(espBlock3!==0){if(getTile(newX, newY, newZ) == espBlock3){draw(newX,newY,newZ);}}
if(espBlock4!==0){if(getTile(newX, newY, newZ) == espBlock4){draw(newX,newY,newZ);}}
if(espBlock5!==0){if(getTile(newX, newY, newZ) == espBlock5){draw(newX,newY,newZ);}}
if(espBlock6!==0){if(getTile(newX, newY, newZ) == espBlock6){draw(newX,newY,newZ);}}
if(espBlock7!==0){if(getTile(newX, newY, newZ) == espBlock7){draw(newX,newY,newZ);}}
if(espBlock8!==0){if(getTile(newX, newY, newZ) == espBlock8){draw(newX,newY,newZ);}}
}
}
}

}

eval(cpuClock());
}), 1, java.util.concurrent.TimeUnit.NANOSECONDS);
}catch(error){
print(error+' #' + error['lineNumber']);
}
}

function playerStatName(){
var players = Server.getAllPlayers();
players.forEach(function (entry){
if(Entity.getNameTag(entry)!==null){
if(Entity.getNameTag(entry).includes(',')){
	if(Entity.getNameTag(entry).split(',')[0]==""&getTile(Entity.getX(entry), Entity.getY(entry) - 2, Entity.getZ(entry))!=0){
		setTile(Entity.getX(entry),Entity.getY(entry)-2,Entity.getZ(entry),35,2);
	}
var entityOriName = Entity.getNameTag(entry).split(',')[0];
Entity.setNameTag(entry, entityOriName+","+"\n"+Entity.getHealth(entry)+"/"+Entity.getMaxHealth(entry)+"\n"+Item.getName(Entity.getCarriedItem(entry), Entity.getCarriedItemData(entry), false)+":"+Entity.getCarriedItemData(entry));
}else{

Entity.setNameTag(entry, Entity.getNameTag(entry)+","+"\n"+Entity.getHealth(entry)+"/"+Entity.getMaxHealth(entry)+"\n"+Item.getName(Entity.getCarriedItem(entry), Entity.getCarriedItemData(entry), false)+":"+Entity.getCarriedItemData(entry));
}}
})
}


function appendServer(name, ip, port) {
var file = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe", "external_servers.txt");
exWr = new FileWriter(file, true);
exWr.append("\n1" + Math.random() + ":" + name + ":" + ip + ":" + port + ":9" + Math.random());
exWr.flush();
};

function deleteData() {
var waypointfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "waypoints.txt");
if (waypointfile.exists()) {
waypointfile.delete();
}
var themesfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "instinctdata6.json");
if (themesfile.exists()) {
themesfile.delete();
}
var wayTxt = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "waypoints2.txt");
if (wayTxt.exists()) {
wayTxt.delete();
}
var friTxt = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "friends_I.txt");
if (friTxt.exists()) {
friTxt.delete();
}
ModPE.restart();
};
function clearInstinctData() {
var themesfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "instinctdata6.json");
if (themesfile.exists()) {
themesfile.delete();
}
ModPE.restart();
};
function saveWay(path2, filename, content) {
try {
java.io.File(path2).mkdirs();
var newFile = new java.io.File(path2, filename);
newFile.createNewFile();
var outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
outWrite.append(content);
outWrite.close();
} catch (err) {
clientMessage(err);
}
};

function loadWayFile(path2, filename) {
var content = "";
if (java.io.File(path2 + filename).exists()) {
var file = new java.io.File(path2 + filename),
fos = new java.io.FileInputStream(file),
str = new java.lang.StringBuilder(),
ch;
while ((ch = fos.read()) != -1) {
str.append(java.lang.Character(ch));
}
content = String(str.toString());
fos.close();
}
return content;
};
function loadTheme(){
var themesfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "instinctdata6.json");
if(themesfile.exists()){
var readed = (new java.io.BufferedReader(new java.io.FileReader(themesfile)));
var data = new java.lang.StringBuilder();
var string;
while((string = readed.readLine()) != null){
data.append(string);
data.append("\n");
}
var json = JSON.parse(data.toString());
var themeId = json.themeId;
themeBtn = json.themeBtn;
sleekLeft = json.sleekLeft;
oldTMI = json.oldTMI;
crosshairDimension = json.crosshairDimension;
FovsbpProgress = json.FovsbpProgress;
aimbotRange = json.aimbotRange;
autoBlockB = json.autoBlockB;
animations = json.animations;
chlogAlways = json.chlogAlways;
helpB = json.helpB;
iconsB = json.iconsB;
allRight = json.allRight;
showGradient = json.showGradient;
fontid = json.font;
themeAlpha = parseInt(json.themeAlpha);
btntextsize = parseInt(json.btntextsize);
switchfontsize = parseInt(json.switchfontsize);
if(json.modPadT!=null&json.modPadT!=undefined){
modPadT = parseInt(json.modPadT);
modPadB = parseInt(json.modPadB);
}else{
modPadT = icon_dimensions/4;
modPadB = icon_dimensions/4;
}
if(json.supportclicks!=null&json.supportclicks!=undefined){
supportclicks = parseInt(json.supportclicks);
}else{
supportclicks = 0;
}
try{
if(fontid=="mc"){mcfont = new android.graphics.Typeface.createFromFile(mcfontpath4);}
if(fontid=="ss"){mcfont = Typeface.create("sans-serif", Typeface.NORMAL)}
if(fontid=="ssl"){mcfont = Typeface.create("sans-serif-light", Typeface.NORMAL)}
if(fontid=="ssc"){mcfont = Typeface.create("sans-serif-condensed", Typeface.NORMAL)}
if(fontid=="sst"){mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)}
}catch (err) {
mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)
}
if(oldTMI=="true"){oldTMI=true}
if(oldTMI=="false"){oldTMI=false}
if(sleekLeft=="true"){sleekLeft=true}
if(sleekLeft=="false"){sleekLeft=false}
if(animations=="false"){animations=false}
if(animations=="true"){animations=true}
if(chlogAlways=="false"){chlogAlways=false}
if(chlogAlways=="true"){chlogAlways=true;chlog=true;}
if(iconsB=="false"){iconsB=false}
if(iconsB=="true"){iconsB=true}
if(helpB=="false"){helpB=false}
if(helpB=="true"){helpB=true}
if(allRight=="false"){allRight=false}
if(allRight=="true"){allRight=true}
if(showGradient=="false"){showGradient=false}
if(showGradient=="true"){showGradient=true}
} else {
var json = '{"themeId":"'+themeId+'","supportclicks":"'+supportclicks+'","showGradient":"'+showGradient+'","font":"'+fontid+'","modPadB":"'+modPadB+'","modPadT":"'+modPadT+'","btntextsize":"'+btntextsize+'","switchfontsize":"'+switchfontsize+'","themeBtn":"'+themeBtn+'","oldTMI":"'+oldTMI+'","sleekLeft":"'+sleekLeft+'","crosshairDimension":"'+crosshairDimension+'","FovsbpProgress":"'+FovsbpProgress+'","aimbotRange":"'+aimbotRange+'","autoBlockB":"'+autoBlockB+'","animations":"'+animations+'","helpB":"'+helpB+'","iconsB":"'+iconsB+'","chlogAlways":"'+chlogAlways+'","allRight":"'+allRight+'","themeAlpha":"'+themeAlpha+'"}';
themesfile.createNewFile();
var themeId = 0;
themeAlpha = 210;
var fos = new java.io.FileOutputStream(themesfile);
fos.write(new java.lang.String(json).getBytes());
}
themeFinish();
}
loadTheme();
if(!iconsB&!helpB){
list_width = (list_width_var*density)-(icon_dimensions*2);
wayNameWidth = list_width-(icon_dimensions*4);
}
if(!iconsB&helpB){
list_width = (list_width_var*density)-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}
if(iconsB&helpB){
wayNameWidth = list_width-(icon_dimensions*4);
list_width = list_width_var*density;
}
if(!helpB&iconsB){
list_width = list_width_var*density-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}	

function saveTheme(){

var themesfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "instinctdata6.json");
if (themesfile.exists()) {
themesfile.delete();
}
var json = '{"themeId":"'+themeId+'","supportclicks":"'+supportclicks+'","showGradient":"'+showGradient+'","font":"'+fontid+'","modPadB":"'+modPadB+'","modPadT":"'+modPadT+'","btntextsize":"'+btntextsize+'","switchfontsize":"'+switchfontsize+'","themeBtn":"'+themeBtn+'","oldTMI":"'+oldTMI+'","sleekLeft":"'+sleekLeft+'","crosshairDimension":"'+crosshairDimension+'","FovsbpProgress":"'+FovsbpProgress+'","aimbotRange":"'+aimbotRange+'","autoBlockB":"'+autoBlockB+'","animations":"'+animations+'","helpB":"'+helpB+'","iconsB":"'+iconsB+'","chlogAlways":"'+chlogAlways+'","allRight":"'+allRight+'","themeAlpha":"'+themeAlpha+'"}';
themesfile.createNewFile();
var fos = new java.io.FileOutputStream(themesfile);
fos.write(new java.lang.String(json).getBytes());
}

function networkData(data){
if(ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo()!==null){
if(data=="type"){
if(ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo().getType()==0){return "No Connection"}
if(ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo().getType()==1){return "Wifi"}
if(ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo().getType()==2){return "Mobile"}
}
if(data=="reason"){
return ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo().EXTRA_REASON
}
}else{return "No Service"}
}
//betToast(networkData("type")+"; "+networkData("reason"));
var X_W,Y_W,Z_W=null; var coords=false; var Xcoorinate=new android.widget.TextView(activity); var Ycoorinate=new android.widget.TextView(activity); var Zcoorinate=new android.widget.TextView(activity); var waypoints_W={}; var currentWaypoint; var lastDeath={x:null,y:null,z:null}; var lang={};lang["English"]={"New Version":"New Version","Currently available version":"Currently available version","Your version":"Your version","Update":"Update","Later":"Later","Close":"Close","Create waypoint":"Create waypoint","Hide coordinates":"Hide coordinates","Show coordinates":"Show coordinates","Latest Death":"Latest Death","Create new waypoint":"Create new waypoint","New Waypoint":"New Waypoint","Ok":"Ok","Cancel":"Cancel","Enter the coordinates":"Enter the coordinates","Error":"Error","Input must be X,Z. Example":"Input must be X,Y,Z. Example","Are you sure? You can't undo this!":"Are you sure? You can't undo this!","Please wait...downloading GUI...":"Please wait...downloading GUI...","Done!":"Done!"}; 


function AddNewWaypoint(cx,cy,cz) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Waypoint"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Tip: Enter waypoint name and coordinates."]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var etX = new android.widget.EditText(ctx);
var etC = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Name:");
var txtC = android.widget.TextView(ctx);
txtC.setTextSize(12);
txtC.setText(" Coordinates:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Add");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText("Waypoint 1");
etX.setTextColor(themeText);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
etC.setText(cx+","+cy+","+cz);
etC.setTextColor(themeText);
etC.setTextSize(14);
etC.setTypeface(mcfont);
etC.setBackground(xbg2);
txtX.setTextColor(themeText);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
txtC.setTextColor(themeText);
txtC.setTextSize(11);
txtC.setTypeface(mcfont);
txtC.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(txtC);
menuLayout.addView(etC);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);
if(String(etC.getText()).split(",").length==3){
waypoints_W[objectLength(waypoints_W)]={name_W:etX.getText(),x:parseInt(String(etC.getText()).split(",")[0]),y:parseInt(String(etC.getText()).split(",")[1]),z:parseInt(String(etC.getText()).split(",")[2]),removed:false};
Save();
chatdialog.dismiss();
}
else
betToast("Coordiantes Error, Format as such: "+cx+","+cy+","+cz);


}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
var intent = new android.content.Intent(ctx);
function openGallery(){
var intent = new android.content.Intent(ctx);
intent.setType("image/*");
intent.putExtra("crop", "true");
intent.putExtra("scale", true);
intent.putExtra("outputX", 256);
intent.putExtra("outputY", 256);
intent.putExtra("aspectX", 1);
intent.putExtra("aspectY", 1);
intent.putExtra("return-data", true);
intent.setAction(Intent.ACTION_GET_CONTENT);
ctx.startActivity(Intent.createChooser(intent, "Select Picture"));

}

function Coordinates(nme,cx,cy,cz){
try{
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle(lang[language]["Enter the coordinates"]);
userInput=new android.widget.EditText(activity);
userInput.setText(cx+","+cy+","+cz);
alert.setView(userInput);
alert.setPositiveButton(lang[language]["Ok"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
try{
if(String(userInput.getText()).split(",").length==3){
waypoints_W[objectLength(waypoints_W)]={name_W:nme,x:parseInt(String(userInput.getText()).split(",")[0]),y:parseInt(String(userInput.getText()).split(",")[1]),z:parseInt(String(userInput.getText()).split(",")[2]),removed:false};
Save();
}
else
Warning(Coordinates(nme,cx,cz),lang[language]["Error"],lang[language]["Input must be X,Z. Example"]+": "+cx+","+cy+","+cz);
}
catch(err){
clientMessage(err);
}
}
});
alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
catch(err){
clientMessage(err);
}
}
function Warning(funct,title,msg){
try{
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle(title);
alert.setMessage(msg);
alert.setPositiveButton(lang[language]["Ok"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
catch(err){
clientMessage(err);
}
}
function CreateButton(w){
try{
var slayout=new android.widget.LinearLayout(activity);
slayout.setOrientation(android.widget.LinearLayout.HORIZONTAL);
var btn=new android.widget.Button(activity);
btn.setText(waypoints_W[w].name_W+"\n["+waypoints_W[w].x+", "+waypoints_W[w].y+", "+waypoints_W[w].z+"]");
if(X_W==waypoints_W[w].x && Y_W==waypoints_W[w].y && Z_W==waypoints_W[w].z)
btn.getBackground().setColorFilter(android.graphics.Color.BLUE,android.graphics.PorterDuff.Mode.MULTIPLY);
btn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btn.getLayoutParams().width = wayNameWidth;
btn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btn.setTextColor(modTextColor);
btn.getBackground().setAlpha(130);
btn.setTextSize(btntextsize);
btn.setBackground(xbgWP);
btn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if(X_W==waypoints_W[w].x && Y_W==waypoints_W[w].y && Z_W==waypoints_W[w].z){
X_W=null;
Y_W=null;
Z_W=null;
}
else{
currentWaypoint=waypoints_W[w].name_W;
X_W=waypoints_W[w].x;
Y_W=waypoints_W[w].y;
Z_W=waypoints_W[w].z;
}
}
}));
var changenamme = new android.widget.TextView(ctx);
changenamme.setText("✎");
changenamme.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
changenamme.getLayoutParams().width = icon_dimensions;
changenamme.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
changenamme.setTextColor(android.graphics.Color.YELLOW);
changenamme.setBackground(tpbtn);
changenamme.setTypeface(mcfont);
changenamme.setTextSize(switchfontsize);
changenamme.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
changenamme.getBackground().setAlpha(130);
changenamme.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
renameWay(w);
closeEverything();
}
}));

var TP = new android.widget.TextView(ctx);
TP.setText("TP");
TP.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
TP.getLayoutParams().width = icon_dimensions*2;
TP.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
TP.setTextColor(android.graphics.Color.YELLOW);
TP.setTextSize(btntextsize);
TP.setBackground(tpbtn);
TP.setTypeface(mcfont);
TP.setTextSize(switchfontsize);
TP.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
TP.getBackground().setAlpha(130);
TP.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
Entity.setPosition(getPlayerEnt(), waypoints_W[w].x, waypoints_W[w].y + 2, waypoints_W[w].z);
}
}));
var btn2=new android.widget.TextView(activity);
btn2.setText("X");
btn2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
btn2.getLayoutParams().width = icon_dimensions;
btn2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
btn2.setTextColor(android.graphics.Color.WHITE);
btn2.setTextSize(btntextsize);
btn2.setBackground(xbtn);
btn2.getBackground().setAlpha(130);
btn2.setTypeface(mcfont);
btn2.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
btn2.setTextSize(switchfontsize);
btn2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
RemoveWaypoint(w);
}
}));
if(changenamme.getParent()!=null)
changenamme.getParent().removeView(changenamme);
slayout.addView(changenamme);
if(btn.getParent()!=null)
btn.getParent().removeView(btn);
slayout.addView(btn);
if(TP.getParent()!=null)
TP.getParent().removeView(TP);
slayout.addView(TP);
if(btn2.getParent()!=null)
btn2.getParent().removeView(btn2);
slayout.addView(btn2);

function RemoveWaypoint(w){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Confirm Deletion");
alert.setPositiveButton(lang[language]["Ok"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
waypoints_W[w].removed=true;
if(X_W==waypoints_W[w].x && Y_W==waypoints_W[w].y && Z_W==waypoints_W[w].z){

X_W=null;
Y_W=null;
Z_W=null;
}
Save();
slayout.getParent().removeView(slayout);
}
});
alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
}
catch(err){
clientMessage(err);
}
return slayout;
}


function Save(){
try{
var path_W=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
java.io.File(path_W).mkdirs();
var newFile=new java.io.File(path_W,"waypoints2.txt");
newFile.createNewFile();
var outWrite=new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
var k=0;
if(!lastDeath.x && !lastDeath.y && !lastDeath.z){
for(var j=0;j<objectLength(waypoints_W);j++){
if(!waypoints_W[j].removed){
outWrite.append(waypoints_W[j].name_W+"@"+waypoints_W[j].x+"@"+waypoints_W[j].y+"@"+waypoints_W[j].z);
k=j+1;
break;
}
}
}
else
outWrite.append("lastDeath@"+lastDeath.x+"@"+lastDeath.y+"@"+lastDeath.z);
for(var j=k;j<objectLength(waypoints_W);j++){
if(!waypoints_W[j].removed)
outWrite.append("\n"+waypoints_W[j].name_W+"@"+waypoints_W[j].x+"@"+waypoints_W[j].y+"@"+waypoints_W[j].z);
}
outWrite.close();
}
catch(err){
clientMessage(err);
}
}
var custFunctions = {};
function Load(){
var savefile="";
var path_W=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
if(java.io.File(path_W+"waypoints2.txt").exists()){
var file_W=new java.io.File(path_W+"waypoints2.txt");
var fos=new java.io.FileInputStream(file_W);
var str=new java.lang.StringBuilder();
var ch;
while((ch=fos.read())!=-1)
str.append(java.lang.Character(ch));
savefile=String(str.toString());
for(var w=0;w<savefile.split("\n").length;w++){
waypoints_W[objectLength(waypoints_W)]={name_W:savefile.split("\n")[w].split("@")[0],x:parseInt(savefile.split("\n")[w].split("@")[1]),y:parseInt(savefile.split("\n")[w].split("@")[2]),z:parseInt(savefile.split("\n")[w].split("@")[3]),removed:false};

}

fos.close();
}
}
Load();
function objectLength(obj){
var x=0;
for(var w in obj)
x++;
return x;
}
function loadLog(){
var savefile="";
var path_W=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
if(java.io.File(path_W+"Instinct_ChatLog.txt").exists()){
var file_Ch=new java.io.File(path_W+"Instinct_ChatLog.txt");
var fos=new java.io.FileInputStream(file_Ch);
var str=new java.lang.StringBuilder();
var ch;
while((ch=fos.read())!=-1)
str.append(java.lang.Character(ch));
savefile=String(str.toString());
chatLogtxt=savefile;
fos.close();
}
}
function deleteLog(){
var chatlogfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "Instinct_ChatLog.txt");
if (chatlogfile.exists()) {
chatlogfile.delete();
chatLogtxt="";
}
}
var friends_L={};
function renameWay(w){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Rename "+waypoints_W[w].name_W);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
userInput=new android.widget.EditText(activity);
userInput.setText("");
menuLayout.addView(userInput);

menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
alert.setView(menuLayout);
alert.setPositiveButton("Ok",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
waypoints_W[w].name_W=userInput.getText();
Save();
closeEverything();
}
});

alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
function updatemeths(){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Choose Update Method");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);


var button1 = new android.widget.Button(ctx);
button1.setText("Automatic Install (Recommended)");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
procCmd("new");
}
}));
//menuLayout1.addView(button1);
var button1 = new android.widget.Button(ctx);
button1.setText("Manual Install (Downloads file, Recommended)");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
downloadUpdate();
}
}));
menuLayout1.addView(button1);
var button1 = new android.widget.Button(ctx);
button1.setText(Html.fromHtml("<font color="+modTextColor+">Manual Download (Opens <a href='instinctmods.com'>instinctmods.com</a>)</font>"));
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("https://instinctmods.com"));
ctx.startActivity(downloadSi);
}
}));
menuLayout1.addView(button1);
var button1 = new android.widget.Button(ctx);
button1.setText("Raw File (Displays raw file to copy and paste)");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("https://instinctmods.com/instinct.js"));
ctx.startActivity(downloadSi);
}
}));
menuLayout1.addView(button1);
menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
alert.setView(menuLayout);
alert.show();
}

function AddNewFriend(){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Add Friend");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
userInput=new android.widget.EditText(activity);
userInput.setText("");
menuLayout.addView(userInput);

function newTPlist(item, index) {
var button1 = new android.widget.Button(ctx);
button1.setText(item);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
userInput.setText(item);
}
}));
menuLayout1.addView(button1);
};
Server.getAllPlayerNames().forEach(newTPlist);
menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
alert.setView(menuLayout);
alert.setPositiveButton("Ok",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
addFriendToList(userInput.getText());
}
});

alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
function runScript(){
var scriptalert=new android.app.AlertDialog.Builder(activity);
scriptalert.setTitle("Script");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
userInput=new android.widget.EditText(activity);
userInput.setText("");
userInput.setHint("script");
scriptname=new android.widget.EditText(activity);
scriptname.setText("");
scriptname.setHint("name");
menuLayout.addView(scriptname);
menuLayout.addView(userInput);

var cs_dir = new java.io.File(cs_directory);
var cs_list = cs_dir.listFiles();
if(cs_list != null && cs_list.length != 0) {
cs_list.forEach(function(element, index, array) {
var menuLayout2 = new android.widget.LinearLayout(ctx);
menuLayout2.setOrientation(0);
let currentFileName = element.getName();
let currentText = fileTxt(cs_directory+"/"+currentFileName);
var fileNamewoTxt = currentFileName.split(".txt")[0];
var fileNamewopre = fileNamewoTxt.split("ix_")[1];
var button1 = new android.widget.Button(ctx);
button1.setText(fileNamewopre);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
userInput.setText(currentText);

scriptname.setText(fileNamewopre);
}
}));
var buttonup = new android.widget.Button(ctx);
buttonup.setText("Upload");
buttonup.setTransformationMethod(null);
buttonup.setTextColor(android.graphics.Color.BLUE);
buttonup.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var cs_newFile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getPath()+"/Download",""+fileNamewoTxt+".txt"); 
if(cs_newFile.exists()){
cs_newFile.delete();
}
cs_newFile.createNewFile(); 
var cs_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (cs_newFile)); 
cs_outWrite.append (currentText);
cs_outWrite.close(); 
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html#up"));
ctx.startActivity(downloadSi);
}
}));
var btndele = new android.widget.Button(ctx);
btndele.setText("Delete");
btndele.setTransformationMethod(null);
btndele.setTextColor(android.graphics.Color.RED);
btndele.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var cs_newFile = new java.io.File(cs_dir+"/"+element.getName());
cs_newFile.delete();
try{btndele.getParent().getParent().removeView(menuLayout2);}catch(e){betToast(e)}
userInput.setText("");

scriptname.setText("");
}
}));
var dirtxt = android.widget.TextView(ctx);
dirtxt.setText(cs_directory+"/"+fileNamewoTxt+".txt");
menuLayout2.addView(button1);
if(fileNamewopre!="Demo"){
menuLayout2.addView(buttonup);
menuLayout2.addView(btndele);}
menuLayout2.addView(dirtxt);
menuLayout1.addView(menuLayout2);
});
}
var cs_dir2 = new java.io.File(android.os.Environment.getExternalStorageDirectory ().getPath ()+"/Download");
var cs_list2 = cs_dir2.listFiles();
if(cs_list2 != null && cs_list2.length != 0) {
cs_list2.forEach(function(element, index, array) {
let currentFileName = element.getName();
if(currentFileName.startsWith("ix_")){
var menuLayout2 = new android.widget.LinearLayout(ctx);
menuLayout2.setOrientation(0);

let currentText = fileTxt(cs_dir2+"/"+currentFileName);
var fileNamewoTxt = currentFileName.split(".txt")[0];
var fileNamewopre = fileNamewoTxt.split("ix_")[1];
var button1 = new android.widget.Button(ctx);
button1.setText(fileNamewopre);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
userInput.setText(currentText);

scriptname.setText(fileNamewopre);
}
}));
var buttonup = new android.widget.Button(ctx);
buttonup.setText("Upload");
buttonup.setTransformationMethod(null);
buttonup.setTextColor(android.graphics.Color.BLUE);
buttonup.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var cs_newFile2 = new java.io.File(android.os.Environment.getExternalStorageDirectory().getPath()+"/Download",""+fileNamewoTxt+".txt"); 
if(cs_newFile2.exists()){
cs_newFile2.delete();
}
cs_newFile2.createNewFile(); 
var cs_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (cs_newFile2)); 
cs_outWrite.append (currentText);
cs_outWrite.close(); 
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html#up"));
ctx.startActivity(downloadSi);
}
}));
var btndele = new android.widget.Button(ctx);
btndele.setText("Delete");
btndele.setTransformationMethod(null);
btndele.setTextColor(android.graphics.Color.RED);
btndele.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var cs_newFile2 = new java.io.File(cs_dir2+"/"+element.getName());
cs_newFile2.delete();
try{btndele.getParent().getParent().removeView(menuLayout2);}catch(e){betToast(e)}
userInput.setText("");

scriptname.setText("");
}
}));
var dirtxt = android.widget.TextView(ctx);
dirtxt.setText(cs_dir2+"/"+element.getName());
menuLayout2.addView(button1);
if(fileNamewopre!="Demo"){
menuLayout2.addView(buttonup);
menuLayout2.addView(btndele);}
menuLayout2.addView(dirtxt);
menuLayout1.addView(menuLayout2);

}});
}

var button1 = new android.widget.Button(ctx);
button1.setText("Download Scripts");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html"));
ctx.startActivity(downloadSi);
}
}));menuLayout1.addView(button1);
scriptalert.setPositiveButton("Run / Ok",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
if(userInput.getText()!=''||userInput.getText()!=''){
var cs_input = userInput.getText();
var cs_defStr = scriptname.getText();
if(String(cs_input).includes("/*"+Player.getName(getPlayerEnt())+"*/")){
cs_script=cs_input;
}else{
cs_script="/*"+Player.getName(getPlayerEnt())+"*/\n\n"+cs_input;}
cs_title="ix_"+cs_defStr;


try{cs_functionarr[cs_defStr]=new Function (cs_input);}catch(e){betToast(e)}
cs_saveFile();
try{cs_functionarr[cs_defStr]()}catch(e){betToast(e)}
}else{betToast('Invalid Name/Script');}
}
});


menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
scriptalert.setView(menuLayout);

scriptalert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});

scriptalert.show().getWindow().setLayout(fullwidth, fullheight);
}
function cs_saveFile(cs_directory, filename){
try{	
cs_directory = android.os.Environment.getExternalStorageDirectory().getPath() +"/games/Instinct";  //The file should be saved into the world directory. 
var cs_newFile = new java.io.File(cs_directory,""+cs_title+".txt"); 
var cs_directory = new java.io.File(cs_directory); 
if(!cs_directory.exists()||!cs_directory.isDirectory()){
cs_directory.mkdir();
}
if(cs_newFile.exists()){
cs_newFile.delete();
}
cs_newFile.createNewFile(); 
var cs_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (cs_newFile)); 
cs_outWrite.append (cs_script);
cs_outWrite.close(); 
}catch(e){clientMessage(e+"\n\n"+e.lineNumber)}
}
function installDemo(){
cs_title="ix_Demo";
cs_directory = android.os.Environment.getExternalStorageDirectory().getPath() +"/games/Instinct";  //The file should be saved into the world directory. 
var cs_newFile = new java.io.File(cs_directory,cs_title+".txt"); 
var cs_directory = new java.io.File(cs_directory); 
if(!cs_directory.exists()||!cs_directory.isDirectory()){
cs_directory.mkdir();
cs_script="/*Files await approval before being available to the public to download*/\n\nbetToast('This is Instincts custom script loader');";
try{cs_functionarr[cs_title]=new Function (cs_script);}catch(e){betToast(e+"; "+e.lineNumber)}
cs_newFile.createNewFile(); 
var cs_outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(cs_newFile)); 
cs_outWrite.append(cs_script);
cs_outWrite.close(); 
}
}installDemo();
function fileTxt(filePath) {
var file=new java.io.File(filePath);
var fos=new java.io.FileInputStream(file);
var str=new java.lang.StringBuilder();
var ch;
while((ch=fos.read())!=-1)
str.append(java.lang.Character(ch));
var txt=String(str.toString());
return txt;
}
function cs_loadfiles(){
try{
var cs_dir = new java.io.File(cs_directory);
var cs_list = cs_dir.listFiles();
if(cs_list != null && cs_list.length != 0) {
cs_list.forEach(function(element, index, array) {
let currentFileName = element.getName();
let currentText = fileTxt(cs_directory+"/"+currentFileName);
clientMessage(currentFileName+"\n"+currentText+"\n-------");
});
}
}catch(err){clientMessage(err+"\n\n"+err.lineNumber)}
}

function downloadUpdate(){
download_r = new DownloadManager.Request(new Uri.parse("https://raw.githubusercontent.com/7thShark/MCPE/master/instinct.js"));
download_r.setTitle("Instinct.js");
download_r.setDestinationInExternalPublicDir("/Download","Instinct.js");
download_r.setDescription("Downloading " + "Instinct.js Update");
download_r.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
ctx.getSystemService(ctx.DOWNLOAD_SERVICE).enqueue(download_r);
}
var friendList_ = {
all: new org.json.JSONArray(),
isFriend: function (name) {
var is = false;
if(name == null) return false;
var cname = funcS.Text.clean(name.toString().toLowerCase());
var allString = this.all.toString().toLowerCase();
var nameString = name.toString().toLowerCase();

for(var i = 0; i < this.all.length(); i++) {
if(allString.contains(nameString)) {
is = true;
}
}
return is;
},
loadFromFile: function () {
try {
var file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/", "Instinct_F.dat");
var readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
var data = new java.lang.StringBuilder();
var string;
while((string = readed.readLine()) != null) {
data.append(string);

}
try {
this.all = new org.json.JSONArray(data.toString());
} catch(e) {
}
} catch(e) {
}
},
saveToFile: function () {
var dir = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang");
if(!dir.exists()) dir.mkdir();
var file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/", "Instinct_F.dat");
if(!file.exists()) file.createNewFile();
var stream = new java.io.FileOutputStream(file);
try {
stream.write(this.all.toString().getBytes());
} finally {
stream.close();
}
},
addFriend: function (name) {
this.all.put(name);
this.saveToFile();
},
removeFriend: function (name) {
var tempall = new org.json.JSONArray();
for(var i = 0; i < this.all.length(); i++) {
if(this.all.getString(i).toLowerCase() != name.toString().toLowerCase())
tempall.put(this.all.getString(i));
}
this.all = tempall;
this.saveToFile();
}
};
friendList_.loadFromFile();

function addFriendToList(name){
friends_L[objectLength(friends_L)]={name_F:name,removed:false};
friendList_.addFriend(name);
SaveF();
}
function CreateButtonF(fR){
try{
var slayout=new android.widget.LinearLayout(activity);
slayout.setOrientation(android.widget.LinearLayout.HORIZONTAL);
var btn=new android.widget.Button(activity);
btn.setText(friends_L[fR].name_F);
btn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btn.getLayoutParams().width = wayNameWidth+(icon_dimensions*2);
btn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btn.setTextColor(modTextColor);
btn.getBackground().setAlpha(130);
btn.setTextSize(btntextsize+3);
btn.setBackground(xbgWP);
btn.setTransformationMethod(null);
var btn2=new android.widget.Button(activity);
btn2.setText("X");
btn2.getBackground().setColorFilter(android.graphics.Color.RED,android.graphics.PorterDuff.Mode.MULTIPLY);
btn2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btn2.getLayoutParams().width = icon_dimensions*2;
btn2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
btn2.setTextColor(android.graphics.Color.WHITE);
btn2.setTextSize(btntextsize);
btn2.setBackground(xbtn);
btn2.getBackground().setAlpha(130);
btn2.setTypeface(mcfont);
btn2.setTextSize(switchfontsize);
btn2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
friends_L[fR].removed=true;
friendList_.removeFriend(friends_L[fR].name_F);
SaveF();friends_L={};LoadF();
slayout.getParent().removeView(slayout);
resetBoxes();
if(wallhacked){Entity['setCollisionSize'](Player['getEntity'](), 0, 0);}

}
}));
if(btn.getParent()!=null)
btn.getParent().removeView(btn);
slayout.addView(btn);
if(btn2.getParent()!=null)
btn2.getParent().removeView(btn2);
slayout.addView(btn2);
}catch(err){
clientMessage(err);
}
return slayout;
}

function SaveF(){
try{
var path_F=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
java.io.File(path_F).mkdirs();
var newFile=new java.io.File(path_F,"friends_I.txt");
newFile.createNewFile();
var outWrite=new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
var k=0;
for(var j=0;j<objectLength(friends_L);j++){
if(!friends_L[j].removed){
outWrite.append(friends_L[j].name_F);
k=j+1;
break;
}
}

for(var j=k;j<objectLength(friends_L);j++){
if(!friends_L[j].removed)
outWrite.append("\n"+friends_L[j].name_F);
}
outWrite.close();
friendList_.saveToFile();
}
catch(err){
clientMessage(err);
}
}
if(friendList_.isFriend("v7thSharkv")==false){
addFriendToList("v7thSharkv");
}
function LoadF(){
var savefile="";
var path_F=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
if(java.io.File(path_F+"friends_I.txt").exists()){
var file_W=new java.io.File(path_F+"friends_I.txt");
var fos=new java.io.FileInputStream(file_W);
var str=new java.lang.StringBuilder();
var ch;
while((ch=fos.read())!=-1)
str.append(java.lang.Character(ch));
savefile=String(str.toString());
for(var fR=0;fR<savefile.split("\n").length;fR++){
friends_L[objectLength(friends_L)]={name_F:savefile.split("\n")[fR].split("@")[0],removed:false};

}

fos.close();
}
}
LoadF();
function objectLength(obj){
var x=0;
for(var fR in obj)
x++;
return x;
}


var curVersion = 3.1,
X, Z, YAW, DIMENSION, redraw = false, startMapControl = true, settings = {}, settingsLoaded = false, map_state = false, entities = [], chests = [],
minZoom, absZoom, bmpSrc, bmpSrcCopy, bmpBorder, pathBorder, canvasBmpSrc = new android['graphics'].Canvas(),
canvasBmpSrcCopy = new android['graphics'].Canvas(),
matrixMap = new android['graphics'].Matrix(),
matrixPointer = new android['graphics'].Matrix(),
bmpSrcLock = new java['util']['concurrent'].Semaphore(1, true),
delayChunksArrLock = new java['util']['concurrent'].Semaphore(1, true),
delayChunksArr = [],
pool, poolTick, scheduledFutureUpdateMap, runnableUpdateMap, context = com['mojang']['minecraftpe']['MainActivity']['currentMainActivity']['get'](),
mapWindow, setWindow, density = context['getResources']()['getDisplayMetrics']()['density'],
displayHeight = (context['getResources']()['getDisplayMetrics']()['widthPixels'] < context['getResources']()['getDisplayMetrics']()['heightPixels']) ? context['getResources']()['getDisplayMetrics']()['widthPixels'] : context['getResources']()['getDisplayMetrics']()['heightPixels'];
(function() {
var _0x18a3x26, _0x18a3x27, _0x18a3x28 = Math['floor'](new Date()['getTime']() / 1000);
_0x18a3x27 = load(android['os']['Environment']['getExternalStorageDirectory']()['getPath']() + '/games/com.mojang/', 'minimap.txt')['split']('\x0A');
for (_0x18a3x26 = 0; _0x18a3x26 < _0x18a3x27['length']; _0x18a3x26 += 1) {
settings[_0x18a3x27[_0x18a3x26]['split'](':')[0]] = parseFloat(_0x18a3x27[_0x18a3x26]['split'](':')[1])
};
if (settings['version'] !== curVersion) {
settings = {
radius: 4,
map_type: 0,
map_zoom: 100,
map_alpha: 70,
show_passive: 1,
show_hostile: 1,
show_player: 1,
show_otherPlayer: 0,
show_chest: 0,
hide_underground_mob: 0,
button_size: 40,
window_rawSize: 35,
window_size: displayHeight * 0.35,
window_rawPosition: 0,
window_gravity: 51,
window_y: 0,
style_border: 0,
style_pointer: 3,
style_shape: 0,
show_info: 1,
show_zoomBtn: 1,
delay: 20,
threadCount: 4,
updateCheck: 1,
updateCheckTime: 0,
updateVersion: curVersion,
version: curVersion
}
};
new java['lang'].Thread(function() {
android['os']['Process']['setThreadPriority'](android['os']['Process'].THREAD_PRIORITY_BACKGROUND);
var _0x18a3x29;
if (Math['floor'](settings['updateCheckTime'] / 86400) < Math['floor'](_0x18a3x28 / 86400) && settings['updateCheck']) {
_0x18a3x29 = parseFloat(loadTxtFromUrl('https://raw.githubusercontent.com/MxGoldo/MCPE-mod-scripts/master/MiniMap_Mod_version'));
if (!isNaN(_0x18a3x29)) {
settings['updateCheckTime'] = _0x18a3x28
};
if (_0x18a3x29 > curVersion) {
settings['updateVersion'] = _0x18a3x29
};
saveSettings()
};
if (settings['updateVersion'] > curVersion && settings['updateCheck']) {
context['runOnUiThread'](function() {
settingsUI(['MiniMap Mod', 'Close', ['keyValue', 'text', 'New version available !<br/>Your version: ' + curVersion['toFixed'](1) + '<br/>Latest version: ' + settings['updateVersion']['toFixed'](1) + '<br/><br/>Download from <a href=http://www.minecraftforum.net/forums/minecraft-pocket-edition/mcpe-mods-tools/2336349>minecraftforum.net</a>', ''],
['checkBox', 'updateCheck', 'Check for updates']
])['show']()
})
}
})['start']();
bmpBorder = drawBorderBmp();
pathBorder = createPath(false, true);
bmpSrc = android['graphics']['Bitmap']['createBitmap'](((settings['radius'] + 1) * 2 + 1) * 16, ((settings['radius'] + 1) * 2 + 1) * 16, android['graphics']['Bitmap']['Config'].ARGB_8888);
bmpSrcCopy = android['graphics']['Bitmap']['createBitmap'](bmpSrc['getWidth'](), bmpSrc['getHeight'](), android['graphics']['Bitmap']['Config'].ARGB_8888);
canvasBmpSrc['setBitmap'](bmpSrc);
canvasBmpSrcCopy['setBitmap'](bmpSrcCopy);
minZoom = settings['window_size'] / (settings['radius'] * 2 * 16);
absZoom = (100 / settings['map_zoom']) * minZoom;
poolTick = java['util']['concurrent']['Executors']['newSingleThreadScheduledExecutor']();
runnableUpdateMap = new java['lang'].Runnable(function() {
try {
android['os']['Process']['setThreadPriority'](android['os']['Process'].THREAD_PRIORITY_BACKGROUND);
var _0x18a3x2a = Player['getX'](),
_0x18a3x2b = Player['getZ'](),
_0x18a3x2c = getYaw(),
_0x18a3x2d, _0x18a3x2e, _0x18a3x2f, _0x18a3x30, _0x18a3x31 = Player['getDimension'](),
_0x18a3x26, _0x18a3x32, _0x18a3x33 = settings['radius'] * 16;
if (_0x18a3x2a !== X || _0x18a3x2b !== Z || _0x18a3x2c !== YAW || redraw || _0x18a3x31 !== DIMENSION) {
redraw = false;
_0x18a3x2d = Math['floor'](_0x18a3x2a / 16) * 16;
_0x18a3x2e = Math['floor'](_0x18a3x2b / 16) * 16;
_0x18a3x2f = Math['floor'](X / 16) * 16;
_0x18a3x30 = Math['floor'](Z / 16) * 16;
if (_0x18a3x2d !== _0x18a3x2f || _0x18a3x2e !== _0x18a3x30 || _0x18a3x31 !== DIMENSION) {
if (Math['abs'](_0x18a3x2d - _0x18a3x2f) <= _0x18a3x33 * 2 && Math['abs'](_0x18a3x2e - _0x18a3x30) <= _0x18a3x33 * 2 && _0x18a3x31 === DIMENSION) {
try {
bmpSrcLock['acquire']();
bmpSrcCopy['eraseColor'](0);
canvasBmpSrcCopy['drawBitmap'](bmpSrc, _0x18a3x2e - _0x18a3x30, _0x18a3x2f - _0x18a3x2d, null);
bmpSrc['eraseColor'](0);
canvasBmpSrc['drawBitmap'](bmpSrcCopy, 0, 0, null)
} finally {
X = _0x18a3x2a;
Z = _0x18a3x2b;
bmpSrcLock['release']()
};
if (_0x18a3x2d > _0x18a3x2f) {
for (_0x18a3x26 = _0x18a3x33 + 16 - (_0x18a3x2d - _0x18a3x2f); _0x18a3x26 <= _0x18a3x33; _0x18a3x26 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e, 0);
for (_0x18a3x32 = 16; _0x18a3x32 <= _0x18a3x33; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e + _0x18a3x32, 0);
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e - _0x18a3x32, 0)
}
}
} else {
if (_0x18a3x2f > _0x18a3x2d) {
for (_0x18a3x26 = _0x18a3x33 + 16 - (_0x18a3x2f - _0x18a3x2d); _0x18a3x26 <= _0x18a3x33; _0x18a3x26 += 16) {
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e, 0);
for (_0x18a3x32 = 16; _0x18a3x32 <= _0x18a3x33; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e + _0x18a3x32, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e - _0x18a3x32, 0)
}
}
}
};
if (_0x18a3x2e > _0x18a3x30) {
for (_0x18a3x26 = _0x18a3x33 + 16 - (_0x18a3x2e - _0x18a3x30); _0x18a3x26 <= _0x18a3x33; _0x18a3x26 += 16) {
scheduleChunk(_0x18a3x2d, _0x18a3x2e + _0x18a3x26, 0);
for (_0x18a3x32 = 16; _0x18a3x32 <= _0x18a3x33; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x32, _0x18a3x2e + _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x32, _0x18a3x2e + _0x18a3x26, 0)
}
}
} else {
if (_0x18a3x30 > _0x18a3x2e) {
for (_0x18a3x26 = _0x18a3x33 + 16 - (_0x18a3x30 - _0x18a3x2e); _0x18a3x26 <= _0x18a3x33; _0x18a3x26 += 16) {
scheduleChunk(_0x18a3x2d, _0x18a3x2e - _0x18a3x26, 0);
for (_0x18a3x32 = 16; _0x18a3x32 <= _0x18a3x33; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x32, _0x18a3x2e - _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x32, _0x18a3x2e - _0x18a3x26, 0)
}
}
}
}
} else {
X = _0x18a3x2a;
Z = _0x18a3x2b;
chests = [];
bmpSrc['eraseColor'](0);
scheduleChunk(_0x18a3x2d, _0x18a3x2e, 0);
for (_0x18a3x26 = 16; _0x18a3x26 <= settings['radius'] * 16; _0x18a3x26 += 16) {
for (_0x18a3x32 = 0; _0x18a3x32 < _0x18a3x26; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x32 + 16, _0x18a3x2e + _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d + _0x18a3x32, _0x18a3x2e - _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x32, _0x18a3x2e + _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x32 - 16, _0x18a3x2e - _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e + _0x18a3x32, 0);
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e - _0x18a3x32 - 16, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e + _0x18a3x32 + 16, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e - _0x18a3x32, 0)
}
}
}
} else {
X = _0x18a3x2a;
Z = _0x18a3x2b
};
YAW = _0x18a3x2c;
DIMENSION = _0x18a3x31;
var _0x18a3x34 = absZoom,
_0x18a3x35 = settings['style_pointer'],
_0x18a3x36 = _0x18a3x2a - (settings['window_size'] * 0.5 / _0x18a3x34),
_0x18a3x37 = _0x18a3x2b + (settings['window_size'] * 0.5 / _0x18a3x34);
matrixMap['setTranslate'](settings['window_size'] * 0.5 - (bmpSrc['getWidth']() * 0.5) - 8 + _0x18a3x2b - _0x18a3x2e, settings['window_size'] * 0.5 - (bmpSrc['getHeight']() * 0.5) + 8 - _0x18a3x2a + _0x18a3x2d);
matrixMap['postScale'](_0x18a3x34, _0x18a3x34, settings['window_size'] * 0.5, settings['window_size'] * 0.5);
if (settings['show_info']) {
mapWindow['setInfo']()
};
var _0x18a3x38 = mapView['lockCanvas']();
_0x18a3x38['drawColor'](0, android['graphics']['PorterDuff']['Mode'].CLEAR);
_0x18a3x38['save'](android['graphics']['Canvas'].CLIP_SAVE_FLAG);
_0x18a3x38['clipPath'](pathBorder, android['graphics']['Region']['Op'].REPLACE);
_0x18a3x38['drawBitmap'](bmpSrc, matrixMap, bmpPaint);
if (settings['show_chest']) {
_0x18a3x26 = chests['length'];
while (_0x18a3x26--) {
matrixPointer['setTranslate']((_0x18a3x37 - chests[_0x18a3x26][1]) * _0x18a3x34, (chests[_0x18a3x26][0] - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](pointer[3]['matrix']);
_0x18a3x38['drawBitmap'](pointer[3]['bmp'], matrixPointer, null)
}
};
if (settings['show_passive'] || settings['show_hostile'] || settings['show_otherPlayer']) {
redraw = true;
_0x18a3x26 = entities['length'];
var _0x18a3x39;
while (_0x18a3x26--) {
if (!settings['hide_underground_mob'] || Entity['getY'](entities[_0x18a3x26]) > 60) {
_0x18a3x39 = Entity['getEntityTypeId'](entities[_0x18a3x26]);
if (_0x18a3x35 !== 3) {
if (_0x18a3x39 < 32 && settings['show_passive']) {
matrixPointer['reset']();
if (pointer[_0x18a3x35]['rotate']) {
matrixPointer['postRotate'](Entity['getYaw'](entities[_0x18a3x26]) - 90)
};
matrixPointer['postTranslate']((_0x18a3x37 - Entity['getZ'](entities[_0x18a3x26])) * _0x18a3x34, (Entity['getX'](entities[_0x18a3x26]) - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](pointer[_0x18a3x35]['matrix']);
_0x18a3x38['drawBitmap'](pointer[_0x18a3x35]['bmp'], matrixPointer, pointerPaint.GREEN)
} else {
if (_0x18a3x39 < 63 && _0x18a3x39 >= 32 && settings['show_hostile']) {
matrixPointer['reset']();
if (pointer[_0x18a3x35]['rotate']) {
matrixPointer['postRotate'](Entity['getYaw'](entities[_0x18a3x26]) - 90)
};
matrixPointer['postTranslate']((_0x18a3x37 - Entity['getZ'](entities[_0x18a3x26])) * _0x18a3x34, (Entity['getX'](entities[_0x18a3x26]) - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](pointer[_0x18a3x35]['matrix']);
_0x18a3x38['drawBitmap'](pointer[_0x18a3x35]['bmp'], matrixPointer, pointerPaint.RED)
} else {
if (_0x18a3x39 === 63 && settings['show_otherPlayer']) {
matrixPointer['reset']();
if (pointer[_0x18a3x35]['rotate']) {
matrixPointer['postRotate'](Entity['getYaw'](entities[_0x18a3x26]) - 90)
};
matrixPointer['postTranslate']((_0x18a3x37 - Entity['getZ'](entities[_0x18a3x26])) * _0x18a3x34, (Entity['getX'](entities[_0x18a3x26]) - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](pointer[_0x18a3x35]['matrix']);
_0x18a3x38['drawBitmap'](pointer[_0x18a3x35]['bmp'], matrixPointer, null)
}
}
}
} else {
if ((_0x18a3x39 < 32 && settings['show_passive']) || (_0x18a3x39 < 63 && _0x18a3x39 >= 32 && settings['show_hostile']) || (_0x18a3x39 === 63 && settings['show_otherPlayer'])) {
matrixPointer['reset']();
matrixPointer['postRotate'](Entity['getYaw'](entities[_0x18a3x26]) - 90);
matrixPointer['postTranslate']((_0x18a3x37 - Entity['getZ'](entities[_0x18a3x26])) * _0x18a3x34, (Entity['getX'](entities[_0x18a3x26]) - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](iconMatrix);
_0x18a3x38['drawBitmap'](heads[_0x18a3x39] || heads[0], matrixPointer, null)
}
}
}
}
};
if (settings['show_player'] && !settings['show_otherPlayer']) {
if (_0x18a3x35 !== 3) {
matrixPointer['reset']();
if (pointer[_0x18a3x35]['rotate']) {
matrixPointer['postRotate'](_0x18a3x2c - 90)
};
matrixPointer['postTranslate'](settings['window_size'] * 0.5, settings['window_size'] * 0.5);
matrixPointer['preConcat'](pointer[_0x18a3x35]['matrix']);
_0x18a3x38['drawBitmap'](pointer[_0x18a3x35]['bmp'], matrixPointer, null)
} else {
matrixPointer['reset']();
matrixPointer['postRotate'](_0x18a3x2c - 90);
matrixPointer['postTranslate'](settings['window_size'] * 0.5, settings['window_size'] * 0.5);
matrixPointer['preConcat'](iconMatrix);
_0x18a3x38['drawBitmap'](heads[63] || heads[0], matrixPointer, null)
}
};
_0x18a3x38['restore']();
if (bmpBorder !== null) {
_0x18a3x38['drawBitmap'](bmpBorder, 0, 0, null)
};
mapView['unlockCanvasAndPost'](_0x18a3x38)
}
} catch (e) {betToast(e+' #' + e['lineNumber'])}
})
}());
var bmpPaint = new android['graphics'].Paint(),
mapView = new android['view'].TextureView(context),
mapWindow = function() {
var _0x18a3x3c = new android['widget'].Button(context),
_0x18a3x3d, _0x18a3x3e, coordBlock = new android['widget'].Button(context),
_0x18a3x40 = new android['widget']['RelativeLayout'].LayoutParams(settings['window_size'], settings['window_size']),
_0x18a3x41 = new android['widget']['RelativeLayout'].LayoutParams(settings['button_size'] * density, settings['button_size'] * density),
_0x18a3x42 = new android['widget']['RelativeLayout'].LayoutParams(settings['button_size'] * density, settings['button_size'] * density),
_0x18a3x43 = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT),
_0x18a3x44 = new android['widget'].RelativeLayout(context),
_0x18a3x45 = new android['widget'].PopupWindow(_0x18a3x44, android['widget']['LinearLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['LinearLayout']['LayoutParams'].WRAP_CONTENT),
_0x18a3x46 = {
set: function() {
if (!setWindow) {
setWindow = settingsUI(['MiniMap Mod Options', 'Ok', ['sectionDivider', 'Graphics'],
['keyValue', 'multipleChoice', 'MiniMap type', 'map_type', ['basic surface (fast)', 'surface', 'cave']],
['keyValue', 'slider', 'Minimap render distance', 'radius', 1, Minecraft.getRenderDistance() + 4, 1, ' chunks'],
['keyValue', 'slider', 'Zoom', 'map_zoom', 10, 100, 1, '%'],
['subScreen', 'Icons and Indicators ', ['Icons and Indicators', 'Ok', ['sectionDivider', 'Entity'],
['keyValue', 'multipleChoice', 'pointer style', 'style_pointer', ['crosshairs', 'arrow', 'minecraft', 'head']],
['checkBox', 'hide_underground_mob', 'hide entities below sea level'],
['checkBox', 'show_player', 'you'],
['checkBox', 'show_passive', 'passive mobs'],
['checkBox', 'show_hostile', 'hostile mobs'],
]],
['sectionDivider', 'View'],
['keyValue', 'multipleChoice', 'Position', 'window_rawPosition', ['top left', 'top left (offset)', 'top right', 'bottom left', 'bottom right'], 'window_gravity', [51, 51, 53, 83, 85], 'window_y', [0, 40 * density, 40 * density, 0, 0]],
['keyValue', 'slider', 'Size', 'window_rawSize', 5, 100, 5, '%'],
['keyValue', 'slider', 'Opacity', 'map_alpha', 20, 100, 1, '%'],
['keyValue', 'slider', 'Button size', 'button_size', 20, 60, 1, 'dp'],
['checkBox', 'show_info', 'Coordinates visible'],
['checkBox', 'show_zoomBtn', 'Zoom Buttons visible'],
['sectionDivider', 'Style'],
['keyValue', 'multipleChoice', 'window shape', 'style_shape', ['square', 'circle']],
['sectionDivider', 'Other'],
['checkBox', 'updateCheck', 'Check for updates ' + (settings['updateVersion'] > curVersion ? '(update available)' : '')],
['subScreen', 'Advanced ', ['Advanced', 'Ok', ['keyValue', 'slider', 'Minimap max frequency', 'delay', 1, 40, 1, ' fps'],
['keyValue', 'slider', 'Threads count', 'threadCount', 1, 12, 1, '']
]],
['subScreen', 'MiniMap Mod info ', ['MiniMap Mod info', 'Ok', ['keyValue', 'text', 'Version ', curVersion['toFixed'](1)],
['keyValue', 'text', 'Made by', 'MxGoldo'],
['keyValue', 'text', '<a href=http://www.minecraftforum.net/forums/minecraft-pocket-edition/mcpe-mods-tools/2336349>minecraftforum.net thread</a>', '']
]]
])['show']()
} else {
setWindow['show']()
}
}
};
bmpPaint['setXfermode'](new android['graphics'].PorterDuffXfermode(android['graphics']['PorterDuff']['Mode'].SRC));
mapView['setId'](1);
mapView['setVisibility'](android['view']['View'].GONE);
mapView['setAlpha'](settings['map_alpha'] / 100);
_0x18a3x40['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_TOP);
mapView['setOnClickListener'](function(_0x18a3x47) {
changeMapState()
});
mapView['setOnLongClickListener'](function(_0x18a3x47) {
_0x18a3x46['set']();
return true
});
_0x18a3x3c.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(mapicon, 0), 0, android.util.Base64.decode(mapicon, 0).length)));
_0x18a3x3c['setVisibility'](android['view']['View'].VISIBLE);
_0x18a3x3c['setLayoutParams'](new android['widget']['LinearLayout'].LayoutParams(settings['button_size'] * density, settings['button_size'] * density));
_0x18a3x3c['setOnClickListener'](function(_0x18a3x47) {
changeMapState()
});
_0x18a3x3c['setOnLongClickListener'](function(_0x18a3x47) {
_0x18a3x46['set']();
return true
});
coordBlock['setId'](2);
coordBlock['setVisibility'](android['view']['View'].GONE);
_0x18a3x43['addRule'](android['widget']['RelativeLayout'].BELOW, 1);
_0x18a3x43['addRule'](android['widget']['RelativeLayout'].ALIGN_LEFT, 1);
_0x18a3x43['addRule'](android['widget']['RelativeLayout'].ALIGN_RIGHT, 1);
coordBlock['setTextSize'](11);
coordBlock.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
coordBlock['setTextColor'](android['graphics']['Color'].YELLOW);
coordBlock.setTypeface(mcfont);
_0x18a3x3e = minecraftButton('-', settings['button_size'], settings['button_size']);
_0x18a3x3e['setId'](3);
_0x18a3x3e['setVisibility'](android['view']['View'].GONE);
_0x18a3x42['addRule'](android['widget']['RelativeLayout'].BELOW, 2);
_0x18a3x3e['setOnClickListener'](function(_0x18a3x47) {
if (settings['map_zoom'] * 1.2 >= 100) {
betToast("minimum zoom reached");
settings['map_zoom'] = 100
} else {
settings['map_zoom'] = Math['round'](settings['map_zoom'] * 1.2)
};
settingsChanged('map_zoom');
saveSettings()
});
_0x18a3x3d = minecraftButton('+', settings['button_size'], settings['button_size']);
_0x18a3x3d['setId'](4);
_0x18a3x3d['setVisibility'](android['view']['View'].GONE);
_0x18a3x41['addRule'](android['widget']['RelativeLayout'].BELOW, 2);
_0x18a3x41['addRule'](android['widget']['RelativeLayout'].RIGHT_OF, 3);
_0x18a3x3d['setOnClickListener'](function(_0x18a3x47) {
if (settings['map_zoom'] * 0.8 <= 10) {
betToast("maximum zoom reached");
settings['map_zoom'] = 10
} else {
settings['map_zoom'] = Math['round'](settings['map_zoom'] * 0.8)
};
settingsChanged('map_zoom');
saveSettings()
});
_0x18a3x44['addView'](_0x18a3x3c);
_0x18a3x44['addView'](mapView, _0x18a3x40);
_0x18a3x44['addView'](_0x18a3x3d, _0x18a3x41);
_0x18a3x44['addView'](_0x18a3x3e, _0x18a3x42);
_0x18a3x44['addView'](coordBlock, _0x18a3x43);
_0x18a3x45['setBackgroundDrawable'](new android['graphics']['drawable'].ColorDrawable(android['graphics']['Color'].TRANSPARENT));
return {
setInfo: function() {
context['runOnUiThread'](function() {
coordBlock['setText'](' Position: ' + Math['floor'](Player['getX']()) + ', ' + Math['floor'](Player['getY']() - 1) + ', ' + Math['floor'](Player['getZ']()))
})
},
resetVisibility: function() {
context['runOnUiThread'](function() {
var _0x18a3x48 = android['view']['View']['VISIBLE'],
_0x18a3x49 = android['view']['View']['GONE'];
if (map_state) {
_0x18a3x3c['setVisibility'](_0x18a3x49);
mapView['setVisibility'](_0x18a3x48);
_0x18a3x3d['setVisibility'](settings['show_zoomBtn'] ? _0x18a3x48 : _0x18a3x49);
_0x18a3x3e['setVisibility'](settings['show_zoomBtn'] ? _0x18a3x48 : _0x18a3x49);
coordBlock['setVisibility'](settings['show_info'] ? _0x18a3x48 : _0x18a3x49)
} else {
_0x18a3x3c['setVisibility'](_0x18a3x48);
mapView['setVisibility'](_0x18a3x49);
_0x18a3x3d['setVisibility'](_0x18a3x49);
_0x18a3x3e['setVisibility'](_0x18a3x49);
coordBlock['setVisibility'](_0x18a3x49)
}
})
},
show: function() {
context['runOnUiThread'](function() {
_0x18a3x45['showAtLocation'](context['getWindow']()['getDecorView'](), settings['window_gravity'], 0, settings['window_y'])
})
},
hide: function() {
context['runOnUiThread'](function() {
_0x18a3x45['dismiss']()
})
}
}
}();

function entityRemovedHook(_0x18a3x4b) {
if (Entity['getEntityTypeId'](_0x18a3x4b) <= 63 && Entity['getEntityTypeId'](_0x18a3x4b) >= 10) {
var _0x18a3x4c = entities['indexOf'](_0x18a3x4b);
if (_0x18a3x4c > -1) {
entities['splice'](_0x18a3x4c, 1)
}
}
};

function entityAddedHook(_0x18a3x4b) {
if (Entity['getEntityTypeId'](_0x18a3x4b) <= 63 && Entity['getEntityTypeId'](_0x18a3x4b) >= 10) {
entities[entities['length']] = _0x18a3x4b
}
};

function minecraftButton(_0x18a3x4f, _0x18a3x50, _0x18a3x51) {
_0x18a3x50 = _0x18a3x50 || 40;
_0x18a3x51 = _0x18a3x51 || 40;
var _0x18a3x52 = new android['widget'].Button(context);
_0x18a3x52['setText'](_0x18a3x4f);
_0x18a3x52['setTextSize'](15);
_0x18a3x52['setTextColor'](android['graphics']['Color'].WHITE);
_0x18a3x52['setBackgroundDrawable'](drawBtnBack(_0x18a3x50 * density, _0x18a3x51 * density));
return _0x18a3x52
};
function minecraftTxtV(_0x18a3x4f, _0x18a3x50, _0x18a3x51) {
_0x18a3x50 = _0x18a3x50 || 40;
_0x18a3x51 = _0x18a3x51 || 40;
var _0x18a3x52 = new android['widget'].TextView(context);
_0x18a3x52['setText'](_0x18a3x4f);
_0x18a3x52['setBackgroundDrawable'](drawBtnBack(_0x18a3x50 * density, _0x18a3x51 * density));
return _0x18a3x52
};
function drawBtnBack(_0x18a3x50, _0x18a3x54) {
var _0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](_0x18a3x50, _0x18a3x54, android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55),
_0x18a3x56 = new android['graphics'].Paint(),
_0x18a3x57;
_0x18a3x56['setColor'](themeForeground);
_0x18a3x56['setMaskFilter'](new android['graphics'].EmbossMaskFilter([1, 1, 1], 0.7, 8, 4 * density));
_0x18a3x38['drawRect'](0, 0, _0x18a3x50, _0x18a3x54, _0x18a3x56);
_0x18a3x57 = new android['graphics']['drawable'].BitmapDrawable(_0x18a3x55);
_0x18a3x57['setAlpha'](204);
return _0x18a3x57
};

function createPool() {
if (pool != null) {
pool['shutdownNow']()
};
pool = java['util']['concurrent']['Executors']['newScheduledThreadPool'](settings['threadCount']);
pool['setKeepAliveTime'](60, java['util']['concurrent']['TimeUnit'].SECONDS);
pool['allowCoreThreadTimeOut'](true)
};

function scheduleChunk(_0x18a3x5a, _0x18a3x5b, _0x18a3x5c) {
pool['schedule'](new java['lang'].Runnable(function() {
try {
android['os']['Process']['setThreadPriority'](android['os']['Process'].THREAD_PRIORITY_BACKGROUND);
if (Math['abs'](Math['floor']((Z - _0x18a3x5b) / 16)) > settings['radius'] || Math['abs'](Math['floor']((X - _0x18a3x5a) / 16)) > settings['radius']) {
return
};
var _0x18a3x32 = 16,
_0x18a3x5d = 16,
_0x18a3x5e = _0x18a3x5a + 16,
_0x18a3x5f = _0x18a3x5b - 1,
_0x18a3x60 = [],
_0x18a3x61 = settings['map_type'];
if (Level['getTile'](_0x18a3x5e - 16, 0, _0x18a3x5f + 16) === 95) {
return
};
if (!chunkLoaded(_0x18a3x5e - 16, _0x18a3x5f + 16)) {
if (map_state) {
scheduleChunk(_0x18a3x5a, _0x18a3x5b, 10)
} else {
delayChunksArrLock['acquire']();
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a, _0x18a3x5b];
delayChunksArrLock['release']()
};
return
};
do {
do {
_0x18a3x60[_0x18a3x60['length']] = mapDot[_0x18a3x61](_0x18a3x5e - _0x18a3x32, _0x18a3x5f + _0x18a3x5d)
} while (_0x18a3x5d -= 1);;
_0x18a3x5d = 16
} while (_0x18a3x32 -= 1);;
if (java['lang']['Thread']['interrupted']()) {
return
};
try {
bmpSrcLock['acquire']();
bmpSrc['setPixels'](_0x18a3x60, 0, 16, ((Math['floor'](Z / 16) + settings['radius'] + 1) * 16) - _0x18a3x5b, _0x18a3x5a - ((Math['floor'](X / 16) - settings['radius'] - 1) * 16), 16, 16)
} finally {
bmpSrcLock['release']()
};
redraw = true
} catch (e) {}
}), _0x18a3x5c, java['util']['concurrent']['TimeUnit'].SECONDS)
};
var pointerPaint = {
RED: (function() {
var _0x18a3x56 = new android['graphics'].Paint();
_0x18a3x56['setColorFilter'](new android['graphics'].LightingColorFilter(android['graphics']['Color'].RED, 0));
return _0x18a3x56
})(),
GREEN: (function() {
var _0x18a3x56 = new android['graphics'].Paint();
_0x18a3x56['setColorFilter'](new android['graphics'].LightingColorFilter(android['graphics']['Color'].GREEN, 0));
return _0x18a3x56
})()
};
var pointer = [new Pointer((function() {
var _0x18a3x56 = new android['graphics'].Paint(),
_0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](displayHeight * 0.1, displayHeight * 0.1, android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55);
_0x18a3x56['setColor'](android['graphics']['Color'].BLACK);
_0x18a3x38['drawLines']([0, displayHeight * 0.05, displayHeight * 0.1, displayHeight * 0.05, displayHeight * 0.05, 0, displayHeight * 0.05, displayHeight * 0.1], _0x18a3x56);
return _0x18a3x55
})(), (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-displayHeight * 0.05, -displayHeight * 0.05);
return _0x18a3x64
})(), false), new Pointer((function() {
var _0x18a3x65 = new android['graphics'].Path(),
_0x18a3x56 = new android['graphics'].Paint(),
_0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](displayHeight * 0.025, displayHeight * 0.025, android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55);
_0x18a3x65['moveTo'](displayHeight * 0.0125, 0);
_0x18a3x65['lineTo'](0, displayHeight * 0.025);
_0x18a3x65['lineTo'](displayHeight * 0.0125, displayHeight * 0.015);
_0x18a3x65['lineTo'](displayHeight * 0.025, displayHeight * 0.025);
_0x18a3x65['close']();
_0x18a3x56['setColor'](android['graphics']['Color'].WHITE);
_0x18a3x38['drawPath'](_0x18a3x65, _0x18a3x56);
_0x18a3x56['setColor'](android['graphics']['Color'].BLACK);
_0x18a3x56['setStyle'](android['graphics']['Paint']['Style'].STROKE);
_0x18a3x38['drawPath'](_0x18a3x65, _0x18a3x56);
return _0x18a3x55
})(), (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-displayHeight * 0.0125, 0);
return _0x18a3x64
})(), true), new Pointer(decodeBmp('iVBORw0KGgoAAAANSUhEUgAAAAUAAAAHCAYAAADAp4fuAAAABHNCSVQICAgIfAhkiAAAAEFJREFUCJltjcENgDAQw0z3HyKj3CjpJOZVIRB+WfEj8OCRdYYkr2AS25rEE2yralsBFz8sgJlh783MAHB9n4HrBiyNJZtxPPDsAAAAAElFTkSuQmCC'), (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-2.5, -4.5);
_0x18a3x64['postScale'](displayHeight * 0.005, displayHeight * 0.005);
return _0x18a3x64
})(), true), new Pointer(decodeBmp('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wUeEiAJpGBAngAAAhBJREFUOMtlk7ty1DAUhj9Zsh17SWZDZnMhYaChCSmYVFSpGIZnoU5LydPQUOxjMEC5TYqFZRg2YVA2Xt8lUchxdpPTSB7p/D7/ReLt2alrjGG1QikBcM7RWtt/36+/+gYF8P7MUlU1si0xagOAyyJ/0DBKUi6LnFGSEscRHz6VHmCtocn7y9N5SRSFPN9LAKiqmv0wQMVRD6qstRSLnJ0gIpRtfzD9veDd+ZjJZMLF+Jwnj1MALIpmkRPKlkCACoKAi8x1bZ7r7uYjrl3BcrlkOp3y9ZfhZeTYUQIr427SGCGWqMYYxt8kUgBCdEAleVFz8vMnWmsmfzb4sfBsjW36KbO8RIVS8uZkAEDbWpQKAJj/E1xdXQFwsNXy6pkkiOI1UcdfapSzhsMko7USVs7bqOT7548AnB5G7G0a4M6ZrAbnLEoEkoPddA25XS4QG47Xx3u9+rcVdw7MbwTWFV6DmdZrAEfDIaOqpqrqtTzshwHEETOt0XnobQylZJSkD/5wP0ijJMUApqoZJSnCSKDxGtiq7TNQVH69nwva0rtnvBu2cT4HIpAkW3cTKGCmNUfD4QNqfhKFbEviwQAhKpRzjpnWPqKDrV6DVT1uRbws8p6azjMcDiWEIJLbTK4zuF72SfSXQiIpgJj5TcZ2vEkYqe7FCgQacfzi6W2OCQCL6Pau27sVAgJjQfqsUZQV/wGmEfCfo9F8YgAAAABJRU5ErkJggg=='), (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-8, -8);
_0x18a3x64['postScale'](displayHeight * 0.0012, displayHeight * 0.0012);
return _0x18a3x64
})(), false)];

function Pointer(_0x18a3x55, _0x18a3x64, _0x18a3x67) {
this['bmp'] = _0x18a3x55;
this['matrix'] = _0x18a3x64;
this['rotate'] = _0x18a3x67
};
var iconMatrix = (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-9, -14);
_0x18a3x64['postScale'](displayHeight * 0.0012, displayHeight * 0.0012);
return _0x18a3x64
})();
var arrow = decodeBmp('iVBORw0KGgoAAAANSUhEUgAAABIAAAAXCAYAAAAGAx/kAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wkXCBYpv1t1DgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAbUlEQVQ4y+3VQQpDIQxF0fu6MV2aO4uu7HVSoRQ0n99OCl4IjnLITMjza7YpAWit8f6udpQBpRQAxhhbUBlQawWg974FJ+QV8NkClCaSATtwHuGI8N0iwoAF2DbfJIkHP+pABzrQn0G68kNc6QlKrnBddYT83gAAAABJRU5ErkJggg==');
var heads = {
0: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCRYIWPnH7AAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA9klEQVQ4y63TO8rCQBSG4SfeJYWFIEiW4D5s7OzcQHpxDa7HytINuAix89LYBAmIjoUE/mn+JjnN3L6Z8/KdM8lkMgkQQgCtVgu83+9oTJIEtNttkV7N6FQvVfH5fEC32wVpmkbnz+czWtcnqCZ5noNerxdlLooi8uZ2u4HdbtcMQbJerwMMBgNQluUPrfODezweIMsycDqdGvagyrzdbsFisQCz2SzKfDwewX6/B5vNpiEPVqtVgOl0CobDITgcDpFwPp+D8/kMLpdLQwTL5TL8rfP9fv/3wng8jjqyfhWu12v0B0ajUSR4vV6g3+9HfVLt1yb4AgeiVR6weSbNAAAAAElFTkSuQmCC'),
10: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAQYPHjNbAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAZklEQVQ4y2NkgIJbt279ZyABqKmpMTIwMDAwMVAIKDaAEYkN98K/f/+w28bEhKGXei7Y3KhDUiD61l8ZJIHIAmNcuPdtYFxAvVhATsoqampYFd+5dYv6SZkRm+A/pFSJ5l/GwReIAJzkF8KfuHVTAAAAAElFTkSuQmCC'),
11: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAMf7V3OCAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA5klEQVQ4y62SLW7DQBCFPztjKVVPUBxshfkArlmWpbgXKEyVkICCkIaUpDBSQipVKooWRcoFTH0EUx+gYOMEJCt1CgrqfWj37c/7NDPRcHB3AuhJBMDRnQB4flnyU2VZqv1+9wlATEeJJPoPSaLrgSg/yzIAFvMJALd9CUTwutoqY/r0CIBzTvlvixkA7+sP5XcnKIoCgLZtVReapgFgs9LdyPP8khzHYQgiPwf/Vfca+MW3OwLwZQ9/PhiPLjW4SSQwgU9O0xQAY4y6aK0FoKoqAB7MfWCCuq5Vsp8Dr99EfemFITgDfbg54HZ1708AAAAASUVORK5CYII='),
12: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAAr58RpfgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABHklEQVQ4y62SvUrEQBSFvySTH2MwbmXlIlrYWlgs5D0EKxfR0lcQRLsVSztL8XV8BAtTrSKCuJs1k7E401g7t5gLdy73nPnmRu31lQP4fH8DoB5toYh0lgUANrIApCt/W6ke888wi5Umm16KpsgAcIka7GIJQF5XUq7XvAUXyIGJJZXtjVVJNXMYlJPIO/qRQxd3Uq7yMA4iwAFYKxbz2e3fhqpUHgYAqrNzAMqyDOSgvbxxAMYr2fG2UJTrYuE87UgMmL8C0H19B/qFZMNTpgfg/m4GwMXRsSwW2riHp0cATqcn2otQDIz90KaRaB8mBxMAnl9aAIrdEQBN06gvS8Wm74MxMAD0VrMO93f09lx1V+ReeVO5W/pficM4+AVghEWaSP2iTgAAAABJRU5ErkJggg=='),
13: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAIGkC1XiQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABPUlEQVQ4y62SsUrDUBSGv6RN7GoICAmYIUMha3ffQkTcBMFd3ayLg+gT2FX0DXTzCdybUSkSCo1DSpJCQ5M43N7E4BTas9x7zr3c+53/P7BhKABBEJQAZVkCMJ/PqwtFUVT7JEkAMAwDgH6/r3Tl4XQ6bbwcRdG/B2TEcYzjOACoAFmWtUaXtBWB/zoSha4orfJc5J2O6FXrAZAmMQD7J5c1ga7rrQlka5WIrusCsFgsAHi6OQVguRTtnd0/ix9VVRD7Pp7nKepWbJxMJuVoeA6As7crEFfZWoumC98/wsqjizsGg8EWCcIwBODt8RaA4cFh4+L1+wsAx1cPSOsrAulpmzBNszkHs9lMqL4eqo+vTwB6O70msqI0chUgTdPWBJqm1RqMx+Py70jbtl3/oNY65+vplKtlWcqmJvAL4KV5Q1seyu0AAAAASUVORK5CYII='),
14: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCA4dtv3RaQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABAklEQVQ4y7WSoU9CURTGf/eNgmw8QOsLb6MInWiyWSxsOjYpEBzNLAmS1TEC+hdgMIhBTUQ6WuDdwIYN35w0eJfwvIznnMXLl87Z+W3ft3OO4Fuj4atiQ9l8Tmz2zw89BeC6bmRu8U/FdCGl/BPUzj85cwkye7sALJcBAE+9RwUgRLiKme8DkEylt5RgOn0H4Gs+B8C2kxFw7HkA7MTjZhOsbx0EgQJIpTMANCrHEbB+cw+A/zELnS1LmE3QujxXAJ+LBGenJwDsHxwC8NZ/AeD66gLHzQNQa7YNf+JEDsPtO4X1UDtr2U6BiRxs6Q+0c7FY4qhc/RW+u+3Q7equbybBCgRARDqUFxSFAAAAAElFTkSuQmCC'),
15: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCA0M92CiWAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA5klEQVQ4y2NcVx7zn4GBgeH7+68MDAwMDJyC3AzIfHSALs/EQCFgQRfAZTMuQLELBt4AFpifG7bsJkljg48rlVwAi9ebTz4xMDAwMHB0QcycesMHRWG2xhYGBgYGhh9l/xgYGBgYNlTGYY9GBgYGhv/fGRi+/fqNIcbIiamWsdbL4D8DAwODmowMAwMDA8MvBi6Gb79+M7x6dR9FoayMDAMXOyvD/58Qg289eUKjlHjg+DmGX3//Magp8KGI7z1yjYGNmYnBzVKDyukAXcDGWJnh268/DO8+vEURtzBQZOBiY6F+SgQAkglD+wSBimYAAAAASUVORK5CYII='),
16: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAwtohKDRwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAzElEQVQ4y63SL07EUBDH8U9JIRiCgWs8w6aXqOMANeBwGCwXwIFAYNBkXS/RBNMDYGrr1vCnSRH0JbwVK7b9mcn8Mu/NNzOTPTgc4VgGPo3g/PXFfzVNk+Rnj8/gwEzlsXNUzPM8T/yiKMBHdfVHONXNJ7jxnRhPjsAwDIm/qa7BvZ/En0+wbcQtfPU9GG/vdn4wmyCLd7CvlpvBZoqX7fvOB29hBU6nWS1HEDuHEEBZlklhXdegbVuwDhcLE3Rdl3TupzuI2iY6WWoLv5WmMMWCKVO2AAAAAElFTkSuQmCC'),
17: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAwLcB8GugAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA30lEQVQ4y51TOw6CQBB9ECsLDZEQYOmsOJwn8AAWHsDewiPYeQJCKCyIpQmLhkAIFrTauJtd2QXkdTuz8+bNz8AXiyB84w+8stQAgJlonC9XsGyHv12PAACeDwoAqMsCANA2Ff9jqthdj8D1CEjgS0QqmDoHCxZJRHWDBAw0y3v9EoFlO5L0MegoiM9H7LebTvbTYQeaXIYJbneqzabyGeIekHXIO04CX1l/ek3QNhXfA0lBXRZ85kPNGz2F37FOImDBTN0kBbqSzDHZaZYrs/cSsIA4irTBnWsUL26s/QOMaVD4M/hBCgAAAABJRU5ErkJggg=='),
19: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBwN076x3gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA0klEQVQ4y7WTvw5BMRSHv+ISQlKuBIk/YWTwBGaDN/CA3sBgNpgNrEJILJcmIsgl10BFBYv6TT3tl/ac8+sRnVYzAMhIB4CN8gHoD8eCJ33iQvyoiF4UcvGvoH5Zc9YyELo2JxwYB4nYxYjP93C7u3HRqGMpg9cue94agFopa4DzlQIgmZIADEYTYdcFLdfNA3A4HgDY7U8AyHT27QX2eqCUCgCkvNXYbTcMsDeYaI47J/7jgtbrv/Avxmg8ZsW+C9O5B8BssTT2q+UiAPWKa9eFKwzDPzoKq7SSAAAAAElFTkSuQmCC'),
20: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBYPx184eAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABDklEQVQ4y62Rv07CUBSHv0sLFHExJiwyiDHpaIirg4NxZOFJHHwKfQOegA13BgcHq4kO4CoOLBCqCX+KbamX4V4MTZCYtGc553fPub/zJUc4jiNZD0PLSOcf/ayLIPABECIDQIaEYQ4fW8rREADkrKLamM3pEUUShaFWSvthkBLBgX0CwHzsbp8sxOWuzokJxOWpLZMYJCf4eL2XAIfV81ij224C8N55BqB2dRvrv9w1UrrC1B0AcE0FgBt6AHSeHjZ+WM39Gvzl7H37/yNYFf2LEgD1xT7hIkLuqU2fmrB2ViVrGvRNI+UrdNtNCRDMxgBMZh5Tb85bbwTAlzsE4LhksWPlKRbyAJSP7HQIlhjFT+sbTWH0AAAAAElFTkSuQmCC'),
21: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBUEe6CyMwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABNElEQVQ4y52TPWrDQBCFP6/cqhEI4dYHSKFG+ABWKdw7BwiBQO6QKo2bNDlAUrgLKnOBsI3AOYDbIAxpUgun2MzuaB1DyMCi+Xk7q3lvd7KpOQJUc7B7EB/G8bmaAWhWJUUeAEXuloCLHJoKbzo2AP1754uXjwnLu8QDAZiVpzlUg9iydHAbZiUAy+sdAA+vCa11mP7gvlPZ1FoHyNLBN2lfulFTaQKDH88AFBclfzVpJDblH/b8FnPw0dFUcFOH7utFAOl8bKM/0FLF+uuGumaE0dbipXJEOYD4Oq9zk03NsZo7/WOyPr+Ss76MZfS1zNLBLx3/5guRRhMlp+h549nj+OQmrheBTAFvb90S296XvmaE0aaCp6sgl94gV9qf/iO7l9HuQSvY2vAS5bHp59wfAm/fWoh3ZA08iW0AAAAASUVORK5CYII='),
22: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBkk7Hvd9wAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAiklEQVQ4y2NgoBAwwhiXem3/w9h6xYcZ0RXikmei1AUUG8CI7LTLz3/AJTzd5OHs7bsewtm6khwMyF4ZeC+w/HaYAOcUTQxFeIEB4YWiV2/h7G2Rq5G0Gw+CWGB5fLkezlmfFg1nR7eeQYhXI8SR1Q+ShPT8SRY8IX29yUdQA7f6JzhbUmbaIEhIAMXkKewS1cHBAAAAAElFTkSuQmCC'),
32: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAUPprB56gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABG0lEQVQ4y62TsU7DQBBEn2OHWMEJBRAiKwVFQIiCDilFynwISFT5GUo+hYqClgYJiYY+SEgYkHU4tmxsiomLq3Pb3Gl3b2f2dse7vDlpAOocAHqhB4BJSwCqtc5OECi+21Vi1cjPlha0yK0VuSoPR30A+nEtpErIyZseFHXliEF7OZ5OANjpyhWFYpDnGQC1r7/x4wSANCscMZiMx6qslsiMeqw6cqTGAHAY72k6Zm0hb8+gF6rnh7sXK7BYngl5KOT722crPr8+d8PAmy+1iaP9AwAGfgTA0+OrlXixOAVg9bEC4Ps9c8RgdjVtAJpAG5f/6PcHoV37M9Hco6MQgNL8OZrC1yrVpiENBBvVFb/Y6ttYnSmvLBxp4R/CM1dNZKkXNgAAAABJRU5ErkJggg=='),
33: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAkN5AtXygAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABUklEQVQ4y63TP0iVcRTG8c81/2CKovctwxJBEDRvOEZSbQXR4thSLq5iy4VECFHukn9Cve7u0RDYcJGoJDBQJ8OoQW2wNBwquChqvg6/SXDzPduBB873nPM8qelPozE8/54F16s6QHf0BNy+eBe8SufB3u4BWJ3/AUqcs1LNuUsx3LiVAT//bID2KPSbH7ZBy6NaUPwWCLLRi2QISq90VYKl3AqovxCB1tF28LuiCAq9yyBdmQbVY9UJEZRVlIP4IAW+LqyDLyOL4F/zr0Cy8BccZmIwWRxMiKCr/D643L8GOvM3Qb5vJiiOw4y3n9+A4bkhsF26lZAPppZyMbx+Nxd2fb8TblFYPyVsuBd8cOdl8Mfj4tOEbtBS3wqiqgbwsbB4pnBnPnxhf+M/mFgbT4hgdm8SXHtwFdRlakD/bA9oOmoDz7IDIRvLuyErDxuTITgBE2ldifRSs+UAAAAASUVORK5CYII='),
34: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAYvtvMK4QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA+ElEQVQ4y63QO4oCURCF4c9xaPEFbSqigTvQNRi7GEOhA6FTIzfiNtyBYKShIohvUJzoBjeZxD5RFXWqzk+V5vP5B57PJ6hWq+BwOID7/Q4qlQpoNpvg/X6DH1/qNyQHhcROpwPa7TZ4vV5gvV6Dx+NREEEoBoMBKJfLoNVqgev1Gi0EkuPxWBBBv9+PLp9OJ3C73cB+vwe9Xi9KDvqeoF6vg9lsFg2yLIuSp9NpNJ9MJsUQlBaLxQe63S6o1WpguVxGxvF4DDabDdhutwX9IHw7z/N/javVKupHo1FBBLvdDgyHQ5AkSWRoNBrgcrmANE3B+XwuhuAP0cRYqLWs0nQAAAAASUVORK5CYII='),
35: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAc7tTLv3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABDklEQVQ4y63Su0oDYRAF4C8XNUkRRLGSIGiEYFBJoeRdrGx9HVFfwNInsLSKNmJALVSwSSWIwZD7uha7ARPsstP8c4bhP4czJ1Wv7YRwdP8Erg73/K3ROAD9wQCsP76CVnUbpM1Z2fDnZ4q5eNcE7YNdEARjcBwzn22WQEGYjILUqeiriYJ0JgV6/REYDodgIZsFnW4fNF/eE/LgOm7GQeT2zd0jOI/nJ/E7wRfbG1N4fgWtahnkwmmm65nFWXy5X0noCrWdrRDyuVx03/wS+O50wefXN1hdKcbzHsjnFxPyYNIUltdAo3ELKuVSbHOUi4fnN1Cv16OctD8SVhCG4b8Li9nMFA7ivExyM7eCX2nPVFxK67LHAAAAAElFTkSuQmCC'),
36: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAsVxVGtHgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABU0lEQVQ4y63Tv0vUcRzH8cdVV2c/1O8p6qUgDiWCkJGDNAj5BwROLerSUP0BgZDrDbmFg3EiIjXc0tDQckRzXR0ELsGhmHFqni13h5IY1/BZvNnve3zD682T9/P9TuTz+SZ8+LEMRm6Og3eFN87W+vBjkG7vBsm2JLjgnHXp6vUrYPb+C/C6+BKM3bsDSsUS6O3NhMSNVMuA8xMcNf6C/XoVjPeMgWqlBjL9uy2Bf7VjcLG9LR6CRLovakKyuw5eLbwFuY8LIJuYBEOjYSedc3MgFUUxEeRWck2oHv4GX4vfwFG6DJYmngf/mb6QqP4C05/nY7JQO/4DGifBwuj+QfDfnwDPvmTB1NYgeDL7KPQvz8REUK58B59K70FHFC6uZ+cWOO3cBIWBbfDwZ9jB4t5qTAQP7k6Dw/oeqBzshG/ragT/HbdBubIBnpbXQtC1eAj+A9SNWsc6q4V1AAAAAElFTkSuQmCC'),
37: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAoFwf2MOwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABRUlEQVQ4y32Ty27CMBBFz4ydpGxAILGrivo3/Yv+Z7+mrJESwaalJDNdmDxMgMkmdnKP53Etn18fzk20547joQZgtd0Qq8CjiABujrWOe2LZxXAb39sbkYigURCVBLDWOTUNdjGmQIBT3SAqGUALZbleE8orwN3TSedulmJ38btp99nGfvP3W+n+xp+rnWWi817HHpXKaksOuBsThrsjIrNf9ClAwa/Pwym05y7ren8axkzY150BjocaN6d8Hcc4FQsp7erNhnVcWO6Du4XZk7LMB3/E1XaDXYxT3Qwjc/M0e4OffdItdpJ5pPdHjFWghcwsGvRuvSio6NzKtzGIFRbv82+hUJabNVpoAojIuLixssb57EMVCGUglFdNKJO3p5fpVDcALDdrRMG6KzAIGpM4K6HfALKeaKGEQml/052MLzHr1z+EQa7SLRnZJQAAAABJRU5ErkJggg=='),
38: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCA46E/dkAgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAf0lEQVQ4y7WTsQqAMBBDX0U6dOoi+CvOTp39Tj/B2cn/EJxcu9TJoQe1hdZsdxdISDhljAkAWmsAvPd8QfI6KtHnFOReot6BVHznlKLk1TvIpZ5CuxYOdwNwrgqA0QUApm2IiPt8xbwltHGgrLWhpPfUvV0LpYrtWyj9wt8yeAASSTd0D702yQAAAABJRU5ErkJggg=='),
39: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCA8c2OHQvgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAApUlEQVQ4y2NgoBAwVjUV/GdgYGBoq5vAiE0BTB5ZDbIYE6UuoNgAFpizkira4c6a11EJ986b5xwYmpDFBt4L8Fhg+MEFF/z+/TsDAwMDw4cPH+BivLy8GJonTZrEOAi8AGNkZmb+Z2BgYNi0aRNcMiEhAc5esGABnO3j48PAwMDAICLDNRhiIS2z4j8DAwPDr+8vMCS5+GQQCv++x5CfOnXqIIgFABSwMEHtJUHQAAAAAElFTkSuQmCC'),
40: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAgpwROCWgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABJ0lEQVQ4y63Tu0okQRTG8V+P4+iMVxAREdlARBREEQyN9Gl8AU00MTYSfBhxTcRoYdlIYRdNnEAUBS+DOtNjb3C6A03tSr46RdU5/zqXpLawmsH++S+wtbIGpJ3Q9hvIWs9g4/oSHE/NgIpvrqRvfiWDnvoAWP99Cn7mJOlLRN7/+wfsjE/Gw2qtJIIDMtidXwYf/UHy0WqFFrnI1/DjHWje35ZDUD0qdp0ueLg4A4f58Wauhb03NvHJ/j7ByY9ZUM//Wng++nKxsF8rvWB7uqw+qM0uZlAtkKoRofvyCN6fn0BvXv9u3pFJY6CkHJCEx3oDvDWvov6DI9GJlZ7Q63+gMbcUJO12WQRp1D9L0/DcielLsuG4UesPfbiJB0OjMaQ3zXII/gMiIliJjt3yRAAAAABJRU5ErkJggg=='),
41: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAoohCLQTgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA30lEQVQ4y6WTsQ2EMBAEx+gDpAtphArcAxk1UBA1kFGAM1dAH4jQFhkf2TLG/tfrV0Iye+hub70o7/1FBudcPItIlQNoQjF9rLW3ZjUOQHnvr/ASPtJaU0JeF5F7g18hIqh93y/+wCuVN8/zrbgsCwDjON74aZriGo8Vwp7DMHAcBwBd17Gu68MfEaFp2/Yhq2RiiXPO0ZznWdwtTE/PeRMRQRljool93380zFqL1ppt2yKn0iSGwNRyUEpiVPBteo6gIirIw5RfXbjSXIUyxly/Tk9V/B/l2u+cGlXjAN472J2vHjgcIgAAAABJRU5ErkJggg=='),
42: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBAAAbqCbwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAuElEQVQ4y2MUYGD4z8DAwPCBARUIQWkRNPFbUJoFSjMxUAgYOaEugAFuKC0As0EYyngLod5Aub+o5gJeqAu2oEl4o/G3ovF9qeYCGagL7tlCBQ5CaA2o0c+gCj/9g9D/7SG0ymFquYAP6gIJmAg01J9BQ/0LVFgSSvOiGUC5C3jQ0sEXtPQAcxkzTAEbqlModwEDmgs40fICNywzvMFuAMUuYEEXkIX5kQ9CvYPa/BUq/B1KK1PLBQBzxx7wSCywogAAAABJRU5ErkJggg=='),
43: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBUf8cV73wAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABF0lEQVQ4y62SsUoDURBFzxoxRFdQBMNGRNBgIYKF2AYCWu1H2Imd+hX+gq1fYG2phU0QLFSCqCghGzQJAZMYjMqzuGOxdd40d+bOe8zlzgQflbwDCDtvAFBaAaBx9gRAtCmavuFGSfhdB2CMEWO828oAEC6ti7m8TU+2aFSF0VRPSbXvR0FwfoAD2IlF1F+EC1v2opnm/+P+Dk8eRGuWbe8DUA5PAXi4GWhyRe3yYU58b1cKjk48eRAX5cHxnoikJXTvwuVZ4XPHPswL8+BLwaoUTP+mGxc6ROasjovC10LB1pJ42kJmQsl1zZif0Cbr4tpGXz3afbgkpXB0DxYn5UEW7XngtP9coHrmU/UwK6nNr6Fp96TgD68IS+Ryu2FhAAAAAElFTkSuQmCC'),
44: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBoQ5uJ6gQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABJUlEQVQ4y62TvU4CQRSFv/2DBWRR/AkkBht7H8NSKxPfwIreyk5fwWegsbGxsyOxsDUWKmY1QUUxmtVddmfGYpfEydKxp7w5Oee7k7nG8VlXAVz2+wCUKw6pBP/17gcAuKoMQGhEAJjMKXvgPwIQBTEASujNk1AC4FRsAOpiIeWzREEEo5fPbOU0cRIIrbnVXgagWnUBaDZWAHi9HhVEMHx+A+CuN5hpuOdh5ryz0ymIYJpxdXMOwOneIQAX6x+acfupCcBB7wSA/aPuNCCvUAhELHMz17JyXmNrd1MB2G6WJRUilqwlevZXA+ySxe9PAkASJoW9ga6x/41MJIurHgClDHt4O8a0TZY2PM1fPIHXriFiiUpPg0imP7PeqmE5+b65Cf4AjI9iM/4hVAEAAAAASUVORK5CYII=')
};

function headArrow(_0x18a3x6c) {
var _0x18a3x6d = decodeBmp(_0x18a3x6c),
_0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](arrow['getWidth'](), arrow['getHeight'](), android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55);
_0x18a3x38['drawBitmap'](arrow, 0, 0, null);
_0x18a3x38['drawBitmap'](_0x18a3x6d, 1, 6, null);
return _0x18a3x55
};

function decodeBmp(_0x18a3x6c) {
_0x18a3x6c = android['util']['Base64']['decode'](_0x18a3x6c, 0);
return android['graphics']['BitmapFactory']['decodeByteArray'](_0x18a3x6c, 0, _0x18a3x6c['length'])
};

function drawBorderBmp() {
var _0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](settings['window_size'], settings['window_size'], android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55),
_0x18a3x56 = new android['graphics'].Paint();
_0x18a3x56['setMaskFilter'](new android['graphics'].EmbossMaskFilter([1, 1, 0.3], 0.7, 8, 3 * density));
switch (settings['style_border']) {
case 1:
_0x18a3x56['setColor'](android['graphics']['Color']['rgb'](153, 135, 108));
break;
case 2:
_0x18a3x56['setShader'](new android['graphics'].LinearGradient(0, 0, settings['window_size'] * 0.5, settings['window_size'], [android['graphics']['Color']['GREEN'], android['graphics']['Color']['YELLOW'], android['graphics']['Color']['GREEN']], null, android['graphics']['Shader']['TileMode'].REPEAT));
break;
default:
return null
};
_0x18a3x38['drawPath'](createPath(true, true), _0x18a3x56);
return _0x18a3x55
};

function createPath(_0x18a3x71, _0x18a3x72) {
var _0x18a3x65 = new android['graphics'].Path(),
_0x18a3x73 = settings['window_size'];
_0x18a3x65['setFillType'](android['graphics']['Path']['FillType'].EVEN_ODD);
if (settings['style_shape'] === 1) {
if (_0x18a3x72) {
_0x18a3x65['addCircle'](_0x18a3x73 / 2, _0x18a3x73 / 2, _0x18a3x73 / 2 - (7 * density), android['graphics']['Path']['Direction'].CW)
};
if (_0x18a3x71) {
_0x18a3x65['addCircle'](_0x18a3x73 / 2, _0x18a3x73 / 2, _0x18a3x73 / 2, android['graphics']['Path']['Direction'].CW)
};
return _0x18a3x65
} else {
if (_0x18a3x72) {
_0x18a3x65['addRect'](7 * density, 7 * density, _0x18a3x73 - (7 * density), _0x18a3x73 - (7 * density), android['graphics']['Path']['Direction'].CW)
};
if (_0x18a3x71) {
_0x18a3x65['addRect'](0, 0, _0x18a3x73, _0x18a3x73, android['graphics']['Path']['Direction'].CW)
};
return _0x18a3x65
}
};

function chunkLoaded(_0x18a3x32, _0x18a3x5d) {
var _0x18a3x75 = 130;
do {
if (Level['getTile'](_0x18a3x32, 130 - _0x18a3x75, _0x18a3x5d)) {
return true
}
} while (_0x18a3x75 -= 10);;
return false
};
mapDot = [function basicSurfaceMap(_0x18a3x32, _0x18a3x5d) {
var _0x18a3x75 = 130,
_0x18a3x77 = 10,
_0x18a3x78 = {
1: -8487298,
3: -7970749,
4: -8487298,
8: -14000385,
9: -14000385,
10: -637952,
11: -637952,
12: -2370656,
13: -8618884,
17: -10005725,
18: -13534192,
24: -3817840,
48: -10193052,
78: -984069,
79: -5255937,
82: -6314831,
98: -8487298,
99: -7509421,
100: -4774107,
109: -8487298,
110: -9542807,
128: -3817840,
159: -2968927,
161: -8028101,
162: -13293288,
172: -6857405,
174: -5255937,
243: -10797283
};
do {
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)) {
if (_0x18a3x77 === 10) {
_0x18a3x77 = 1;
_0x18a3x75 += 10
} else {
return _0x18a3x78[Level['getTile'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)] || -8540361
}
}
} while (_0x18a3x75 -= _0x18a3x77);;
return 0
}, function minecraftMap(_0x18a3x32, _0x18a3x5d) {
var _0x18a3x7a, _0x18a3x7b, _0x18a3x75 = 130,
_0x18a3x77 = 10,
_0x18a3x7c = android['graphics']['Color'];
do {
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)) {
if (_0x18a3x77 === 10) {
_0x18a3x77 = 1;
_0x18a3x75 += 10
} else {
_0x18a3x7b = Level['getTile'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d);
switch (_0x18a3x7b) {
case 9:
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 19, _0x18a3x5d) === 9) {
return -13882190
};
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 16, _0x18a3x5d) === 9) {
return !(_0x18a3x32 % 2) === !((_0x18a3x5d + 1) % 2) ? -13882190 : -13224231
};
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 14, _0x18a3x5d) === 9) {
return -13224231
};
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 12, _0x18a3x5d) === 9) {
return !(_0x18a3x32 % 2) === !((_0x18a3x5d + 1) % 2) ? -13224231 : -12632068
};
return -12632068;
case 12:
if (Level['getData'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)) {
_0x18a3x7a = 0xd57d32
} else {
_0x18a3x7a = 0xf4e6a1
};
break;
case 35:
;
case 159:
;
case 171:
_0x18a3x7a = [0xfcf9f2, 0xd57d32, 0xb04bd5, 0x6597d5, 0xe2e232, 0x7dca19, 0xef7da3, 0x4b4b4b, 0x979797, 0x4b7d97, 0x7d3eb0, 0x324bb0, 0x654b32, 0x657d32, 0x973232, 0x191919][Level['getData'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)];
break;
case 5:
;
case 85:
;
case 157:
;
case 158:
_0x18a3x7a = [0x8d7647, 0x7e5430, 0xf4e6a1, 0x956c4c, 0xd57d32, 0x654b32, 0, 0, 0x8d7647, 0x7e5430, 0xf4e6a1, 0x956c4c, 0xd57d32, 0x654b32, 0, 0][Level['getData'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)];
break;
case 43:
;
case 44:
_0x18a3x7a = [0x6f6f6f, 0xf4e6a1, 0x8d7647, 0x6f6f6f, 0x973232, 0x6f6f6f, 0xfcfcfc, 0x6f0200, 0x6f6f6f, 0xf4e6a1, 0x8d7647, 0x6f6f6f, 0x973232, 0x6f6f6f, 0xfcfcfc, 0x6f0200][Level['getData'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)];
break;
case 54:
chests[chests['length']] = [_0x18a3x32 + 0.5, _0x18a3x5d + 0.5];
default:
_0x18a3x7a = {
2: 0x7db037,
3: 0x956c4c,
6: 0x007b00,
8: 0x3f3ffc,
10: 0xfc0000,
11: 0xfc0000,
17: 0x8d7647,
18: 0x007b00,
19: 0xe2e232,
22: 0x4981fc,
24: 0xf4e6a1,
30: 0xfcfcfc,
31: 0x007b00,
32: 0x8d7647,
37: 0x007b00,
38: 0x007b00,
39: 0x007b00,
40: 0x007b00,
41: 0xf7eb4c,
42: 0xa5a5a5,
45: 0x973232,
46: 0xfc0000,
47: 0x8d7647,
49: 0x191919,
53: 0x8d7647,
54: 0x8d7647,
57: 0x5bd8d2,
59: 0x007b00,
60: 0x956c4c,
78: 0xfcfcfc,
79: 0x9e9efc,
80: 0xfcfcfc,
81: 0x007b00,
82: 0xa2a6b6,
83: 0x007b00,
86: 0xd57d32,
87: 0x6f0200,
91: 0xd57d32,
99: 0x8d7647,
100: 0x973232,
103: 0x7dca19,
104: 0x007b00,
105: 0x007b00,
106: 0x007b00,
107: 0x8d7647,
108: 0x973232,
110: 0x7d3eb0,
111: 0x007b00,
112: 0x6f0200,
113: 0x6f0200,
114: 0x6f0200,
121: 0xf4e6a1,
128: 0xf4e6a1,
133: 0x00d639,
134: 0x7e5430,
135: 0xf4e6a1,
136: 0x956c4c,
141: 0x007b00,
142: 0x007b00,
152: 0xfc0000,
155: 0xfcfcfc,
156: 0xfcfcfc,
161: 0x007b00,
162: 0x8d7647,
163: 0xd57d32,
164: 0x654b32,
170: 0xf7eb4c,
172: 0xd57d32,
174: 0x9e9efc,
175: 0x007b00,
183: 0x7e5430,
184: 0xf4e6a1,
185: 0x956c4c,
187: 0xd57d32,
186: 0x654b32,
243: 0x7e5430,
244: 0x007b00
};
_0x18a3x7a = _0x18a3x7a[_0x18a3x7b] || 0x6f6f6f
};
if (Level['getTile'](_0x18a3x32 - 1, _0x18a3x75 - 9, _0x18a3x5d)) {
return _0x18a3x7c['rgb'](_0x18a3x7c['red'](_0x18a3x7a) * (180 / 255), _0x18a3x7c['green'](_0x18a3x7a) * (180 / 255), _0x18a3x7c['blue'](_0x18a3x7a) * (180 / 255))
};
if (Level['getTile'](_0x18a3x32 - 1, _0x18a3x75 - 10, _0x18a3x5d)) {
return _0x18a3x7c['rgb'](_0x18a3x7c['red'](_0x18a3x7a) * (220 / 255), _0x18a3x7c['green'](_0x18a3x7a) * (220 / 255), _0x18a3x7c['blue'](_0x18a3x7a) * (220 / 255))
};
return _0x18a3x7c['rgb'](_0x18a3x7c['red'](_0x18a3x7a), _0x18a3x7c['green'](_0x18a3x7a), _0x18a3x7c['blue'](_0x18a3x7a))
}
}
} while (_0x18a3x75 -= _0x18a3x77);;
return 0
}, function caveMap(_0x18a3x32, _0x18a3x5d) {
var _0x18a3x7e = 0,
_0x18a3x7b = 1,
_0x18a3x7f, _0x18a3x75 = 96,
_0x18a3x80, _0x18a3x81, _0x18a3x82, _0x18a3x83, _0x18a3x84 = 3;
do {
_0x18a3x7f = Level['getTile'](_0x18a3x32, _0x18a3x75 - 3, _0x18a3x5d);
switch (_0x18a3x7f) {
case 0:
;
case 17:
;
case 18:
;
case 20:
;
case 50:
;
case 64:
;
case 66:
;
case 106:
;
case 127:
;
case 161:
;
case 162:
_0x18a3x7f = 1;
break;
case 8:
;
case 9:
_0x18a3x7f = 0;
if (_0x18a3x7e > 1) {
_0x18a3x81 = _0x18a3x81 || 1;
_0x18a3x82 = _0x18a3x82 || 1;
_0x18a3x83 = _0x18a3x83 || 255;
_0x18a3x7f = 1
};
break;
case 10:
;
case 11:
_0x18a3x7f = 0;
if (_0x18a3x7e > 1) {
_0x18a3x81 = _0x18a3x81 || 255;
_0x18a3x82 = _0x18a3x82 || 1;
_0x18a3x83 = _0x18a3x83 || 1;
_0x18a3x7f = 1
};
break;
case 4:
;
case 48:
_0x18a3x7f = 2;
if (_0x18a3x7e > 2) {
_0x18a3x81 = _0x18a3x81 || 1;
_0x18a3x82 = _0x18a3x82 || 255;
_0x18a3x83 = _0x18a3x83 || 255
};
break;
case 97:
;
case 98:
_0x18a3x7f = 2;
if (_0x18a3x7e > 2) {
_0x18a3x81 = _0x18a3x81 || 255;
_0x18a3x82 = _0x18a3x82 || 1;
_0x18a3x83 = _0x18a3x83 || 255
};
break;
case 54:
chests[chests['length']] = [_0x18a3x32 + 0.5, _0x18a3x5d + 0.5];
default:
_0x18a3x7f = 2
};
if (_0x18a3x7f !== _0x18a3x7b) {
_0x18a3x7e += _0x18a3x7f;
_0x18a3x80 = _0x18a3x75
};
if (_0x18a3x7e === 5) {
_0x18a3x75 += 3;
_0x18a3x84 = 1;
_0x18a3x7e = 6;
_0x18a3x7f = 1
} else {
if (_0x18a3x7e === 8) {
_0x18a3x81 = _0x18a3x81 || 150;
_0x18a3x82 = _0x18a3x82 || 255;
_0x18a3x83 = _0x18a3x83 || 0;
return android['graphics']['Color']['rgb'](_0x18a3x81 * (0.8 * (_0x18a3x80 / 127) + 0.2), _0x18a3x82 * (0.9 * (_0x18a3x80 / 127) + 0.1), _0x18a3x83 * (0.9 * (_0x18a3x80 / 127) + 0.1))
}
};
_0x18a3x7b = _0x18a3x7f
} while (_0x18a3x75 -= _0x18a3x84);;
_0x18a3x80 = _0x18a3x80 || 127;
_0x18a3x81 = 255;
_0x18a3x82 = 255;
_0x18a3x83 = 255;
return android['graphics']['Color']['rgb'](_0x18a3x81 * (0.8 * (_0x18a3x80 / 127) + 0.2), _0x18a3x82 * (0.8 * (_0x18a3x80 / 127) + 0.2), _0x18a3x83 * (0.8 * (_0x18a3x80 / 127) + 0.2))
}];

function checkRenderDistance() {
var _0x18a3x86 = load(android['os']['Environment']['getExternalStorageDirectory']()['getPath']() + '/games/com.mojang/minecraftpe/', 'options.txt')['split']('\x0A'),
_0x18a3x26;
if (_0x18a3x86 != '') {
for (_0x18a3x26 = 0; _0x18a3x26 < _0x18a3x86['length']; _0x18a3x26 += 1) {
_0x18a3x86[_0x18a3x26] = _0x18a3x86[_0x18a3x26]['split'](':');
if (_0x18a3x86[_0x18a3x26][0] === 'gfx_renderdistance_new') {
return Math['round'](parseInt(_0x18a3x86[_0x18a3x26][1], 10) / 16)
}
}
};
return 6
};

function saveSettings() {
var _0x18a3x27 = '',
_0x18a3x88;
for (_0x18a3x88 in settings) {
if (settings['hasOwnProperty'](_0x18a3x88)) {
if (_0x18a3x27 !== '') {
_0x18a3x27 += '\x0A'
};
_0x18a3x27 += _0x18a3x88 + ':' + settings[_0x18a3x88]
}
};
save(android['os']['Environment']['getExternalStorageDirectory']()['getPath']() + '/games/com.mojang/', 'minimap.txt', _0x18a3x27)
};

function changeMapState() {
var _0x18a3x26;
map_state = !map_state;
mapWindow['resetVisibility']();
if (map_state) {
delayChunksArrLock['acquire']();
_0x18a3x26 = delayChunksArr['length'];
while (_0x18a3x26--) {
scheduleChunk(delayChunksArr[_0x18a3x26][0], delayChunksArr[_0x18a3x26][1], 0)
};
delayChunksArr = [];
delayChunksArrLock['release']();
scheduledFutureUpdateMap = poolTick['scheduleWithFixedDelay'](runnableUpdateMap, 1000, Math['round'](1000 / settings['delay']), java['util']['concurrent']['TimeUnit'].MILLISECONDS);
scheduleChunk(Math['floor'](X / 16) * 16, Math['floor'](Z / 16) * 16, 0)
} else {
scheduledFutureUpdateMap['cancel'](false)
}
};

function settingsChanged(_0x18a3x8b) {
switch (_0x18a3x8b) {
case 'radius':
var _0x18a3x26, _0x18a3x8c, _0x18a3x8d = bmpSrc['getWidth'](),
_0x18a3x8e = ((settings['radius'] + 1) * 2 + 1) * 16,
_0x18a3x5a = Math['floor'](X / 16) * 16,
_0x18a3x5b = Math['floor'](Z / 16) * 16;
try {
bmpSrcLock['acquire']();
bmpSrcCopy = android['graphics']['Bitmap']['createBitmap'](_0x18a3x8e, _0x18a3x8e, android['graphics']['Bitmap']['Config'].ARGB_8888);
canvasBmpSrcCopy['setBitmap'](bmpSrcCopy);
canvasBmpSrcCopy['drawBitmap'](bmpSrc, (_0x18a3x8e - _0x18a3x8d) / 2, (_0x18a3x8e - _0x18a3x8d) / 2, null);
bmpSrc = android['graphics']['Bitmap']['createBitmap'](_0x18a3x8e, _0x18a3x8e, android['graphics']['Bitmap']['Config'].ARGB_8888);
canvasBmpSrc['setBitmap'](bmpSrc);
canvasBmpSrc['drawBitmap'](bmpSrcCopy, 0, 0, null)
} finally {
bmpSrcLock['release']()
};
minZoom = settings['window_size'] / (settings['radius'] * 2 * 16);
absZoom = (100 / settings['map_zoom']) * minZoom;
if (_0x18a3x8e > _0x18a3x8d) {
for (_0x18a3x26 = (_0x18a3x8d - 16) / 2; _0x18a3x26 <= settings['radius'] * 16; _0x18a3x26 += 16) {
for (_0x18a3x8c = 0; _0x18a3x8c < _0x18a3x26; _0x18a3x8c += 16) {
if (map_state) {
scheduleChunk(_0x18a3x5a + _0x18a3x8c + 16, _0x18a3x5b + _0x18a3x26, 0);
scheduleChunk(_0x18a3x5a + _0x18a3x8c, _0x18a3x5b - _0x18a3x26, 0);
scheduleChunk(_0x18a3x5a - _0x18a3x8c, _0x18a3x5b + _0x18a3x26, 0);
scheduleChunk(_0x18a3x5a - _0x18a3x8c - 16, _0x18a3x5b - _0x18a3x26, 0);
scheduleChunk(_0x18a3x5a + _0x18a3x26, _0x18a3x5b + _0x18a3x8c, 0);
scheduleChunk(_0x18a3x5a + _0x18a3x26, _0x18a3x5b - _0x18a3x8c - 16, 0);
scheduleChunk(_0x18a3x5a - _0x18a3x26, _0x18a3x5b + _0x18a3x8c + 16, 0);
scheduleChunk(_0x18a3x5a - _0x18a3x26, _0x18a3x5b - _0x18a3x8c, 0)
} else {
delayChunksArrLock['acquire']();
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a + _0x18a3x8c + 16, _0x18a3x5b + _0x18a3x26];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a + _0x18a3x8c, _0x18a3x5b - _0x18a3x26];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a - _0x18a3x8c, _0x18a3x5b + _0x18a3x26];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a - _0x18a3x8c - 16, _0x18a3x5b - _0x18a3x26];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a + _0x18a3x26, _0x18a3x5b + _0x18a3x8c];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a + _0x18a3x26, _0x18a3x5b - _0x18a3x8c - 16];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a - _0x18a3x26, _0x18a3x5b + _0x18a3x8c + 16];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a - _0x18a3x26, _0x18a3x5b - _0x18a3x8c];
delayChunksArrLock['release']()
}
}
}
};
redraw = true;
break;
case 'map_type':
if (pool['getActiveCount']() > 0) {
createPool()
};
X = undefined;
break;
case 'map_zoom':
absZoom = (100 / settings['map_zoom']) * minZoom;
redraw = true;
break;
case 'map_alpha':
mapView['setAlpha'](settings['map_alpha'] / 100);
break;
case 'window_rawSize':
settings['window_size'] = (settings['window_rawSize'] / 100) * displayHeight;
var _0x18a3x8f = mapView['getLayoutParams']();
_0x18a3x8f['height'] = settings['window_size'];
_0x18a3x8f['width'] = settings['window_size'];
mapView['setLayoutParams'](_0x18a3x8f);
redraw = true;
bmpBorder = drawBorderBmp();
if (settings['style_border'] !== 0) {
pathBorder = createPath(false, true)
} else {
pathBorder = createPath(true, false)
};
redraw = true;
minZoom = settings['window_size'] / (settings['radius'] * 2 * 16);
absZoom = (100 / settings['map_zoom']) * minZoom;
break;
case 'window_rawPosition':
mapWindow['hide']();
mapWindow['show']();
break;
case 'style_shape':
if (settings['style_border'] !== 0) {
pathBorder = createPath(false, true)
} else {
pathBorder = createPath(true, false)
};
case 'style_border':
if (settings['style_border'] !== 0) {
pathBorder = createPath(false, true)
} else {
pathBorder = createPath(true, false)
};
bmpBorder = drawBorderBmp();
redraw = true;
break;
case 'style_pointer':
redraw = true;
break;
case 'show_info':
;
case 'show_zoomBtn':
mapWindow['resetVisibility']();
break;
case 'delay':
scheduledFutureUpdateMap['cancel'](false);
scheduledFutureUpdateMap = poolTick['scheduleWithFixedDelay'](runnableUpdateMap, 1000, Math['round'](1000 / settings['delay']), java['util']['concurrent']['TimeUnit'].MILLISECONDS);
break;
case 'threadCount':
pool['setCorePoolSize'](settings['threadCount']);
break
}
};

function settingsClosed() {
saveSettings()
};

function settingsUI() {
var _0x18a3x92 = 17,
_0x18a3x93 = 10,
context = com['mojang']['minecraftpe']['MainActivity']['currentMainActivity']['get'](),
_0x18a3x94 = new android['app']['AlertDialog'].Builder(context),
_0x18a3x95 = new android['widget'].ScrollView(context),
_0x18a3x44 = new android['widget'].LinearLayout(context),
_0x18a3x26, _0x18a3x96 = arguments[0]['length'],
_0x18a3x97, _0x18a3x98 = new android['view']['ViewGroup'].LayoutParams(android['view']['ViewGroup']['LayoutParams'].MATCH_PARENT, 2),
_0x18a3x99 = {
checkBox: function(_0x18a3x9a) {
var _0x18a3x9b = new android['widget'].RelativeLayout(context),
_0x18a3x9c = new android['widget'].CheckBox(context),
_0x18a3x9d = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT),
_0x18a3x4f = new android['widget'].TextView(context),
_0x18a3x9e = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT);
_0x18a3x4f['setTextSize'](_0x18a3x92);
_0x18a3x4f['setText'](_0x18a3x9a[2]);
_0x18a3x9c['setId'](1);
_0x18a3x9c['setChecked'](Boolean(settings[_0x18a3x9a[1]]));
_0x18a3x9c['setOnCheckedChangeListener'](function(_0x18a3x9f, _0x18a3xa0) {
if (_0x18a3xa0) {
settings[_0x18a3x9a[1]] = 1
} else {
settings[_0x18a3x9a[1]] = 0
};
settingsChanged(_0x18a3x9a[1])
});
_0x18a3x9d['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_RIGHT);
_0x18a3x9d['addRule'](android['widget']['RelativeLayout'].CENTER_VERTICAL);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_LEFT);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].CENTER_VERTICAL);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].LEFT_OF, 1);
_0x18a3x9b['addView'](_0x18a3x9c, _0x18a3x9d);
_0x18a3x9b['addView'](_0x18a3x4f, _0x18a3x9e);
_0x18a3x9b['setPadding'](_0x18a3x93, _0x18a3x93 * 0.5, _0x18a3x93, _0x18a3x93 * 0.5);
return _0x18a3x9b
},
subScreen: function(_0x18a3x9a) {
var _0x18a3x4f = new android['widget'].TextView(context);
_0x18a3x4f['setTextSize'](_0x18a3x92);
_0x18a3x4f['setText'](_0x18a3x9a[1] + ' >');
_0x18a3x4f['setPadding'](_0x18a3x93, _0x18a3x93, _0x18a3x93, _0x18a3x93);
_0x18a3x4f['setOnClickListener'](function(_0x18a3x47) {
settingsUI(_0x18a3x9a[2])['show']()
});
return _0x18a3x4f
},
sectionDivider: function(_0x18a3x9a) {
var _0x18a3x4f = new android['widget'].TextView(context);
_0x18a3x4f['setTextSize'](_0x18a3x92 * 0.9);
_0x18a3x4f['setText'](_0x18a3x9a[1]);
_0x18a3x4f['setTextColor'](android['graphics']['Color'].WHITE);
_0x18a3x4f['setBackgroundDrawable'](new android['graphics']['drawable'].GradientDrawable(android['graphics']['drawable']['GradientDrawable']['Orientation'].LEFT_RIGHT, [android['graphics']['Color']['rgb'](0, 127, 0), android['graphics']['Color']['rgb'](63, 95, 0), android['graphics']['Color']['rgb'](0, 63, 0)]));
_0x18a3x4f['setPadding'](_0x18a3x93, 0, _0x18a3x93, 0);
return _0x18a3x4f
},
keyValue: function(_0x18a3x9a) {
var _0x18a3x9b = new android['widget'].RelativeLayout(context),
_0x18a3x4f = new android['widget'].TextView(context),
_0x18a3x9e = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT),
_0x18a3xa1 = new android['widget'].TextView(context),
_0x18a3xa2 = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT);
_0x18a3x4f['setTextSize'](_0x18a3x92);
_0x18a3x4f['setText'](android['text']['Html']['fromHtml'](_0x18a3x9a[2]));
_0x18a3x4f['setMovementMethod'](android['text']['method']['LinkMovementMethod']['getInstance']());
_0x18a3xa1['setTextSize'](_0x18a3x92);
_0x18a3xa1['setTextColor'](android['graphics']['Color']['rgb'](100, 255, 0));
_0x18a3xa1['setId'](1);
switch (_0x18a3x9a[1]) {
case 'multipleChoice':
if (_0x18a3x9a[4]['length'] <= settings[_0x18a3x9a[3]]) {
settings[_0x18a3x9a[3]] = 0
};
_0x18a3xa1['setText'](_0x18a3x9a[4][settings[_0x18a3x9a[3]]]);
_0x18a3xa1['setOnClickListener'](function(_0x18a3x47) {
var _0x18a3x94 = new android['app']['AlertDialog'].Builder(context),
_0x18a3xa3 = new android['widget'].ListView(context),
_0x18a3xa4 = new android['widget'].ArrayAdapter(context, android['R']['layout']['simple_list_item_single_choice'], _0x18a3x9a[4]);
_0x18a3xa3['setAdapter'](_0x18a3xa4);
_0x18a3xa3['setChoiceMode'](android['widget']['ListView'].CHOICE_MODE_SINGLE);
_0x18a3xa3['setItemChecked'](settings[_0x18a3x9a[3]], true);
_0x18a3xa3['setDivider'](new android['graphics']['drawable'].GradientDrawable(android['graphics']['drawable']['GradientDrawable']['Orientation'].LEFT_RIGHT, [android['graphics']['Color']['GREEN'], android['graphics']['Color']['YELLOW'], android['graphics']['Color']['GREEN']]));
_0x18a3xa3['setDividerHeight'](2);
_0x18a3xa3['setPadding'](_0x18a3x93, _0x18a3x93, _0x18a3x93, _0x18a3x93);
_0x18a3xa3['setOnItemClickListener'](function(_0x18a3xa5, _0x18a3xa6, _0x18a3xa7, _0x18a3x39) {
settings[_0x18a3x9a[3]] = _0x18a3xa7;
for (var _0x18a3x26 = 5; _0x18a3x26 < _0x18a3x9a['length']; _0x18a3x26 += 2) {
settings[_0x18a3x9a[_0x18a3x26]] = _0x18a3x9a[_0x18a3x26 + 1][_0x18a3xa7]
};
_0x18a3xa1['setText'](_0x18a3x9a[4][_0x18a3xa7]);
settingsChanged(_0x18a3x9a[3]);
_0x18a3x94['dismiss']()
});
_0x18a3x94['setView'](_0x18a3xa3);
_0x18a3x94['setTitle'](_0x18a3x9a[2]);
_0x18a3x94['setNegativeButton']('Cancel', function(_0x18a3xa8, _0x18a3xa9) {
_0x18a3x94['dismiss']()
});
_0x18a3x94 = _0x18a3x94['show']()
});
break;
case 'slider':
_0x18a3xa1['setText'](settings[_0x18a3x9a[3]] + _0x18a3x9a[7]);
_0x18a3xa1['setOnClickListener'](function(_0x18a3x47) {
var _0x18a3x94 = new android['app']['AlertDialog'].Builder(context),
_0x18a3xaa = new android['widget'].SeekBar(context);
_0x18a3xaa['setMax']((_0x18a3x9a[5] - _0x18a3x9a[4]) / _0x18a3x9a[6]);
_0x18a3xaa['setProgress']((settings[_0x18a3x9a[3]] - _0x18a3x9a[4]) / _0x18a3x9a[6]);
_0x18a3xaa['setOnSeekBarChangeListener'](new android['widget']['SeekBar'].OnSeekBarChangeListener({
onProgressChanged: function(_0x18a3xaa, _0x18a3xab, _0x18a3xac) {
_0x18a3x94['setTitle'](_0x18a3x9a[2] + '  ' + (_0x18a3xab * _0x18a3x9a[6] + _0x18a3x9a[4]) + _0x18a3x9a[7])
}
}));
_0x18a3x94['setView'](_0x18a3xaa);
_0x18a3x94['setTitle'](_0x18a3x9a[2] + '  ' + settings[_0x18a3x9a[3]] + _0x18a3x9a[7]);
_0x18a3x94['setPositiveButton']('Ok', function(_0x18a3xa8, _0x18a3xa9) {
settings[_0x18a3x9a[3]] = _0x18a3xaa['getProgress']() * _0x18a3x9a[6] + _0x18a3x9a[4];
_0x18a3xa1['setText'](settings[_0x18a3x9a[3]] + _0x18a3x9a[7]);
settingsChanged(_0x18a3x9a[3]);
_0x18a3x94['dismiss']()
});
_0x18a3x94['setNegativeButton']('Cancel', function(_0x18a3xa8, _0x18a3xa9) {
_0x18a3x94['dismiss']()
});
_0x18a3x94 = _0x18a3x94['show']()
});
break;
default:
_0x18a3xa1['setText'](String(_0x18a3x9a[3]))
};
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_LEFT);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].CENTER_VERTICAL);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].LEFT_OF, 1);
_0x18a3xa2['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_RIGHT);
_0x18a3xa2['addRule'](android['widget']['RelativeLayout'].CENTER_VERTICAL);
_0x18a3x9b['addView'](_0x18a3xa1, _0x18a3xa2);
_0x18a3x9b['addView'](_0x18a3x4f, _0x18a3x9e);
_0x18a3x9b['setPadding'](_0x18a3x93, _0x18a3x93, _0x18a3x93, _0x18a3x93);
return _0x18a3x9b
}
};
_0x18a3x93 = _0x18a3x93 * context['getResources']()['getDisplayMetrics']()['density'];
_0x18a3x44['setOrientation'](android['widget']['LinearLayout'].VERTICAL);
_0x18a3x44['setPadding'](_0x18a3x93, 0, _0x18a3x93, 0);
for (_0x18a3x26 = 2; _0x18a3x26 < _0x18a3x96; _0x18a3x26 += 1) {
_0x18a3x44['addView'](_0x18a3x99[arguments[0][_0x18a3x26][0]](arguments[0][_0x18a3x26]));
if (_0x18a3x26 + 1 < _0x18a3x96) {
_0x18a3x97 = new android['view'].View(context);
_0x18a3x97['setBackgroundDrawable'](new android['graphics']['drawable'].GradientDrawable(android['graphics']['drawable']['GradientDrawable']['Orientation'].LEFT_RIGHT, [android['graphics']['Color']['GREEN'], android['graphics']['Color']['YELLOW'], android['graphics']['Color']['GREEN']]));
_0x18a3x44['addView'](_0x18a3x97, _0x18a3x98)
}
};
_0x18a3x95['addView'](_0x18a3x44);
_0x18a3x94['setView'](_0x18a3x95);
_0x18a3x94['setTitle'](arguments[0][0]);
_0x18a3x94['setPositiveButton'](arguments[0][1], function(_0x18a3xa8, _0x18a3xa9) {
settingsClosed()
});
return _0x18a3x94
};

function save(_0x18a3x65, _0x18a3xae, _0x18a3xaf) {
try {
java['io'].File(_0x18a3x65)['mkdirs']();
var _0x18a3xb0 = new java['io'].File(_0x18a3x65, _0x18a3xae);
_0x18a3xb0['createNewFile']();
var _0x18a3xb1 = new java['io'].OutputStreamWriter(new java['io'].FileOutputStream(_0x18a3xb0));
_0x18a3xb1['append'](_0x18a3xaf);
_0x18a3xb1['close']()
} catch (e) {
betToast('save, ' + e + ' (' + e['fileName'] + ' #' + e['lineNumber'] + ')')
}
};

function load(_0x18a3x65, _0x18a3xae) {
var _0x18a3xaf = '';
if (java['io'].File(_0x18a3x65 + _0x18a3xae)['exists']()) {
var _0x18a3xb3 = new java['io'].File(_0x18a3x65 + _0x18a3xae),
_0x18a3xb4 = new java['io'].FileInputStream(_0x18a3xb3),
_0x18a3xb5 = new java['lang'].StringBuilder(),
_0x18a3xb6;
while ((_0x18a3xb6 = _0x18a3xb4['read']()) != -1) {
_0x18a3xb5['append'](java['lang'].Character(_0x18a3xb6))
};
_0x18a3xaf = String(_0x18a3xb5.toString());
_0x18a3xb4['close']()
};
return _0x18a3xaf
};

function loadTxtFromUrl(_0x18a3xb8) {
try {
var _0x18a3xaf = new java['io'].ByteArrayOutputStream();
android['net']['http']['AndroidHttpClient']['newInstance']('userAgent')['execute'](new org['apache']['http']['client']['methods'].HttpGet(_0x18a3xb8))['getEntity']()['writeTo'](_0x18a3xaf);
_0x18a3xaf['close']();
return String(_0x18a3xaf.toString())
} catch (e) {
betToast(e+' #' + e['lineNumber'])
return ''
}
}

/*
Vein Miner Mod
created by wilco365
- Given permission to use, improve, and add the script to Instinct
*/
var blocksVar=[];
var blockIdVar;
var blockDataVar;
var blocksReplaced;
var itemToDropId;
var carriedItem;
var veinMinerEnabled = false;
var nthModTick = 0;

function destroyBlock(x,y,z,side){
//Handle block break
blockIdVar = getTile(x,y,z);
blockDataVar = Level.getData(x,y,z);
blocksReplaced = 0;
if(veinMinerEnabled && testItem(blockIdVar)){
preventDefault();
blocksVar.push([x,y,z]);
}
}

function getMaxItemDamage(item){
if(item.ind(269,270,271)) return 60;
else if(item.ind(273,274,275)) return 132;
else if(item.ind(256,257,258)) return 251;
else if(item.ind(284,285,286)) return 33;
else if(item.ind(277,278,279)) return 1562;
}

function testItem(id){
if(id==3||id==4||id==5||id==12||id==13||id==14||id==15||id==24||id==48||id==49||id==87||id==98||id==155||id==159){
itemToDropId = id;
return true;
}else if(id == 2){
itemToDropId = 3;
return true;
}else if(id == 1){
itemToDropId = 4;
return true;
}else if(id == 16){
itemToDropId = 263;
return true;
}else if(id == 56){
itemToDropId = 264;
return true;
}else if(id == 56){
itemToDropId = 264;
return true;
}
else return false
}

function toggleVeinMiner(){
veinMinerEnabled = !veinMinerEnabled;
}