/*__________________________________
*
* Instinct made by Shark
* 
* Website: http://instinctmods.com/
* 
* Discord: v7thSharkv#0101
* 
* Discord Server: HP6xYrj
* __________________________________
*
* MIT License
* 
* Copyright (c) 2018-2019 Instinct Mods. http://instinctmods.com/
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();

var context = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
Button = android.widget.Button,
LinearLayout = android.widget.LinearLayout,
RelativeLayout = android.widget.RelativeLayout,
PopupWindow = android.widget.PopupWindow,
ScrollView = android.widget.ScrollView,
TextView = android.widget.TextView,
CheckBox = android.widget.CheckBox,
LayoutParams = android.view.ViewGroup.LayoutParams,
Typeface = android.graphics.Typeface,
Switch = android.widget.Switch,
Toast = android.widget.Toast,
Runnable = java.lang.Runnable,
nanoTime = java.lang.System.nanoTime(),
ClipboardManager = android.content.ClipboardManager,
SystemClock = android.os.SystemClock,
AlarmManager = android.app.AlarmManager,
AudioManager = android.media.AudioManager,
ToneGenerator = android.media.ToneGenerator,
Handler = android.os.Handler,
Looper = android.os.Looper,
System = java.lang.System,
DownloadManager = android.app.DownloadManager,
Dialog = android.app.Dialog,
ConnectivityManager = android.net.ConnectivityManager,
Notification = android.app.Notification,
PendingIntent = android.app.PendingIntent,
View = android.view.View,
ColorDrawable = android.graphics.drawable.ColorDrawable,
Color = android.graphics.Color,
Gravity = android.view.Gravity,
PorterDuff = android.graphics.PorterDuff,
Intent = android.content.Intent,
Uri = android.net.Uri,
activity = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
TranslateAnimation = android.view.animation.TranslateAnimation,
Animation = android.view.animation.Animation,
RotateAnimation = android.view.animation.RotateAnimation,
DecelerateInterpolator = android.view.animation.DecelerateInterpolator,
LinearInterpolator = android.view.animation.LinearInterpolator,
Environment = android.os.Environment,
FileInputStream = java.io.FileInputStream,
SharedPreferences = android.content.SharedPreferences,
numbers = android.text.InputType.TYPE_CLASS_NUMBER,
number = android.text.InputType.TYPE_NUMBER_FLAG_SIGNED,
ImageView = android.widget.ImageView,
EditText = android.widget.EditText,
CompoundButton = android.widget.CompoundButton,
SeekBar = android.widget.SeekBar,
Build = android.os.Build,
ProgressBar = android.widget.ProgressBar,
ToggleButton = android.widget.ToggleButton,
FrameLayout = android.widget.FrameLayout,
BitmapFactory = android.graphics.BitmapFactory,
ViewGroup = android.view.ViewGroup,
GradientDrawable = android.graphics.drawable.GradientDrawable,
Bitmap = android.graphics.Bitmap,
Canvas = android.graphics.Canvas,
Paint = android.graphics.Paint,
Path = android.graphics.Path,
LinearGradient = android.graphics.LinearGradient,
Shader = android.graphics.Shader,
MotionEvent = android.view.MotionEvent,
BitmapDrawable = android.graphics.drawable.BitmapDrawable,
StateListDrawable = android.graphics.drawable.StateListDrawable,
ViewTreeObserver = android.view.ViewTreeObserver,
ClipDrawable = android.graphics.drawable.ClipDrawable,
LightingColorFilter = android.graphics.LightingColorFilter,
WindowManager = android.view.WindowManager,
DisplayMetrics = android.util.DisplayMetrics,
ScriptManager = net.zhuoweizhang.mcpelauncher.ScriptManager,
File = java.io.File,
FileOutputStream = java.io.FileOutputStream,
Base64 = android.util.Base64,
HardwareInformation = com.mojang.minecraftpe.HardwareInformation,
sdcard = new android.os.Environment.getExternalStorageDirectory(),
mcfontpath = sdcard + "/games/com.mojang",
pathnew = sdcard + "/games/com.mojang/minecraftpe/instinct",
path = sdcard + "/games/com.mojang/minecraftpe",
PathPix = "/games/com.mojang/minecraftpe/instinct",
AlertDialog = {
Builder: function() {
return android.app.AlertDialog.Builder;
}
},
DialogInterface = android.content.DialogInterface,
DataOutputStream = java.io.DataOutputStream,
BufferedReader = java.io.BufferedReader,
Thread = java.lang.Thread,
TypedValue = android.util.TypedValue,
Byte = java.lang.Byte,
Context = android.content.Context,
Handler = android.os.Handler,
TextWatcher = android.text.TextWatcher,
FileWriter = java.io.FileWriter,
InputStreamReader = java.io.InputStreamReader,
SpannableStringBuilder = android.text.SpannableStringBuilder,
ImageSpan = android.text.style.ImageSpan,
Spannable = android.text.Spannable,
StringBuffer = java.lang.StringBuffer,
Calendar = java.util.Calendar,
Html = android.text.Html,
ZipFile = java.util.zip.ZipFile,
ByteBuffer = java.nio.ByteBuffer,
MediaPlayer = android.media.MediaPlayer,
String = java.lang.String,
StringBuilder = java.lang.StringBuilder,
printWriter = java.io.printWriter,
serversicon = "",
closeicon = "iVBORw0KGgoAAAANSUhEUgAAACsAAAAUCAMAAAAjrzSKAAAAM1BMVEWaGAqdFglzEgiWFQlsEAetOCzIdWu/YlmgGQugGg+TFwm/XVNjDQazQzm8WlCpLyCHFgrf92EgAAAA9ElEQVQoz42Riw6DMAhFoaijtXv8/9fulhuqW1yysyXQm5OKKNsFt2vg7uCxo78H6w+0yLaL4SdiJgRVVYC7JG6thAvaUDSZxvhr3jBcQwM3I0Bdh9uaMaeLqkGGogDNMZfVqrrI9hDPIU/gyBSE4BXuita/PBeUsJ1+w5DhErPZ6ATPJk738BqKypydoUrjfHSrTIy7xYXVcTKnh7aFa2M9JsDnOPoJ772tXxvI5YKWjz9cYDx6uvXXvXlNjMo8v3u+YBUpdDMkqse8Alh9uu5pRqOTWHbEpcO92DwP9ZRWhfvU8h9LF32NeqL3ZSY9Q0S9vwF86AgiWXbJ6gAAAABJRU5ErkJggg==",
pvpicon = "iVBORw0KGgoAAAANSUhEUgAAACsAAAAUCAMAAAAjrzSKAAAAM1BMVEUYf4sYgY4TX2gXfIgXfYkRWWE5laB0tb5jrLQag5AeiJEXeYVeqrMPU1lFnqYujZsWcHql3V1VAAABDElEQVQoz42SgXLCMAxD5dotOCHb/v9rZ9lL6BW4m4DDcV9l1Vfc3uj+XsE+UlF/pY4Pkg23B9QUMFWU1CDCwh1Trn0jawF2g0KmFsEvT0YHshpFsKU0L1zI9q7VV1QGPdkpI4SiSIKmpq2J7GQdxsRyVhyrSzl/LdgjSr9wnjEkMbUw7t0sWczhs5ClmF0K62IrV9ytHF3ehnRko1e+YhuWFMmFYXN6eHEG7WRNuZ5M4DMF5FU77oe9XODkzBQfXNhwqqNPtn3wRdpQjFp93t+5X2M24xNtk42OIsWhz7wI8m/li32+UlnIUi4729sI9rr5dWinbpNgv2X7n/YB+eH/SWPsqzNmM1pj/AJ7EwmspxEqxAAAAABJRU5ErkJggg==",
pvpdisable="iVBORw0KGgoAAAANSUhEUgAAACsAAAAUBAMAAADmX9mLAAAAJ1BMVEUAFyoAFCYAECIAAAAAWGQANUYDZXMAHi8ACx0AQ08AU2AAUF4AKT427TfRAAAA8klEQVQY022QIVIEMRBFf7NibP9GjJ1utTJVXAAxCByGG8AKMAxmfDBcALEexSk4Gp1UDbtiX1Uqv15+dSrB4Z/5xC0O3/PPfH88fj2eeCh4smA4yVDhtDB5/0jtVmNCQiNFNbcoeImodIYT4rLsKzNnu1WFFg6YRzBiRcHr2ExH1FJTuBY8j+MmFco8sc9ITdKyw0BjzTWw6XBapWQ/R7vuc2TTC5NQ8WFdbCIQ+9ShY1D7CTYK7nzLrjms6qZtyluafjtvk0LCmrcaEfTluuvMRkf/GSPAXddgIlQkVxM4tvb2imRYexyy/XtzgYLdRf0HevY8nrLIEFYAAAAASUVORK5CYII=",
logicon = "",
questionicon = "iVBORw0KGgoAAAANSUhEUgAAAfQAAAH0AgMAAAC2uDcZAAAACVBMVEUAAABwcHAAAAAarKRSAAAAAXRSTlMAQObYZgAAATBJREFUeNrs2zEKgDAMQFEXF0/n4uLpurj0lG4q2BZEQqG8Pye8CySTJEmSJEmjNG9fW+l0Op1Op9PpdDqdTqfT6XT6Uw8x99zqaG4kOp1Op9PpdDqdTqfT6XQ6nR6kp9IGnU6n0+l0Op1Op9PpdDqdTqfT6XQ6nU6n0+l0Op1Op9Ppw+t3S36XSiadTqfT6XQ6nU6n0+l0Op1Oj9T//+rS6XQ6nU6n0+l0Op1Op9Pp9D56W6LT6XQ6nU6n0+l0Op1Op9Of0UNa8hWdXo5Op9PpdDqdTqfT6XQ6nT7FNm/v1townU6n0+l0Op1Op9PpdDq9NkynD3DdR6fT6XT6FZ1Op9PpdDqdTqfTu1/30el0Op1eiE6n0+l0Op1Op9PpkiTp3CgYBaNgFIyCUTAK6AkAhR1JTjE1nVEAAAAASUVORK5CYII=",
boomicon = "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",
avoidicon = "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",
phaseicon = "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEABAMAAACuXLVVAAAAG1BMVEUAAADMzMz///8AAACZmZn//8wzMwBmZmYzAAADWlmDAAAAAXRSTlMAQObYZgAAAYRJREFUeNrt28FtwkAQhtG0QAtuwS3QAi3QQlpI2fFKjGSNNngdOHjM+25Yy/7viCzxJUl7mzfK5wEAAM4DiIHr0uXRtVOcAwAAOA8gLrwM1IMAAADUBWwMbyIyBAAAoBYg//CIpj8ahQAAANQA9MZvS9NAIwgAAIAagDzenk2DAQAA1Abk8Tk1Apk7ZQQAAEBtQOvZOAAAQF3A1vjP0gggzm4hAAAAagHahfdHW4D7KgAAgDqA/HLye+ndgHZnRgAAANQBBCKNd4uzeRwAAOD4gBi/PeohRgG5GAcAAKgHyBdOg/VeTgAAANQDTC8Wd0YAAACfB2gBAAAAAAAA1AREryLa99fjAAAAxwe0h+9EtO8DAADUB/znR0o7l8cBAADqA57VGwYAADgHYD+oPw4AAFATsD4IAADwGYBAdAHp2cggAADAZwB6n7cA8TzGAQAAjgUIRO4dgPiDw3ocAADgmIAR1B7AnIpxAACAWoAeKLdnDAAAoD6g194xAACA8wEkle4Xbe8ZUTuxrTcAAAAASUVORK5CYII=",
booticon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAAY1BMVEUAAAD+/v7///8RERGWlpaMjIyIiIg7UU3IyMgLCwsGBgYsLCwZGRkeincz68v///8ouqEbUUgy6suOxLuWlpaZ9OUYGBglgnIvjHyZ9ORbv66Z9eUt0raVlZUjoowcbV8bUUcnEj5DAAAAC3RSTlMAAgKBgYFAwUBAQL86r0QAAASFSURBVHja7Z2LUuMwDEUthdfu8igsDcu+//8rd1274ZLUxO6IImt0x+NxckkyBwnXVQGHJA6BdgOKYxDjeDYi6HndQMkbpkA4tIqWZxQYzMSBY3s5h2LsC/eqNPi9jDJiScXoKjCKTlm07AvG6VKLOQ9j4xD2jZljR7lPh+k0nI2DOmPWxA07ETEDQvSSWkxMxGHX6L8CRfGuhV3LCrlFg6oNHIgbdiJiCSQNCSgYDZ4MPIuiWoNTL27UrbW4iIdXrxuETxc2UAw9OCjVi0YiQCBm4tTP5gc4TCNuNgLMfvKGp5a61JrWWnnMecXFUbDECTCejuErqgzee/KGp5a61IqifawyHkK+AcZtBuMNpQx/QdSdWoYi4iAOImwsVXaWkI0GziMihv+wqwaxVKCzERFjIOncLkiYWrnNxjCqN6AJG55aqkHgaFVnNboIBV1UXR4qVC7QVepLjYZQ0FB1eRsIGQSJ6g8EZlS2FhEDIHmt1Wlq5bzy1FIKQr3OWhOOtYg4SH8gr55+C9rcgK5Bg+CtHKRPEGaaPsJtAXlQAELEtJediBgDiWoAeUjZJQHycHyWvqqiWIuIARCKfaez1iRTETEGQg0g2+32ebv9sY36fiwI3uoZb9UOcnRq3YG+toNI3QojYgokzVqBYpMCGU8EkhCsRcQYSFR/IPg5lrWIGABhJmbJWWsUBRnfAoG/pyA7EXGQ/kFUr34dRA+IF+gUgNhMLS/Q6YyIARAv0KkAsZhaSdQ1iKeWShAs0LWBlF8QxxOBJARrETEGEtUfyLTQ8rWWRhAo0MmstUYBkNYCnb9DdBAHcZD+QLxApwDEZmrhur6/1ErZFTy1lILko/5Si5m89qsdhA48EXT5CBJMLbzVzw3oCXQ5gMJMFQU6fODjHUgyIjX6hlccjohNEO4PBP99mcGI2AAJb6fWL50g+B9grUXEAAgW6FpAygW6E6cWeWo5yOlAzpa/J4LKZ25KagfBqzcFjvI369xBVINggW4OcqscBAt0diJiDCQNC6mFUgUyFeg8tZSCxKMiyNQrBMECnamIWAI5MGttSsL7/rkHDaDPJZBPAwivfio973cRBAt05Yjc1OgebxyahVffFx+yHhGbIHwMyN/dW9vxg0CwQGcwIjZAIkt/IFigsxYRAyBYoDsORGLWGptBxn1qkaeWg3wQyHWNhiCmoeqBDtIPSLFAh592jDpBsEBnJyLGQNKwkFqgURXIVKDz1FIKEo8UgSymSDSKBTpTEbEEkoZXZ6DzGl3IgVyct+rqozetI99/pAYEt7ZJg9hBnwdwgDtqhjVjdqmU4bsmaQfJ5yif35VVsPwFG/LiAXxRrRHewzC4QbABECzQBeJp++kDQWSI7mxL/HUD7yZreGo5iIM4SJcgWKCjPPHCqVnPNHvRBm/NYJygZQ2ffvWC5OFi0Zh7bETLV9YKA7IiiBueWkpBeDI5NkrvdpOIJ+EevbPtXdsMEjR8F1ftIDCE8YqR0WsNBkhhw2BELIF4gU5bRGyAeIFOW0QMgHiBTltEHEQZyD8CWa4UYkmDXQAAAABJRU5ErkJggg==",
jetpackicon = "iVBORw0KGgoAAAANSUhEUgAAACYAAAAmCAMAAACf4xmcAAAA6lBMVEUAAACkiFI0SEoAAAD//wAySE4AAQTRxaUuS1AvS0w1S1HJrXeniU+oh0qgk28gIBgSFxjLvZrMr3nJsX0iLzGnh1YtTFI2S04FCATIsorPsH3OsHSYjGYuSVkySFIVHiEjVGiijWCkiUqei1o1TFaphlArSE4eOkwOExH/lgP/wwD/tgD/OwCnkWejilqgi1A3SUkeKSkcHRb/cgC9spbFtXikm3anj14mSlmajVQdJCr/+gD/8AAHAQAuU1sjSFgdNkH/VgDFt43JsoZLaXmKinI6T1A5RkovRkc5QD8eMTr/vQD2//66rIK9VZeaAAAAAXRSTlMAQObYZgAAAgRJREFUOMu1kGmP2jAQhp04BlxysoFkSXMQKAlQbljua++j/f9/pxN7UTcriw/V9pGlkeZ9NGMb/S8olfP4Isu2ip+wbIH27cor5/FkoaZKeX4ItUpqYMPFE4wnLjZ2hhELNW8yNu21ud5hwwzt0DA0oVbH5jE6jE2MzfEhSsJdXnNkh2sTO/p1n6wxXif3UWTDNNYnLfYRs5luM80ND/vkCNPS12gfhS7TWrPZA3i+Va9XvxO+1E6ORgpLw9fENtlSelupVHUZlayK1GSaNzHSsWmGGBupOU5DtlS+rkhVnXzU+o1+A85isRgsmo3GjUATfu+/aL+d1Yq4I5EGXN/tB0ybv8SXpt2+ZBq1PK0q0GJ1yJ/gaVKm+ZT6NYIfc9rDMnZkTZax7EDcJogULV2/+TytoWt99iFOschiH17KlgYfNVUdDKv8bmVp0IdpQRA4LYoQKrVrJQalNQBq1qRtSlsBQrhAXfQOzg7gssNb7mOBVTyCyimww+tZK8g4KwzeIiQghMC9s+pz65xvFUVBnOe5Gq8o3PvOi7Un3ttAvEWoq/zVRvVYXdUQWs7LqjbiPSWjyzXljbWe6sNhswRLr+ZDiWvdd623yWqP9VrLth+0n2kNvmYJOtDL0g3EnTeQOIUcvNfp8nja2XSQGB4rLD5Nt9ML2ul0jn9esFj8tdpX8wcxSDsRhqszmgAAAABJRU5ErkJggg==",
spidericon = "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",
autobridgeicon = "",
coordinatesicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAHlBMVEX///8WFhZkZGQeFAH/FBTAwMAvLy9/f39jY2M3NzfmTHofAAAAAXRSTlMAQObYZgAAAcBJREFUeF7t2cFpHEEUhGGlIJyBIxA4BaegBGxwAj4oAF981FXZGvb1DHo/3dU1YITN1nfb3Xn132cfHiIi4ro3H099XBJ46uOSwFMflwSe+rgk8NTHJYGnPi4JPPVxSeCpj0sCT31cEnjq45LAUx+XBJ76uCTw1Mclgac+Lgk8Vfrl7+Flrx/qZn80kUR2+mEiG/0wkY1+uIiMH4/Z8sM3Ws9Drb0mspBIIonsJfIXI32dt3tfm+PbSv78UhI5JXJJIpckcsk/F3l/55mvN98TOSVySSKXJHJJItq3z8VYHxJJJJFEpP8k8lj42HtHhN/P1NqnRBJJREgkkY+O1MuQl9EyktAPH+tNza9EFvphIhv9MJGNfpjIRj+8l8j4L3KalGoVElnh/k0iK9y/SWSF+zeJrHD/5owM42OPODhcau3pWE/kwPmSyALnSyILnC+JLHC+JLLA+TKPDKM1cHCmrZ642/RHOTiTyImDM4mcODiTyImDM3cd6XCp8NTHJYGnPi4JPPVxSeCpj0sCT31cEnjq45LAUx+XBJ76uCTw1Mclgac+Lgk89XFJ4KmPSwJPfVwSeOrjksDTiIi4L38AplBSw3DeRmcAAAAASUVORK5CYII=",
ncoordinatesicon = "iVBORw0KGgoAAAANSUhEUgAAABwAAAAcBAMAAACAI8KnAAAAFVBMVEUAAAAdFyoKCg48MFbAwMD/wQC/WgBpQGc7AAAAAXRSTlMAQObYZgAAAFFJREFUGNOF0EENwDAMQ9FQMIVPIRRKYRTGH8K0bJWqOVP/7fno2EfVU1LeQUPNcvBl6TjfAeNq52onqkrOhAk1HEklOYORVckY8BDC+P/ktgtTEiIjMwRlmgAAAABJRU5ErkJggg==",
fonticon="iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAMAAABHPGVmAAAASFBMVEUAAAAopf4i6f8dmf8kxP+04P4Zqv/L6f8amf8iu/9q5f+w7/8CBgfu+P9lzfiF3f/o8PWfoKAkMTPPz88gIiN0dnZGR0dFdoCcMtf8AAAAGHRSTlMAD/JCqCLLfHJZ1MwbFVCR6fNO9pm36mRchRZvAAADo0lEQVRo3u3Y23aqMBCAYRCkomkwgZD3f9M9h+gQJlR31bV6wX9RD2s1X8cApa329vb29vb2/nL1Zp81pHci3591ZLGeaprm/czKYAh6L6OQ8kRvRdp2w3n9IBKlTZ305/YCITWisIPQ08x6sazl+zdEmNOTysb6tKQ4oiBzOBw6dlbMQ4NXxqy1Q+ordcQsBAgp6HSa2SBEOGFtO3CXy+VrHTmiANMR86OyJlqIBe56VRAyhAjzs5ITLXbGGMC+Cg25AoFyUooyFMFlGyLJLOVhCogQZAiiAIXkShHJxug6IsQQYF1dw+bnClRWFmN00OGwRIYhEbp0iRFEKwWjI4MQboCO28QDRSPJOFBiWHvMqiSFiEKbr5CmEQMqGd8b51ZCpOIo2mAFiRqKEE6g84RsKmuEDUGSYaP3Bqsg+ErdXlKxhEAKUYMwAkR04zg6FwIsG0MIHn98evRTKgqiRsmRZEhshPFKjWMwJrjREeKc88bPDgrz5EsItIEclkiLcxBAOWNAhMUr493VTYDM7jrO8xSfRBqNtIjAHLiemYJbIBMh8O4Mj5NXhxeGCCo50q2R3saABu+7j2sE9h0RE8sI9BBpAfE4SDCpao1UjNT/hxxypCbEmxgo8wGkvyNBNr6AeDa2EX10aWRCBJ78gFgc5NeIoz3xcXZ3ZBLE/DfSlBA8hPEsnBiJsPg8wZF7m4iQaG3J0AiNohAeZXQhTeJxlHmeA5yD8GoCBNCpLyL6PNGjtDSKcSMymKNTfaRwnsrPeJmBp/BhnbcGKV7qc6Q2HhbiK2TEnY6Br1cexWmmJjCeQlhp1wgoxvsYo4dVMXw50bUfPksqRjTOJUMhtCslBQbQmVhzFhrOkDb07xOtMEL5FeGPtRgDGFDJEEQrnVLqJfF9hDJjreRGXRUUYBJCSs5k945oaKSj5Fa1fAu5UHpSOBghDwgxREmGHkRmIQWmkVmam7IymJCEEEMhx2NSema62yxN0Riwy3mRGCc0Ssg3BN/LTA8Mx8wagftvJDBBFmOo+21BmGFFmB4iRAgMCE4QJtjYRMSxtsdujIVEwBKwNFpOCDYUIozFbo7FBEBDI0JoQyPMMJRKf14LIRUIbWiF+0oNnAhXToxtQhtakUQQglKEMrTygLlkDRwBIgihjKIiO60a7onAhDZ0ItzbBvAA5IRQRjES6lVWJ4srAPvlv+4a1SuCMLry8sp4AdG9QHAfJx7j1d7e3t7e3t5f7x8xznUmtDy6ZQAAAABJRU5ErkJggg==",
jesusicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAAM1BMVEUAAACcqpCcqo/N1Md2kF5WfzFlljk6ViFGaCg5ViFklTo6VSFdijVPdi1Ocyw5VSBLcCqDnsveAAAABXRSTlMAgYFAwWtjG3sAAARxSURBVHja7Z2BduIgEEVN2ogDQfr/X7smiPtYy1mQ1BLy7sly2o2SXGd2lo5pPBFCCCGEkF/mY3hiXMePUxU4VfT16YcYlDJKyTKuSBgrj+gnERV4fLu1AIh8g6sXCTgY1Q+KjM6Jc2rZbvhv1nE8VeGn8qPxc/pjwGOYWl2n1iB3jKw4ESULlSI4lZ9arX8j8BimVtepNUIcIsZ6kRj3JMLU6jq1dh0RBSdvz3f0Of7KglTe0Qc833MKNBwo0pmIMUaFzWp9vm834CtrgDyRZcKAxnn96MGDMyK9ifgVnB8tKiAWVn2SJxIWhgtnIDrAbZ8Lj2JEehOJqtY5gQ2PcNlVC5+RFGHVOorI15zAXoBk5w53fFpgBjS8Pj8mcplySC6L8bTsGZiA+bxCkf9ULT/miYRSszA8T+VCAdRhi0VwBz6DEelNxPfMnCzkiSQ7d7gjTwSfwYj0JmJ81SipWqHIyXPV8oQfNgORCO4wHlYtijQmMijlwtMVrnXnKcGMK70skctUygXXyxTZqYgoFzYJEvkiciPxP/tfXhAR4GgR6UjkL9iXTYtg8xbfs4lFPFUi5vbnkBHpRGRtuLp1bLBqKVatnYuoZ5HpmmCaAQt8DsAF+LoCmSLBoj4i0yVBdCrJXuoEXC9AYUQOKIJV63FOukDk4WKhgkmlyHI2gaNFpBeRUQEa3vrOE8H34G04utlCxGOOF5F+RNZHix9fFoGqZTaqWkrEsGpRpGWRecoBRaas802/JoClSAci/zbo2hAR4GgR6UikrEGHxIvGShEN2MeK8ZAR6USkuEEXiwA/UbUUq9bORdTmIjMwIVfAJkW8RQtVK++f2w5Sq1JkswZd8dH1tiIirpG1FlMLRLZo0FWvtXBH+VRW3THHi0g/Itige1kkVbX0i6+J9Q06Vi2KtCwSr2WLoQhF/m3QtSEiwNEi0ovIKMr5JzSZWoqptWMRJzeVdWxKRNTKESPSj4hZtpVoCVh82Zu9ApU/jyjgLatf5Nrm6nd/Ik7CtqZWKyI3BcfU2rNItNZqRwRvTnewiPQjgg26SpE9N+gaighF+hLJ6zTu+X12irR2BV001Z6voGNq1S8am0yt37/Miam1RYOuKZFFoenLnJhaJZ8FYZG8y95QJKtBV/7bsrU3eMl6GZPnm4xI+Q1eDi4SyBXxVInoh8jdhRHpT0RETOhfvF0Ebx/BiPQm4lPLUyiivxXRr9yZRDG1KLILkeQdmOfS1W+8gyKHFBG45f7bRQRgRHoTeaSWwrsNM7WYWluIKBDRfnu3iDAi/YkMwKdNMM1AUiR5ad0F+LLAAHy84yPSLMYpKZJcL+d9RBpF0iJPWLAACkTAJVwox4gcSGQMiy4jntC8qxTBPpz69kI5RqR3EUioFfg0Ef0soktTK2z+AEwtiuxPJG0IUmgYj+2cL0X2I4JFGeuywx3xbuDUDP1EpBeRERaQce7ADgCyTTG1blDkfyKBWAGQsJnHjjZFuonI3kU+hipOhBBCCCFkD/wB7hJTdd6d0uMAAAAASUVORK5CYII=",
leveffect="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAAAAAA7VNdtAAAAiklEQVR4Ae3Whw3DIBCF4azCUJnzFmEWZogw5b+opZgOT4X6SQ81+zF2nl/mPwIwXwT0HzFfZn1yiN/T85KES86JhKvMSxK/cldEmFvrV+VIugRjVob4GZcgVLtLePg7Kk9SmQSh5Ykux14A94lHOtTz8aAMIbpQqlSQgAigONGZiTT4Ijf4uxg6L0+0Gm+Lm4H9AAAAAElFTkSuQmCC",
teleporticon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAAe1BMVEUAAACFmpfCzMtMeXJJcmsLNi8QXVAKS0EFODECJSA0l4YlgnMbemoLNS+K8d8syq8FNzAQXE8rya8syq4NSUAIQjkaemoSWE0ELygbcGINVEggZlsXZloVa11Np5cbi3gkgXMbinciemsdk39b3cdNppda3cdUwq9Mp5cB0bC0AAAABXRSTlMAgUDBwdmWTgYAAARJSURBVHja7Z3rVqMwFIXBEVq1KbdabLUt9Tbz/k84QzLRXekpsDp1INnfOgvxj/KtfYwh5RIQQgghhJBREHbhKhg+USsqisJg+ETtjENEaSJdjX37zRhE2FpD47OJoBRbqw9srRMiChMYswhbaziMLZFI4k5iZlnOZuUfnYEYUmTEIhWKGMrhjAI+JjJsEaU5cs4BHWXKsgRKnEoiTIQiwv9sQUQctRRHLYoEwVUIPEqsJDZAXAr8CIHgQoTY1bcSsSaLNbiPbHQuFimqwEARUQR/iSwigyLA1+GMifgnYiZIZttJJEMX3NsslzNdFvt9idO2wMJEKHJchKOWgSJOiuBZw6N0vNs5kCRJrqtIkt1EYB134WBaTBEfRd5QJM/zIs/Ndj8yEWcSGY9I1BTJNLHeHojkmkKXLJJl8AOAGHc+B3smQpH5vADOFGFreSmy3W7ftttfevvzteb9VbPb7fZ11TzdC0zWAuW3i8yB1yQpbA7JBLif/iWFLzX3YlQU+SciRZHUpTlbJAMRCxNxUkRbnBR5z/PETt7zhgjSLoIzLraWFyLqlEgOHIikNVNdes/WSRGOWhQZuEho/yZq7oBVDIiTXDzehxuBBzScSMTAApcgKTJaEYM6JSKuw6WALJICHUVqlK+JOCOiaYpkWVyXRlyHswfYJpJ+CIsiGVC3lseJOCPyddSqmiIFcIbIlIl4J2KQW0tch3sAbnqPWuUT8C2JiJPcG6R3Ik94NT1FjrdWdRmRVBKpTEkiytdEnBE5No3HxbOGiKa7iKUhAmSa+GOuxdYav0jUUwTX4bqJwGJd2hARRq3I40QoMlwRe41ezeYbRFa3AEXcEzGoziIp0HH4BTqK1ChfE3FJJOotkvaZNOKpbufW8jsRF0S0hillbrUx1SZy2dbCm7R9S8QVkasQKIF4A0yAhbBAJzO9B/aW3X5fPQML4DoEzvx4uoR0ZhMJOxADLR9PJ2bpVddLp4+nfRbBB36VMIItZRFNCnWo1BQpiiKx9YL3AOGzJJiImyKGcga0tRZsGzRbK4fWOnZJORNxWERpkWW7CF4yN+10BV1uSfK8IcLWoshYRfD+kfWkL3tz4NogmQNbivgrol3OFoHr73ImQpEZcKaIuQHIbAURnDQyEfdExFPd80R2pq9aWgufnMhEXBMJgR8lgE89KdeAeD3cCqhegC3wvABC4OpSD3gRn+MiXiJzCzzHAvLKKEWahPho/i8imSRSnRDJjojg7wgsTMQLEQ2IAE2RqrqrS9NVJGIiPoqoziI4apktW4sizoscEAnIhshiBI+Spsh/FIHhWPUVqVHDEXEmETdEFByA3vYROUQN8En+I0zEDRGliZqvp+smMpwXJTqTiDMiocSiC9cjeL3r2F6R5r4IjEY4HuEeX7V5CopI4OTeoIYwpfI7EZdEPk8d+RbXnlDEeRFCCCGEEEIIIYQQQkhPfgPjY5uiXQdt4wAAAABJRU5ErkJggg==",
survivalflyicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAKlBMVEUAAACPj7OIiJ6MjIyQkL2OjqSMjKKCgpiRkcOCgoJ4eHiRkcSIiIg1NTW11QINAAAAAXRSTlMAQObYZgAAAcFJREFUeF7tmbtNQ0EQRWmAACEaoAVKAEqgBSRSAtwCAREZJWDRAZRAgoT4yr0gz33Ib8cLM7uyJT7nhG/m3pONtHobGwAAAADwD5g14xsS+IoY35DAV8T4hgS+IsY3JPAVMb4hga+I8Q0JfEWMb0jgK2J8QwJfEeMbEviKGN+QwFfE+IYEviLGN9TZHEfujVtj/L3g3cZ32h0PfPUCJEiQfOKrFyD5SRJN3qZzrq8MBc+NSlJfXmx8oV3lrGNaSSBBggTJeiTPkzlnx8aRcWBUIvryaOND7SpnHZNKAgkSJEjWI9GBvNG52zNSkn3tKhcdSCRIkCBB4hNDRKf+dNfQ+d4yKhF9ebDxjnaVi049EiRIkKxYUjyxdfRSkm3t5p7YSJAgQbIyidCvDZ3JiR7MohLRl6fx1vg0jldLkAwgGUBSA8nAj5PoFk91U1OSk+X7O14tQYIECZK1SIYDqbes4l9KXm18ufzuHa+WIEGCBMlvlAipZqmbWtztYLcASbRbgCTaLUAS7Rb8OUlDpD3REWlPdETaEx2R9kRHpD3REWlPdETaEx2R9kRHpD3REWlPdETaEx2R9gQAAAAAwHd8AHrYC7W4jhzHAAAAAElFTkSuQmCC",
rainicon = "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",
bedrockicon = "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",
bighitboxicon = "",
bighitboxplusicon = "iVBORw0KGgoAAAANSUhEUgAAAKAAAACgCAYAAACLz2ctAAACJUlEQVR42u3cwY2FMAxAQVpIN3TCNfVzoAVoIUKJbPA8ievu2h5OX/u3TZIkSZIkSZIkSZLy1ft+Rzw2LwAFoAAEUAAKQAAFoAAEUAAKQAC1HtZ5HSEPqAACKAABBBBAAQgggAAKQAABBFAAAggggFoPK+qjOAABBFAAAggggAIQQAABFIAAAgigAAQQQAD1HmDUgQEEEEABCCCAAApAAAEEUAACCCCAAhBAAAGUFyT7R4UuCSCAAlAAAigABSCAAlAAAigABSCAYH0Plq+PAxBAAQgggAAKQAABBFAAAggggAIQwCKwzCEAAQTQHAACCCCA5gAQQAABBBBAAAEEEEAAAQTQQcwLIIAAOoh5AQQQQAcxL4AAAuggAAIIIIAOAiCAAIIFFlgOYl4AAQTQQcwLIIAAOoh5AQQQQAcxL4AAAuggtedtrd0jj0V/84VLPy+AAAIIIIAAAggggAACCCCAAAIIIIAAAggggACmgDX682b/3tmLjpqjXAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAvjLj9iqHRhUAAG0GAABBBBAiwEQQAABBBBAAAEEEEAAAQQQQAv8L1QAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEENQ8f1/2F440AAEEEEABCCCAAApAAAEEEEAAAQQQQAABBDDiINX+icjXuFm0vQAIIIAWbS8AAgigRdsLgAACaNH2AiCAAFq0vSTuAb+AccwxFvmeAAAAAElFTkSuQmCC",
bottleofenchant = "R0lGODlhrwCvAKUrAC0hAlE8Ayd1Oyl1OzmQRjiQSTmQTD6QQEOQOFmwV2CwTGOwSmOwUGiwQnCwOHKwNnOwN26wRn2wNn6wNICwOKrkWq7kWrDkWrLkWrPkWrXkWrbkWrfkWrjkWrnkWrrkWrzkWr3kWsDkWtDkWtjkWsD/lcT/j8j/j8n/kcv/j/X/j////////////////////////////////////////////////////////////////////////////////////yH5BAEKAD8ALAAAAACvAK8AAAb+wJ9wSCwaj8ikcslsOp/QqHRKrVqv2Kx2y+16v+CweEwum8/otHotVLnfcBVpTq/b7yS2fn+M+/GAeHyDfH5xgYh0hItrhnCJiYySZ45vkIiTmWOVbpeBmqBfnHKegqGnWqOlpqitVaqrdq6zU7CxirS5Tra3ebq6owHCw8QBAMfIyQDFzJG/k8HMxMrU0sTOz4zR1sbUydzC2NmE29be3+Di44Wc4N3ny+mY6+Tt4PDH7ur0bOXS+PG47eOnxh8zgPrmEdRjsBhCeZ8WMrTH7aFAhRILUjSHL2HEjKI2/gNIEp5HQCBfiTxYsqWyk6xSRmk4zaXNgNYGymRCc9j+TZsw7+yU0lPYT5dBZQ2FUvTdUYs5MS7ludLhU5JJ60x90vQqVogotzbp6rUj2Jhik5Atey4rrrRK1rKtdlYoXCWJ3M1tW1fpXSR57+2le/HjXyOBKw5+2Vfr4SOJOS5G5nbOY8iI9E6m3Pjt5SGRR27GKU3n4dAsR1f29Rl0ZsGqO1tu7TqQ5tiFw9L+gdoq7qiGW/eu+bu01N2AX3Mbwby58xGrkV8ZPuy59ejSq1AXZv059uxTtgfo7vw7+CjiyTc3f/5JevXQZbNu7165Nfjxc6Olz+S9evb8LeEfeQAGmMSA3RVoIGa2gYOfggsW0VQHFFZoYQcQRjjEhBf+Xpihhj9w2GGFH2oo4ogYygdiXFURgyKJKq6IxIkjlhghjR3auCCOHsYooxE8WqijgUHCqJ9dP0rY4jAvUjhka01lIOWUVGYwwZVYZjlBBVx26WUFTy4VZZVVamnml2iGOdSYZE5pppZofqnmTmy2aeWbWMbp5Zwy1dkmnnnqySWfKflJJqBXCjqoj7QZWiaiioLJKJRLCmOnm5AqSihIjlKJ6JaaTvpZp5gCGummGZEq5aenirpmpQFcIOustF6Awq245orCArz26usCDgQr7LAOYGDsschigCo0sNbqrK7Q/iotsdQma+2ykjTlbK3Q6irtr9QSa22y2GrT7Lb+s3ab67e+hjvsuMiWu4i26MqqLq7s9uqusPAeK289lbhTr7337povsPsW26+yro5Db70FG5xvwgr3++8gD6Mb8cEI77sww0f6RVDG2258MMUfX8xOwOAMbGvBHKO8sMp7kPwszCcnnHLDoYwCkAZABy20BikUbfTRKSig9NJMK2DA01BHbUACVFdtdQIQZK311hCI4PXXYItA8xU+4zP02Uin3fTaUrd99dtcxx323GNbUTY8Zw+dNtJrN9221G9fHTfXc4ddt0qV/Jx30Hsf3TfTf0cduNWDb1042IdTcfc5izPeeNGPLx051JNXXbnWl3+deS2cKN7556CH7vT+6FOXjvXpXacuNs8TJW5250TDLvvso9t+++m67x6yY9m2/vvrwstOe+2l45576qsT5TzewMOetPS0G2998tnPtD3n3Ucf+vTi404+7/2c7w3wwX8+PPu2j697+UzB+rEJAAygAE2AgAIa8IAIGIACF8jAARTggRCMYAEaQMEKWrABHsigBjfoAYCYpneOcMf/BjhABJqwgSiUoAovyEIOutCDx8GY/xZGwhKa8IAobKAKJcjCC7qQgzAMDsBCCI4R1hCAN8RhDhe4wwj20II/3GAQdWMulnHDiEdMogGXyMQmPvCJFYyiBqe4Hxla0RpYrKEWC8hFBXrxi2DEoBj+O4iPD8bvjNJIIwnXmMA2vnGCcZwjHeFhx0bMsF9HDCAf2+jAN8ZRjmIkI5KqSMQr0jCRBFwjI//4SEFKUmTzOiS8MJlJLW7SkYGc4yeZR0lDiPCSiVykH1EJRk/WMYYrq6Q1NsDLXvpyAw8IpjCH+YADGPOYyDyAAJbJzGYKgADQjKY0CVCCalrzmiXggDa3yU0OrNIzocQjM35JTmKaM5nodKY6p8lObLqzm/D85myaJ85ikPOX5iQmOpOpTmeyc5ruxCY8uynP+YRTl9K4py/zOcx9IrOfzfynNAN6zYFys6CZaIpCe8lQYTr0mBBlpkSjSVFrWnSbGGVWPYn+sVFedjSYHzVmSJc5UmiWtJon1WZK6YnQcbb0pcWM6UyfWdObZjOnO22lH9zRUmC+NKbKnGlNqXnTnHrzlkI0Y0/t+dOnClWqRa0qUrFKxYO6EhxNBSpUhzpVo1o1qWZdKlq72tG1gnWkbh0rIXFZM1iF4K+ADWwIJEDYwhpWAgxIrGIXy4DpDe8EkI2sZE/wgcpa9rIfgOsQz8oNwXr2sKBlrGgdK7vJmhazqNWsVjlrDc8KFrSHFS1jSRs6004WtZhVbS5ZKw3XBha2hpXtYmn7ONtKFreX1W1fVzoM3wIWuIUVrmKJ2zfjRha5llUuCHnLDOf+FbqElW5iqbv+NutCFruV1e4dt0oM7w4WvOJtLO0ea170ZpasZdytXDvrXfAiVrzkbZp5KYte9RqSucJwr3/jG2CmDdi+BtYIggOgYPgCeL6lrW+B8TvJuMbBHRWGLoMxXFsNYzfCadicN9wBgha7+MUgoICMZ0xjCkTgxjjOcQQiZoEe+/jHFvDKKDIqP8JYA8ZIrrGSdcxkHgMZyELmBJF9ZxJwIBnGSq4xk3Xs5Cf7OMqVmLIjoCKNK784yzTeco677OUgX2XIKh2zWbhhZhejecZqxjGbvQxmR4jZEGRmRp1bfGcZ5/nGe35ynw3xZz8EuhiDjnGhD73jgrX5y2+WcpwBPef5Iw+60DY+dKKhnOkwb9rRnS7zpyctaktf2s1PgTNPOV1lOq/6zpQe9Y8X7YdGx+HRxIg0qHPt6kvzOg666AUd3HGbzYxC1gRR9hyYDRtnP9vUC5E2CaitmNFcG9vRlja3JWPtb/daItoet2jKbW44ZCTd6vYNu9vthneLO97EmTe97a1sfOd7MvRGNrrv7W+nADzgb+B3LwpulNEAAOEJH3i/Ge7wh0NcBdLR9sWfnSTESHvj0O44bz4OcnCLXOMl97PIa9OLlKt85SNXtssZDfOYt3zmAoc5ynEecZ2TnOf1rvnOgV5zm98C6D0vutKXzvSmO/3p4wgCADs=",
milkbucketicon = "R0lGODlhrwCvAOMIADQ0NFBQUHFxcZSUlKampr+/v9XV1fz8/P///////////////////////////////yH5BAEKAAgALAAAAACvAK8AAAT+EMlJq7046827/2AojmRpnmiqrmzrvnAsz3Rt33iu73zv/8CgcEgsGo/IpHLJbDqf0Kh0Sq1ar9isdksBeL/gsHgcDpjP6LR6nebGyPC4mE2vq90wuT5u79fxL3uCc36FbYAtg4peho1miImLg46NkCySk5SFliuYgpqbnCmee6B+oqOkcqZ9qCiqq6x/rqoFtre4ubq7vL2+BsDBwgasUbW+yMnKvMPNxVDHy9LTzM3Cz0/R1NvU1temxqTc49PewdhO2uTr1eboTers8rfmwO9M8fPy9cTg0OL6Ahbgd29JPoHjCPrLBhDhvnoFf8hBxu+AxYsYM2rcyLGjx4/+/PjJ2THxV72PKFOqXHkgZL2ROkr2qsiypk2VLs3BzCGznbebQINqzOltJ46eu2gKXXqTqDWjN5DqUsq0Kk6nw6DakJqLqtWvHbFmjUMyDsWTYNNyFCtMaw2uuLyqncs2mFsacOmhncu3ZV0Dd2fktSW379e/gMnqsCPHsOObqnYwjvO48srIi+s0tszZI+Yck+F0Hr3xM47QZEirvmj6Buoxq1e3tvFaTGzVs2vUDnObdG4au8H0Hv17RvAvwzsXl3HcS3LOy2PYEUlKNikB2LNrFxCYeR3qnqx72k6+u/TvL6vjvk5eu3kY09OHXz++ffb3L+LrVO+bvX3uioH+ht5+8/VX33/4uaBfUfwR5599Cbaw4FMNKvdgexGyMGEzqoiHyX/YZbjChmMV6OCBEAZ42oAMmmghihiq6BqLiFEICyZCgQggHJLRWGOJNy6SI4giqkDij8AEiWNQOhaZwpFIKinJkAjKSJuPSCYppSJUpshjZnRkaeOWe3QZ45cChikmkGRuBlSTVuqGZZZtCmJmeXECN2eUdepx53ZOogDlj336ySSReRq3J6GFUnZolWiuqGZdQhFg6aWYZqrpppl+NMCnoIY6AJyRzjgpW5VyquqqnXok6qukktHjqWKlyuqtnHr6aqixjjErG4jZiuuwl+q666e9ivHrGsH+BkXss5Yae2yyYSyrRrNAQfustLtSC4a1aWB7k7bEcgsroqVeSStWwpK7qrmievsFuGiIa5O7uMLLK7qyggnsX+3iu6m+oMrrBb1n2FuTwKwSjCy/vhYxqAEg1cPwux4ZDEAUE1dszsWqfqQxx4tS7BE/IOeaMcTKQtHxyRanrKnILFfrcskeeyPzzCtD2u8TL4cV887F9uzlz04EvdbQRBNAs88RA40zzB83Ha3RZyLdhNIboWy101jjme4SXA/FNNFPHx110lMLXbXVaWe99tYlF4aR16oeq3e8NX9787pO5WwNq3sXPmrf8/79L6VU67yq4XuPrDizADc++OP+kE+L+MGTX1u5247nnXm3m2/cebifL/02p6OTDnXLUgNOlODNEN4636/bHPviqFpeO+a3F1w6ybLnRPswtgf/cO5+704546BfLrryhzOfuPOeQ6966KxTX73asLNdvEvHC5P8sXGLrTUTE9t9Ed7d650+oIki0f5e20sfP/ph0z+2EvczR/mCcb5dzc899TtCAH/iO+QBj38dkRz2UKe9rp1NU4U74H0SaIQFWmOAwCjgqzQYIg5KrG74s+DqNpXB/iHwf0nwYDNAaAARioqEO1of2VAowAaa74EGdOEGYWg/HjIwer+bHgQ5IsEsyNApNhxdoKbwRKJEMXNTlEL+FXNyRchlkXi8W1MNgXi7L56uXmIkIBlbZ8YJojGNY1Ri8NoovjCuqYuGoyPdxlcjPBZOj+wzolj8uDdA7pCPiCGk3gwJQEFiRZHHYmQM61A4xHgvjybUgh0q+ZdL/jGTTqTk3izpyUWCEgubHGUnSxnJU14hlXojJStfJcki0oGTdZnlrmqpQFHGcpW6DBUvO+jLY8kymJ8a5glvqcpcIhNUyiQCLI0JzGdGcwjT3NUxkXlNeDSqTq44wTfBGc4SjLNN5TTnObeUThKsk53tFME7pRRPec4zSPUMwT3xmc8P7PNG/fTnP6MT0AkMlKAFTahCF8rQhjr0oRCNqEQYJ0rRilr0ohjNqEY3ytGOevSjIA2pCSIAADs=",
optifineicon = "",
wallhackicon = "iVBORw0KGgoAAAANSUhEUgAAADwAAAA8CAYAAAA6/NlyAAANyUlEQVR4nMWby28cVRbGf/2o7rbddvxK7BgLm6SBEOwAmRAYBIOEYBWQBolZsGWDNGgYwR+CNEiMNJsIaRYsBimzAoQQiBgRYTISYGNi7ATs2MGd2LG723a7q7urZ1F1Tt9bXc6DhHA2rqqux/3uOec7j3sd485KY5frsTs1gDv1IQX6yCOP6MVkMsnXX399R8fzW39AgT700EMAxONxAA4ePMjCwgKFQgGAH3/88Y6M67d6sQI9dOgQAOl0mpGREb1he3tbjxcXF0mlUgBMT0//puO73S9UoAcPHtSLzz33nB53dXVZD/z000+Rx2fPnjVvu23jvF0vigQKcOLECQD27dtHIpHQ6zMzM3o8MjLCxYsXAd+vTS1/9dVXt3W8t/oCBfrEE0+wsrLCU089BcC5c+eApu/efffdAKytrVEulwHY2NgAIJfLkUwmARR4rVZjbm4OgHw+z/nz52/LuH/tgxZQkXvvvbfleHFxEYD+/n4AyuUy99xzj9735ZdfAk1f/+abb+jr6wPgl19+AWB2dpa2tjbg1n38Zh9oYd2Ojg4AnnzySaAJcGxsTB+q1Wq4rgug5NTb2ws0Acv5pUuXFDBAZ2enHn/yySd6/GuB3+iNLawLcN999+lxrVazHjA1v7Ozo8ee51n3iQmH5a677op8HuDTTz/V4++++8786bp4rndDJBmdOHFCNSZy+PBhAD766CN6enoAyGQyDAwMAL6p7iZHjhzBdV327t0LwP79+/W31dVV614hsUKhQD6f1+vffvvtDeHa7QcFeuDAAWKx5m3CumHAImLSMmi5b21tTe+RSZC4vLOzw549e/R3E/DS0hKZTEbPxZQvXbqk94qWE4nEdcNZcjegkgIWCgX1T3MguwEG2+yvXLkC+FqU54SAqtUqjuNYgEyR7Et+F/8HO57ff//9AMzPz3Ps2DFA47jgUeDmDDRMoGCbcS6Xswbz2WefAdDX12eRjJiliICr1+tks1kADUsAjuPQ3t4O+LFaZG5ujkbDH68QWiqVYn5+HvA1fODAAb1/c3MTgMnJSSveG3E81gJ4fHwcwJpx09QASqWSHvf19anmwmJ+FJpsvrW11XKvfMMEHMqtuXr1qh4Xi0U9NlNUaIYyaFrXhQsX4FqA6/U6YDOvhCGA9vZ2fRlggTZZ2HGcFnBhiQJrMq85hs7OTqrVKuC7RgAEsCdIWF0KlRsGDNBoNFRbmUyGBx98EEAzI3NGzdh7M4BNsJcvXwb8ZEOsQsACmnENDg4CcObMGbWaUqlkEWwU4DBpASio77//HvAnoF6v47qupowCbu/evart6elp9WdJJXeTbDZrkaCITLaAvXz5MrlcriVef/zxxwrSBAeob//8888t77cAi+OLDA8Pk8lkNKcFWF9fp6enhx9++AGw00lTFhcXI0ELkCiwa2trpFIpFhYW9Fo8HlfTdRyH2dlZ/c3kExmv6QLhZAhCJi05rvxNJpNKYKurq5oEmH4qTPrCCy+0DF5EkhK5F2BoaEiPxWpMhv/www/1WMw8/F7RaldXF93d3QpSrESeC3KDVpMOM+vQ0BBLS0saNvr7+8lmsxZZxGIxMpmM5rnPPvss4DP48vIyw8PD+mEBZIIF37yLxSL5fJ5z584Rj8c1hJnfMsGC78cmS7uuy9bWlo43SiwNS6yVAH/8+HGWlpYAn5lXV1fJZrM6cIlxlUrFCl/xeFyTAWnhCC+YbA9+Kjo2NqbWIwAvXLigJlmr1SgWi0qCYjEbGxtsb2/T3d2tidDW1paSmFjUrhpuC4AKR09OTtJoNDSR7+/vJ5fLaQ772GOPAXD69Gm1DjF3CROSRppxFPzcVxh+enpaWdfMj13XtchIgOp429qs7Cufz2v0MPGYYoclY+YAOru7dZbEL55//nnrA+BXPN3d3SwsLCjger2O4zg64CNHjlCpVPTZdDoNoNck9nZ2dpLP5/W5eDzOwMAApVJJJ880Y5k0sQbXyOLE6mb97Kw1Dv/x0UcBWFpe1oue59HV02PFZgEt5jo3N6ekEY/HOX/+vIYxQH8TOX78uB6fOXNGj8XXZaKGh4f1uyYjS0w2c4BarWaBhWZKOuMz++6AJVNZXVtTjcXjcdoCIpFrTz/9NOCba6FQIJvNqmY8z9O+lWRHJgubBLkYhKF4cG10dFR/r9frSkJiUaJhGcdmoWCZviQyonUTcGTiITIQPPjLygoA5SBOp4MBfP755wBIhra5ucmhQ4e0dJMEQGJnuVymXq9bBGeGnDB7l8tlyzpWgnFIpbRdKrU0FMx3m/6s16KA/u2NNwD459tvA7B/cJBEIsGlwIQEuGj87Nmz9Pb2apY1NDRErVbTTEcISRKbQqGgWkokEvQEpicSLj3NDic0i4c4sCcAXw8B303i5kn4Q399/XXrfGj/foaMDMlzq3huVc/X1taYmJjQ81QqZbFoWIOAVVrK/dvb26ysrLCysmKBbdRqNMxiIphwEQlbbqWCG5BhuAPQouHdQP/rnXf02nAQpq5cCTKvapWN1VW6g87kxMQE9XpdTfqBBx4AYNkgQ1PMRh3Y5Z+OyyCkLqOoEIkqVKLaOdf0YVNefe01wAbe2eUPtLLqz+bG6irEYnQFPS1JGaVjUqlU8DxPCSaZTNLV1aWJgiQ5Im65rD6aTKXoaEvf6HBVtkL1ssXSf5CmeaAZGSigjTnwQf/l5Zf597vv6rVMOu2TSlCeeZ6n5CYsPTIyosQjDDo6OqrZlcT88uamlnme5ylJxWKSizc9UQCIhuuep9dqQUib95dwWsPSsYcfptFoKGATtMRcsPtJAjoTJBL1ep0roU4jQYjJZrNsb2/jOI4CNll2KzDlWCxGLBajt7fXcjEfcJyU+Gq1yR9yLek46r+pYEzf+WVuNGCAPz3zjLWwBc3QEwUa4D/vvaeAAaq1mmZsItk9e5SdTQ1uB0mFaLivt5dYYPY24JgFzgQscVsyOFNMwBZLm+WbuRwCMDU1xdTUlJ4Xi0WLXF597TX1c5Hu7m4rjm4WCvQaE9UwwEbdb0q4klMEITHTV4CaMSnhZ9SHjxw9Sk9PD2NjY7zyyisAvPjii9aDYY2Pjo5a5/946y09TkYM9mrgIlulEvuCDKwSaDMRj1saDhcmKcfRuCsWZU6IaFnAzviFTKuGa0a+vL6+zvr6up6fOnWKU6dO6bmpbfDbKWZL5e9vvtkCEuzspyOTUbAqjYaVt0dp1kwyYthaS8QSu94LEWGpFlQ51ZApiIyPjzM1NRVJZkAkaCkN//v++1SrVZLJJB2h5nutVgPDpcR3owCLVN0qiUSQu4umkwmNBGZkEbE0XDJiluM4Lf4gYoYrU66n9T+/9FLkc1G9JxHXdS3iqtVqeIDozXEcK+lYvWpHiGpIwxZgsEEDnDx5kpMnT+q56ath7UIruYGdOYUHWKlUtCvqNRp4Rv1tmrbrutbExBoNnFTzPYVikYLxnb2Dgy1gIWTSqVTKmk2T4k3Qu4mYOzS1LeRWLBZbuqJhiQdhJ+k4VANwMjlOMsl2uUw8FidmmH4hIg3dGxQrUdLiw6lUip2dHe1WCnGJP8h5lHahCTAMHPxQJ7G0eg0zBrvPDP7CVzzWvLZRKhE3FgmcYLxCigMDA9fvS5tkFV6ENhl7N7CmCKOb4SyczIBf9HuG6abTaeqeRzqdjuSQ0maJmFnnhkhtcHDQWrEI80OLD19r+RJaA/v1xAxlAMVSiWKogS4SzpLM841ikdJmScfoOA4Jo/QcHR21+KVYLEaS4a7VUiaTYXp6WpdUJAsTk78ZEVZfXl7mgrGKESUV17USDy32A62mguVX8CekzTgHv/dlkl1YIgF/8cUXgN+GlRV36SuDn0cXi0XLP8OZlyk9PT3qElK0V4JJE/qpe55mWtBsuovP1z3PAnv48GHtS0NrHR9u2ou0LIiPj49bMyS9ZxETuOu6ujlUFtLNsi8sExMTzAVrUtJ4TwbsC36SIRoVi5LaWhrxZm96Y2NDOyoCeOniRTLGIrxswSCiWlLQ0Loe9PjjjwNNHz569GhLQgDNxbKoLGdiYoKZYHNLIfDjZDLJWlBVeYbPdQRFhrB1e3u79qWhdSFcGNmr18m0tYUJMnLLgykKXNozonXZQwG+D4VXD02iEdDSyZifn2c2cAMBXDBiswBuM9q9ssoofemBgQGrASgalOgSaiO14LvhbUvmnqxjx44xOTmp2wyhuWxqalqsIZ1Os7W1xfz8PN8H24vEdDeNXpX0pR3H0aVWmej29nbtS8vqhOd5WkGFYu5Nb1u6JnCzSyGgBZy5g6cj1GybnZ3lf8EC3G6Ah4aGSKVSkQV9Pp9nZWVFmw+e51mrizeC51dvPTR39VQqFUvb4AOPAizrvsK+iUSCnXKZnt7elvuhuUwzMzOjZtvV1aW7eW4Wxy1vLs3lclQqFV3HMVlctCPmPj09rX1rAbxv3z71yY6ODlKpFBsbG7q8IqsY4PupuVLxa8Z/w23akMiHGjLTAjhcNIC/2CaghfXNzSfg+6XZHJCaVuR6ZHSzA79VUY2bO4Fc17VM3XEcPvjgA6AZbnK5nPalk8kkS0tLFkeENrP87hvEw2LFcYnTAtpxHE6fPg00E4WovrTnebcd6G1/UUgsHxeyyWazGmYEcHiDjLmD57cY3x37N56RkZFrAr7ROHqrcsf/UUvitAC+2Th6q3KnAIv87v+K93+RCidgsUW8vgAAADp0RVh0Q29tbWVudAAibWFkZV93aXRoX19wX2lfeF9lX2xfYV90X29fcl9fcGVyc29uYWxfXzd0aHNoYXJrIo3JLS0AAAAASUVORK5CYII=",
scripticon="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",
updateicon="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",
diamondchest = "iVBORw0KGgoAAAANSUhEUgAAAEQAAABECAYAAAA4E5OyAAAETklEQVR4nO2cT0hUQRzHv5olHoKQivCwl7A/lIEhBZV0MIIiUKRbBQUidOha1CW6RHWsQxCBHYpCVDoURSD0j6gwAs2DkB2CoiKi6LCZlR3G3+68eb83+/7Mn7e4n8vsvDdvZvbj/N9dgRo1dNT5rsCVTszJ8f4nfuvkrXBVhIovMc4L5US0rxTh6y/h9K7FOCtMJ0LFpxjrhcQRsemSCMePBa/7EGMt8yQiVHyKMZ5pFhEqPsQYy8ykCBWXYjJnYlOEigsxqR92KULFppjED/kUoWJDTOzEeRKhYlJMxUR5FqFiQkzkzWoSoZJFTD13sZplAOG6cVuEqM0la6l/vUjcsVyfcV6lVGohFydF+OZb+P1rhRDVIqaSiMF3IvxUFGFqIURexcQVQRgTQuRFTFIRALCm+yge37oMgBfSoCtw24mB0utn54+UXo99FSGJoYqQGKqor5VqlIg4aIXIkByfYmyKILRdpvPkAQDA33+7QmlkMYStrmRKxOI/oquMDol44i5DNM6INz/TWO5CLlqMaRFxiN1lAHdifIggEgkhbInxKYJgx5CuFjGGHD4nxpCG4g324atnRHjo7EDoXpoxhrAtQjeGaIUQfaf5jEkIwEsBkolx0SIm76ZYmKlCAF6KLITIIoawJYJIvVKd/hG+J4vhhBBxxchSbIsAyjKAFEL2don4pRG+sNtTFwLxnrXHA/GdvUChQy+GpNcpNTEtAgDa20R476UIU69DjvWKUBUzPLwCANDd3Q0AGJrsw/4NzYE03IwElGel6VPhrqTKSDpryDJIQly0Qn5uPYilL66X4lFi7g8KCc9fARv3AW/uhPOKEqMiy0gigmYOYs8WPt2Ht/p8KrYQVQpQFvO90sMMJAbQy0k6hcqklQHE7DJFqdk1TYTvN02U0yx5X77+aARo1TRZWQ5RX8cUwBBXxO+CFDElRKYY8QabJoIybJFKRAJSLd0J7i+sQlNz1OIuLrZFEJmEEFNj8y+WRffTtGJciSCMCCHiDFqyGN3CzrUIIpMQboCV2d4GbG4tx+XpOkrGw5tPQ9dciCAyCSm26aXMrgrGo9YxQHBJTbgUQWTuMsU2AGMV7iMoTicG8COCMDKGFOYnG12do8SoUlQZrkQQRgfVOHBiAGBVUzDuWgThXAgxFdHNiqt3AAAWzYYHVxewn/4vZGpCFGpCFGpCFFgh0z/489SFgHaWuXZCHAxl3anmhfFvldPE6jK6TVi1wG0WOdgWMvpRnEbLn8+YOtdwDSeCO20ntF2mmsUkFUHEWqlWk5i0IohES/c8i8kqgki1l8mTGFMiiEybO59iTIsgjOx2XYqxJYIwuv23Kca2CMLKeYhJMa5EEE5+HMx9AWd3AXggfdJHX4dY1yMOiLjTd5siSvWwXYAMJ6ZUkfmacKfvLkSU6uGqIBlOzOdf4XQuRRBe/zWFLEYW4kNEruhqwdzGZv0vMGp44j/x2DZaxXZrtAAAADp0RVh0Q29tbWVudAAibWFkZV93aXRoX19wX2lfeF9lX2xfYV90X29fcl9fcGVyc29uYWxfXzd0aHNoYXJrIo3JLS0AAAAASUVORK5CYII=",
chesticon = "iVBORw0KGgoAAAANSUhEUgAAAIAAAAB4CAYAAAA6//q/AAADDUlEQVR42u3dT0tUURjAYT+FUagDqTNl5mhRm1QQmqBVLST6B6FBEEWLJMVVECVBUBn0BSJp0bdw72eatq7eFzkc7m3mWfyWc+85d57ZHOacO3Fn/dowauNWv9Gy8WUN1lbCat+/6a4vzYdNAAAAAAAAAAAAAAAAAAAAAADAqf7uXw37/bYX9udNJyz7fNa3l9OtrnT82eez7+fS3HQYAAAAAAAAAAAAAAAAAAAAAACcBUDbH/Cnp52wL9tzYdn8a/9ASu8PAAAAAAAAAAAAAAAAAAAAAACnAdxeXR5G/Xo1W1Q2wdI+PzofdnJyEnZ0dBSWXb/0+dR+vgvz02EAAAAAAAAAAAAAAAAAAAAAjBeAbCHo/bOLjfbz9VLY/sP5sOPj47CDg4OwzfXJsGz8P57Phn1/sVC1K91OGAAAAAAAAAAAAAAAAAAAAADjBSA7ICE7YOBmP2m5W7XFXicsW+jZ3d0NW+zNhJWOP3u+pXWmzoUBAAAAAAAAAAAAAAAAAAAAMF4AsoWgvcfLRe08WAorvf7W3V7Y4eFhWAZgcONC2LvNy2Gl8yuteCUQAAAAAAAAAAAAAAAAAAAAgJECMFjtD6OyPzR83eo22s69mbCtjcmi9u5PhTU9/w9P4tKNIQAAAAAAAAAAAAAAAAAAAACMFYDSgyJrlx2AkB0kWfugx9JKx5dtnKl+UigAAAAAAAAAAAAAAAAAAAAA/xWAbGNI0y+EqP0F1R5/6QshsutnB1QAAAAAAAAAAAAAAAAAAAAAAMBZFoLavhDS9hdX1i47KBIAAAAAAAAAAAAAAAAAAAAAAE4DyDaG1H4xZNMvVmy60vllG0eKdwYBAAAAAAAAAAAAAAAAAAAAMFIA2r4xpPQPI00vFJUuJGWAso0hxSeFAgAAAAAAAAAAAAAAAAAAADBSAAZrK8Oo2hsf2g6o7RtPso0hC92ZMAAAAAAAAAAAAAAAAAAAAADGC0C2EJQtNGQDKC27f+n4al8/27hRev+P2/2w4pVAAAAAAAAAAAAAAAAAAAAAAEYJwD8hxshY1DsQugAAAABJRU5ErkJggg==",
leadicon = "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",
aimboticon = "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",
espicon = "iVBORw0KGgoAAAANSUhEUgAAASIAAAEiBAMAAACvkMKFAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAC1QTFRFAAAAAQQFFKgZU/9ABhIEJnMZAgYIAM8A9fL/pv+y////fs+csP/QsP/SAAAAVrGpTgAAAA90Uk5TAP//////////////////5Y2epgAAAeJJREFUeJzt2mFNxDAYgGEsYAELZwELWMDCWcACFrCABSxgAQ2kJbmGpu3XHdttJM/7a+u2r8+/LZe7u1ul+9Q6o1aKKI4ojiiOKO5Qoox5SB2FRRRHFEcURxRHFEcURxRHFEcUdyhRwZwu7csiIiIiIloiekwRERERER1J1MLs+yohIiIiIiIiIiIi+teigumKbswiIiIiIlosqk6JiIiIiHYVjb/392AREREREcWiVkVUTomIiIiIdhB1XyCttaptWEREREREi0UTERERERHdTJQHPqXy/OrbvjT2rskiIiIiIpoUtXbvKomIiIiIbibqYsa7d2/+O4uIiIiIaFI06+jKiYiIiIg2EbVeILnnuDH1WhYRERER0aSo2vOcevldXpuwERERERGtKCqYlqP0msqYfFRdfW50LYuIiIiIaCgqY94uvafOcfm+8hgRERER0SaiClOJJlgVJveRqoZOs4iIiIiIhqLqN5o8cILVwhARERERbSIqmOrvJx+XWtuNK8+eevVZRERERESLRRVrUZ+pMqU1mYiIiIhokaiFqR4en155oazVLCIiIiKinugr9fC7iTHVzd21iatERERERBOifNia2h3YurBOPywiIiIioqHoSBHFEcURxRHFHU/0Def6P1qqq6hWAAAAAElFTkSuQmCC",
chesticon3 = "",
debugicon = "",
spamicon = "",
taptoseeicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAEUklEQVR42u3cv0vUcRzH8ZujVRKipQKHiDDu3AqqqcnBpTERKoV+GDX0D0RLy2nRP5BDNBlIS1FHCEXwxQgdLsE7PT0ak3DRe/e9OOlLa8lH8PGC5z/wfX8ffLdvqZRwy8vLp1dWVtabzeaOVGi+1WodKlmp1Gg0svyBhFSsXq/30QGIAAFEgAAiQAARIIAIEEAECCACBBABAogAAUQCBBABAogAAUSAACJAABEggAgQQAQIIAIEEAFigAgQQAQIIAIEEAECiAABRIAAIkAAESCACBBAJEAAESCACJB/3/r6etZutyN1a2trkWNVofw2ye4BSG+VSiUbGhqK1M3MzMTW1pZ6ra6uxsjISLJ7DA4OAtJblhepm56eDvuz7tdjYGAg5U0AAQQQQAABBBBAAAEEEEAAAcQAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBADBBAAAEEEEAAAQQQQAABBBADBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBJC93fXh49mN4RORupfTN2L5wzP1Wnj9OB5crSS7x+jlfkC6e1+9mNWmLkXq3lUv6K/y2yS7x1z1HCC7QN7nD0QqBgggAgQQAQKIAAFEgAAiQAARIIAIEEAECCACBBAJEEAECCACBBABAogAAUSAACJAABEggAgQQAQIIIAIEEAECCACBBABAogAAUSAACJAABEggAiQA7rZh+ezV4/Oh1TsxYNBQLp7cqecPZksh1SsevMkIL+BTJazp3fLIRUDBBABAogAAUSAACJAABEggAgQQAQIIAIEEAECiAQIIAIEEAECiAABRIAAIkAAESCACBBABAggAgQQQAQIIAIEEAECiAABRIAAIkAAESCACBBABAggEiCACBBABMj/WfXWmWzq9plI3t2zMXW/ot3ulZPeA5DeFj6+yb58ehup+3btSrSOHlav1VPH4uvs82T3qNXmAOmu0WhkzWYzUvdjdDSiVFKv7b6+aNVqye5Rr9cBAQQQQAABBBBAAAEEEEAAAUSAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAACCCCAAAIIIIAAAgggBggggAACCCCAAAIIIIAAAogAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAWRvt7GxkbXb7Ujdz7ExMP4C8n1+Ptk9AOltZ2cn63Q6kbzxcTAKdfr7o7O4mOwem5ubgHQXEVnsh01MgFEsBxJLSykvAggggAACCCCAAAIIIIAAAgggAgQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAADFAAAEEEEAAAQQQQAABBBBABAgggAACCCCAAAIIIIAAAsgBBfI5bzt54+Pb+Yuh3Y4c2Y7FxWT32C9/d/8Fg5mS0NfMx3EAAAAASUVORK5CYII=",
ipicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAEeElEQVR42u3cPWsUQQAG4PxCxVJLBUuxEvxqjM2pmEJIJRY2aqNRzIl2apMUWqhoExPEJkE4o39gzHsQwc2ubswFM+fzwgsh2Zstsg93M7s3MzMiIiIiIiIiIn1y8uxc0emtKxwQBQQQBQQQBQQQBaRyIJ++fNcKCwggCgggCgggCgggCgggCgggCggggAAigAAigAACCCAKCCAKCCAKCCAKCCAKCCC7+idp/wICiAICiAICCCCAAAIIIIDs6z9p4fk7bSkggAACCCCAAAIIIIAAAgggAgggAggggAACCCCAAAIIIIAAAkg93UsAAQQQQAABBBBAAAFEAAFEALGKBQgggAACCCCAAAIIIIAAAggggAACCCCAAAIIIAIIIAIIIIBUAUTtrAgIIIAAAggggAACiAACiFjFsoolgAACCCCAAAIIIIAAooAAAggggAACCCCAAAIIIIAIIIAIIHZWBAQQQAABBBBAAAEEEEAAAQQQq1hWsQABBBBAAAFEAAFEAAFEAAEEEEAAAQQQQAABRAEBBBBAALGzop0VAQEEEEAAAUQAAUQAAQQQq1hWsQABBBBAAAEEEEAUEEAAAQQQQAABBBBABBBABBBABBBAAAHEzoqAAAIIIIAAAggggAACCCCAAGIVyyoWIIAAIoAAIoAAAggggAACCCCAAAIIIIAoIIAAAggggAACiJ0V7awICCCACCCACCCAAAIIIIBUDET/XQEBRAEBRAEBRAEBRAEBRAEBRAEBBBBABBBABBBAAAFEAQFEAQFEAQFEAQFEAQHkwPfj+mZ5vLxWrt17XU7deFGOzT4rRy4Mx83P+V3+lmNyLCDyXwD58HlU5h++KUcvPS2Hzi32ao7Na/JaQGRqgdx/uTJ+d+gLo9m8NmMAIlMFZG3jWxncefXXMJrNWBkTEKkeyOrWhXzx1tLEcGw3Y65WhgQQQHZ0cLf7nePw+WE5MbdcztxeKbMP1stgcTRufs7v8rcc0/lOsjU2IIBUCyTzha6L+/j1pXJ5YaNcfbL52+aYHNs1Tk1zEkAA+WW1qmtCfvrm+3Jl+PWPOLabY/Oarol7LatbgADys/OP3nbi6Auj2S4kORcggFQDJDf22u5z5KPSbt452t5J2j5u5Vw13EwEBJBxc/e7bULeZ87RZ07SNnHPOQEBpAogeUSkeQFnRWqvOLabsZrj55yAAFIFkDxH1byAs2w7KSAZqzl+zgkIIFUAaVu9yr2NSQHJWG2rWYAAUgWQPJG746be4mhiQDJWc/ycExBAAAFEfMTyEUtM0k3SAbHMa5kXEEDcKAQEEI+aAAKIhxUBAcTj7oAA4gtTgADiK7e+cguITRts2iDTCsS2P4AAYuM4QACx9SgggNi8GhBAFBBAFBBAFBBAAAFEAAFEAAEEEEAUEEAUEEAUEEAUEEAUEEAUEEAAAUQAAUQAAcQVDogCAogCAogCAogCAogCAogCAogCAggggAgggAgggACyz0B0euoKB0QBAUQBAUQBAUQBEREREREREZEDlx8B7Oty45q5iQAAAABJRU5ErkJggg==",
colorchaticon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAACW9GRnMAAAvRAAAFeADgYhyrAAAACXBIWXMAAABIAAAASABGyWs+AAAACXZwQWcAAAyAAAAQqgCEDDS2AAAAElBMVEUAAACANlzLeKPbi7Ttp8v3tNaTCmDlAAAAAXRSTlMAQObYZgAAAAFiS0dEAIgFHUgAAAC5SURBVGje7dnBDYMgGIZhu4Gm6QDCBLbpBK0L2LL/Kib8l8+ABwkHie97MqDPDSTadURE1F7DXlhYWK1ZN30kxL7S5xXTm3osLKzqls08gmTP68jPLBez6ykjYmFhncHSTeGvu4IqmwkVvYgDFhZWdWtOV/hmCAsLqx3L5t+potaib2zrGUdGLCysKpaegO96W+YEravaiZI7k2NhYZ3Bynz/SrcDX/wtDQsL67DFPzAsrAtYRERU0gpf55zGZxmE5wAAAABJRU5ErkJggg==",
sneakchaticon = "iVBORw0KGgoAAAANSUhEUgAAALQAAAC0CAYAAAA9zQYyAAAABHNCSVQICAgIfAhkiAAAAAZiS0dEAP8A/wD/oL2nkwAAIABJREFUeJztvXe0ZUd1Jv7tOuGGl7tb6iR1K7XUii0ECCUECJAEQgkkbIECwSzGeMDGYPwb45m1bI9/mLWwZ2xjjwEDA0YogwEJSSihHFFCuaVWZ3V4/fK74YTa88dJVSfcd+/r9zqI+63ud+89p6pOha927b2rThXQRRdddNFFF1100UUXXXTRRRdddNFFF1100UUXXXTRRVugvZ2B/R2lY791uFw8MMCweqmvvBJGxa9UaYEE+wZ7y4XgY5nhAUFlcxgv+k4M25PiHiLheoym61ENjSnBtanXaFpOGVMTY43nPrdpb5Vvf0OX0B2AGei/7Jdf8aVcblb6DxPslwx4BzGhAslVYdoHQoggYBSBJRgMAgUEDikdfI++GOEPAogA6YE9dysT1QHUfZgbmYXnNSfXErBp6obz/7HbcPno1ksLXMrX4/YrBv7SAJ8JwzxBkEEMrwfMthCmBWYwy1DsBuRNwPpXooDgpN/SEdMcIBGGJRARQICU0gGTQ2RMS/bgS+9xknzv+LUf+sacF34/RZfQCsof+dlVZs/QyRbcVWDvWLPct4x9Byx9QPpImMgtSBneV5jLHPC5dRxoARRqBwI/bilKvgoTIAMkTHjO1GZB5nMNKV6Rk2OPN35xyY/aKfObDb/zhO45/5vHGgOHfc2welcJ6SwiYSwKJK8PSA/tVZFO4PgSgsuRYJ4pXqSYRAI/6gRqP9CfkjyESADCAAdqzk7A3Ol69Zcmrzn/I79Lrfw7VNQE1kU3f6o8UD3Nku6HhFVeDOmGRGAAsliSEhL9OM/EU/kZi9ckuiZo07q08iNOlTNP0LISREl1JgYgCIEkJ0CY8N3mFt+wf94YHn/Ive3NLbl/pwjdf8Wd/2ha1jvhN44SZrkKzwkkcYQcQVuMNHu5ZXxVBqfjcKQ2R0mQ0m9yUkn3ForSKOhIEAbIsMFuY4KN0qtOo3H79A3n/UU7pdzf8KYntHnWjaf1Lu/7qmFYpwF+H0EYzF6WMblk1GVqljEpQ2+GzsAhgSmSwkwBG6GQuTBmoo4kjylkfiovIeOJQIFa4jFo0vfcuyde2f43eOrTzxTnev/Cm5bQPb9/+5etcuVsQ9bPIrNksN8MGljzNJA+rrdEgdhNjfZUEEDRdgN6ssbnoicg24nCdAqynd+n8nR7AhklsN9s+lS615kY/0n9Fx/5Vm4W9iO86Qhtvf2/H9t77Pu+R/COEySq7LsImZwEKhqaNbQUtS0QSdPoW/Q4Sn4XeO9U8zC6onWHlgzOG01SgfJGESKQsCGlnJRkPDt+9fvOaFW6fR1vGkKXLvnFH1QrpSvNSt87pTOtu9mKLKsMCm7OoE5EhKPQomNFf6CiLKTSS9SJZAImdtcxgSiR8vn5yMlkYcctUKWEATLKcN363Z4rrqndeO6/55d438V+T2gGMHT5r+4xTOMkEPXDd/SbbZO4WBEudrslD0nkcnAtUm3jK0qypMUKrijyu8j2azP/4Xc10y1HoWx5ySgBLCdcx3lw4oYLPtjq6fsa9mtC9195999bgj9FwCBLH0A4Uxcpp+2oFgxdjLYw8BK6JAnrCkZ4P4dXujZNKfolvuc4YkpJ1tWRGXyCmkoRKuv5Bc+mEccjEBlgZrfp0denf/PId7DurzbmJLRPYb8kdOXSm/+wXCn/F8OyTmCviXjKuS3jTkUOC9pMI5KnwfeAGDEHM+qE+lPvNRqZ25aoqfy2bQ/k9NaZyksEGBak67zi1JvfqP38ku/MEGOvYr8jdN/Hf3G1bfdeQuzb7Pv50rUlUmI4NTQzkDtNzTlEjFNLSWQViTKS1YG1x7Sd94LiFNzWb+SUu0W9JZ020K8BUWu6jRunb7joqplyurew3xC68tFbPluplr4ihHkYe010JlFzjKC0epGTlqpOqIHiqDlSOFeViEJo7E8iFGtHmg6QVebbInNOWnlqtxYyWR0YlSO4QSDLhvT912qTta83b973pPV+Qei+y275pm2XLieiAfbdjP2T35jZi8EiIQIzFy4Wyi71pCQ54hwJnE1G15U5XpykqRYa+/MuzqBatCx3gfsu95ZuzmY6XfqRDJBhQUo55brej6dvuvCzebnYW9inCW2edfWZ/SuX/a0wrDPYqUFfntkKBWzPMdaiyzqNsr7kKGDkrdDpFmvR4V/FSEwRUV1wlONPUb6n9KCc4uSXO6Uft+j8ann1kqfzGLoNtfwTyKpA+s2Hp9Zv+LL38OceapWzPYV9ltDlj/z8smpP5WvCMFay58wcAcCM427BbU7fjFQB5XKkWyfuuESGR4Eo9TutKzckodYQELbEgMnKCNBS72lDGmeJzKTcaalbZ4kcD0qqhpOyD2I1RJiQUr5Rm3L+yLnlIz8tetKegrG3M5CH/it+/fmyjX8nokH43gyh042p9NG0dMqNm9yKPyO9lvKSiJ6XKCYUNjwrnFQf5zNhrClw5FATF73zdfSziReHy3CZUBJhem35jZEKUCyN02VSg2S/BWUAJWWOyhB15Oh3FCsoPQEsQST67Er1I+ZRl+5yXrjm8ZlyP5/Y5yR0/xV3ft8yjY/Dd6zswptW+qFiXeUgT52INd2oMVOBVWONtZSALNWzgSUYYzULIA9/etGrWLX6efRWa/B84LW1x+Bndx+F327sxWC/G6z4nFGSpntnjjRvq/T5IeKO2EIlS8icKi8RSJie63o3TN54wceKcjLf2KcI3f+x2260besjLD1oumOMNIGBwtVmqXhJMyRNoy27RCt1MxLXkTxjsCrKUiO/lMCYS0DTwCWnb8IZp76IwYGd8H07iAfANB3U67148ZWV+Kfr1gBlH/02w8zoBzk6R7rzxvlIKJj2U6hliD126kjUQu3WlTKF7ZnABMBg13fvnbrxove0aJB5w75B6MXv7xl4/5cftiz7+MAllwel9qKGQSJdi3TNrGxKWo5iPYHT0ZBhaWsFHECQ3oQr4HqMC9aM4PTTnsJBy7ai0aiCWWSiEjEsy8FUrYQnHn8rbnp4GcbrFhaU1de99DK3l63gZnoWk/LYqsmNZGgiSWH/SCJF8kOptnwYJjzXfXzyxotOLggxb9gnCD1wxW3PmMI8IXjlCci2WngtX3zG0DVDxIGT5g2v6MIsI431lccAQjdfNCyrSAw+oDZuYcGB0/jTS5/B4iWbYBoM35/ZTBFCAuRhZNcS3H7Psbjj0cUwh1z0mYrxpZQ9ImdSSwWuRjVi9KFIYygxWqlz6RlQrb5yp9YZEAakJ18cv/HCY2asgDnE3iX04it6Bs7++EOmYZ0A3w0vKgptziRE+rJyC3oTK11CUS2KBIseK5FvAOuqSUqx9HzCRINw4mIHZ7/neRx7zAuQvt0WkdMQQsKymtjyxhLcfOvJeGBDD0yD0W+kh/hi8nGoEsQdMKqvVEcA1KIoqpSaZJsjQZGoJmHC9/1Xx+vbTsXNnx3uoCpmjb1K6IHLb3/WNIzjEenMMZSaDMe4uAlzpXS29tMvnEZxsqO2viojyUEwAVMEn4HxuglYLv7rOetw1NEvY6BvEo5Tml1lKDAND64PbHz9SNxw5xF4aX0/egdd2IJzuKONJS1ULv1abuBs0p3eyNwmw4Lv++vGb7jg8NaR5gZ7jdCDl9/2G8O0TkK8AD/MjmJeZ6QxISRZykuhkDiWTjnCIytLspJJFYB5ThMGMNoUKFkSHzxhG8468xn09kyA2YCUWT15tiBiCOHBccp4+tkjcdt9h+P1CRN9ZYYVV0pOaVLlTudf7ciaIpYz+ugCI51Cm+CA1K7jPDj5k4vn/eWBvULowctvv9M0xHtZ2+siRMu60ms91hyZQt0wkeZROroNlCIuEs9HkI6iK2bywmj4ArWawMVvH8bJ7/gtDlq2CY5TyTX45gpEjJLdxMhYP5568nh8//5lgG9gQcmPS6SOXOoLt8llveOqTpE0PbOdWPeXaHc7UEvIMOC67uOTN314Xg3FPU7ogctu/6Zlm59j6VJSq0VDad4ag6yRqHjUtIX1qm7NytW4gfJUihwy13ygUTeAioO/ueIJLF26BYaQ8H1zdpUwCwghAUhMTQ3hu9e/Dc+8MgT0eRgys37liMTZKfiU6C6o+rSRnItCEqdvJN1IGBaajvPd6Z9c/Aftlbpz7FFC9151/1fLwvuf8Wq5PH9qSFxmSmVOlTVZqZJ3LyFzNBMWpsHQjKa0JI5S8VlgfErgpBXTeM+p67BmzZPwvfIeJXIaRBJ2qYaNG1finnvW4M6X+1C2GVUjpUsXqFFxOupolGuLQI2dfJ9xRjNfbMePFxa7vvzm1I0XfKHTsreDPUZo64KfXdk31PNvxH6FWeoGXi7yZISyeg35BFZjkfIXUIivBMyTRj4Txh0BuMCnz12HE094Cf1943Dd3Tf45gqW6aLRtLBu3eH4l5tXYWqkgp5eDyWhUhnFunFGuipDXB4rlDiBsGforp/8Vsg+V4CJarXpxmXOLR/9+awroAB7jNALrvjVLiIsAPu5apiKfKNFIaZSsRF0ocGgePKlwPXG2aonALuaAgttiVNXD+O8cx5CpdyE7xvzqifPFoHh6IOIcd8DJ+GBJ5fjle0l9Pf4MCL9OEcyq6pZejzLNE5bSM9MZlPWFzoJSMnT4088dRw2/NX6dp/SDvYIoYc+cfddBnBWehYwIW6UFd1TASg6sSI8igZEhOnleThyAyu5mPIIzqiJ88/YhtPf8TKWLtsAzy3HU9X7OuxSAyOjg3jqiePxg3uWAEJgsOS3sUmkSuAcpVq1ILU4+Y5PAPpsIqKRMdHsAQYJE1LSE+M3nv/22ZS3CPPeWr2X3fq9kmV+MpkFTKAbbakezhRvBxDpu3pdzzDEFVk8qadPe0DTFVizpI6Lz30GBy3fAsPw96qePFtEhuPY2BBu+dUa3PXcQsCSWGBxTKf88RCYceZJi5+1ZzTjvSBuxqtk2HB8+tb0jef9l07LWoR5JXT1whs/WBno/0+wTK2cY+UvEvVAqZlWrwoqtrue5IwuJP35I5MW1hw8hfecvAEnnPAUhDDgeVaHpdz3IISEaTWxbt1hePDhVbjjiQXoGfSDiRkAiSKcilhgHAffcgw8PVgmoUTk5PtNCAAbNmrDY5c6d11+46wKm8K8Enrhp+57AV7zaJZeyvqOlOCwxxJSftOsRpdeKach1y7Jt4YkE8YcAYwJXHXhOpzy9udQLk9DSnO/US/ahWW5aDRKWLfuEHz9x8cAvoGeqkps5A908fesOhj569Nxsu2WUkOKkhYGWNgvjl33gWPmovbnrQUHPnb79aaBS/N2tVf9DxHXNM+FYrSom7HEMQukb5buiowgxq66gZLl4/w1u/Ce9zyA/t46HGf/0ZNnB4ZpejDMGu6660w89ORSvDJsY7DqFzR+G0Odws68t1iyKSTeKSjCK05OmHA955bpn17yodmXM87S3MM+97oP9h4weD2AHmIf2vt5LXq3jgLWtvBS6PESWTHpCbjDNs45bSvOPPVVLFu+HiytOZ2q3h9gWU2Mji7E408ciatvPhjolxgsyZR5V+C1i7wUlEhYVSEJQwHqL07didRJpDoCASzsWnO68p76Le99bHfKOC+EHrr89heFEKtZuoi6cWT1qoVJey70gS1wvaX3icvKjWyFRkWr+0C9STh1ZQ3vPuNFHLlqHVgCUu5/Bt9cQQgJIonhXQtwz6+Pwy+fWQAIYMjOvoCsEjeLbItpd3M8HbpWroIAYYJ9/7Xxn1x8xO6Ub87fKax+5Cf/o1SuXsq+E/doUntmKrxuaqRCxe6NnIiZVMJPDjYEG50ysWygiU+euw5nv+8BLD1wFzzP2if9yXsSzARmgd6eGk44YS2OWSZhNCp4aV0PjDJDUOKpI0LQfnnphJ+Ze1nrPedGdJOSQCxBwhwUR3x4kfvyDbfOtnxzKqEH3nXVoFh55SPE7lGQMn5AERezmppuKOarF0VdgiA5fPWpIXDVOa/hlLe98KY1+OYKhunC9yy89PKh+JefrEa9YaJalihpim6Oyy2+o3s8ivicL5m1RwQGImhdbf3whe4Tn35uVuWZTaQiWGf83XdswzgLvqf2PQ3B9ayeS+lAhWVXe3aCEUeg4QGXn7Idn/q9e3Hc6lcBIkhpZMJ2kYBlQIGlS3fg7NPW4qB+G69v6sPwpIVKSTfiAX2pLaCIk7QnkKJ2Vtt4pnZgCKs8JKtWyXvpullNi89pSy+4/NZpAlWDwyYVHSr206iWoKIUQy12HvIGuECaT0nAGbXw1mNG8OH3v4AlSzdCkJjVGyO/6yBiCMPD6OgCPPzYEbjhmkOAFQ4GU/q1On0e20acbus4dPK7yOKMbkZGlihNjd3wob5ZlWE2kfLQf9nN37Hs6h+w11ASzdvDHhluFyPtAEJci45PmGoIvGPlNN575gs49ugX0GxWQ4ncxe4geBXMxc7hIdx154m45ekhwACGLA5asNDLlLaDWjQyp36ovlphwvPpmqmfXtjxdghz0vrld/7rwfbQwn8Aez3pe6Qp/tqNAqiVkqqQsI5GGgYcw8OXLlqLs979GJYu3olmM//N6i46BzPB901Uqw2sPuZ1nLjSx/SuHqzbWEG5KgvUyRmlU0Gw/HgkzAV+9Z2PyK23dHTO+ZwQunTq5/63adDpFDsXFX0pJWSLh4QCu1nb0wqY8ATOPGIEf3r5g1hx8AYIov1y3cX+AGYBsIEFC0fwtrdsxKqVDdzz2wNgC1U/noHImWA5o26MRPEUwujngQHpvXjNLzrJ8+6LtMPeOmBb5ilEIswkh//SVgJy1gqF4YO7yKV76s1vr2li1aFPQ5ivoekIEHVVjPkEkYDnCdTdSRx1zCN4ywEbUXc8IG7vAqhNqwWjohuIR3EGWHooSeeCTvO724Q23vr1U4VhHM3SS7KX6rjpdRr6ryiwUsh0ZaRUlck6YcfodmzduRkjE7uCy0RtWNFdtIuoLhvuJCaa21FzRtFwBGSzATG9BeROAST0kTiPp1qTpBsz51YUXkqQVV5cueDaSzvJ924Tus9s/v+xzzmvQJqgziup7tpJx83jqCAEngzpYWR8J9ZtXYuRiRE4XhNCreQuOgSBiCDZR92bwK7aRkw7uyDZB0X1Gs6Sifo2UG0bmJXz0DMaSNSe6ZFYD6JdVgdkrwlLlP6mkxLsFqEvZYAM80iWXux1iZHqma0NiIwuUhA028OFMCBIYHRiJ7YOb8bw+E540oMhuqpIJxAkINnDtDOGieYO1JwxCDKyKl2sVRogbxpieivIq4cqSDpgjjNAdeGl0swMyywhDFpcfc/32z6Ja7cIfevv3fpDwVyN3S2ZYSetVqgoilOE1saHCI78xfjUCDa88Rq2Dm+G6wW7MRF1JXYeopFMso+J5jDGGlvR8CbBwRa5rSKGEAD7oNpWUO0NZF8V4lR4ZFWLOFQSl+NIDIAHqa/vc+2WabcIbZXsY0FFdCnQF9JuuNz7ud23LRAJCGFgujGFzTs2YOfodtQbtUAV6RI7BIFIwJUOppxdGGu8AcevgTCzuiaEwtvYdSUCaV3bCvJqQDuGOgORIKT4r/o76RSGaRyEZX+0sJ2SzZrQ1vk//wSkcySzr/Qw9TPOdZDxtqSwisRjknd5JkQEnqpP4I2RLdi8YwOaTiMwHn9niR14kjzZwHhjOyabO+D4dRDaM6iJCBuGjWCTdlYbNCA1pAOqvwFqjsTPioNk2k1XL1SlVLsjfQjwGmvVae9vp4SzJnSpt3ycMEu92XNPIr2J9EuZnOalmqNfqXEL7IpWiIyZptfEph3rsWXHRkzVJgEwRKth9U2EiKyOX8dEcwcmGtvhy6Z2r41E0GgyRl4owTLSo6/aMALU2AUxvRmQTSSTD2lBl0levxVpK8wAmbAHS+9qJ5uznpGw4L0j4HJqmpNDSzh/8XIOsoG0V7KU77sDAsEQJppuEztGt6E0XUZ/dQADvYOQLFtuzLi/gkKvRcObQsOdgs9OUNuz8N0TgEYz9GYRkvrKayBhANKFmH4DXF4AtgYQLOqdoY4jYR+TObwkXQiWH2gnn7MmtDCMMzjaaJGRkwsoPFV6tKp/5W2uhtgzFCOJnR2WOkWkbjTdBraPTmN4fDsW9h+InkovTMOAfBMQm0CQ7KHpN1D3xuFLD4IMdCCP20PU7qqAVnVrMKi+A+RMQFaWBERXHQgpIR8kp7+US6DA22HZS+JTuFpgVmNu9eKfXam9sKrOjbRUK1gffij9qcRFcisicxCVYZtKxcwSkcQGgB1j2/DGri0YmRgBSwkh9k9VhMLmrHuTmGjuxLQzAmYOyTyHKFIZI0NPdWCRAfYdiNoWwJ3SDUaFM9qptfHNJBBJ3+g7/5q/nClrs2o5o2Sdr52vXeTQiANkp1UKbcjcH0EakbA3xFzKGYIhDDheE6OTw1i/fR1GxnfB9/39xIAMxKJkiZo7ipH6ZtTcMUj2Wrve5uKxsVgNv2s3OTY1iUIpW98Bqr0BZgaTIgUpEDCRc0EltpKqyWTNqHbMSuUwrfLx8Bs5ZFSZndE7kg0Tox4cSl99O7U8g0MZDXIcH3MBdRZsZGInRieHMdCzAH09fSjZ5aAR9il1JOhsnu/A8WuB/xgyltLz80QoAkxpPI7uJlIqFkGKOsII3HvGdBOytAiwegKfd7znt6pSMtRUCYBhmjOuke649D3nfPtYkuldCwsamlkbgtL6MsWf+pnY0cImViooL14G1Opm+xDCAJHA2PQItgxvwvZdb8BxnX1EYkcS2cdkYxgTze2oexPhnbkhM1P+ib1xE0RCKSZy0FbqoBvXUmQ6RfwHAexB1LcBzV1haAEg+yYMKRxgZhB7i+yzfnBxq7x3LKE9e+HpNvsDlHm8Cs5eTgvelMGYyPVwyKFUqkr43O7DAK83QMsZsOWciHFBAmBgsj6BidoYeiv9GOxbgJJVis8M31OIjCRXNtFwJ+H4tbCO5njtCgGVXUvg9I9Cmm72vjIbqCiCmaYNwqbH6WhZceDKEM1RsDsNriwGCwvp17sABLtqAWBIgIwFsHsOaZX9jru0UR04hsgYym4gE2ZdbeRIQGv6sqo66Io/a/eU4Jxca1USfk4AI7MpVWsIEjCEiVpjCm8Mb8bW4S1oNOswhDHvEptAECTgSQcTzWFMNncGs3ok5kW9ICb0vbIc5Jst/KUpEnPSVqq9mDixWDH6orYGQAIkXVBtC8gZB4cGI2mGZcQLBhlWiWzrgFb571hCC8MfIEEhn1O6BLO+Hl/1J0O5DkUSR/0ASv2lXJuspZBIhbzSMOWflDoXiIysplvH5p0bULIqWDiwCGW7AiHEnErsQKOUaPoN1NxR+NINJ4Jofo09BERs6fxPtanaXpE+HFxLj75hGPU3hZvRN4ZB7iRkZQk4du8RopoIOowPm7wjik6yBGZBaIPlEm1LgNTu4RmDVyuEfp5rFJ1Y9y/q20tlv7VGjmN7jhG5/FzPwdbhzajYVfT1DKC/pz9YfinzddC20iYBZomGNwXHr8OV9VBK7/3Vg+kWiKcc0lMMYOin2mbTUF+0DYKGkzG1LWB7CGwPAuxr8TmQooe0ymPnEhq8VOdLRpRqGc/KV/W12eRLeuP4iPasxMl5zNyBEbyQ1gEXiQgGGWi6DTTHGhidGMZA7xD6ewfiafX2pHZiWDXdSdS9CUj2wzudS2MmGcjFOd6LRJ0TiVTGYNYwNvcyplKE6K3w+DiQdOPH1qMENYdBfh2ytDCZjOEgA8R8YKs8dlxbDF6oeS5yQihh4yuRh0crYKhn6KtPWUmFtW85j5gbWIB8zARvFwGpO6yVyPvhs4/h8e3YvH0DxifH4HrujJM0RAKSfTTcSYw33sCUOxK4sjCLN3CIIU0XdmMA/RuOgNEstVYdZoNQ8ASqXcBMUgROrlyOpHDM35SyHQVKCgK4UxC1LcFa62jolz6Eaa9slb1ZSGgcBJYZL0VUiIy3AokkprQkpsAIUbuA4tyJk1fVExDgeD4K50AFB4T0OyiUAfA6Aj9vglYwxDs8YIiB7B7tLRGpIp70MDyxA+a0id5KP4b6FgTEVgzhYHpaou6Oo+lNQsIPVItZGnosJAQLLHzpBFjDPYBHmF68uVBi5qZBUpnwyC1gEA7hkR+pcLGOrBpM4YWgnXVBmPhK8p4VrrWubwOsAXBpQaibtq6fzglt9UA6kyllOXsEW2QsxGWLdOU4VtJt9RP0dIkcxQUSYSOlzG+kEgN3l4DTXOBgGURoV4WwADQA3kjwX7BAp0iI0z0gx3M1E6JFQVJKjE2NYGxyFwZ6h9BXHYBlWmAEOnLdHQ/D7p7HgkmiPHIABp85HACBDQk2OpHMDDZ82JML0L9uJYgLXoANh/2idoquxqxQSM1xqDghpHmfRegEcMYAL3DvgSstO2lntcgAQ2o9Lcmock1hLkUl1MInRWEo3seUyy9OUv3eqjgCkOMS/i9NyHtNYIoCkrcLQtDFewHsoOJa6wAifOFgfHoMW4c3Y9fEdkw2d6LhToSvOM2Nx8JoVAAWYFN2lG82PLDhYvCVozH09JEwd1XBxkxSQK/TNJGBqN1jQiTGIvTstdU6JEDsBS8QOKNY+BU+qChoR7W5+BO3HRttjRv3MMUg0EgcZTaSrsgnJKlMz6uZTmECKDN4LcH/kQW6rSeQ0gKdEXSOnQoi9F64fgMMf+5dbx3qyix8EBOq25dj8X2nobxlASCpI8meZxslzRncpVgaq6P5bGRFKK2bw2g+838Lz2TpSOWYRskvIdm3LiCxogFz8ui4c8a3072as9zVaihtM7dZ0VEwK/jvrvUgJm2IIxk42g2I2ol+PaeIa22vgUmChY/q8DJUtxwIa1cv2OBEKndYzUnzZu2fvJm/dPx2nqNLdAKkKLRuOiK05TQNmKlDdVQlKnUpuKyv0wh0B1bdlEjfzmpWsxfZVAZ4F+DfT6BXbNCpHujAuZlB1ZIwAAAgAElEQVQa3+9ADKvRg97XV8Le2R/UstmJnxKIPFzJKBzZQBkvdQs6d/bICAm5i/Pc0bjXrE+uiJXZ6D8ptkIO8u1gJX7mtnqDsgnPpo4MAKWA2PJHFnirmL1KsXcF7OzdcMQQThlDTx6N0o4BQDBYzCKtsI0YHM/KskaItLk4d1DPOyxCR4Q2JAtw4sEAIr7p8/SJIy6HwJn8pCRxLLojhTwVb3fqyQBQZmAasydmIzQW9/DEHZOENFwYzfKsSS2kAXLNNoy+VqDkLxcuQpgj6N4E1viRj44I7ZrGZMzLmMgq01RbNrRoZyxxirHq9kuqOhMNd3MhIdtJg5DNvAB4M8H/XzbwhhEYxPP9cgsxICTs6UEc8JuTMPj8KkjDyYRpX9ruLgWLVME5aJhM1sKG50hQzjzV1JkO3TuwjWSiNyUPjXpPcjhQdEcfJVISO3ZQ5z2NoS0S0CLOMwTA44BwLEjLBVwlgyYAC/B/ZkAcaoDe4QEDsqMp847gC/RtPBSVzQshXAPNA8a124GR58Ge7AkmlWZEa89vu8imMAftotpVimchOQYj/l/I647kC5OhhI80p0BKx65nSnzPnEvEiO3KbImW1ygoKd+V+HPB55lceAJAjeBeJ4B1VjaOAFAC5IsA75whrd0BMUyvjOr6RQBIMeAolMo+SlNDWPTUSShvXjCjKiFFG29e7w2ogzxHK+uiueaIzJonu7AQHUlodqQd6Y7awKP6Vli9F3c15TOlDKu3tIel01CnnXajUUoAvy5ABzNQkYBXwEYDQA3w/1OA3mJBHCtBS3xoe6qbmHcjkYFAnVCkhTSbsJq96Nl4MMpbFoCkaEHmYBZQkou+Nw5HG6fZ7xmonCH9YvLSACtXE4HIds/jRcl25oe+5r3Pli+/cwbViXMupioxHYTTwfI6QqtndgAT4PUC/jDBXCXAa5rBUJ2XpgAwAPDLBP81A7RKAFUZ+Lj3ApgAci30bzgSPeuXQTRNsJD5ZA4lOEiiZ9tBqG5eAmOytJsG4W4g3ZRa8wYvzWYtsMj4TJQMQYTaJZfeglvyH9P5S7LpGa6M96GFDzlH2GbT4tSleViwbwKoEbxHGPS6DXqnF0y2FD3ICrLFLxIgDaBUEG6+QQxzqoK+F1eCTb8lOYkJ9vgClIcXoLxlAWTJ23tkBnRpHA/UyXBOyqiblncUX2QAAvhkMSM6JrTv1hpEVE7pFkpWlFznCevUtWQ4yS1xvI6W1CBzpUf3ADwB8H+agJ2TVxWEvSaZNRCDrTamOiWh/8WVIBBkeRYrrFqg7erX2iw72sbGXtjAsbxLDdCB3yB4654Mu+UjO3Y6EWOLdmKRIqITPqSkcuqSqgPrcaL/CrnTZJ5rhAbeXp8wmQ8IzG7yZAYUauHpi5m3w9PGXST0lJV3Ib9jNgSL+kPyC3hOfaJV3jomtARPZUVlmL20ppGRqCphNZdGCorxF9VJ/Gc/wZuxgyjQihc2I2vNmrRz4g+LAitpKC7e+Isy0CdHXjBAAoLwWqt8zYLQxotEAvqMHoqV/hhpdSTV4mkHSBxct3j3C1JLBDOKbc4mspAgNiA8E/uEB6JNaDkl1RMRKpKRfhwbTinZFn2NtFfFhqJYMitWFAGS7LFWeep8notEDSSQmdFTCVwkeJH0U22NqaIrJUUKv0dnf+8vIo8AdgjyJ1awT4iBFsRmSNNBaXIIi547HqWRhWCxFw23DqG+pR9sV6F7plSC628zhXFCvRikrIrnSKrrbzIFL1Ib8KV8olWeOjYK3Ub9daNk1YmpArDutdDPx1VvxCUh9bJSGYmrnOPqiPp0ZDjuk7JLIHD7+UqHI4BHAb7DAB8sIN4hgUE/tWyVQdLA4KuHo7xlIUTdAi/VyRwsANrHCB68iB38IYrbnVISLW32pFkBMKLdA6JFR/p7S9p2oGEHEPAcPzXvr6Nzo7DZeAngiVw/cs6MpKo3sUJ+deghSsLEuVfEvK7ctBD/exolgNcaoGErO/toInhXcS1BvoyMlGZi2BMLUHk9fInZ1F8rY8OD4dro37xy39LH1Y27OVKeAWQoHAZTPoPmz5yhkrGm0nGC7wTp+zukS79tlb2OCV2/9bIbQeakvs4ibQ0izjopl1UneZLR6K1vdahJmw9pCu8jLWwCvIHg/VwAj9uB7mwB8SvthHjtRy5SkyLMDBYSvtVA7+ZDsPDp41HaODT/C6A6RHDedwtjHomDIw4fGfhRR0h5EDJGZhIzCUs0IkrveaxV3ma1+6h0GiOGGUVN96skK6rgjTQSIBliovVTHH8Pryo2Y+TKSRIudBrtHVgAJOA/CeAFG+KdPowDCaK3BM8Lj2RoA8yAZVVgTwxi4OXDYY5Xg8mTThbg7wmkTKcIcauE/TjeQYvTyqOezIxTCwmZIcne0bxvzeutsjc7QrN/i0HWya1W9evmgapDJTpy8CvHuFRKyaqIB/YZ4ayBEPiyfUDeaYCHAOk2QR3sY82WROnlRaj4i0Ge0d7kyV5GpnSRWs1ItgELJVIRgdPWVuzu41RoZun7fkt1A5jlYDb100v+WtuksECtpdQ4kqjQif4U81exJ7WeH+lpkdW7L7vtBAAb4El0RGYAADGEa4Yvqu5jUjmFPKkaC61Q1YqEV95uyloLhu3L2Rt6aDJcb8GF/zJT3matnfmeuwVk5OY2zkpGqOr9MlI1OXM7uah2g/0Gs61VdXTaVxG1GScEjlSNWHGM1zEHyGvBWB1N9gWLLiDT1kRgsiadnx7y4kzZmzWhmYxfkTAzvuNElupT4UVDTLSakeJ46Q5QIP672Ivg2LahUBynX7tL98243SNBpR7fEIfIF1xEBnyIe9rJ2awJXZuqPyk9VxJTuLYkKoiuLXGKzEmBkPig43BpD2QrcbWvi7I3KZhj9zMQvCibNfGyYkizmNTGB0GbpMt7pDBR3zV9dTvZmzWhzU2v/IyF+WJ0Vq6uT4W+C056a3xP87+H+pNiIurg5CNT1pzCu1RUJ120CwbIV5c2ZO9H75Mi88FauOhLvNNW+gXoOMEW+SECS14naj3r28n+rAndeO4vN3luYxM4eXkxkcacqBOANhOYFKmFBE4bfqRcj+9l49KxPtAPwMH8veP3JgZ5Amz5qK3YAWk380nNM4+N8cxfzFl1nrddFTI2BuGy9ZT7yuefaSPS7rns/cnpv2Vh1rVBR1F7YyJTom5wLJWVTCNVxFQHbrf8dLCEcZED8W4/SKPeZtzfcZAvQJ5AfcUwRk58AZMr1oWqRD5UUaQHC0ZlpsiSSkvfdhsjeQIDk74r7m4z4u4RunHnlQ9Iz1sPIRIiq6MKJRawrk0XD2fxZ8Zg0Ie4XHgAbICO8mF8zAW9NdwhyZkh3u8qJIF8AWfhJIZPeQbjh6+FV5mG8AoW0StuVc40BycSPTP51a5ETvGDAGZjvPnAH/1ru0Xa7UlV13X/SQhb87xELhlKDVkZ912eFNbInOfCCRa1GOZ0foYYwQIamyFO82B81AUdwwHZO9zv+U0LJpAn4PXXMXLSixhZ8zT8ch0kRbiVbham6YMlJ6+fqTpkLMzSbdaO4Z6WhMkQT0YZjm/+n06Kttv7/3jequ3lAxdfTEIMImMEtiiYWvbCcmdvCIMxNboIVZtwwJKXwLDAXLAvgQ+gFKgi4nAJ3mQEp2SZ2HPrIzyAlnNw3JwPmKaAZQkwGGazivK2BXsuLwyQZwBCYvz4dZhesRFeZRrkWyhqBCKGXWpi+9YFuPfm47GhaaJsqHpkmHAnmcj1SqfTIDCMqelf/8kHO0h8Dja0Gr1/go658niT5En6UW85SJM4o1oA+YVLYACYaFp4/Nmj8fxvV2HZwiaqfWMwLQ8sc4oTJVUBxIk+xEEMTBAwQp1vsTsb7COEJk9AVlzUDn0DI2uehV+pAaBCiSwEg4SPqfEB/OLaNfjx11Zhk29ioBSqcentENqqx7akWJgBG440fuCtv+0X7aQcYU52aBO1A9ZaB6/6PUi/mrmZ1qvbcb8VIQwqCCiXPdRkHx57ZgWcnQswMDiF/qGdYDYLrXP4AAYZtJJBCwHeKIAG5nd/jb1MaPIFyCfUDt2BiVWvoblwGMK3CokcSGQX9brAo3etwX9ccwhe21jF0ME+Sibn1+3c5xoMY6TpmN+Vm259upOYc0Jof/yRYbHqkhWmXT4ZMqWopiVydE0LkKqkXPU5sZwj4WASUC4Z2DCxCI8+tgzjmw7EikN3wbIaEIJDVSQFCcAAaCFDnOSDBIFHKfCIGNms7Db2EqFJBgVxFk5i5K3PorFwGDAkKG8UQ0BkYfjwXBvPPHoEvvutE/D0C1XYJqFqS8y+YmZhjZMBT9oPNB744y91HLXzpxVj8NKbJyHdXu1QIW0lS5rRLQqr6mdt1AlDYLJWh5zcgQ++awtWn7AWgwt3wHUq4FZSxQIwQZDPGeCnRUCuudyuoAHQyT7E232wA5TLJipVExIS5fFFGHj6CKCj81BmABOEK9BYPIHpFZvRHNgFIQtGrRCm6cH1CK+/tBJ33XYQXnmuit4lHszQU5W/mXdhBlK/O4gbt7klxz73ZQMf7Zyes1o+WoRmo3ZdqVz6NHxFl871VuQUTuM6I9kqIa9n6OkFZ99J9FfLkOVl+OWDJfz22QNw8qlbcPSa5yGEC2Yzn9gugB6GONkDjibIh0zwegpqZk5rZ57BBJIEv+Jg/PgNaA6MgIUP4Rf3TiEkSEi8sflA3PHTI/HUuhJsAxhc6kLz0XVM5LxhOSd4ujkIIGHDhX3TbMgcPXnu8C1YA7/62bNEcjW001RnkMSFF9J6iub1TBbIxHXPIAiACH5jDJPDE4Dt4JO//yqWHLwedqkB32shfgVAFiA3CvDzBvhlAirYPZVgD0ho8gz4vQ3Ulu/A1EGvg6RZqFoAAZFBEiM7FuHuWw7Dw7cOwlrpoWpysOy1yGWaQZqVLeKpjpF0k8afApKsTRObvI/i1T9/pK3CpzC323bfDEmHXVyx7PLZ4BmcvmntIxreYp26dYXGdaCROTl/lqwqKj02bG7i0d8MYWrbcgwurGNo0TawNPP169BwpAEGrZSgxQC/LgL9eraG4zzq0OQJkEeoHbod40ethTMwOqPBVyo7mJ628eBta3DNjSuxbksFg0s82ALa+vWZi5rRJ2fILOKBtzBxInhUudF98k/bnkjJe8yco+/im+43TOsM+M4MHpq0fpZ8T/YEzkbJ+0nKryClaLZJAI1hOLUJ1EZNHLl6Eh84/wX0L9ganCXot+jTIYn5WRPyOQGMYeYtw9KYBwlNvgCbPhqLxzBx+CuQhoTwiy1aIoZhupga78dzTx6E6761AjjAR1+VYczqNIB2JbgSHEqUHI2ESMCDuW7y118+fBYZijEvByv4i87bVOqxzweFWx1EyJCxgLTIb5pYIqfCqUtfMgKAGWxWYdplVO1xbBuz8PAjy9FrDKKnbxr9g6OQRRMLMvhPSyXEoRJUJfCr4bjZrn49hxKaJEE0TTSWjWDyyA2YXrYRBCNUL/LJbJoefEl49fnDcO0Pj8JDDwxhYKmPis3o7KWatCrYZhRC8Z72KoTp1v3K5+XGXz7XSa7SmDenYuX8679fsq1PQEbvxhXpW9H3glvRpdA4STp30r1zBQBDeTGdEZzK6UM0d4HdaYw1BWwinHvWRhyz5hWUKlOQssBwjBInADWC/I0BfkUkb3m3whxIaJJBt/f7Gpg4Yj2c/tHACCxQLQDAMHxIKbB5/QG46ZqjsGm7iXIZqJgyrK9WEjZvWN09PV+1ddQnBKqzBYdLN9R+/YWP7tZDMI+EBoCBS299ULBzGvsu2qkQrRq1EkfWdqQjZxsj7bLWnSRKykQgdxLU2AVmibFJC0bVxccuWI/lh61FudyAV7Q4B0jcepsE5AsG+CUK1jcUjXW7Q2gODD6vv47aym2oHbgZYAMki4ksDAlhNLHl9RV47L6DcN/tQygv9VA2Z0vIDtxtRU6pVDANRJBU2jBR/+JJeIRGZpnJGPN6lpOsnPm0OVC9jIhKefqtZvFCNfT0oicSmDIyHmoapNiVihyKNkuI1ROjDFhVkN9ExW7CgMDjzy7Ero0HobcXOGDpG2ApWhqO6GfQIRJ0EIM3C6CG/Kn02agcjHChEGHyyM2YOGId3L6xwHtRMIIQMUzLw8RYD+6/dQ2uvulgvL6pjMFFPkwl/faMvQ4xSy8dAECUMDWKj/MTpz3b+YOzmF9Cv3HzGzjkwoplW2eAA7GScT1GrpxY18p2b0pdifeMjhOJPvTXt4JvObXMDJABtgcAZhjcRMWSGJmy8PgDy7Bt00osWuSjd2BX+EJOAbEReETEGh80CPAIAZOkzzh2SOhoC4PaimGMnvBbNAdHQwdQkecCMC0HU+N9eObRw/DNzxyPtY0SekuMis1tjsEdGnmpqEzJiJinqOjtp4g0YcJB6V+dR774j50/OB/zftqe/+pNv7aO/thxhmkdC+lpdRd77FRrN/ybfrNQ6+GU1iTS1dYuGDAqgNUDeFMw4aPay9g+ZuOxxxaj7B+IgQXj6O0fh5QFfjtGYDgewBCHMKgf4JdD8oXHMLdFaEkQjonm8hFMHPU6aou3gCBaG3yWB8DFbx9bjV/csAr33T+EwaM8lG3OGM9ZPaDI5dZGHaZcrmqMoK2SzWW03wwQUbgRvwGfxXPTG+w/wtgv9aO9dgPzqkOr6L/oppeEIY6KSB2syaC4bpmz+4vGKonCaE0tDkOpMjn4VN5xTFuM6e8KyBkBuRNxqhNNATkhcPY5W7Dm5JdR7R2D9K3WhqMBoEGQvzHBawkYBegMH+LkfB168MlVYIPhDdUwfsSrcHsnIfzWU9WG4cPzBDa8uhw/+OGhmBqzUOmTKM3o/puhAtRgRfZ7+Ds+VSHndvpaZBBGb7CQMCBBOyd+/ecHzpDhjrHHzkP1Bs553u6xP0hC9ETvIerasY64QsJgkTpCmXUFWfmggaB1iOxTFBhVwCiBvAaIfZRNoFKVeH7tAF5/eTmqVj8WLN4My/Ihi2biJAATiPRruARYDFqRI6HrPTCnqpg8eiMmD3kV0vICMhfIGSEk7FIDG15djvtvOwo3XL0cRpnQW5WanpxFHnlnkGVRvUNRCzmpxnStR09RLR8K9UIKIxIQLAYja9yngc+762+ecSekTrHHJDQAVM/5j/PsvqFr4Td6o7XTaV90no6cf95hazkT34v/RAlycaQoJvug5i6QNw2QABhwJTBVF1i1rIlT3/UaDlm1DiAJ6bdwSAsEBG8CKAMsEwnNoeEHANJ025iqZkyO9+LBXx2JOx4eABgYrHQikdXfbSDHc1EoEyj7NG1vQ0IyqpHhNLjyD837vvDf2s9M+9ijJ1a7r/10LR1y8YhpWecAbKQ3Vo2h6mas9/q2+2Ba6e7I4CGw3Rd4R2QTgIRBQNlmjNcMPPHrpZiaOBD9/UDf4C4QUb4aEj3SSr5HEjp4DAPELf3JpuVicqIXzz66Ct/869VYN1zGQIVRmXFFYAd1VZTvFHJTiy+Gb/9HR7TFQikx80kYcDy6sfHAl/5wdhmbGXtUQkfoOe/6f7dK5idY+vFeYrEwiAVonuFSQMz4dqTUpQfBNuND1e05kM7SBdW3g6QDJhE0DAHjDQESjDNOHMPbz3wSvf0T8NxSy6WqzLqEbgXD8EDCx5MPrcYj9y3B2g02BvpljrGnljOnQO1AlcIz6Mbp6xyqFslJZZw7CJKw4TLfP33vV87sLHOdYa8QGgAq513z76Vy+dPsewhqIEs6AgWvxLdqH5XMuWRqsS4kiq9ZL9G1gNTBVwPUHAXcMahuRWZgvCnAwwLnXrgFa055GeXqGHwv/yDDdghtmj5cl7Dx1RW4+scrMLq1hOpCD3aLYy0yusFMSEeJrkVfFVIXRQ2+K2e+M8BKu0W/CACEDZdx6/S9f9bR+4GzwV4jNABUz7/+Htsy3x2TulV7tDKlM3FaN67mL9WCRWMDKX+jsARIB6K+HWAXrG5UCWBswsDhB9dx8mkbsfrEZyC9MvyUft2K0CQkLNvBpnVL8czDh+COmwdQXiJRMVsdxZEWAi0qsKD+8rg9QxTl5BHWH58CAYBhw5V4dPrePzulsBhziL1KaAConnfNzyy7dEHw6tYM0iWjQUTSu1MdGWlLMxbKRRpJoM8HIwY5oxDOeKQ1xgaQ4xOm6wKHH1TH+z7wEg5YuhXC4HhFXx6hhWAAEhNj/bj7liNw/4NDQEViqKwTOSXzZi5vKxW6zarSyM4IR8vQc8GceUSygDfyUJlwhHlX7Z4vva+9J+4+9jqhAaDn/GtvNw3zLLA0i2o7cx4RoPxoQzLF6kR7w7PWWNFwSgj1RRGsB3FGQeyCU3PXdVegOQWcedoI1pzyChYeuA2+V4KUpBHath1MTlbw7MNH4fpbFwCugYEemdMoGY204HpBQdJR2+0LymaKEamjRFptqclgkCjBlfK+6fv+/F0zZ3LusE8QGgCqF1x3h0XifdqmdGmBFLvdZhKlyHJW6xFZeZdNh0OJDCR+c8TxAAKxBDV3Al4NRCKTo7GGwIKSxHHH7cIZZ/8GhuGiXLZRrZqQkvDsY4fj/ruXYd1mE719DDNz6msbHbYIOap1pBunJX9hfK2uKEVjPb4anMiEw3R/7b75NQDzsE8Q2nzbP59eXb70x0S8QtvbI1ca5yOXnJy+2iKNMKg+q6XTOHfJKhmAOw5yRgHpI/JbR8Oyz4SJhgCkxEUf2ILj3rodk2P9+MkNK7BpbRXVAz3Y2gxfHt06IPMM/bxF0YPvDBAp5l7OofIFlkngfjRMNB38uP7QVz7efqbnDvsEoXvPv/6HpmVdwZ7TQgrnVGXaHFe9FDlxggZJSWeO7gXuOlaeTUoahcKfQ28MPIj6NkA6SJbdJc/2mTA5KbBiqYONw0awPYCVR4082rSjUuUHVS8nwbOmYGwoxyMTt/R06M8P0xGm6/jGtfX7v3xlfsz5x14ntLn6H97Ve9xRv2ZnSmdJu4gkKxC3StAQCRGjX2qU6Ia6bjoxdPQjINuiFwMgAXLGAmmtdYEkhi8BIfIqfpYqhfI9fQRI3viU1nsjP7LqPy7S2tSEKNxjEMQgMsDCGpFLvnTK5DW0trOCzC32+gl4ldWH/i/2aghqs8NGBWIJTaGkjNZ6qLOQwe/kkxAQOWiUyLuh7mAcxdXJrA3LjKRnxFtx+mB7AFxZDJCFRH1KymWISEIydKoQ8miOVCht8IkeH2YynUKmI6YID07OTIjIHD0jXV/prMauTbLgSXq1PkVX7W0yA3t554nyuT/6F8HuW3RddwZSx2IjR8TmGCtAMiKqjo54RV5sLGbXlOQN19EfjhJK54clWJTB1eUQzV2AOxmN5Tnlm8HjEo8cSfTcDT7TmphySyVvIFCTyaoi6yImcFi8WK9WAhERWFjShX3z9P1fvDCb+b2DvSqhy+XeS5MWSUusFLQGVJVETgXIjxZtbxBJ1OBEU8qcM52XUtyo2nMVJuXqHwxZXgQuH4jgtLBIWpPyvwWZkQoSJpvRyFLETEdN6i0xcIlJO10hCq/lnpTHkP5IEiYkWTsarvza9L37DpmBvSihq+dd+58gPiB5iTYHmqhJxta8qdm48UiVSuFHoiIGDcvq5utZYZehWKiXcJs+7BhSgo0quFKBaG4HvBpAaYOxWDJrmVJ+FuVZixqpUgg6b/pg+DwJHd0jxV2pg0CGDUn2U9M7pr7kP//Ve2auhD2LvULo0vt++HnLss9h32kdUFNak6aLJKVKrViVUFQADuMEZA79GzmnmkJ9TJhOopwqN5MfrfOtsS2QzLK8NJyMGUGw83rB4Nim9pXWlaOwlLMXXYbMeckz4lBMOYawMMEQw3XXvKb54B9/oThnexd7h9DVyscAv6xVmcayRBrHw3OOahHPxLJyARQTM/JahFcLtdc4XdJDEWFWdqrWEePkfbDZCzZsUHMnyG8EqkhUpPbU6YLrytCUcrlxmB91cX6SVuSpgDICIlFtgGBEExZciYfdmvH3zhNfvKnj+tiD2OOErnzoxr8XVukUdsMjJWLOKlZIzpCc26BK6zBH0iUkr+JL5lT89O9YumkxtFUJWaQT0JhTZLVJgExwZTngjIGcMcS6QQGplS6d/Fb0isSrA8QzmkrVZUwO7VORBmm/f7hnl4Sx2aGh/9G87zPfz6+IfQt7lNAMYNDAVezWkpbJFYP5YjGtKmizWrGagbAhCzqCkkhiEOWN8y103DzWRV84FSccLnT+S7A1CBZlCGcXIBsAjNxHpkeSQAgnC2LVESatUuQVOx79UrqatvuUWQaYRxsN54YGvvJZPFLQqfdB7NGcVs+79gHbMk9nmd6uNSFTnkzMF17550pDC6MkgLjtFNKp1mK7iIeEvCe1GTcsKQV+c3J2gbzJOPeZ0YNSJNRqoHjyKF1nkQqWqogwcvDyAgt7yvXFj9yt3nfc177yZAeF2yewxyR06YM3fc6ycCJLD5qx1YIU6nCb+EKTRtT03ZxU4m4Sq4ZpEmbJnN8ZFB0VagBN7un6uEov1kqS5C30trC9EGRUIZwRQDrxQidK/iCSrOnn5JRIK3tSBGVhUYrMZJYhJW/xYD7r0povOvef9TL2U+wxQtuG918JZk908Caga6qArivG+l9ks4TkozBkOp5KwqTRBYIzFDloUJbK3RmGZi3xtCTPxtUJlKwYiabhg4+QzJyOJ8FGGbK8OFiS6k0Fr4GFu+9EKoZab2p8ncxRrSJlLCchgiIJEAlIiJrj4gZn2v4P/6k/viu3UvYj7BFCVz949T8aVvlodmuKVyL7WlSGQ9oQHd/JVT9iSjGCxRIAfEmv+vXG/4bAaaZdOpVAy4ksO1B5chAnqqojHaolHJ0Bo2m9Ge1GJVzkJmQicPkAkBtIa2YvNhjTurFq7CJ9J0ycUw8lEGBYkJInmGiLhxnxxYAAAAZASURBVNKt9Xs7P8dkX8a869DmW/75bdUVS24h6R9YyIrIQ4HIRtTfAkwbeGkJFd1kAGRVwNLb5jTqP28cNfYF/PMXmlHc8vt//FdWyTxTsHw3mRbYdwGW4ZvKUQKRl6AD3ViVhIoPWH2VS81/XvHjx4alIukFktoZAUgoqeQ8O6WWZPUoEUyISJ7yYd7tNuRdzqNf+qf2C7j/YN4J3XPBT263BJ/NvqM1aPw9FsKJuIqHa6Skdt4DGMG6AiIw2RNuc/qHjduv+PxM+ap+4Oq/IOZPCKt0AEl3MJie9sPO1Vqn168AsVRU9aSUfquux8jV0WNhmio1y2BHJ7+G4OUHodmGsZcnvBAMfhSsgJPsQ9CEz9bWJvX/nXvvZ340U73s75hXQlfO/vFHSmXremZfaM2YaBJBJqLGSEZnRNq1pl6kdE8mgIQNyd6kL81f1V5+7Rudns1Retf33gfTvNIsV1YK9lYLwzqQIRFsWZY+SFSRwFpvLJbmWfIqcaPll0gImgsSIK8BuOMQ/jQY0frTSCoDRAIgAQgTUsqtPoznfFe+7pdXf9u9+/z9zlsxW8wrofs+dN0mQ9BBzH4opZKxNZjNis4djGb3UlJN+QQSfTk4GEiAGa4v/UfdycY3nPs/9bPdza/xln97rxgcWlkq+e8FydOFaS+F9AUgTUDE0jsw9vLHjjyDLZHXCEag1CL6GUehmPwAsQdq7ARBAgxmsM+G7cPnjT6ZDzk15w6e9Dd7L/3FvbtbH/sj5o3QPeff9D2T/E+AfVJdtnGjKWIprYZkdGXlCwkLzL7vS/GsNzX1/zXv+/Sv5qsMAFB57w8+x4Z4v2lXVhD7FWK5ECwPINMmZhlIcc2DEqnS0VZYkURP1l5ntjBAmsjBovmAwaHvhwTYb0qQsZNhDqM51vDd6aek6Hmyee9nOzrg/c2MeSG08dZ/e3/PsgXXgngByaShE0mUWjMRf2NkjJ9YRFPgL/W81+oTU//q3ffJf5iPvLdC5fSvL/P4gHeSTavJrvSYJhYL+IdD8hCA1WRXBUVSnDkge3oqPFq5lzJ7I+JGLjXpTE8wsAUQOyXROunRTm7WJtiVr7gPD14P2u3TG96UmBdC933ounuFaZ4JvxkK4XxrPz28phcbcfR6DwAme703vuvr9Xs/82/zkee5RvW93/sQk3Fy8EsCMEwirjLzYjBtkMRSgDyAiYjqy3515TfWEjnzbqW/yTHn9Vd613c/Ux7o+zZLP5DDCkEjZIgcXVeHZALIKENKZ5PrG7c0brn0D+ffJ9PF/o65nVhZ/faFpaGhL8N3E6Ui44oKoM1whX4tCodiGAYgecRt1O6o3X7578cRuuhiBswpoSuH/dnfkfSOjNxd6kxemtKZPZ8ZYMMCfHfac72npm/92Du7HO6iU8zpO4W28D4FlohecNIIrP6JZwVCrwAJkFGC9L27p0cmL691ydzFLDFnErr3ghseAViw9FILdcK/oftKW5BOFgDf90XpCXfHlr9qPvL5W+cqP138bmJOCF066//+jZDyJIZ+amwilZX1DQQAAmRU4HuN1zyPf9i4/cN/PRf56KKLuSA02T2VK0Gw4n0W47eGoUzzAtE7dAxsdKYnvtO486r/OQfP76KLGLtN6Mq5V39XCGNFvC8dp/TlcNEGGSWw7+1wPfeO+u1XXL67z+2iizzsFqGtY/9+jVUqXcKeqywfVmbGomlbo9Rw3OZ19Udv+ypGfrhlbrLeRRdZ7Bah7RUHfRvS7wvEcuR3DmcFDRtSetMS1l3T9/+fz2P0zo1zkuMuumiBWRPaftcP/8Q0+O3MUl+ZQQQiE57nPuBMe992773sP+Ymq110MTNmTehyX+mrTEyQ4ZJPYYKllD7jZW9i8k/mexVcF13kYVaErpz9gx+TEIvYdwKJbJTAnrO2WW9e17z7E/99rjPZRRftomNCW+++9uO2Tecyy2CNrihtdaYmvtm46xNfm48MdtFFJ+iY0HYPvkh2dUg6U1s9adxZv/nDV81HxrroYjboiNDVc6+5yjDtE5u1iWvr67f+LV76s+fmK2NddDEbdERoz3Wm5cS2dzYe+uLD85WhLrrooosuuuiiiy666KKLLrrooosuuuiiiy666KKLfRX/D5o9km22PVoAAAAAAElFTkSuQmCC",
chlogicon="iVBORw0KGgoAAAANSUhEUgAAAgAAAAIABAMAAAAGVsnJAAAAD1BMVEUAAAAalv/5+foAAACLyf+54WbPAAAAAXRSTlMAQObYZgAAAvdJREFUeNrs18ENwjAQRcFIVGCgAagAlBJw/zXhAhJtLmutrHkNeDWn702SJEmSJEmSJEmSJEmSJEk6bJ/VZ6vZfhIAAAAAAFgd4DbuarN6jMe2YgEAAABAOwnA8gDjnm+b2LP3XmoOAAAAAEA7D8DSADkDIAYY/UrMAQAAAAAI7gUAIAegl5gDAAAAABDcCwBAEkCJOQAAAAAAwb0AACQBlJgDAAAAABDcCwBAEkCJOQAAAAAAwb0AACQBlJgDAAAAABDcCwBAEkCJOQAAAAAAwb0AACQBlJgDAAAAABDcCwBAQn1UYg4AAAAAQIsDAGB+h3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0mgEAAADAFpcPcH/n9AIAAAAAAAAAAAAAAAAAAIUBrrbsd/hiAAAAAADgz54d2zAIxAAUvRWibOANouy/WzjKSEgWuuKw3++oQK+yDQAAAAAAAACgFkD7dRhAnAEAAAAAgNUBAAAAAAAAAPYGmMWs6yAEAAAAABEBoDVAprJn8WQAAAAAAAAAAAAAAAAAUAvA3+E4AwAAAAAAAAAAAAAAAIBeANnKrsPJAAAAAAAAAAAAAAAAAKAWwO11GAAAAAAAAHg4wLrL73wCAAAAAAAAHgXQfg4AAAAAAADNAZLVvQonAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4z8AAAAAAAAAAAAAAAAAAAAAAAAAABZ0vOnz2qv38U3jKgAAAAAAAKDwOJAYAAAAAAAAAIDFfXdp5AIAAAAAAAAkSZIkSZIk/dqDAxIAAAAAQf9f9yNUAAAAAAAAAACApQBX/CrLQZ4PsAAAAABJRU5ErkJggg==",
nearesticon = "",
crosshairicon = "iVBORw0KGgoAAAANSUhEUgAAASwAAAEsCAMAAABOo35HAAAAclBMVEUAAAAex/r/KAAAAAAPZX8ZqNMFJS4XmcAcwPESgKEMUGUbuOgIN0YdwvQbteQEIioDGB8Zq9YNWXAGKzcBDA8cve4Vk7kJQFAHMT4artoYos0Rd5YPaYUOYXsKSVwUh6kQcI0MU2kDFBkXncYVjbEUiq08MseMAAAAAXRSTlMAQObYZgAABCxJREFUeNrs3etu2kAQQGGmawrEGBts7pB73v8VuzZWK4QLmVaI2fU5v6JcmNlPCZdEgQEREREREdG/JR0NCCywrgSWIrAUgaUILEVgKQJLEVj3rQtBj9UTSrDAagJLEViKwFIEliKwFIGlCKz7Jrf7f6yOgnyoBBZYp8BSBJYisBSBpQgsRWApAsv3KARLWN8NLLDAAgsssMACCyywwBJ51B8swAILLLDAAgsssMACC6zuFZgR+UHAMjYjmoOAZWxGNAcBy9iMaA4ClrEZ0RwELGMzojkIWMZmRHMQsIzNiOYgYBmbEc1BwDI2I5qD3HGG/C7wg3zzRFYvGiywwHr4RYMFFlgPv2iwwALLzvrRTAt8fbDMTgt8fbDMTgt8fbDMTgt8fbDMTgt8fbDMTgt8fbDMTgt8fbDMTgt8fbDMTgt8fbDMTgt8/XtOu/9TW/7o6Prc619r4GxggQUWWGCBBRZYYIH1cCx9eqzHX4r5wAKrCSxFYCkCSxFYisBSBJYisIiIiIiIKIbkZrG+/NX1wOoxVuJ8P4dyo/GTG4F1CyupP3YDa/gz6QfWdYYW62pgtYF1VovVqKzWVXFMxbdd5K54XmXp1NVN0xPayE22i6Ja76Ruud+4av05nrimXmG9l67ubexRCne6KrvA2lTOV85FZLZ2TaM+Yrnycynz6fuHZIv3l0yy3XH+58ewxaoOM1km7lX8J7nnuWTzZNTHH8O8UZm4L/+ufCdNF1gT8Q3zReaFpjOp6+l1lkjrsXf5YVRTdGPNpk9j/3Yr1HesbJ875/IX6cZKa6yJf7up71i+2epYVKu/YPGddY7le3EHkSTvxvJCa66zvEf69pV6kqSmeXWHTOQSq7k13J5uDbdluesFVvvY8Bxr6prqb52PormfdYkl8/azRt6tJ/ezurBkmJTObfZL8a02rnhbdmDJ8nXjqudVJpIeC1f2AEsRv6I5CyxjmxIREREREfFPAwOwOgJLEViKwFIEliKwFIGlCCxFYPHEPTzLEVhggQUWWGCBBRZYcWEF/nT2vNLAwP60wNcHy+y0wNcHy+y0wNcHy+y0wNcHy+y0wNcHy+y0wNf/1d4d4yAMRDEUhPtfmgKJEsUCKV5r3gHi/OloAqzatcNfH1bt2uGvD6t27fDXh1W79vxa/et/3YAFCxYsWLBufzQsWLBuf/Qe1v2HnLgxcwisso2ZQ2CVbcwcAqtsY+YQWGUbM4fAKtuYOQRW2cbMIbDKNmYOgVW2MXMIrLKNmUNuwPr98/jBIeFTCj6PDwsWLFiwYMGCBQvWgVjn/P0VLFiwYMGCBQsWLFh7WFdrwnq0BwvWO1hBsIJgBcEKghUEKwhWbf/BmuGABetCsIJgBcEKghUEKwhWEKzeBn+yfIIVBCsIVhCsIFhBsIJgBcEKgiVJkiSpuBfSYXR+g2QEUQAAAABJRU5ErkJggg==",
afkicon = "",
cringeicon = "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",
surfaceicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAS1BMVEUAAABycnJdXV1GRkZmZmZNTU0AAAB8fHxXV1eMjIxTU1NLS0t4eHhVVVVqamqIiIhubm50dHRjY2M/Pz9gYGBDQ0N+fn6CgoKEhIQl4dZQAAAAAXRSTlMAQObYZgAAAyFJREFUSMeVlW1zozAMhE9YPr9gAwmhyf//pbcr4zgzHaY9fYAQ9EirlZv+uYi/iItXV0AINwH0P8ASwiqAfg2saZFbSg36GRApKT1DENnWtIYA6IcOrB2eqxSI225rAW/QtSSU/wqIIiKqwiiqgC4ApFOTkBFGSKWswi8BfQdUe+0i72DTYcS3PaB0km9R2ot16dCQlFAbcnoEua141OXVXoQtlAHBVhR6pdQEpUSC298C45kSKq3mOyxviE6EOKVY9norhTVkI4rEdHaS2XdEJ0CbELrx3VN16X1Xjn7Di1Bm5+aOkJn0a+WwlIaQ12p9i/ml5abOOe/dG1mEDN7ZQlAe60zpZX0TRtfFO3d4REdyhKpFqckWv+DRnC3E07P4GHPeP5EtThOy7o1ZzTrrgLG+wmva5xij9zG7NyLLfcp5g7hMqpjAG0fHNpB9eBL+c3yeknudGCJmeZGCZiWo8xWZ3oEAEPcTmQSijDGz7Vrowors7BBIJxDr3JHpIRRFq20mfEEbCMSIZKgy4Nj7LKIPtfRFcIPGDEi9AWySvScAm+cubMMoxlg+P/MG9azrZs9GFcN7GDG2/2buOp1PKG11cbXFA6hjL4PAFHeObwg7eNcJX/GYB0LAIj9EBKCqPzhDBwzFijqyiJwOq1YVegakxtFibsRAWH2zJm10QkBqRDYz52PnDQb6NzKChj3Qb8tAmiC66wFYu75KXVo+2JxVF51yzEgmwZgzAXs8EWRJl7Vkm+ledRCe4SrP8j4coxjzSYQdN5w0HwfhfLVR6tgLNcFdoISsXwbRHdsPFzMX4zpyjmIzUBs64QYin6vfjxPP3eQxyiPjci6IJ4RpFVuHz4342L6cEA61bEAQvua2vww22kxDmDlFyHLtk8hGJf3kd2TsZVJLV0OIK4Kp7ozo9rl61xEwgHpQFiAiDNcDBvPHgsQ36NHP5yBYnfOfwICidAKxbTC4HV9wpAfwCcny8ZdTj6bHNeLyv2XbPg3kz0UGwOjANSTGbdDfFlM7cA3ZPIu08ff4A/DhnhpxdOBnCNpIXABXMw3g19Al8A8nSSuNs7d7EgAAAABJRU5ErkJggg==",
tnticon="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",
killauraicon="",
gamespeedicon = "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",
lightningicon = "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",
safeicon = "",
portalicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAA8FBMVEUAAAAAAABg6QBq7gF29wpl6wBn7QBe5wBs8QR09Qlv8gVy9AhD/gA+/gBA/gA4/gBF/ABq8QI7/wBF/gA0/wBt9QZp9gVK+wBX+QFk9wMt/wB09whB/AAx/wAp/wA4/ABT+ABJ/QBf9wIj/gBw9QZc+AJO+wAm/gAC/gBy9wcd/gAK/gBm9ANS/AEW/wAO/gBn8gFb9QAS/wBs9wZP+ABf8wBG9wAa/wAU/QBK9ABe7gBv9wYy+wBB9wBW9QBk8gBj7gBQ8gAg/wA9+gBO/gJZ8AAr/ABi8wBM+QBf+QRV8QA6+ABW/AJi+gRo+gdb+wOAEMuQAAAAAXRSTlMAQObYZgAACZ1JREFUeNrs1rFqwzAUheEasugBnEbcxTW2wYMmjVqzGOzk/d+mR/cqhkBFWgipFO4Pxqs/jgT+0DRN0zRN0zRNe9ea1EftKaS0qoc0qUOqWpBCSustIAzIVBVGIaVVPaTh8ohqLr5CSqt6SA5QHUghCikEUBzoBwgRzTNVDwEicDPVDKE5eO8vyPswlw5ppPsldseFEwrd+hMoh3oZhCgytpSMgkiqB8IOu21LjCWXo9wW4UilQ4j4WEFx5SBB9ohVPB60W14PaTId7jOGZjRExxYR63pFmCZKJGDaFppB1jG/O2aZng8RhTCGcLRLRKzOrYh3GUfLiYYxIiFTFMQgdoQQvLfLeIXCnVkimFPf48L0uwYUXoVAMcVAoOAjFVrv8ZH9iDXOMbdTulHqkUVyxoYkeQXk8f+TodsYzLD9eMIakktN0yklGJ4FlDCwJEt5DHwaxBA7hrZlhY2Ozk3nr3vIp5vw6rrdssCSKCz5b4gRBsZgxTcx9ttcRhhFAXw6mXZ0CRuVMhlFoqVFBUPQBk20SMz0+3+cnnvP8+Sxs4v+2WYP1jQvyi/n3rXy8PABjkbjEvnu0ig2TKyGFN2VT5QkCuGKf7VtYJvhKDWKl2/evNmhCKuoMRalPEDy8y03RSTPAHm9N+n37zFUHCkgoKjVxJHJGMolDz6CIz2KqWkrLAX/yes/zV8t+zFGh4wSGFjry0z2FMlmoGEyftk3MeWQgl1xkuQg6TQgZJgywIDDL5/m83lSBKNH3xeRs4DCUpwkEQgd56iDbfRLJTnHFouXdORyQslmM1nRZKUahhxSKHmgJBEIHZwqYbCMDUYGv/BMFoxCzlIYShzFlsJOFJJOCGK3QxlaRlFXulw+zRUK7wqFAimM3ReXS6TRkE4erCQRCB1giOOJkSnDkYfj4p2hACMcXZYwRTrhcCUFkdMVx8rWAUUmU5YTVg4OhBRYJJloie6JqyRWyHFMmmvegQOM4bDBMhA97eZzcFQqFVJgkfAUFgwlDUiupJLz92nkmSB0cM+No7ERR8Y68nkppNJsCoUWBJAoiS8SVpIAJOjYFKMclWbdUcSS3ycpFnHmergSCCXPBmEhdJQ+mzqCjgs46vf1ulJYS56S8HCxEln354KkGShcH1hyOVFlJarIFdgHHAhaaRqKORdng4EMnexsCSi/mxgg4uiYufLLcGjgAIR9gNGSoBVaCMlHQXwD6TwzxBVCBxJ0rCoCaY0lQsG2UKKdhCCZ5CCukKK/Uwgd7yqrVbN5r5AubtoKKLLxeyGfE4F43vk5CumXahvZEA03HRBdEBQCSFeDVmRXWEnEvr+xO9LpnJ97XvpZIW6ynAMQaQQLAodOFhSDwUAsKAUQ20gQ4icDoQOQqytOlnWgEW4IHWiEDkRbeaoEjjCkVOJkWcjrw/f4ICgEEBbC6K4DUqnUkRYyDkjq2HdpJCSxhVjI8ZD6rxAPSWHV+1qIXXT7SQiHIgihg5IWJNh3UMTiUsauF4e1D1frjkhemMgr7b/j4cUIQSHGsXuJJdsBRrc7mUwGg2sNKK17M1xwEEKHQBrDWp8Qz0GiETzI7X9B8gZSv5ctH4MhuRZJG5LJOBoijs2wVupfdXTZjzdiO4lztKIbGdNAiKaNSsb39TAEhfiA1GolFkKIe62IWzqGRjwmlTrrLEb9uX6sn2roMI3IZuxI2ggk3SeISGyyApFCRutO7wUSeL0jiQ0y3AeRFmwfFjJuhSF0bLAh/fW6F4ag/vCdzzFBeh1AeNYKQ8YDvHk1WMfHjx/bg+64DohIdhxldcy1kLPjjVDB57ggo34UhDty3f7YRqAgQyCTbkuuU2hBqtXqqW4IHYtOLxWGhFeEiBgaoaTXWQtk41MSgNRb3UGbkh3H9WTMCy4DqSLqYCEL+6aON0JEbJAFZysagkp0nITAYNnl/BuC3NjBioS4vXAPauIYLc7WYj2ahyop6JJIJZQwphAzWc6x9MUx54IcbMQxeIihEQYQna3aJqoSrLtK2rsOFFIPFrJc2rkarXtnRxpxJltIXJAeZ2tzU7YSOFDJhUpkuq53HLhCYSGEVJHtcoY+hvM+FmSxB3IoMUFktvQzMSDR2brAZbxeMD4xpA/nAEL7mM20jz766J0lBGEl675Ibm7sdOWrVcyWfEOsq6Qt0ess9hGAoI8b41jAkUoKIhKpBBKBgLJciqQqw7XSP6Lg2lcz0S+7zqF1iGNam89HOlepVCIQVmIk+nXXp6QqKdxC0myyFAQK7WO1unh3e2scM+ljzj0/vB8pPgX+mYoHwpzJmoxUYkpZGsnt7QppNluMMppNOlRRFsZ0yrH6nf04cQ8eiIkHQgmnSxfFVwolaqnbQIHgh3aohDG9s+txaKxS/2+0whKWgnenrSiEkiazUgZCBhxQ3D0+gqEOzzvSSPyQVCAGIp3M76ZTSGazGd7q1pbCELGtbrdbUSgDjh8/dK56UYjUkZx4J/ocE4SSJ8pw17Ld3u4EiKACjC9fFtyPvRDP3HCPvMUEcRJZeVBkwIbTm6lYZlsXGhAgyKDj20swzlIHG6GHCf0oPggl8sm4puXx8Q4zxmYYChA1sAwowPj27dUrOA5A7O89qos4G6EEgYQDRgsw4ARzN7UIKoSBHG7DaSTBoxdzI6TQgloU8wMWaODRUAADEY5xHOI5hWsh5kaiLar58oPhe2dIoAEK5uTk9xoJK3iIH+IsqvkSGRqoIOMohIaowYq/Eedw+dXeHe02DMJQGNaKyNCeKu//VKNCyKUmgFWrYHL+ZEnVKSSfrFzsasdx5h7n6YvnJ0QLQjk6l0enPhFuOVhc0YfQI9cZ6hCuYc/LvhBOxP3F8/NTPqaP+hCeo+Jf144SQVygiVAaE3ED/bzkYkGAcLVCZY3ArhdDQnsrIekpZBC+JP+qB9GfCJPIJnIlUYHIJlIwQuhAGvN43zlEeSp0A3o44TT4G0IAkilA+hNpT7EBCYPbnIm4MDiRcDWSdSZSJJxIZf/yROia7u9FAQLIXhC6rgfx1Z/yYAIynN8C4jeaiA7kGKiOSdXX84dPO52re9zintdZECIKkP0gckx/HUAAuSuEblhfw8c+QQACyKoQepCx2I3Z9bIAAWQ3SL75cghAAOHrTMfkawAB5C6QxxfLCEAAsQJpYGwhAAGkzBzmCgEIIFYgLxjbCEAAYeljfhUbRQACiBVIwqRMIwABpNJKL/4yCEAAYc198af/pyRAAJkSgcwCAFm1bSDvILMAQFZtG0jOPACQVdsGghBCCCF04/4BGy9+TdG42wMAAAAASUVORK5CYII=",
stubbornicon = "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",
towericon = "",
turnicon = "",
hovericon = "",
aerialicon = "",
violatoricon = "",
blindnessicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAJFBMVEUAAABVVVUhISHBwcH///9SPYlgS5kgD009PT1HR0f51NT5traECq24AAAAhklEQVR42u3W3QqAIAyG4fJnK73/+23fDDwKhOXwwPdw9ICUWcfanYMZiIIwkCIDCYNt8kWOt3kEkxiTFKOyCaRdnjNJOTf2LwFICYAZc2ZBUkd20hcFcElAfXF20kDSiABuCYgIs1KAZpNaDcThjjk8ff+d7P9W2k+YfYzbic8X2eXvYukenHAQlQiyq7QAAAAASUVORK5CYII=",
nauseaicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAV1BMVEUAAADLyluGiCqWpDZSPYkzJBFolyiDnzBlfTR6jTXV11e5uFb///+5u0vMwWIhISGqqkqZmTPg3HB4fCHMzGaqqjN+gyIqHQ13aiNVVVVpbRdoZB5CKhInB6VlAAAAqklEQVR42u3WuQ6DMBBFUY/3jR2y//93ZmyoUAok9CSKXGk6n9Jji2v3PNgJUkF3oIpOkO5gf/KLiF0AwuC+ixGMGPPhkIQoxnGMXNMYgyEpESWu7+dZcRhClLPWxGmdc0oYsixEbfvmYrxxGDJwj61hkBJDXpz31jrnvZTThCCMOOeUsjaE9YoBSEUhuFoBSCKE90phSTlsbQEwUtE6AALe/PgXGf+7uHRf2gtzGcBEAyAAAAAASUVORK5CYII=",
newnightvisionicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAIVBMVEUAAAAmpyYzMzP5trYhISG7u7tG2EZVVVX///82wDb/zMxLldaLAAAAkUlEQVR42u3WSw6AIAxFUQHBlv0vWO+gceCEpDRi4hvZhpPQ4G9bO8dgPIRiHwjrPGQfzE/eJXRJHKGTUruSkrG5hEpEtTWuYCLG/MRArSIszJl+zqqgWkFzCFsieoUugdPrHTSTsMwInF4pXvIcX9XGh9v4cwihurcGtqN0kKg7Of6p/F99HyPxX+T4v4ulcwIoHSElqDEGHwAAAABJRU5ErkJggg==",
newjumpicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAFVBMVEUAAABVVVUhISGvr6/MzMzu7u7/AAAasMQuAAAAm0lEQVR42s3WwQqAIBBFUaux///kurh4OG6E3kAXIowOqAjV/t2x2RfC4NyI9z6QCbTUhCwEcKVATgKI6ClQBeEZEwTcNxfIRYjxOkE3IYGxyQAvESCBOiLmJQIsvPeI1oQ8ZByT8Xq8ceeJjwCYCGBaOgGsBLBusIto+cAErIRAOvZUSRTISISmOJp2AkrVkDUHqf8i1/9d/LoHGWYP6RxseQ8AAAAASUVORK5CYII=",
newhasteicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAIVBMVEUAAAD4tCBVMxEhISH/+YhAWVr/31YiREQ/Ig9rPyNVVVUeqn0bAAAAmklEQVR42s3WwQqAIBRE0bJM7f8/OCeQu6ggcIzuKo0D+jY1/bv9ZT1Ei+VFJ+ogbGut7lEfAWy1tQZzEtA8b2cwJwGJCcLcBNaOmDPIR6ihEQSQcylCGoKfAHR1oTEEoGeO5iQARu0mgLZm0A5yBSAH4WVKADcBxJgSAOQgT4C020803BAARA4SAsMdRYQAdjL+i/zJ38WvOwCFhR/FsRkSiQAAAABJRU5ErkJggg==",
miningfatigueicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAANlBMVEUhISEAAABVVVWXmq+vscHX2/WgorSChJajpbh8fo/R1Om6vMyytcm0tsWLjqGHip24vNSGiJo1D7Q4AAAAm0lEQVRIx83WwQ6DIBBFUSxUAUH0/3+23pQdGxp4pndHMidhN2OWn3uSvDobITxMR8yNENOZhiw1HQGkdJ7vO5CCAKwtZbsLAaQggHW19jiua9uUZN+/SEtizBlUSko64n2MfM57wHwCyNnWAPMJwDlGCTCPtMA0jZMWCEgDBKQBGgIIwTnvATJSEUBJCKAmJCL6jfzYdfG3x9UHBJILxQB2dmkAAAAASUVORK5CYII=",
dup = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABsCAMAAACrb+cLAAAAdVBMVEUAAAAAAAD/4wD//wD/8QBwZQB5VgD/6AD/wwBEMAD/2gAgGwD/+AD/7QD/0QDYvQDjogCWbAAuKQAwIwA5KQD/8gD/zQA1MQD/+QDtzAD/wgDcuQDYtwDItgD6sgDVlwCdgQCNgACjcwCTcgBNRABROQBCNwCpW6+IAAAAAXRSTlMAQObYZgAAARNJREFUaN7t1MtOwzAURdFeFzAktEBTCO83/P8nks3getA6qtpUqtOzPI28dRTJE5FetoYi444YGly5BQzlR5rRLNlH5A4BM9xioIj9S5GqOzFF3JCRrsGSuBIpbkkocom5awQXcYknmFOk9IjhB68IOfd4wDcMipQZMfeICiEnugBzBUdiiMe2JPuO9EuvzDPMKXL4EUONN5wjmWPd1XOk7yq8oIZh60jkbBjRkq2XuAYXSD4R3AxTvCN994sFDPnIcohI2xepiXRnp0jbHa7KRNDsdwmGWbL6TxLLOUOKnGCKU1jOBIookrVBJHuhIooooogiiiiiiCKKKKKIIoooMtbIEjfuCx9oochoI/0UKTLyB8N+f/4QbgKYAAAAAElFTkSuQmCC",
biomeicon = "",
jumprunicon = "",
laddericon = "iVBORw0KGgoAAAANSUhEUgAAAcAAAAIABAMAAADnC6FpAAAAHlBMVEUAAABkTiqsiFKOczxbRiWkgEppUS9cSCVDMxtJNx3jns6AAAAAAXRSTlMAQObYZgAAA8VJREFUeNrs3Lttw0AQRVG2wBbYAltgC2xBLbgFt6BunVneF8xgAVlkcG464OdgwwVmyfboK1oubose0RIBAjYBAgICAgIWAQICAgICFgECAgICAhYBAgICAgIWXQ48m57R3nQ2bZOd0R6t0RkBAgICAgICAgICAgICAgICAgICAgICAgICAgK+gGvUXYCu/9zRtEaPKOeAgH8CBAQEHKeAgEOAgICA4xQQcAgQEBBwnAICDgECAgKOU0DAoVsCsyN6RsvFHdF3tESAgE2AgICAgIBFgICAgICARYCAgICAgEWAgICAgIBFtwPefYHqGa0RIOBcgICAgICARYCAgICAgEWAgICAgIBFgICAgICARdcDuweybbJ9su573QGkBxAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ8AXsXpjzY7J3L1Ddom6BKiAgICAgICAgICAgICAgICAgICAgICAgICAg4G/vX1Ca3W2BKuBcgICAgICARYCAgICAgEWAgICAgIBFgICAgICARYAfB3YXjMul9f8HCDgXICAgICBgESAgIOBPe3d00zoMBWD4rpCXDMAKd4VKyANkhU5wJVa4A/jF26IESMuRsFVRQXv6/eURIT4dx6StcAEBOwECAgICAnYCBAQEBATs9PvAJTQ6oPTaB6bGlkFPodEBqoCAgICAgICAgICAgICAgICAgICAgICAgICAgCfgFFpCP32Aamz4+w0CBAT8OkBAQEBAwE6AgICAgICdAAEBAQEBOwECAgIC3jwwNoVa6M+F3dwBqoCXBQgICAgI2AkQEBAQELATICAgICBgJ0BAQEBAwE6APn8wtIRaCBDwsgABAQEBATsBAgICAgJ2AgQEBAQE7AQICAgICNjp94GjfziMwL+hp0Hf/f5LD3hdQoCAgICAgICAgICAgICAgICAgICAgICAgICAgCdgBI1+wGHQMfTdA1UPodEbtFPo2sDn7MDDMfQvGdAE7x34kn2Cz8fQS3ZgtiUKCAgICAgICAgICAgICAgICAgICHjzb5/d2wGq/0PpToi9PrCeP/IB5/wTLJ9GmA74ABNsrZweCYF1Ve2VfMB2PsKES/QBrsGzXbSV5LtoxiU6tX2ESZdobXsl+S6ac4nOrW6ujZfxZntq+wgf4BrMeLM9tbrCSitJ/9DPba9mvQbritt4OSdYWiubMfGziZWX9VZtXuf3YUz5hPeNVlpN+oR33mU15xLddtH3SsZddKrJl+i0qjZj3tdkyvq1lvROprzvMUmvwXnjvQnv8qX7V9dCGSmGa9URAAAAAElFTkSuQmCC",
saddleicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAFVBMVEUAAAA1FwraZizvfkqYRh5/ORkAAABxY0ZTAAAAAXRSTlMAQObYZgAAANFJREFUaN7t1zEOwiAUgOF2cbZGPQB6Aj2BEQ/Qobsu3v8I5kHkNQ9q49jy/xMJ8G3kheav2i61zXexsLDKKbD3qVsAsbBWaLVBuJqcdI6ghIWFNfX+di5lLQV9nEtYWJVbnaYXbCcFQxcnYWFVbhUGl56dCQtr2ZaX7kXRmewcwsLC+nYYJGeyYAAecrIf/YewsKq1MlbBHEj1+gixsJZtxQLotTGgYWFh/bQGrXi3xcLCmrRMdv8tvWTnGJZYWFiz5dZTVhssrLosBRssrJqtD24PBsrk1jKKAAAAAElFTkSuQmCC",
smoothjesusicon = "",
jetskiicon = "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",
camicon = "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",
longjumpicon = "",
fastfallicon = "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",
mapicon = "R0lGODlhrwCvAMIGAEVFMFBQAExMQImJYNPTlOfnxf///////yH5BAEKAAcALAAAAACvAK8AAAP+eLrc/jDKSau9OOvNu/9gKI5kaZ5oqq5s675wLM90bd94ru987//AoHBILBqPyKRyyWw6n9CodEqtWq/YrHbL7Xq/YFFhTC6bz4UwEs1Gq4/tOPltlMvpRXscT9S3+UN+bIBCgm6EQIZniImKZYw/jo+QMpKWZpQnl5tpmSWcl56foJKiJKSlpmKoiqqrrIKuIbCGsiC0sbYeuH66u7x2vhKbAMXGxwAEysvMBJu6xMjIzdTPttHSxtTN1rLY2cnby92u39ni46HXl+Da6M7q3uzt4ejkqubS7/CW0PPt++6ZyjftnUBRBI8FjMdl08I29CLWE3ewiUODcSTSe5j+SspFexk1guPoiMpHiiFF6sPYb8rJbXJUnmPZMcrLaillugPZ0uMlkmd0FuRZE8pNbjmFAq3l8idNNEIVPm3V1NLSMlF3ouxp0ylRqFknwmSo4+g+ZgPSql07QIDbt3AFRDxLd2tRF2brst0bt+/cuoDTcX2Rl+5etn3j/g0MuOKKwmcPr00MdzFjuo5VQN4nWS3lt5YvX+1Vyavozmk/uw0t+ivVGJvfoW6rmnXrsYPxmr48W7XcjbdH65kRG13v2sCDu2YKezfj459tKxd8t0VxcdApS5/Or7oFyNvphu8OFiD388uGOW82ft/4mMnRc1dv9V17+/Fxs7kvvy7+fUnu5cfYe0mt1N90/zkSoHmtEQiRgAeKlqAiC450m4P7QRghYxMaUuFMDWpIXXkWbnhbh4J8aKBoGJIIookSRgCeiOLRSF5QNsL4Dop+qDgUizbCx6COHMq4HjP8idMijkMSCZgEAUQp5ZQBBBcWAL7NZiU9vgVH5ZdgTgllmFFumVWWqJkJTpe3kemmlGOSqaZQaHY2pzRstvbmm3GGeadMdUr25zF5iranm32COahIgR62aDGFXnYomYl++ahEje51aaSMTRpmpVReGlGmbG2qmpeefgnqlKJyqZqWF7r6GaqpihnBm622Q+paps7aZq22QoBrrGe+miaxa57++iuwUa4qZa7JfgZriLoqqyezzXIwbIQRCRmVcHbwKcO2B3ZboEzgyiFuDOT2Z+6DWaUbx7owtCvfuxnGO5Uh9L5gL3r4uqiTvG3068K/5wXM5Lf7CmJwCwhzp7AZVxLMxsMsRDzdxFiFZTEaGK+gsXIck1Fxw36ErMLIl3qrFMp6qJwCy8hm4/LAMIeLaA80G4cap+wFOe/OR/SM3c/WKil0wUQbYfQ22SXmo1TLlSGzD09TE3VfU2ulH8hNF5F1M1vH1XUx4F7Ns5vBlQ3X2WLhxDSlSIyNFtK+orOkGWrzYPcybr8Fd9phE/G3MoG7NXjOfe9wOAGJC7B41WThNK7D45FPbhfYdEvx5nWSYhvAF58fyZ3oo3tRen0Rok66m6B3KvrrZMYemOuqw276dLh3sTqAG/bOxe8KBj977rXvrpzwWxBPofHY0h6m7YAxj8fj1guzAPbHa+8A99F7/z3byzIr/vhylg/s+Q2Abz7725N/bfjwH+D++vXbL7+h3cN/f63501/65ve+AN6qfwYkQfYSCIIFMtADDnygthAowQ9EsIIZuCAGL6DBDVaggx6cAAhDeED6kfCEKEyhClfIwha68IUwjKEMZ0jDGtrwhjjMoQ53yMMe+vCHK0gAADs=",
cflyicon="iVBORw0KGgoAAAANSUhEUgAAAE0AAABNCAMAAADU1xmCAAAAYFBMVEUAAAAAAAD/AADKAADZAADAAAC7AAAICAjFAAC4AAAATtKeiACmAACSXECchQDNAACjAABRMyUANuSRTzcARL7bAAAAMtISEhKPgQDSbkrYdFB0ZAAAjf8AY/8ANZX/9gDJffX0AAAAAXRSTlMAQObYZgAAAhNJREFUWMPl2Ntu4jAUheEue2JMgCQUhjPM+7/l7FNrFPXGB6mo/SXI3ae9TQgSbz8gAI0gfq3XazSZKYKwJhpijK+s4ePYXk/zzTR4CoT9Cg1WPQbCJkqpeguiNdqSLoK9okY1W9TDOQBtRus6us3Ia6F1nWn1HuAM01BnOdWcNZZzZKn2aY3FGuBmjeXa3IoxVmhzrI1mR6da19VrnWl0qdbGUTWggTaqBlRpwJN2uZjmi++3xcK0xcI072s09ujNtJ2v1azzBbsda86hXDuKdTyezzvVih9LIEuxpDnuD2pmS5pTrYQDS0lLGIUajQxb07ShgBPPDMHiBzbkc3DL5eypRJhoBRympXGGiWbYalXDJcy0Mi6EYJqcmkQY1QPZP83MhTSathKt7wu5wFjSDOvfkat1su3X2Hs2F+ij6ILuOddyOYQgXDc7tWFIWDbHD/HJsL+qDcWacaYRN7CmWAHH+TgJRg2i9QUaceZF4lSTRanbDSjQxIvEKUar9ty/2z3bQzAvej9NrNkdcjrt9/v7HSjRgvfMJYw06nC45w0n52bc9WraiWKMKvh+UV652WgHvFVwj2uftINo2Zxs65V7EAauQBMOzxwevQosCpbtbQKlHPAkFGCsbdhjbDMDCjUgMFavQTS6EFatYbvdioINa7WYlLR6DoSY1ugPS8y0+o1Ja4RprWbT83u9P3y/q/8PcixJjFtfSQAAAABJRU5ErkJggg==",
crouchicon = "",
stepicon = "",
fovicon = "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEBCAMAAACg8IvxAAAANlBMVEUAAAD//wCzaxmVMwDYrib/wQD/+H4oHguJZydCWVk3SkpJNhX19fUA/xkAdgz/////AP94eHjGCmaNAAAAAnRSTlMAQABPjKgAAAIPSURBVHja7NtJTgMxFEVRV5E+dNn/ZmEWeIAsqyKlwj93nMY++iPLbu2tFS8AXqL27wMAAMCXLtUByk9AQYAG4NqlOkDFCXj/rDRA+QmIpuoA5SegIsDlOv81Ab73Gi0FmTu10ebBzlH7q6k6QN0JmKbiAOUnAAAAAAAAAAAAAAAAAL+0jw5Rb327aBvNvUZ/sPcHsR8AAAAAAAAAAAAAAAAAAAAAwP3PB7a9DzwNtotiPQAAAAAAAAAAAAAAAAAAAACAdnOQYzS8n6wN1vk+AAAAAAAAAAAAAAAAAAAAAOBnvQcO5+gYPUenqN26TdQiAAAAAAAAAAAAAAAAAAAAAEAbvdAwR6MbPkQAAAAAAAAAAAAAAAAAAAAAgPUBjL5nOEXdCxXZ2k6AAAAAAAAAAAAAAAAAAAAAgAIAoyBL3yPseyIAAAAAAAAAAAAAAAAAAAAAgLsD7KIOwHg9EAAAAAAAAAAAAAAAAAAAAADAwx+ILAYBAAAAAAAAAAAAAAAAAAAAAGwe7gBk7Q8kAAAAAAAAAAAAAAAAAAAAgIIAtz4A2SytRQAAAAAAAAAAAAAAAAAAAACAuwN017/2AAAAAAAAAAAAAAAAAAAAgIIA52j1FyYAAAAAAAAAAAAAAAAA4KMdOrQBAABhAIbj/4/x06ilPaECBAh4tyFDpp0AAQIECBAgQIAAAQIECBDQF3BDcCFPndviNwAAAABJRU5ErkJggg==",
ironicon="iVBORw0KGgoAAAANSUhEUgAAANAAAADQCAMAAABBeh9GAAAAIVBMVEUAAAB/f3+CgoL///+oqKhoaGg1NTVycnKWlpZERETY2Nh6wwB4AAAAAXRSTlMAQObYZgAAARtJREFUeNrt2jsOwlAMRcHwD+x/wbTPhaXIiMh5mdO6udN7kSRJkiRJkiT16522HDOg7gF1D6h7QN0D6h5Qw6Whe1o3HRAQEBAQEBAQUENQZelt7LOtXAcEBAQEBAQEBDQ/6Oelldk/64CAgICAgICAgGYBhdM6FsbtNftR6DkGBAQEBAQEBAQ0CygsDbq9lq6FgICAgICAgICA5geFPVFXX1rvlQYEBAQEBAQEBDQlaOOXwGXsf0tjQEBAQEBAQEBAJwNd0wqg0uz8ASFvGQMCAgICAgICAjowqKILoFehytI8ICAgICAgICCgKUG5Lgc1WAoEBAQEBAQEBDQ9KNe1XgoE1DOg7gF1D6h7QN2bDiRJkiRJkiRJ5+kLNhxeJf3HNOYAAAAASUVORK5CYII=",
stackicon="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",
airjumpicon = "",
dupeicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAAeFBMVEUAAAAAAABgh8EaLExAWX8mQXAsPVYeME4tSHQjNVFNdrUzTngnOVM4U3sTJUdEbbEqO1Y8Y6oiPGxehL8eN2kaMmUwSnYWKElZgb07VX0QIUQwQFk1XaUXLmIPHkIrRXIhNFFAaK1IcbJGX4I0W6Q+Z6xLc7UUKl/+WW2jAAAAAXRSTlMAQObYZgAAA6BJREFUeNrt3ItS01AUhWGlxV5oCW2xbaAI5aLv/4ZmLZmz9MzJxUmTbOj+42gSgXzsNpNEZ/jSuq+Jvgyfs5zVFWaPViFuNgU6y1nGWTpchuahfUj7MpQCniPrmB0tsnxajWa0Cs3RRWgTmiN93DPSV3GWs0yyosvLEc2Rjn7RMH7aEUWXpuFYG5usAmaR9amnlbrqRWddVI0Se4n5iVYodWnqi6U2Flk+rV6nlXpguOis1EPJSVmbv5dof3lvq2KJWGamVdB8Wu2nJdEVykLPSOda04k1Hdcz0tFukGwpFp9qalj1QJliplg4UD1rSRZVbaelvdpITes42LQ2baYlFjvdtNq+t7boBeXoENIVg/3XuDQtXcf0lSdogbjWJSsWvv8xKKt+Wm9mpoXfB38Ro1m1fm8Rc4Uu0RTlKEMHpEcMAWuF76JXlKF7RMwMjVBvLOH6ZO2LpYbj02rOUu1YW0QRbQKOEZVvKEMrrEmZcqxQho5IDmG+IW62Z/H6ukK2WAj3lcZYlqfVL4uYcYibFG1Rjl7Qa2ie6BAi5h7phJNIcZ9B1qRYTsg6mJ3WPvw6t2mNK9N5SmD8UILHEq7xSCLMQlRGIv1tNyzmLGdV3W81sLEpekH8tOiBIbrQ3KBIxH06Rc+HtbTJMjqtzli63xrXR8cScW2NooOkHCkW5c5y1kAsHW7cMJ2T90jXmJtQNUv3WxZZE5ssn9YppjVFY7RUlcDoTCRGzw9iRY5FSN8Is8dazBYWWT6t00xLB+HaNFQKjP6hdYJKz0RhJqHocdtZzuqVtUWPKGKVAqNvRGcibaWYEdohnYnc5yxn9cq6RSnMZYhoyVP3W09ohmKMSrC42TlrgaUhix/MTZ/WOU1LIiVHjlJP1VyLRKkkukZWWMXLZ5HF13q3GxljGZ5WIxZ7RNUsOpZISp2ETKLq7lA/LLw6T/ZYPq0hp/WA1kjKapbut3TjRGApa4ci0Q/UjvVYLH9Y+TK3w9K04DLDMj+tjlmyfQ8RyLV1KGLl+TjPublF+i/eFEuOCEOlRKdgFTCLLLPTOleWbALeoogq4BRRxE09VU9C16EdoogYnXoSOctZfbPSwIeQlDoddbLuQrQRE516LIXpiHVbLO+k3cgOq8G0isWn1et7Kw1cowjINU5L1xOtVWM6ZxV9PFbxbrfIMjqtDlhp4C9ElpQi3KFSjLOc9WFYKSBtTLdVBn62m7Oc9U+f9UdlOstZdf0GgkOyKYjJ70AAAAAASUVORK5CYII=",
sunicon = "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAA81BMVEUAAAD3773377337733773377337733773377337733773377337733773377337733773377337733773377337733773377337733773377337733773377337733773/+pb/9Yr37733773/9ov34X//9or9/Yz565X56pT56pL56JL654/664//8Y327Ln////9/n7+/t/+/+L+/4j+/9z+/or9/4L8/nz8/YX+/+T+/ub8/Y7/+IT+//T+/rL//9f+/4X9/qb//8z///D//7/7/JX+/7v///j9/uv/+oL+/oL8/pr+/rf8/ZP7/JH/+oVpsSLHAAAAMHRSTlMABAcKDRgSFQ8cKCEkKx8wNTgyRj1ALUNKTVU7UVlcX+/qYWPt7+ftn5qRiNe29mR7sYUTAAANFUlEQVR42uzXZ28TQRDGcdN7NSkOKSgQigQCnIAxDsVA6O37fxp2Pdl7bv3c7KzvNoIXDAgJBIIf/5k19P5P4xzLn96/N/U/Xf6Xf8nEf3r5jjFk+pseFlhjq2xNeQQLevK1s8fGlEcUGvDtMuXXCb9/r6zl6MvwOulzPDWGBRpQSm9UfBP5f/x80tFagqDXqoDN4TDxKZZj4G8HKQxEiTZYgqKnkV/ihDUWBmGKLRhqcAsTsDgodSxHVKOrAWNZClTRa1iKk6mxLHqVtg6RpGMYgnwPWaCApW0OrsEMGNpMDiW6+nY50geuI86mR8fYG3asjSOToQpOz4/qsSn4UF7UIQzNAQUjTtsDDFtIQpzFHAsxEgSbY1A4S7d/WyUYjDiTGsKkKBGjpcNkQEEEe8hiUnDwrQ6dHcxgwyl9SEMUVdIjie2IRmOQAgRr2KJToiD5Bx/gag5mKIhz9KUZQxQlCjDZB2LmYMY8QJ3YQ5TcKOYkHcihMZiga5iiR5k/+ExHT3FQDlEw4rI+jBELohSRCIIdFoMMF5on1mRQIMFq5TpAsXKgRkAw4aKfJk5ssaPwh0n+hTQ6OAcU+NOrU8fEElBYwk9Xe4eWIyjIcH5+Ig1ZKApJzCsBxHIYjEaB5gmWWHImIQHDdICCA0k7wGDEpXgYQxRaLzoTuhJ7sxQHroMYikDxEMWW5F5JngM5mAHEcvPEGFAoiiFJFjmW7UAOYQRF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",
moonicon = "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",
hideicon = "iVBORw0KGgoAAAANSUhEUgAAAKAAAACgBAMAAAB54XoeAAAAHlBMVEUAAAD9pSU2Rk4Aloj6+volMjjK5+X+skP74Ln+tUt2Q6XXAAAAAXRSTlMAQObYZgAAAR5JREFUaN7t2T0OgjAYxnH1BGIcHP1aHBUvoBJv4AlMegV2J1dHb+sLDc2jJRSiibzw/Me+4ZdONE0HjLEutcybE+wBmJkECXZrkwR/0sg3Iy+CykE0F1GoMUGtoIpNEvwSHEZZk2VR2CSoDBTNNrvfb86My9qiSbC/oB1Ok6yzMdc43jnzkicDNPdJ1sF+R1ABKEsJdIqL0LQzACEBCLYaBM0DxUFT8kAwCbYXlKpANKtAYQi2GkzT1AfLzXJQAIJtByV3yofN1bt2sL8FgjpAMAHEnLlGjWB/QWnYyNw8nw931yOoBnRm5OQPzRgji8fCXFiNoDLQmuEmhTknqBKsxY7x0Y6gVrDGY6szJYKawUBoEiTYyCTYA5Ax9v9ecevBMUZyDbcAAAAASUVORK5CYII=",
tmiicon = "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",
launchicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAG1BMVEUAAAC+KCiEOxv09PTS0tItFAmrHBxtMReZSynldsrTAAAAAXRSTlMAQObYZgAAAK9JREFUaN7t1iELAkEQhmH19AccilmuaJUVs+EwX7GbzDa7RX+2HwPDIVwT4Zh537YL+7RlZkKjbNaoDRZWGsuY3Vu9HuqOhRXc6pln420NxMJKY4lRWFjBLasqal+r9U1d7RILK7g1rb1Vq05YWGmsZVEHLKw0VlW8o80OLKw01gj3Lyws9nssLPZ7LKxfrXnrnb9nx+LidVhY0az+XTd8VFhYIa3BT4OFlcGiv/UBp4c0k3WUrd8AAAAASUVORK5CYII=",
diamondDicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAIVBMVEUAAAAMNzAszbH///+M9OIglYGi9udK7dHR+vMbe2sw270m6X4CAAAAAXRSTlMAQObYZgAAAOJJREFUaN7t1zEKwjAUh3G9QYuD4GbBEwjaA3gBhyDOgnungifILDh0dO0pJf8OL5Q0Lhm/bwoJ77e9Iavl6nTLA1hYWIUtU47p9FZhYWElW0fKc55XY+g7iVhYWMUtUzZSvIqUh657q8PCwspYE6Bj6+fJekVbiYWFVdCKlNOkqEs6F7pJ7LCwsJKWV3nLtrJWWFhYpa1WSqNy1n2wsLCwzDr3lkvXWAddYGFhlbPiP99WyqCadHp767iPFCwsrNBuDP23Pi50xcLCKmilRacWrEipNIOFhTWvzmcKFhZWSesH/MDzZzzmXzUAAAAASUVORK5CYII=",
diamondChestPicon = "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",
invisicon = "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAIVBMVEUAAAAmIVsqHQ1GOqUAr6+qiGYAZmaWX0FmZmZVVVUhISFAy85pAAAAlklEQVR42s3W2wqFMAxE0e1dz/9/8GEYJNAnwQwYSJraLBBfKt+O62G8Idr8HoTm3pDxEJQwPu8kMM9K1TQBrxli5LptKQI1ChkC6+p0ry5DVO+deTepsSSB41CtT6E+QWDfAbR630uMYFmckCEa0fBNp8mgk4wvZtxNHDUukCFGTrEUgfOsTBODAAneYvkbOf938en4A+sBOaHYylDuAAAAAElFTkSuQmCC",
discordbanner = "iVBORw0KGgoAAAANSUhEUgAAAW8AAABvCAMAAAAUlbGSAAAAbFBMVEUAAAAmM7YbP5pMT8iMnv+KnP2EmPkfQp6GmfqBlfUtT6scQJx9kvJkfNtEYb91i+sqTKgjRqJxiOdsg+MxUq+Im/x6j+82VbInSaVZc9JVcM46WbZpgOBJZcM/XrshRJ9ddtVQbMpNacc8W7jXPay3AAAAAXRSTlMAQObYZgAABKxJREFUeNrt3el2mkAAhuGWfsOw74ggq97/PbZal9DR6SDpOeXke38SiIfHCUlGHL/dsv5x98f5ol1Pn94vove2o7c+em87euuj97aj95rWn/+Pf9z9cb5o1u/o/SJ6bzt666P3tqO3PnpvO3qvab3392vWp6Z+3+9fNHrro/e2o7c+em87euuj97ajtz56bzt666P3tlvsLYuoGT11uxc2XSHp/ane8lBnrgBqS6kGhBuPJ0nvz/LeT5kNIAi7Z+O7C10ATjbt6f0Z3mm3E4DYTYm0zvkyTfe/SlPpW+ek1/zeo0vpvdZbRhfL+DCc6b1T08a7wL0U7OK2OXln5OEUX8Qjn96rvJNcANhF0pJelwcOlJwg7zx5fl4AiDyh9/veMrLPomPqJ8fYwcuc+Jj4aXPew40kvd/09scSQFDJKrTxl+zw1247AOXo0/s978oBkBd9VsKgMuu9FoBT0fstb5kBCKNMwDCRRSGATNL7He+TAOJYYEEijgFxovcb3jI+A2JJ1wNiSe/l3lWJNysrei/29mu8Xe3Te6m3F+DtAo/eS72PWNGR3ku9M6woo/dC70RgRSKh9zLvBqtq6L3Me4dV7ei9yHuPle3pvcQ7wsoiei/xzrGynN4LvAeBlYmB3ubeB6zuQG9z7wZqIj92o4M/csbumAuoNfQ2986htKusX6U5ZuXpeWu1g1JOb2PvvepnJ9Ylv8WHWt+6lNjq87Ont6n3yVH4euua5+Ke61nXevyZc6K3qfekDm//2bx4/diqDvCJ3qbeoYIXWvcOyt8gLw6ht6G3H2smtC3PwTXHszTT5bFPbzPvNFDwoodsYs9+h76cAAhSept5e46C133wfozvD96d+gvTo7eZ9wG663eFe5Xu+o0Dvc28JygFD9lG+R/yXAClid5m3iHUDrPX7ZXX4Q9QC+lt5O3HUHP3jwuHepnZu1CLfXqbeA8BntRexrKsS3yorOVlzLd4UjDQ28D7+WCFCOqoP2bij63ZsY/qQODpjwS9Tbw9B88TpdBsVHI8ept4VwKfkqjobeLd45Pq6W3ifcQt28HiHBu3jvQ28a5xq2xjLCxuS9yq6W3iHeKePY0lFlSOk417Ib1NvFs8sg9dAOOC7mDjUUtvE++Zmd3vGxdGuc2+d2bPFb1NvK3TDHyS+yYwGNvNXk6zA0+cPzHztiIXj0SbWGmf2dBkZ31qJa3AIzfi62nm91e5mNFJy0+iPCjxpDLIo8S3ZDQ/hvdXLfC2kng+S1L4l+U4ojHbubYjLhsd291lY3RZkMMv5jMrccL7NZd4W0NtzwZxW8jrF9LEKy55STrc1rZqZ0Pfrgfeb7/0/ZdFPjN0ssp6UZU5+FCZF3z/5TvrFVT5R0e7eOVd2Hjk5BXXK1jk/Wjow/vUtqj9V95+fd8pCPuB680s9n6UdGHsiuudsK9K87O1G4ddwvWrFnqrDUU0jWFhaSrCcYqKgevhcT3T/yR666P3tqO3PnpvO3rro/e2o7c+em87euuj97bj543+JX6+66ajtz56bzt666P3tqO3Pnpvu5v3Lesfd3+cL9r19On9InpvO3rro/e2o7c+em+76+n/BOelObxuTANmAAAAAElFTkSuQmCC",
filtericon = "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",
suicideicon = "",
clipicon = "iVBORw0KGgoAAAANSUhEUgAAASwAAAEsBAMAAACLU5NGAAAAIVBMVEUAAACip6h6fX7K0NHM0tN7fn4AAACjqKmOkpOOk5OPk5TRRtI4AAAAAXRSTlMAQObYZgAAA6xJREFUeNrt3U1uE0EUReGMmFsgeW7JWQBusgAMLCASjEEgM7aE1FvIFtgCq6RK6ZuUn6v7udM/rtjnThIrAX8cUNGOHeVmlO2S3ZQzWLCaweqzS2eJsklWAA8WrGawYD3tTY5ThcW3n5rpc77fOJuOJdI2rCAWtahFrRlZ4vxUlXSipR+L799Z3rws1Yo7EyuWoRa1qDVnLcvR3Yt2xDNT1i/iTccSLccSWaf/DKwqGbWoRa3rrpWtpKmKIbm7E280VpVONPv/4owsSYbUqh5XaK2KWtQqr5Y4v3Rwi6Lbaa2exQYcr5al+39ixaW0HsWqIxa1qEWtV1FrZ49Pe+HpXJ2qlFtL2+pCJ24Yy1aypbSW68aqlVVQrTBqUYtahpTe07Z/Lb+c1VZx+mTRfJZfy2fZWrboAauwWuENtah19bV2YYtmG8vxaJZwaq2DS92vYasw0fqzNNHs6Z6e+J210t8wZVGLWtSau5bPMnsrnlcrV0rzan0MknUkDWTZWmZtV6vaJq2VsqhFLWqdodbLWMv6cfvw/rujWs68WpHzOSjuI2M8ln3S186tlbKoRS1qnafWQNbe3P7TVixXpa3We0OJtLVI47FUx1bJ1XJZ1KIWtSauNYDlzV4emiqd+/DMyG8aVpWZasa5LGpRi1rT19pcXK067BTWsm6WcmwlzaXolB+XlaMUwNp21KqoRa3LqxVZ09ZahNVm+y6W/hz6yzQc7ZysSCmQdfB1iYJY1OLf1qusdUTooi208Dk6XldmKWvdQlzLPx5LgwUL1vWxWmmWFPcQtsrNY4kECxYsWOOx6i6ajlbLSi4D/cGCBQvWGVniwIIFC9YMrFoE71IwJbWz/N3DggUL1stZtdZOy38sZdm7TR6i+rR4AxYsWLB6sDySnT1S/4a1f8lNBGewYMGCNfhxokg+6yEMFixYsGDpXtxH1aIuzMTKkmDBggXLYQ0/Tv2JlmNFwio3WLBgwRqPVduJ6NEGs/QLYMGCBcthOcfp0tDc2WdfnVfs5gcLFixYPsvSMizRfFb22VWPZY9SWLBgwXJYhhb3I/tKEWf/wvq8um3d3L7dhYkECxYsWA7L+WFyv08l6VUjHku0SPpmf5gcLFiwYDmsfjzR/IevHunWcmDBggVrFJbl5S8PRcq9rMwQj49PWLBgwbo6VvaqteurgWJlObBgwYI1H8vydl3fZLrzOLBgwYIl1oxLefomU/ukhD9YsGDBmnfiFcSBBcsMVp+Vz/oPE73u5zgWUikAAAAASUVORK5CYII=",
clearinvicon = "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",
bridgeicon = "iVBORw0KGgoAAAANSUhEUgAAAEEAAABBCAMAAAC5KTl3AAAAilBMVEUAAACHh4cAXjqMi42CgYKEhISIiIiKiot/foCAgH+PkJB/f4+zub5+gIQMGE1AAAB7e3+HhYjj5duOjo2dpKuHh4QAaz2Pj4kA/ETc4N2NioQLQjpJVlNdaWqXmZsUckYKpEfa2trGzNGLg40D5EqHg38JIjSkqrEAAACJi4I+gmlxh4+HiYIOEjJPv21XAAAAAXRSTlMAQObYZgAAAqRJREFUWMPsz0GKQyEMgOEQZjMO1Y0EwacJg8ijvf/9mpTXA2igq/4bxcVnAt8+VxmIPkFwTtiPqJ4pnef+96iAtSugCskjDHIKowyRi6i0I5AUjQ8FkIM+5JyXANSMGMzE4T9bPa8JFg1THuHn1hXofVmY1XYZj+Nov6FreVGYKU0kEWY+2i2sAUB4GUkPE9pfUGB1DSI0wYzWGsC6IGUQTqPu92UAXkDRi8DVlgCOyC3UGGtl1wxVY+8W5BJQq9EHmLBPiFugtxA9AoBDYAO0uEsIGXARjhE8Q5BbMMAnlGd7ddjjKAiEAbiEAaHKRtuSRqObqG16vez9/7937yArptLkPtzHfYIIQzKBUSNe6DAYjx8ff35h/O+m8XRqq9vt9vsTs7athr7+rEK05bYap2lsEdhlqBCvquqB9phaGDGHaRmeknGcYNxluFwqeFwY0kT42WAyVVEKZ35BpXO1e1VDXzvltogUGWP2GZ5SyuPGmUmpBrkMQ1Am+wx3Xc46Ek0jRBgIMyidCC9AKeXVPoO1Ja0EKCCqe4PbC0XWZPbwpedGMZF4ZEC6NaRBqDd7eJ6PkRQLXRRFqkMgC9BQ6MwensWsxSttBlKJDy0ccZ+BqLxbigSzDE/TWGvAAqEAUe5ZzLNmBejvMwsatNziRb4yp+jOYT3iBNwL1CEqQsdC7swefDk3YuEFLBPTkwfMfIQxvHkfcFizwQlQBwuERrQtRKaSXTzDulWhsRHXC0SitCQyp/g6p09CBprRINcYrkW+kvZeNOpbsw7xVlOgNggtVwdHlhITcB0I0pKld3VoumcX68Bm1Huem9n1jUziCjvsXfnA1yt3rAuufuh4lnTRYU85/ja9RwfErKVYB7tzyChduXL1oqz7MtmuHX78J38BAqFGqWvugUcAAAAASUVORK5CYII=",
elevateicon="iVBORw0KGgoAAAANSUhEUgAAAZAAAAGQAgMAAAD90d5fAAAACVBMVEUAAAAAfP8AAABhROL/AAAAAXRSTlMAQObYZgAAAXZJREFUeNrt3U1uglAUgFHD0KW4HxywBFfhJjrvxETvKmvVchOQ0B9eFTzf0JfcMxOjV1hFxKEuWHMGIJBLEAjkDlL/QxBIGwQCeSCyiwKdIBAIBPJt5LiatA0EAoFAIBAIBAKBQCAQyHMicW0/Pq6KaxAIBAKZBllHxKA+OCsi3iEQCATyN6TqrfptI2IPgUAgkIUg7UmW5xAIBAIph1x6q4fbfg6BQCAQSCHkVI/XRAQEAoFAiiE5q3MNgEAgEMhykG1c63/pksg6Ivb3kVwygUAgEMhPkFvHoZWS6jYkIg4dPZF8ZQeBQCCQAeT3i30tkleFRPKzOQQCgUAWgnRmfR1AIBAIpAyS5+PbJwGBQCCQiZFsfBN7A4FAIJASSFb13vGb2w+QEAgEAlkI8uR3KYFAIJC5Isu5Yx8EAoHMFVnO3ashEAgEAoFAIBAIBAKBvDqSzf1Z5QGBQCBzQ8oEgXSDQCAPQPLfiYVqzgAEcgkCgfSRD1gTYJspJn0FAAAAAElFTkSuQmCC",
discordicon = "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIAAgMAAACJFjxpAAAACVBMVEUAAACMnv////9anITxAAAAAXRSTlMAQObYZgAAAvBJREFUeNrs3UtyozAURuHbAy0h++klaNA/Ay+B/XgJHqBVdl6VpEpBBkcouuKcIabQN7mFKWywx3pS1j97KAAAvAH+6G5/7UsAAIwFeFKpfCQBABgMkK1+1wAAwFCA9dXLBgAABgFkq+8yAADgHqAKAQDgGKBqAQDgExBUsQgAgEOAKgcAgDdAUPUiAACuADokAADcAHRgAAAAAADAAyDo0CIAAN0DdHgAAPQNCGpQBACgY4AaBQBAr4CgZkUAAAAAANAlQE0DAAAAAAAAWp8K8yIAAJ4B87K+HQAAt4CtS6fXlgc+zQMAwB/g7fhXFZveDAAAeAOEnQM4pW+77hzGCACAH8DHMed0v8/dFgAA3ABUbkoPd1U5AAB8AOb0gxYAAAAAAOABEFTqkn7YTaUiAAAAAAA4ASAlAAB8A1ICAAAAAADjA/adiep/KwMAAAAAAAAAADgFICUAALwCCnfi5rXtAACcAHDVe/O3N6knAABGByxSCbA6iTcAAEYEaPo6mwAAjAi4JAAAAAAAAAAAAAB7LkwAADgN4GPipvL2PAAA+gVYWL02r3LDogyIBgCAQ0A5AAAAAAAAAAAAAAAAeASY/R7ADACAjgG6pIrdBACAQ0A+iYs0bXos5JzPIAAAfQNWnwBwKd+V2PrpbfW//wAAdA8oGPJWbRIAAP0DzHY8KHVRpZ3NAABwAnhp2grIfuMHAIAbgAXdb6r5SqloAAA4BGzqFO+6BTAm4NdfOw4AAAAAAAC0PSFGAwAAAAAAXQLanY/MAADoFdBmEqMBANAxoMUkmgEA0Dfg6EmMBgBA94BjJ9EMAAAAAAB4ABxmMDMAANwALKh60QAAcAUwqz+DAAB4A1ioO4MAADgEmNWcQQAAfAKeq7Q6gP/t07ENACAMA8EwBPswBOy/CtAhITkFDYn+F/A1BhAYsKrjoW5mAACEByiDvw4AQBKAMMh1AABSAS6Dvw4AQD7Argy3ZkcAAOQDiEvK6wEA8DFgAhJXxcTqzwgVAAAAAElFTkSuQmCC",
structureicon="iVBORw0KGgoAAAANSUhEUgAAAPoAAAD6BAMAAAB6wkcOAAAAG1BMVEUAAAB2dnY7OTUlGg24uLhRTEQAAACbm5tjVEDx+A94AAAAAXRSTlMAQObYZgAAAvpJREFUeNrt2kFr1EAYh/GevG+x1Ksp9gM0KF4Lir22EPGoyAavBaG9VhHysZ28HfOf5p3Mpm6UQp7nUDVCfu9hmMmme0BERERPt7bvYGbo6IvA7/pmjICOvgysiiOgoy8Ml0dAR/8XcNfdbULP3Qjo6IvD55tN01xuVHYEdPTF4NBR04gtj4COvifsmjkCOvqi8PwR0NH/Fj6++dO1E901PwI6+hSs4m1edKG7cP8hcTJtNtmW+5D9GR19GjZTt9FKLy/3gv6+CX1sW/TV65Nba9NnK903f5MVbNX1G/R16zlYlY7x4hzf01s2Q3Uf+rr1Z/mzvKzrqdKz8X+lN0lXVYW+er1tv+T3Q91/UlfptWt3lquqqtDRTbf8CB/ivfRDmal0Ld1fL7puBKOjD7qSPTrpU/24aGqlf+o6c2x/jZ3UNTp6u21Cl+mt8yP4pI9gcejoO3T/UKicWvp4nOrW2y70Ax3d77RHmiMzwnnh4/HNzW0X+qVjXHoMHX1Kt4TkDm831kV33wg2yYeOHvRvXScu1Y/SN9PiylurCgA6+tSalzn6m9t4LW28+ZV+2oa+DojO9591HX6gowd9a5w75KvqlfRY9G/jFxBGrO6a0y109Ifnu0mm6+2ePSimq//Y9Eef5WdVhY6e0/vKeuxwPixd260VdmT0FevbeGs9Htomq3/GYV5G264pETP0CIfQ0YdNtopF063q13EoXZuR7mJ/oqNH3W2jqt63KpN9kxl93XrjPtBooe7XmcS4h7d9gUZftx5Nr9fK/YpjvqkEo69bTz5BO91u4++6Sy/D6KvX7ZvM0pUkrf6mz9a8tcv0MDr6UNtnK126SQXdOpkPo6NPjaCd1rKnQM3hdLt2tQtGR989gt5WJ3MMjfQyjI7+uBH8r+e0v+oNdr5TdPRi88984+xFtRq9lEFHV/uuftUU0wtodPR9RxjpWuR6+nxwtKOjLzvCobZWHfIpjI6+8Aimt/dtCysdHX3hEfR+uwyjoxMREdH/6TdEpxzJwzdJHgAAAABJRU5ErkJggg==",
hudicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAAdVBMVEUAAAAAAAAAAAAAAACZAJllAGXkAOTkAOSZAJllAGWZAJllAGUvAC/TANNqAGoAAABWAFYAAABlAGWZAJnkAORyAHIOAA7WANYtAC1GAEYGAAZrAGseAB45ADmLAIuFAIXEAMSrAKuTAJNcAFxUAFQmACaAAIBKsZRyAAAAEXRSTlMAmcxNmZnMTczMTU1NzIqKmewKEcMAAAMxSURBVHja7dtrTlsxFEVhHi3QNkBvAgHS0neZ/xB7wcBq5VRb8vYxRyhrBJ/s83fvvfaOj46O97J1fHQxlwxWUMlgBZUMVlDJYAWVDFZQyWAFlQxWUMlgBZUMVlDJYAWVDFZQyWAFlQxWUMlgBZUMtji9MDtddEcdHkzryysHdXW5ng4Oe6PmgLWh5oD1QgFrRgHrhTJgoID1RAEzUMBclAEDJWAmCpiBAuajapiBAuajapiBAuajapiDAuajNAyUC6tRBgyUATNQwAwUMB9VwwwUMB9VwwwUMB9VwxpQEnb2e/Ja392hauy8Yr1ZXTbC+EX3uab9LaxVAwyUcfGC1QQDZcAEqwEGSsA8FjDSKAHzWTVMozTMZwFrRAHryALmoID5rApmoID5rBpmoID5LA0DZcAMFjADBcxgKRgoE+azgIEyYT4LGCgf5rOAXYNqhW1sVt2n2+8e69vXzxGsaQLWgloug1jAWlBhLGANqDgWsAZUHAtYAyqSVcM0ahgLmEaNYwHTqPEsYBoVz9IwUONZwARqNAtYjUrAeoKBSsK6h4FKxLqHFVQy1gybUQlZ03LH2rF2rFfK2v/146VZm+uPNWtaAxvJAvVz+XYLawI2kgVquZ0FbCAL1P9YwIaxQAkWsHgWKMUCFs8CpVnA4lmgNAtYIAuUZtWwQBYozaphASxQDSxgfVmgDBawPixQBgtYJxYoiwWsDwuUyQLWgwXKZAG73disW1Ami66/3AiYQm1ulgGs1UrABGqaglgCJlBhLAETqDCWgAlUGEvABCqMJWACFcYSMIEKYwmYQIWxBKxCDWIJWIUaxBKwCjWIJWCgpgSsZ9gzKgnrEfaISsR6gD2gkrFm2IxKyFpNO9aOtWO5rPMMrDM9ehjPevdBrzHiWRoFbChLo4CNZoESsKEsUBoWxTJQwAJYBgpYAMtAAQtgGShgASwDBSyCBcqABbBAObCuLFA+rBcLVCdYHxaobrAeLFDdWpy4rIPFXkTvTxwWy9bBMAMVCTNQkTADFQkzUJEwAxUJe3HUdlgCFDBKgaphSVDASmlQ/8ISof6GpUIBS4Z6gqVDFVhCVOf+AHrWPBf4yBhAAAAAAElFTkSuQmCC",
offhandicon = "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",
particleIcon="iVBORw0KGgoAAAANSUhEUgAAAB4AAAAaCAMAAACXfxyGAAAAllBMVEUAAADxAAT/AADEAA3/AAD/AAD/AAD/AAD/AAD/AAD/AADFAA3/AAD/AADEAA3EAA3EAA3FAA3tAATEAA3GAAzEAA3EAA3/AADZAAj/AAD/AAD/AAD/AAD/AAD/AADFAA3EAA3/AAD/AAD/AADEAA3/AADmAAbzAAPoAAbEAA3oAAX/AAD/AADEAA3oAAXHAA3zAAP4AAL1nQBdAAAALHRSTlMABBjosCKJauKogOG4YBy4oIiEgHhIFw8J6NfPv3xUUTwwnUI1Hfbo4NJyLEVP7dIAAADESURBVCjPrZDLEoIwDEVroZRXUREEUd7gkwL+/8+ZLhxHaheMnFXunCSTCQIijHGElFRJkhhqfeq6zpqjvaIoGrUOOOfaOzDbtjOFllDr2AMwEDiadpN0swZ0wM/zPJR0yIEnHGqsIC2n45oxdt8A577v/anGOgy5otJgww4tpfdArNYO5G1MyrIkIl7GcfSn+nPqAdbYM/QwDJKOMkrpQ+Tr9x8qy7IyRI7QRUU2f3zxT926pmkyUdE0TeupXrWEkAi9AD2NHpof68P3AAAAAElFTkSuQmCC",
enchanticon = "",
statsicon = "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEABAMAAACuXLVVAAAAFVBMVEUAAADuUf//FxcAx/8AAAD/Dg70WP9rR4LhAAAAAXRSTlMAQObYZgAAASNJREFUeNrt3MGNwyAURdG0MC3QAi38FqYF91/CxGIVCbCQJkrMP3dpPYmzYIsf7y8m9fYAuwHi2TGoRwDYEXBMAtgfEAEAcFz0ugcAAAAAAAAAAAAAAAAAAAAA2BHwc9HrHgAAAADgLoAYBJAD0I4qnc7vADkApTUgAOwOaBdwHEAGQJl2AgFyA0oBAAAAAAAAAAAAAAAAAAC4JyAGAeQAtKNqp/M7QA5AbQ0IALkBtQJkANQKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwBvi9CAAAAAAAAAAAAAAAAAAAAAAAAAAAIDsgYg0QAfB5wOpjtzmhtwe4M6D39HkG6O0B7gBYefzerlUfMdt3D38G8A2AtZ9gPP59D/BxwB/SY8t08sJ9gQAAAABJRU5ErkJggg==",
fasteaticon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAA5FBMVEUAAACMaTKZeUKynni3onqhe0WzjUxfTyeZfVG8pHTayaS5oXPPuoGumF8TEw6nlXHMuI/Dr33FsH3gzqjaxZilkFjFrne7onPg0arRvZTLtoHMt4LCsIW2oXSulWHIsnncy6bSwJXErnzWxJnezqjCrXq3nm+Mcz3Pu5DMt4/BqnvFr33KtIDWwpfbyaWxm2mpjl/k1K7JsoHJs4HGsX7ezabSvZPBqHmxl2WJcDywmGbey5/l1K3ayqS8pXK4oG7XxJjGr4GKckbFrXfFrnTItom3oG+QbjeBYCtwXzWQbDSZeT/OElVjAAAAD3RSTlMA/////////////////wNRhiCRAAAA/ElEQVR42u3ZtUEAQQAF0dvF3UMyXCMawKVytJmLyND5Ee4yr4I5XWskSZIkfbESNVCieUZtfhCzzDLL/5b/rYIa0YGu6IGvvFnXzDLLrBI96H6dHvgQ/3qWWWaZNRwNCoaj9418iDDLrC9lllnDaKNiCr3P8C9vlllmmdViOqL/4/gQzfoCZpn1rSoWYhFLmIllrMQq1rAenpCZ9S3MMsvfacUa+p4wGv2v82/eLbPMMsus/o9zjIu4hA/RLLPMMutbbGIrtrGBndjFXuyjBz8+y3fLLLPM+ngHOIyKOIqCnvihWb5bZpll1rfreQkf4gPMMssssyRJkiRdAeAQmFMcg18HAAAAAElFTkSuQmCC",
totemicon = "iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAGFBMVEUAAABpTifq24SydUPYvGb47qX9++4Au0ZYoP4KAAAAAXRSTlMAQObYZgAAAMNJREFUeF7t2UEKwkAMQFFXrjseYewFRC8g9gRidV+wNxCvb6JkIAguO2P4f9VC83bpJqvlIiKiWbqP1iAdk9RFtrCwVLgWcC/tmrSwsJ7SQ5mbPrVrYWENrvAWFtaoZas371TA+hYW1nqW8nfKHAqoXhfCwsJSZnoP2vcbZbburfd//xoWFpYbTFnz0wVsycLC+myBFdXCwkqWvwVc3A5ZxixrYWH5vHX+sTV1LSwsfzuZAlhYWNwCgllYyeWYf7awsF5n+DqG9ibnWAAAAABJRU5ErkJggg==",
absorpicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAM1BMVEUhISEAAABVVVUQDgD/ExPxExP/2hL0zgDOrgC0Eg2rEg3qExMREA3/Zmb/WlpkFRJDEQRAoGu2AAAAtUlEQVRIx9XWzQoDIQwE4G2jdc3+vv/TNqmHqdCDi4NsB0QDfqB4MNPjckaSZ2N6iBdTQz6og0yN+S9SXquuyMSKlF4W3+aVr1MC6iMAIusq4siBrS2OGATgOLYtBEMWkZxVz1Nknh1xiB/EgCVGEQcxhqDKJiL77uB75MwnNfDBJTValjLj8gyCxyybcXkuAfoFmASHqwGXAKkC8AkQAJ8AAfAJEMAFcoP/ZcCPPKC7uG1z9Qbz7hFRHZSI0AAAAABJRU5ErkJggg==",
worldicon="iVBORw0KGgoAAAANSUhEUgAAABUAAAAXCAMAAADTAfSvAAAAolBMVEUAAAAAs/8Ap/8Amv8A3f8O+AAA9gAA0v8A5f8l+QAA9wAn+gAAkv9h/QBU/ABE+QAAw/8Ao/8Ak/8AhP9c/QAS+AAAiv9S+gAA9P9r/wAAz/8Auf8AnP8Ag//+/v5A+QD///8A7f8ArP8AiP8o7RBK/wA6/AAc+wAG8gAE7ACt+P+p5P8A1/8AzP8Ax+8Axc0c4X4A1mIA5g43/AAe9gAa7QDrWe1bAAAAAXRSTlMAQObYZgAAAQxJREFUGNOd0cduAzEMBFCTIlVX0vbi3kt6/f9fy67tHAwECOA5vsOAGI7+jfuDTJMUxQ192CPiNBOZL39J4HeaqjGMAYiaeEFpQ9kEYzT5Mi6eUYhBc8tdV4bKKqXSt3Um8rzXRBw5hmAmzFICXBVTdAvzPjHMDgHwUqEUGB8tAFfukQiyDAcl4C7yBLiZL0mngIMSKdn5ytqqWc61Tunc8KRJ+tJV7Pz8oW01ieTcQCoGz7zYjnXbkkoGBVLwuSuNidsDrVa0rutB+/BujwgvB9JaYT3rtdgAnvaMiAJBaxSz83KbZCqYiyIXr4YIxVRcVxNs5am/zX25AD1eOanlEDa3/6hnPdrRHfkBWgsQTpMpVmYAAAAASUVORK5CYII=",
healthicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAALVBMVEUAAABVVVUhISERDwYREA0RDwQQDgBkFRL/Zmb/ExO0Eg2sEg1DEQTxExP/Wlruoi9fAAAAxUlEQVR42s3W0QrDIBBE0dboxmrM/39uHYfFPgqZhlxIqLAnaCi0r2f3XuwCGSAsNNAFEhbTkW2LMfV8HaONVIRg33P+9DhkVkrtHYeZjsQIgFozA2gNq1qVJKXzxDgGeXFVipLYaG5soJ6acJgXXvU8vIYQ5J4DHhvb0hF8bg13f7kcJlAQAIxwHHfEjQEoCAGOjbAdPsCBjvx+DUEmUJJSJgJxoCSOJuC4mhARhECgJ0QETE88gP8SJif3/CLf8u/i0X0BhG8eORwZ3vUAAAAASUVORK5CYII=",
wrenchicon="iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAMAAACfWMssAAAANlBMVEUAAACen58AAACHh4c1NTWQkJBpamqVlpYtLS14eHhYWFhaWlqLi4uZmpp7e3tLS0sbGxtxcXEYoIrRAAAAAXRSTlMAQObYZgAAASBJREFUSMfllNuOwyAMRGEMhEu67f7/zy6tI5otqmCQ+tR5ztHYx0nMNwbAGuacW2ARs625syQom9UEkI37MrncieQP8ofdM20dyRpyy4bGINAZmqqEy/hvaBbMVsnnnlMg3OvdEOZBe94TlgBPnQiTYNTnMlrhrJzfMwlke2R8jvZm1wTbEoazXtqjirXKEVk2ew7Rmd6ReUTKZY2E7B05dRTE6+7fkINKXGX3mo4coUWObNS0BjWlFADJc4YU1utwnS3opgXxx6IMPUnxa9MCgTekaW5pQ30nzKfd4mRIRD9P1pCkJLomZ0gKUERBylCsAKKCnCHUtFEpQ5VrIG3I+qjgvKFNuURwakjE1wQYMpBHYGjwduduMDz5iPmq/AH8pggA+kQi0QAAAABJRU5ErkJggg==",
diamondicon="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",
withericon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAS1BMVEUhISEAAABVVVXY2NgxHSF3SVhpQEU5IilbODxwRFJTMzRlPUpJLDDIwsOuoqZJSUlBKSkpGRpjPT2Pj4+Qbnl8VGGIZnGBXWQhFRUBnQOgAAAA1ElEQVRIx9XW2w6CMBBFUZQp9EIrU7n9/5fKMeioTxAmBHdCaJNZb03a4rK5I8l1ZXsINsWKMLeHFCv7L3J59r3TJRgJwcxhDDusQxCkQQC6LqVhAAJIyRjngHSIgL43BoOvD8R7IB3iHED9U1VZ2zR6pKrG0bm6jrFcipFInyCi8iOinL1vWy0ClLO1RFhjHH8iAVrE+5yZMX6fw1+XCCKK8bYUI7MALQLETO+YpwlAmwBZi0MiB0WfCPJegDYRJECfCALYTE5wvxxwIx/wujjt4+oBZsQXNSkkEUsAAAAASUVORK5CYII=",
poisonicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAVFBMVEUhISEAAABVVVXKEwC6FwBOMwBwVACuOQCZMwCyMgCHOwN5JAFeQgAyGgCuEADMmZmZKAGmQgBmMwDCGwDIT0LESybHKBOQegC8KACMIQCmGwCGbgC/OKfgAAAA40lEQVRIx9XWWQqEMBAEUJ3YiUvHLe7e/55jCdLMn2IjToFoQz0I5iOJ4st5knxO5g7BEJ0IendIdDL/ReI9v5MuQaUszRbUMOG7LDHpEYCuq6q+BwKoKmOSBEiHCBgGY1A8nhCWZZ6BdEgIApiJ8Ebquij0yDT1fdiCBVlLhHq2JU01iXPZnmlithZoWdyWPG9bLQLUNGmKEvO6gmBRArRIngMRWTuO1jJ73zS6RNBBiLwXoEeA8AOImAFkE3UJUF1nmfcCtIkg5+ZZgDYRJECfCAK4TF5wvjxwIj9wu3jt5eoLO8MavS32zIUAAAAASUVORK5CYII=",
weaknicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAIVBMVEUAAABVVVWJjsQhISFfIh22ucqnqr1wMi05ExCEOyPLzt1aE+PXAAAAjklEQVR42s3W3QqAIBiD4WU/Wvd/wTFiBB4J+UI7CD/cAxKB6d9ZBvOFeFgH4t4Xsg6GIxJNvFuKxBDpeV6X5DVBcphQhqSaNUVSzSEZkhccyhCDUo4jdYB0YDaRejCfSNvmad8D5pOg1gI40pqRAUWkWs/TiCIBtXo2YoiLBvlwGOLiWyUIfyPzfxe/zg3ZZBNND/pGdgAAAABJRU5ErkJggg==",
hungericon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAYFBMVEUAAAAzAADdwTcuMRNaWjJANxW2jVRfDQ16Vh/u3peKSTF7Yy+qERHu5sDftn1GSB+ZZjNrek9VZkRVAACFbzndyXJWQRdrVSaRExMhISGghzdBBgZmZjN4EBBnRBRVVVUnwN+0AAAAuUlEQVR4XtXWxwrDQAxF0enNvdck//+XGWwe2RozAueClge0k9iz+1zsLgFYLgR0lywXS0UYi3NEQQCMYazrqkpKoHQEIISyDMFazpXSGiglATJm2+a5bbEcBbF22/Kc86apYlSE89eL8yzre6WwWnoyjlmsP6Ijzk1TXU+xfVcqPQHS2rkT0RAgKd8xraVcVwoCdLau3gsBlJr8qPdFAURBgIQAoiJAw0BJgACoCPofQn+R6b+LR/cFElum8Z2AUlMAAAAASUVORK5CYII=",
waterbreicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAJFBMVEUAAABVVVUhISEdZ5BqnrsTVHkEK0IyORpETSdKXUNVZlVmmWZZM1PtAAAAuElEQVR42s2W2wrDIBBE27Sumvz//3aHNYzUF8FBMpDgSeaAhtxez857MisK4JgIeivKMRmVAiaRFQoLHw9LZIXCwteD0sAChYXkidI/qxScito9IosULjZKnp51CheLEfZkndIv21pu1ikxBTMIucUsjuqUEErBVj3neV0gSDoFp1DPGfVIrSGplHFiFFLSKLxh4iKXFl5kgbL5HgPzESbrlPGVR9YoSP/6RsgYLSg7vshb/i4enR+/2xPtjZEW8QAAAABJRU5ErkJggg==",
fireresicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAANlBMVEUAAAAhISFVVVWLHA////+3bg+dPw/kmxP02RmnUw/JgA/qtRXvxRbQnBPVjBG7YRHBchCiSQ957S3hAAAA30lEQVRIx83WjQqDMAwE4G7ukrbb/Hn/l10Pd2wogmAQDxTEfJBq/EnXzn1njhAe3HaEdQfIAqS0hWLIfNx13AtHExabpWQmJhxNADOg67jVCswsigj1/ev1fg9DztNUqztxJJmX655bHt+4A6WwtRjCcp4CCDTjRGYEMeR3iQlUQgSosaNEBd6yJDmbhZKWdWPuau040egDW8uPIGqsFPf/W1lrKQRRRDdzHIk0lnqoo4ha47gDz2du4dIFIoleS0RzWwRxRIiMG1o0kLFETFQglqxpADnni3zK38Wl8wGUTg/xerhSNAAAAABJRU5ErkJggg==",
resicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAQlBMVEUhISEAAABVVVVvdolZYndQWXB3f49ETmVHUGdian4KDRI/SF9KVGpZXmwQEhaJj5t8gpJocYRKT1w7RVs5PUkxNkM5lNwzAAAAy0lEQVRIx83W2wqEIBSF4WYyzUM5Wb3/q85eGazbhrYx/0VQ+YGYkN3r554k74vdIAfoLnSgG6S7mA45V5HxiRLB6+GIX41PdImRhiElJ6VU7/VJL1nbny2L98Y4p00Aci4F7CWF0IpgKK4A+96GzDMGlwKwbd7rk3HExKYJCIGl1IbkXAfj6n0bUhdgkoBAYtQlMRoDYu1HCgHb0rl11SKcmjHc/viQnJYOIaqEQJcQIQJVQiTFyMXVJUQIoB1haqT9H/mx08XfHq6+Y+cUkTAW8VQAAAAASUVORK5CYII=",
strngthicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAKlBMVEUAAABfIh2JjsQhISFVVVWiEx+2ucq+IC2nqr1wMi05ExDPMT7Lzt2EOyOkB/+HAAAAl0lEQVR42s3WuwrAIBQD0PRxa7Xt//9uCQ4ZXITeQLMFchYRFP/OPpkvhGWbCHdfyDYZJ+HGTYD7jgBcRMBFBNY1ohQPEThPwEcEgOuKALKJAIcOMoIIBxHorZRMAoyAnRcmiwDLwnYcAkLsGaSj1gQU9jzSGpGAkkWAWp+HyEc6qJWdyEM4JNCROgiHmjqI/0X2/y5+nRfBBRkl+KIqeQAAAABJRU5ErkJggg==",
slownesicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyBAMAAADsEZWCAAAAKlBMVEUhISEAAABVVVUwMDs+PksXFyA3N0MoKDMgICpERFNXV2mJiZNPT1kkJC+RgjXnAAAA1UlEQVQ4y53Uvw2CQBgFcM4JQI/OQt2AoFJZXDAk2lHcBBgtrA0sYOIALuEKdm7hOL77GowGfN67hvBLvvt/QdQVTxnOvjPtFcAk+MwA1CtvoNBzKESLGqVpmoS0CCx366IC0QI43m/XHPUoaaGoslMZ0jLfAvaH+i/ZAKqsOfOCeQpcOGnXc/V0ELACyupGgBIlm6xiay2AEqXzRAgnJAYRokZJpI2jwH1zok2EH8q18QPwW2RhFrbURhupxYgMF/XQAKRIZAAAVtoQ4nG3Pd+QjnjJCwu3dL9lPedYAAAAAElFTkSuQmCC",
encrypticon="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",
swifticon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAAAAAA7VNdtAAAAqElEQVR4Ac3W4Q0BURQFYa0oSrW3ltcKTCYXLMB5yZ5fMB+wsFn3dh/udyLYfjDRr2QJ+v6XKEPM67RxGihPAMSH80A0WWJALByDc1WgJJExEQSYJsRExObSHDFkVXlyeUjMFCTOEhBrdCFjJMkFGkvT5ILIL6RqHiFmWULa6xwoyBBD1nG/oYAEAVyyji8PKUVAzJCUAbLELdM8uSxN5v8iz/93seodAcr5iodDhn8gAAAAAElFTkSuQmCC",
healicon="iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAMAAAAp4XiDAAAAY1BMVEUCAgK6ubnj4+PMq6OKioqvr6+7urrW0tKjoaGvr6/AvbzBwcHf39+fV0/Qz8/T09OyjoiVPiC0bm7DHh3Szc3zIyKjGRjcISC6j42lPiHOkoy2STjFVEHqRUTQeHDUbEuxXld8CLbAAAAAE3RSTlMB/f3+ElJu1D++vVxVXHZAskr7WAFbEwAAATtJREFUSMftldlygzAMRWPMvgVSlmBjzP9/Za9sOpAhlHaGLA85L0KggxAYON0h01r3UsoOlOvDr1ECwIUQwwRDnuwojuNUfKZCnj9GEZYrICXZV7gZ38KrqvqL0ve97Cyk+O+gnNM0jTnnRVlmBcb3kyQJT7v4dmQ3ZoyZ8o/yCy64UVyw/yiDMAxdKCGIoHn7Sr7Ij1dosQSYI0YMM0tBi8fzvI3bkKKDVkoJxGH6XCjKqdO2ouq6Hkhp2/YLtJQfpbhnkGMOBQZEvVQ4Zz7GcW+VfHq1OBCIVP6jKCn7q+m0VlBSIQrEpULtXqbQUhRLpWmafyrNuyk1aGfFlI7Y/iiPV7oNheF/0i4YkI9Sygsiu6cA7JbmiVsE5eh2QTxG8WIQRdHYA2XQHGV0YUVk2fiWRWzFfPZnKt/dfkuwXUKuLQAAAABJRU5ErkJggg==",
christmasBack = "",
paypalicon="iVBORw0KGgoAAAANSUhEUgAAAQMAAAEDCAMAAAAGD5H5AAAAOVBMVEUAAAAANOIAxP8AIbMAAAAAyv8Au/8Avv8ALN4APOQALuAAv/8AiP8AfP8AY+kAMd0ALdUAKroAHa8k+ElMAAAAAXRSTlMAQObYZgAAAkNJREFUeNrs3QtO20AUhtE7DwLpu93/Ymt0UUooyLHA0uA5n9nAHP0QW0ASkiRJkiRJkiRJkjREffdi+PrLGPTOoHcGvTPonUHvMxn0rOzewCIMGDBgwIDBqsH+DUXBgAEDBgwYPD/8OSs3dTQKBs8NyrnMblDsYMkOFgA7mP574SErWzoMBQMGDBgwYDDAQzMDBgwYMGDAgAEDBgwYMDi4QfvIfmUMGDBgwIDBpzRoO/Qn+5qtUTCIYBDBIIJBBIMIBhHHNPiR1ew+e5OCQQSDCAYRDCIYRDA43EPzU/W1GDBgwIABg9EN2iUGrTFojUFrDFpj0BqD1hjscHgGDBgwYMCAwV3GgAEDBgwYMKhXMWDAgAEDBlMZ/M7qVQwYMGDAgMF4BpsP/zO7W69eNeLhGexrUB+vyQ0m30H9N4NpDezgsXr8HXzP6moM3l+uaXIDO7ADO7jsYHqDcXdQd++UDfyfrf/dAM1o8BJhRgM7sAM7sIP9Xxt7Nv67AdVLDGplUCuDWhnUyqBWBls7Za8ed4xPrWTAgAEDBgw2Gjxkm1/uhzouAwYMGDBgsHr4L1lZ75wN9dtSBh9nUMryNbdBWRTsYLmm38Fy2YEd3IrwLTuiQRLMbWAHeY9kB3bg54EdLJWbO2V1vfvsMxksM5jewA7swA7swA6e6jd3pBsDBgwYMGDA4F0xYMCAAQMGDBgwYMCAAQMGm5+yx/9D3CUGEQwiGEQwiGAQwUCS/rYHhwQAAAAAgv6/doMdAAAAAAAAmAJVTAEPuiKZHAAAAABJRU5ErkJggg==",
realmicon="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",
heartIcon="iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAMAAAC7IEhfAAAA/FBMVEUAAAAAAAAGAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABWAgNBAgMHAQEAAAC8AwKvAwI5AgI3AgITAgM1AgKBBANKAwIAAAAjAgENAgFdBAMkBAMAAAAAAAAAAAD+AAAAAACOAADAAgL0AQETAQEhAgKUAQKIAQH6AABfAwI2AgKcAAG3AQL///9NAgJrAQLjAQLMAQKXAQL939/7lZX6QUD7Kin8CwuKBANLBAPdAgNmAgNCAgODAQOkAgLwAQLrAQJ9AQIHAQLeAgEMAgH2AQH5tbX5tbT4np7tg4OYCQj8CAiuAgOLAQPYAQIgAgF8tqi3AAAAI3RSTlMA1SuqVQvfSyCVgAO+cz/SvSIV9vLm5uLcycOxsKyWhGM5JRLiVvQAAAEwSURBVDjL7dLJTsMwEIBhNyZxltKFfd88U7tOSNKUllL2UvYd3v9dUHKoGqJIKOTAgf80lj7Jlsbkv/Jbr8TVCGkmQ1XPgxWIY4RoyWD8ElK6udCKW6W0kQzzG5TOZSHA3S2POwE4TQbRBjALQs22t5V6eR4Mhpz3lAoT6I2U2rLt6dtnANqcHx92Okc83T6AVhy+Pj08Dn8Ck8qDn0KI7+peiCyUiOoq7bwA0S8ImWEsuy6OPW+KeaLvuouGsTcFHV3XpZTvQXAweV8Q9NtSarruZHZ9c404gQLRlZNdF4Km2Vzx/X4YfnA+DsM331/STNPJ++FdxBbnZ4iXmR9eBNYYW4sit9cbRVGdsZpD8qMAF4jnANX4VAbcsaxGt1u3rNkckF58rEqEu5Qy8pf6AiStUE5T6+JeAAAAAElFTkSuQmCC",
compassback="iVBORw0KGgoAAAANSUhEUgAAADMAAAAzAgMAAABHz9i5AAAACVBMVEUAAAAAAAD/AAA9+90tAAAAAXRSTlMAQObYZgAAAJtJREFUKM/NkjEOgzAMRVHH3qNDcx9HVaeOFafgEuxZGPApScJXyFsQI397ir8j238oCu6eBunpZtEnUTDLqMfHakWuQquKe+nbdqVauIjGWjiLvpNsMsp2GJdG/9yk2GTMZE1RTVqb0FGqLY+mr45++kBfnNLc0edWdHkGzs69cGfcJ3fNO/BGvB9vy7szE8wLs8ScMYPMJ7O7AS4ox3kjCLRqAAAAAElFTkSuQmCC",
compasshand="iVBORw0KGgoAAAANSUhEUgAAAikAAAIpBAMAAACVvbUtAAAAHlBMVEUAAAD/AADuAADoAAD/AALIlZTpNDP0AAC+xbq52dkB0rrIAAAAAXRSTlMAQObYZgAABR1JREFUeNrs3bFNxEAURdEtgVcCi4CYdQtugMAFkDgnogXKRgsBNjvBWPpMdG4JR7Jkz9PIJ0mSJEmSJEmSJEmSJEmSJEmSJEmSJEmSJEn/VE6i0lU+c3cSFSpUCstChQoVKrVlpUKFCpXaEipUqFChchOVVlRaUWlFpRWVVlRaURlSsrxioUKFCpU/URlSsr5RodJRFipUqFApV5leqFDpG1TP91SoUKFSq/LxToUKFSqFZaZCpa+EChUqVKpVvPFT6Vd5NJNRoUKFyj4qHdWoPJnJqFChUlcWKlQOqPg8pEKFSmFZqVA5oPLsOJsKFSpUdlEZUkKFChUq1Sre+KkcUDGTUaFChco+KkNKMp/NZFSoUKGyj8qIslxVfB5SoUKFyi4qQ8p6VXGcTYUKlWKV6UKFChUqZWWmQqWv5FvF9EGFChUq26h0VKZi+qBChQqVbVQ6KlMxfVDpVnnwowIqniAqdeN7Ml3MZFSoUKGyicqQslKhQoUKlZuoDCnzj4r7mFSoUKkqoULlmIr7mFSoUKGyicqAflXcx/xi7w5ym4aiMIwmS/iRUhh3whLYgDdAJdMxlTDzSsAOULfAbmmIsRr5OnYkx6PzjTI+kl+Sd/1sKlSoUHkTlS0aVJzdpTJTWipUqFChMorKJqWjQmWpil/8VK5VMSajcrk0VKhQobJuyX8VYzIqVKhQGaJSdUMVfw+pUKFCZYhK1Q1VbGdToUJlldJSoUKFCpVRVDYpXZIjzeGBCpVZlTbZ7fa5ezImo3KhJC85fdzfPdnOpjJZXpLs+vbvf1luqUyVrr+A+kvIcktlqjTJblA5PFhuqSxUab9QoULlitKdryu+g6hc3IobVN7ZYKEyXY75uUJlQema/MnRJIfHZ4stlenSpkkXe/xUFs8O7+/NDqksUmnMmanMFipUqFChMo5KFZUqKhs0qDgfROUaFW9opuIKorKmiuckUJktDRUqy0pHhcpVKp4XR4UKldVKS4XKVSqem01lvqT9p+L6oTIbFSpUqNxIxfcyFSpU1lZxmwaV+UKFChUqVMZRqaJSRaWKShWVKipVVKqoVFGpolJFpYpKFZUqKlVUqqhUUdmkmJJRoUJldZWGCpVFpaFChQoVKqOobFI6KlSWquRVxRFvKlSoUDmLShWVKipVVKqobFJaKlSuUXFwlwoVKlTOolJFpYrKNoUKFSpUqIyjskG9ioEqFSpUVlb55HADFSpUqJxHpYpKFZUqKlVUqqhUUamiUkWlikoVlSoqVVQ2KQ0VKlSoUBlFZZPSmJJRWVROKsFCZc6kPZ2a+vaZC5UL5c1bqz/+/MqFylR5SQaVV5cfbhmkUpc2ffd9zmRSuYjStcmH39+fsVCZqjdJstvtk8Pjq4sXElP5294d4yYMgwEYjY/wVwq0a4eqB8kJqHKAMnCADGXu1N6g6m0hgSEhicXC5PcW9k9ybNkmWY3SRnWVYnvOUvpbxVVZMonSSy9/XfHPW1UWxCF61Uja7EsfQqrkBtBY2naqqDITg2oiPZW+jlPl7iqbfeFTsypr2wjNbZV6p4oqRpAqZmZVHi56v/MVf9mfK1BlSTSzqTnVu+J3ElRZPXlvYzKA7FCqsiQG/04+VLn/mCwuTZ5/nKiqkr+pcfmpP/pLYIWv4VRZFYe4Oh67V1FUyYh2erP0q+wVnCo5Ec2oyvu3KKqsi2ib4Wn79hn+3KBKXgwkUQUAAAAAAAAAAAAAAAAAAAAAAAAAeJgTG5aiGliuuOoAAAAASUVORK5CYII=",
reviveicon="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",
boosticon="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",
mgcicon="iVBORw0KGgoAAAANSUhEUgAAACgAAAAoBAMAAAB+0KVeAAAAFVBMVEUAAACaG/6NFvGSGPkAAABoErKiLfwV1hOkAAAAAXRSTlMAQObYZgAAALlJREFUKM/d0cENAjEMRNFtYWJp73YqcCylAjfAwQVkkdJ/CWQtQKClAub49G+z/cfcfxjMr4YufunQx3frhzTQQPEPo35nkKpVf5tQH5BSzYT9ZQwGmghzEfE0W7hGJlJB2frEiQW6wLAfZxuMg0kBk05WaZLFFrcl+0JpTCboI2LzCF7ChXfRfRSJ8O1UoFmpOgBQWuqYBiVANO2pauilYqa9larNpmkfWhUl7Usvlpp2Uf953F/sASFUMehYRUK6AAAAAElFTkSuQmCC",
bannericon="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",
helmetDiamond="iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAFVBMVEUAAAAtLS0z68sZGRkeDggeinf///8Q7HN6AAAAAXRSTlMAQObYZgAAAI9JREFUaN7t1bENwjAQQFEQCxBgAUBQIxkmgA2QF6Bg/xEwMpIVQhVcJMr75enutTeTJEmSNNDmze+WLFZvqzirXbdDjPEeQmCx+lnFOT5zj5aVCykW60+r67BYVazctimt0/2FxapiZWdza3d9eywWizVwa5/2zyxWRat4+beevuaLkPo4rGlZkiRJksbYC5/TwTg1d+ogAAAAAElFTkSuQmCC",
bloodoverlay="",
chestDiamond="iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAElBMVEUAAAAz68seincZGRktLS3///+i7+SwAAAAAXRSTlMAQObYZgAAAMFJREFUaN7t2MsNwjAMgGEkWMAVHYCUAXgsAFIX4MD+q2AUS6ZEBPdx6/8fE+s7WVWVDREREQXb9bnbj3OsFVk2exeRJqV0NM8cPc/12lXDwgpY7ohlVqfzp4HlJe3tYWHFrbL9x/4KFtYcS+8POtc+c49CdgcLK2h5tpNtxWm+HCyssKX3F9tXwcJa1vJ/tqrlDhbWWGurc+eKk7Cw5lj+PSwdLKxlrDKs1Vr/vM4cLKxJlntl9t6KhTW0iIiIKN4LbGgwr4H84K4AAAAASUVORK5CYII=",
buffzom="iVBORw0KGgoAAAANSUhEUgAAACIAAAAkCAMAAADbwBjtAAAA+VBMVEUAAAALMwA4dRE+mQ8A//8AhYVJkxs/lRUXYgAAaWdGmxQPSgAMRQAQQQAXhQAAYGUAXl07gxE0gQ4OPQAAZF8AXVUUawAbagATTAA9Gv8A5eYsZwwiVQYNKgAA8PwA//UUC20ATk4mE80fEagAV2AAREEabwAiZwAAZWoAWlsxdwwWbgAbaAAQYgAApaUAjowAZmYAaGAycxA5lwshUAseiAAggQAVaAASbwASWwAAn6AQCVcWfQBAJf8A5tQAiY8AcHEAQUQ5lxA6jA4AfoQREiNHixpDoBEYaQAA194AYmAAZ10AR0ovhwoVRwErfAAgfAAOJAAA9/d4T1D4AAAAAXRSTlMAQObYZgAAAtdJREFUOMt90Iduo0AUBVDM4KH3jgtmQzXg3mI7iUt6T/7/Y/YRxZs4kfZ6LAE6uvP0iH8pyznzTPwn83g9LUrB0QXPa1MUnLtfZL5WX151URdmPiWd+347+Ek07Vp9iXVR1KV1+3zWppTH6CcZkWoci2Ck6WsC92yDH8S/ulKvrkaOABfNZncURck180i0vRfSeVqXvKBLyWwN44aRmdaPSqiYOT3NGcGRJFuiPD+U/Ut2E38X1CmEORWcaeJLnvceBvU6W/+q8c7b1FqSppL9OpOod1hMlCmbunIP5iDOPWk2lZJESnw/oby79jZQLvsbo745tAweBsNWrQanZtZaoWIEQRD165CNdTBGlsoAIAP4D4esEUT1CyBFfiBDI3sYZICUSpgha2yDSwdIubg9GNY0BzJba8lAWEXJ0ihSLifN29xmDgSzoWkM5aw1SNnUUBTDjKJmczJZxMVhGtpkZYNl78MwZVlDyWRzG0yazWZhF+WnwKompwMzNeWhHMqZ+cBuiQmYyd5mrA+hjZ9onSAulr0L9j4bprJsBETVgmyGiSui7ThNBLLs9frA+n3FGCgEoaIxspicATHWOJoW4eGkt+z3e72L/mO4WgG5RjjPF3Z1D43Hul6RP1V6y+Wj24HPT1hFlm3DLHhM71BV4p65J6DgrDpA0BhrKC6aH7Pu9jWhIu41d1Llz1lF9hzS6HlZjaJirFbXcNecu+qs3DP4VYQGYhWf69XED3Jzs38WOi7HuWedFbHjOIwXDIzyle60JTr8/oZDbseBURDGKGEWt99Jg+QF5w3fcJzIQymNEJ2UFvONkI3RQuAbUOZMn6GFRpi2mCMyAiPyXZLsQhnsAnaLLbvIv5FGozHixdEH4YFgpGKmnBPHhBR5EsILIqHRO5XO5xZMe4RIggAxcnhoaakqmid5QfwK2e2SDgjI21srthe/CVR1QRzSYn4LCCkcv/8FCaVckliQd/wAAAAASUVORK5CYII=",
legsDiamond="iVBORw0KGgoAAAANSUhEUgAAAJYAAACWBAMAAADOL2zRAAAAElBMVEUAAAAz68stLS0ZGRkeinf///9TcWBNAAAAAXRSTlMAQObYZgAAAIJJREFUaN7tzE0KgmAUQNFoB4EtoJ8FCF8biN4Ggtr/VireoBIVQR2I5w7v4GwkSdLAtsf+WOuyPs5h110VEeUdizXG2j+zO4s1k/WI/64s1kRWFdmtZBcWa1Irnfr3s1gsFovFYrFYLBZr8dY5srQan8UaaZ3Kt7rls1itliRJGtALCSY8Dw0b/KcAAAAASUVORK5CYII=",
stonebrickback="iVBORw0KGgoAAAANSUhEUgAAACYAAAAVCAMAAAAdDWyfAAAAxlBMVEVRUlNCQ0NbXFxHR0g6OzsxMTE3NzdeX2A/QEBKS0s0NDUtLS1JXiJPT1BEWCKBgYFERUVYcip3eHhMTk4rORJvcHBYWlpzdHNpampnaGhgYWFVVVUkJSUwPxZAWg8wRQkkMQwpKio+UR5FXhx7fHxsbGxjZWU9PT1mhixSaidXV1c6TRgbIBMpNRJjZGRVV1c2RB4mLhgyRBMfKgwuOhhHYhY3TgyJiYhRYzVMaRZOZCg2SBUoOAktLy9XdCRUbyBcfB89UxVaTrc9AAACbElEQVQozxWT15arMAxFZRtjik0voRMIkN7rzJ32/z91FT3vZWsfSbC9lGW7s7kVVc39vPG8rvMIIefm3mhnq4p287LcbmGr61VlqqY5f9YkjTPf9+O6fv3VZHCE03Wm1/67XMBud7o2EdbUnSJxL8cxz/Na3oBk9C9kxNDatr0At7lmEBZCkigWUDpbzbD8oWCxMGHDDEOrrC+wLV2rEHPkOmRpNsve3LfvA4vXiQo3xKiqyAakCCMhwEGqPkjjYAjSdPadFX28FzQE4uFrO5hzS9c1w2NmIqSfZftRYOU0kx9QmMzQdIvbNpRz+8SROzLT7NXh4DhJkjiHQvUmY8cjUid7XgISlQnmgYrxJh+Lhe+68SKI05dczEaHFmAQTefAI42hAKW5lLXrp26wXLqLIO3rIJc5QNhhJjuwI0I2nQNr6Ujp+u5iuVwGaeCv5IJKKp1uYxjRCbCvTxMKmjuOUG6cIvVw3dkzU0FO+34NJtNPJ2gtDVPDQBxRgDvEQYw/DsGTQiApBmJ62nTib9P2X9MYHXOcXgHUt9vtsEoKiabe+dw0UcTnLSATNfrema18bOz1279+Hs+Hu/TdtK43n3d9HZLqiqOPGs1Kiu6QiHysV7/+3kWBbJ+L5F53xFJVZNnA+Q6nsVZw31AxjB9ZunLj4VnnIstBwdEKpxMu0hevDJ2jUPHObvTjGXVjQcc9pUlRhJMVWpy3YNuRziOlYA0ChFiJH0iHYZ9lkBTK3OiRN1l8DiWq6tFR8wjzcKygEvrxJtCTGBNGe+V2WcJ2iyDegn69apNxJB4W8cjRmCbtisuxm8/xFv4DsEVDxQZgzi4AAAAASUVORK5CYII=",
bootsDiamond="iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAMAAACahl6sAAAAY1BMVEUAAAD+/v7///8RERGWlpaMjIyIiIg7UU3IyMgLCwsGBgYsLCwZGRkeincz68v///8ouqEbUUgy6suOxLuWlpaZ9OUYGBglgnIvjHyZ9ORbv66Z9eUt0raVlZUjoowcbV8bUUcnEj5DAAAAC3RSTlMAAgKBgYFAwUBAQL86r0QAAASFSURBVHja7Z2LUuMwDEUthdfu8igsDcu+//8rd1274ZLUxO6IImt0x+NxckkyBwnXVQGHJA6BdgOKYxDjeDYi6HndQMkbpkA4tIqWZxQYzMSBY3s5h2LsC/eqNPi9jDJiScXoKjCKTlm07AvG6VKLOQ9j4xD2jZljR7lPh+k0nI2DOmPWxA07ETEDQvSSWkxMxGHX6L8CRfGuhV3LCrlFg6oNHIgbdiJiCSQNCSgYDZ4MPIuiWoNTL27UrbW4iIdXrxuETxc2UAw9OCjVi0YiQCBm4tTP5gc4TCNuNgLMfvKGp5a61JrWWnnMecXFUbDECTCejuErqgzee/KGp5a61IqifawyHkK+AcZtBuMNpQx/QdSdWoYi4iAOImwsVXaWkI0GziMihv+wqwaxVKCzERFjIOncLkiYWrnNxjCqN6AJG55aqkHgaFVnNboIBV1UXR4qVC7QVepLjYZQ0FB1eRsIGQSJ6g8EZlS2FhEDIHmt1Wlq5bzy1FIKQr3OWhOOtYg4SH8gr55+C9rcgK5Bg+CtHKRPEGaaPsJtAXlQAELEtJediBgDiWoAeUjZJQHycHyWvqqiWIuIARCKfaez1iRTETEGQg0g2+32ebv9sY36fiwI3uoZb9UOcnRq3YG+toNI3QojYgokzVqBYpMCGU8EkhCsRcQYSFR/IPg5lrWIGABhJmbJWWsUBRnfAoG/pyA7EXGQ/kFUr34dRA+IF+gUgNhMLS/Q6YyIARAv0KkAsZhaSdQ1iKeWShAs0LWBlF8QxxOBJARrETEGEtUfyLTQ8rWWRhAo0MmstUYBkNYCnb9DdBAHcZD+QLxApwDEZmrhur6/1ErZFTy1lILko/5Si5m89qsdhA48EXT5CBJMLbzVzw3oCXQ5gMJMFQU6fODjHUgyIjX6hlccjohNEO4PBP99mcGI2AAJb6fWL50g+B9grUXEAAgW6FpAygW6E6cWeWo5yOlAzpa/J4LKZ25KagfBqzcFjvI369xBVINggW4OcqscBAt0diJiDCQNC6mFUgUyFeg8tZSCxKMiyNQrBMECnamIWAI5MGttSsL7/rkHDaDPJZBPAwivfio973cRBAt05Yjc1OgebxyahVffFx+yHhGbIHwMyN/dW9vxg0CwQGcwIjZAIkt/IFigsxYRAyBYoDsORGLWGptBxn1qkaeWg3wQyHWNhiCmoeqBDtIPSLFAh592jDpBsEBnJyLGQNKwkFqgURXIVKDz1FIKEo8UgSymSDSKBTpTEbEEkoZXZ6DzGl3IgVyct+rqozetI99/pAYEt7ZJg9hBnwdwgDtqhjVjdqmU4bsmaQfJ5yif35VVsPwFG/LiAXxRrRHewzC4QbABECzQBeJp++kDQWSI7mxL/HUD7yZreGo5iIM4SJcgWKCjPPHCqVnPNHvRBm/NYJygZQ2ffvWC5OFi0Zh7bETLV9YKA7IiiBueWkpBeDI5NkrvdpOIJ+EevbPtXdsMEjR8F1ftIDCE8YqR0WsNBkhhw2BELIF4gU5bRGyAeIFOW0QMgHiBTltEHEQZyD8CWa4UYkmDXQAAAABJRU5ErkJggg==",
teamicon="iVBORw0KGgoAAAANSUhEUgAAAGYAAABmBAMAAADL8flRAAAAElBMVEUAAAAFh9sJg9MFh9kDh9UKhM2y8KyCAAAAAXRSTlMAQObYZgAAA4xJREFUWMPFmFuW2zAIhsE5fQdpA9bJBmzPBnrZ/55asAnCWM7kqerxTKD6BL8Eilu4Hggfj8YUsPYNhpmBy2FM/2z6FsN8TEQmC5uGr0ZojC+w8XLHIB8DgtkGGVFgSAxy63KzmGeY9feRkvw0i4a6Re0RwRgSZuKSCM9B5tkis5CApFadc5QCGsKY3UCmnZlCdr7oPh0j8xOAYA+U5RwHKDjEzyxhVoYhgxcM/2mENTN0jsOvz4SFAAvc5kbGNBUopwYPpltGT0R/6UMT+QklRubZhhnDTWxxXBbbod9L7EhUneXM6LLIPTPjEVIVQS7sySoHAX5YERkjp4or5X1DL/jAsDK+bSmULeCKmUkdG5dBo6ar5oCxNm5jxkfs9I2uGRgx9fa2yipF58ozfDQeXFtZPmMmBnjCh6PC/xycXb/T7j6Dp+WLqLbzfVbWspyu0FPglZmX4NG7OR41RUZHqoevYMayxTUxLXh2i+PR6+gUFQ7ZXHzBbMnV7pnHDC0x6y2DG5sr7q1n62Fdy8w66nxmyhJb0bUUsq1MvefmeRsPV0vMGuNSZ+2Sy7m+uFJcww3JAD2M+8saK6X/u0VVbXRu8WGzVtmuD8fK5UNCtV7fB1Pqn3Br48byZ7EiJ/n5zP3TG9XKyRS+Cju94bkRGFFo/TPHWzwz/QtJCbMwLhqYxU4MW2DMYreq+WYr9CmsAqdEdMNe4WzGM8zCk+I5BM8ajQm5hmmUNFJcZB4weMPkK4NLYqoxKbnWr/M4CZqCHXMrFpvtWqmqAB3I95cE2K2ysA4J0aWGPbT6DLWe0HwVmdwztTufai+7WI5TLiCMxwIL5HpeTft1eCq2wFjvdLvbNS2+9CyB0U1ceoYjo3qoY0h1VCtl0xNeCgtmxsYU9fgqKIEz80ZPecNoiwbPk2tiYibaop6tfTXc65nM7XVK73MzNzrzqR7N9dHoYOplbuXElNCUJe3BE0AeY0iSGb+IrH6XDZjLa8fkj5kW9TCXe0aqiuLXW+OKdpxDPfJEPVPUwzk3SHqkU26ZasxQD2c9kg0FPffMQ/XEq9ezTYx/Vae3tXsGDz1z0KNPZH4FZst69IkMxhfDrEeeMbPJx6wnFkLswD1E1uOFkJk9RNYTCiEz9UoPjhgrg6RnwHBXBlnP+Y3TGC+DrGfEeBlkPRpsrCf/14VaLWQrkzx/ZCXp/M91rOH2AvP8Bc7AnMnFeg16AAAAAElFTkSuQmCC",
handDiamond="iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAMAAAAL34HQAAAC8VBMVEUAAABcamcTMSgQIhsHJh8SPjMHJyAKJh4OPzcOPTQmUUULJh4SLCQXRDsoQzwOQjcRKiYXQjkfSEALJR47Uk0VQDUXQzsbSkIiSkEXMCcMJBwJJRwtJBVQPyIOPTQVRTwSLCYVKygPPjUVQTkmTUUQPjYUQTkOLSYOPTRSQB0yLB4qHwxHNhMOKCQLKCESPTYWRj0HJSAbMixBORQSQDcSMCkYRz8mHg4tPDkHJh8OJRwdMCoecGEcMSofLiQlMCkWNS8KJB0bSEElhXIqs5oPRTwvtJ0VTkMon4oSQzoZaFcRPjZJOh4gUkYbbV8VKSUVLCcXRjodXFAmcWEaMywPJB5GMhYTU0oYKR0jiXcQQDNNPRkMJBwMMigsgHFNQCZrUiYUQDoXXU4aWE0TODEzMSUhRD8tcWNLQSYsIxEWLydUSS4KJB4XODAHJiANPTUz6ssryK0giXgVY1UIJSBKNRVoTR4GJR8mHAsy68sz680syK0JJB807c0LPjUVZFUy6skNPDQv1rkginkGIx0IJR0ejHoLPjcrya8MOzUNOzM16s0y5ccs0rQei3gWYFMQQzsw4sQPPjYz6swv3MArya4QST8sz7ITU0iHaCdHNhQz7cwpxqsXaFoLOjIy78wx6Mc05cYry7IqyLAhi3oTblwv17wLJyIVZFgQVkiLaCYJLSQHKiMu2LkTW04XTEJpTh4pHAkz7M8x5sUz4sUkpo4ZcmIWUUYKLygHJRtRPBU30rgfh3cPUEMQQDgry68vvqUah3QNPDFwUx5DMRMyvqYpqJEjpIwghnUdfm4HJyEy4MQs3cBmTR40vaMRPzUhoIocbV4UalsKPTUw3b0u0rYpzbQowqcou6IZd2YYX1ERTkNPRCJeSR9bRBkx68kihXIfg3AMRjsKNy6IaCcrNyI/PCAqHwwu270XKBwng3MceWtuVCZpTR8fjnolHAkz784beWoheWgQUUYkhHFvViZuVSY+PyNIRSIqNyIlGwqBQ6dhAAAAbnRSTlMABFse9z/9/f32L+GHrxftsa9YPxMerVpUWj/hr4Pisq+F/dE07tO0loNY/eHW1peGaVge7ImDaQr+aVjAWU08kmZE+/j29PDu39zSzLSwsK+hkYdeP/339/T06NnXy8XBurm4pJyPeXJrWEM+Japof7sAAAcvSURBVHja7dxVtBJBGMDxtbG7u7u7u7u7uwhdRUBEEBQExRbFwMTu7u7u7u6uJ3e+b1BBPRbLos7vjXvuw//Mnd2dnd0LxzC/K8J3cJLKlCT2N9VPzEkpmUzxTXFjcL+AZXG/gGVxv+C/ycow3J9RyqzeUaiGc9CJvtRmKbPKZYiOKq5Ep6ZQ540SZuUdowDGa3YlYR9tVQHr83DIGh6YNf7hcJbFsv5ENkV4Zp00gmmv7FrCPno8ZumeS5CVKFlSVGo7tWccumdCi/dLkJWp0DCZTJZBJlut1wL3oVkwRqoRg5XAvWmaBFmZBynAXj1WaMIqy7h3Bcv627N2+LK00mZFAMKReGMUWK0dDJSHZlnHC1QTV81AzTMXEmSuHoqsBElQqSO7kW4iNXfVaGLVtuNU1xioGCe+fMOAbapnup5YYZqiAlNMWg3h3rbFdlJgy5CACw3MUhC2qY6xyDRFB6aYxmLW7lEKIAtpFs704VNXKYH982iNVRLTWdZfnQVdEs0thY2YNnWGXUN8kbXCLdAIozVMMGiQLCknvjiJUYP54OXzgw5kmjkRbD29EVXJSGTJkrECJ7oIedOgaouRaSZ1z4Ou7lmLasdJhCJwoosQ33cJ1GvBp6XxKSXSr6ar5/jfzxEzC9cLn7PolXn6avyNQSyLZf12FgiXrJM2o0DI0hDa0bNU6JRbK1ix4tmeYVAViqwIcRJTHeajPZ4ZhOPgGer0RqpaRpCli/hZidqnQdWr3JtLLB6xdSY4vdJDOByzL65FDRKhECxG42RRoFHbpmu0xFwVGqFE2uvTjEBRhAuNwCw4AufO+ipLAcawrPDPcl+lWTowQomLUbsUWYlqnrSBLUfcAVNeo0fXbMPQb2YVK5siQOLv50RByWrMQWvOHgSj554eAbYeodokoX5zjRypVeQA5bnviZI5Omh62uMAKyeOH2+1WlXjx40dTLjPThiFknJ/9kg6Ukq13F/+72dFx+0Y11wtTqHBI1RonBYXfWdvKIDfvXMIs5QBWWP9s2Qsi2V9lcX/OGv4N7K0YmXxXu8BgfdAfs7/fZPPHytUHgWWmNyD0elZs6yC8fdWAs+5ytFBi2RBy9rimi9wuWrGQ3XL+gYpdnxU6sg2NPH0CDTu4Gji4LETqFSFKChO0LImGIi+hmFqnlBHK82hpLJBYPgJz3Tg2aqjVuGWg/L6NBtIG4GjgpjVFwyjP/giS+Hb69MoiRlbdSpgPagEK7ZPwwtzKLJKfp2lDMhaxbJY1h9lZZAgK2ZU5F0qZBkMn7L4bxyJM77KsoMV+zKALbGDlVWsTOkCKP6Wo8QYV18nqp0e1dlDVTLRPb9749C9Y68eEBUbJkOZICuo0vMDwbwnQ8GTpfjZfP6ZHkxfpcNRmulxawi348Q0o00g5hOTWLxFzgtpztlD+hBDluJf03xeOxYoD1pVOmKmQ6kBK+fsEH1XO5YFKtY7h46kWWZfltL/XQYhCzlYFsv6syy9BthXqXRgq2eFHnjmnBxESJK1ZtwhQjhPLTaBiXtWo711soG8mTif0GVNtc5CEwdfJTQm145BIHoULlAIs8ar0ETcPtaaXEYFYFks6x/IsvR9MnSIYPbspWY1YZ661Qq2nnbriWeLXYoxIBRZjbKiGmuotWOAceoxavU5VKljWpQkBie6CFThRZRzH9jkXLQQPi9cuA61TizBv5/EwuUgP9DwZAgx1DmQ9xkI8sThQq+wHFkMs/sQs5283F+YZKlZFssK0o0ZErKGELOdFgs9DnkU0qyeqVHbO+jt0pebwfwL1JIJqGq59LFA+kic6LL3IyZPvrKMem9eLzCbL86mw3Z9noGYt2Sh3AIiN+ZER7P6XemPDt/GOaXeLFy7wf55fQnDkoV0tkVOyAUKWZaZZbGsfzRrMj1B9Kduq4sTlosjIWvIyM9ZFjUQLytRt9RUu51owy7UpHP5EkT5+i8vEps3TxiGtkzw6ZQ+PZxWg35XXTBXPzR55wK04cMAkDMHhyJGswjMwgjxQL1wyTwD6HuTl/OCqMnFzJpE3NowIDArqtzfwiV0U9p5cyAPm9LiZoENT38mC7GssMu6JZh069ey5GJlTUb98Ei8tWDDcvQ5S1gA+hGORBS8rDiNEyLUK0fLDdTlN4+I17VSUZ8eCterG89P1qoutHYdH6SsHpH9Nbvc/zDov+su6h74ekyEQHFyew8giApCVuBE4e9fXtYfPN41ACwv+uMRz83LkYhZ/X1Zy1kWywpGlpoSpjwVDlPeOw2ftW45+u4S5TtflfnxGq1cvHR+6pUNThbvPb4JvVjnpRrRE9TvfDcNF6ysNfiMdciLdTzyJuckRLMWrRkKWUP3r/O9XxCRk0Rg1kiW9ZdnedeMBOGWdXzTPvAirLIODN+CxkSVh08WXHyQPKyyPmFZLItlSaBMzO8pw0moWKTvKcYxDMMwf62Pbs5/m9P2PA4AAAAASUVORK5CYII=",
redChest="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",
paintingicon="iVBORw0KGgoAAAANSUhEUgAAAK8AAACvCAYAAACLko51AAAC6ElEQVR4nO3bsW0UURRAUYOIHVACgUUBDmiAlIYQkTvBZdAAQo4IHZBYIkSyG8AVmJ1h1+N3d8+JR39m5199rfQ0Z2cAAAAAAADAcq9e+gGOxeXl5d+l197c3HjvB/D6pR8A/pd4yRIvWeIlS7xkiZcs8ZIlXrLES5Z4yTKm/Ic1I9+Hh4fF656fny++1ij5aU5essRLlnjJEi9Z4iVLvGSJlyzxkiVessRL1smNHp9r5Ht7e7v4XV5cXCx+BqPkpzl5yRIvWeIlS7xkiZcs8ZIlXrLES5Z4yRIvWXuPEz9/PFs86uT43d0vv/brj/36c/KSJV6yxEuWeMkSL1niJUu8ZImXLPGSJV6y3mx9w/efvmx9SzZ0d3212b02PXmFyyH520CWeMkSL1niJUu8ZImXLPGSJV6yxEvW5uPhNd6++7Dzmj+/vlt32LpbGXvyLnmxa66z7jbrbmlsvLCLeMkSL1niJUu8ZImXLPGSJV6yxsY7ebJzSibvw+jx8NIXt2YKtGYzrDvb2JMXdhEvWeIlS7xkiZcs8ZIlXrLES5Z4yRIvWaPHw0vHnRNGqMe67uQx8tiTd/JXq6dk8j6MjRd2ES9Z4iVLvGSJlyzxkiVessRL1th4J092TsnkfRg9Hvb18Ix1pxp78sIu4iVLvGSJlyzxkiVessRLlnjJEi9Z4iVr9HjY18Mvv+7kMfLYk3fyV6unZPI+jI0XdhEvWeIlS7xkiZcs8ZIlXrLES9bYeCdPdk7J5H0YPR729fCMdacae/LCLuIlS7xkiZcs8ZIlXrLES5Z4yRIvWUcR79Jp0dqpknVnGz0eXuO5NsS6cx3FyctpEi9Z4iVLvGSJlyzxkiVessRLlnjJEi8H8+36atP77T0evrtfce3GP47j5uQlS7xkiZcs8ZIlXrLES5Z4yRIvWeIlS7xk7T0e/vn7EI8B6zl5yRIvWeIlS7xkiZcs8ZIlXrLES5Z4yRIvAAAAAAAAADDZI3ZMtLZ4xxbzAAAAOnRFWHRDb21tZW50ACJtYWRlX3dpdGhfX3BfaV94X2VfbF9hX3Rfb19yX19wZXJzb25hbF9fN3Roc2hhcmsijcktLQAAAABJRU5ErkJggg==",
mobheadicon="iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAACzElEQVR4nO2VPW8cVRSGn3Pvnbuz2bAbOw6RA4KGLiSInipKidLxP6ihp6PiF1BR8BP4ECIFfZAVBclRJDsEHMdmba935t6591CM7cWeXccuaBCvNM2Zc973fM0Z+B//Ju5+tqyXjZGLOn7w+ZICVFWgLD1VFXjy5eRC8a91eu/TUgGWVgsAQpXxpSFUGYJHVXj0xc65PAtfHmfuhw0AcWrRKBSDxN4O9HsWgMlkCoAmZf2rei5fx3hMPq0TxrS2nKH0hipkchMYDPon/sciAKNpjyvVkIdfb5ziNWdFdtenJG0Frl6DN1pNqpDbAOfxw+bk+Sf+8hVrj190KnFnDarC+HGiKJTxuxbR08WObsyWK9WWwcChSdn4boLY+YvXESHMijv4rSFXDaM7bXtGSzOSsNeSP//hkJzzXPLFIkeIUeiPDLVr2F+LuNJQ3i4QFZqobD8MSBERmSXlGoMWApxuY0fk5ug6lGCtZWB7bF5/Co1Sb8L410j9StCk5JzJU8EYxRhzUk3S1Em4M3gVxWVDmrTON8Nb3Mi3MEAgg8skSagoKrP2FYXQuPlt64gUheXJt2Pq/UgcTxi/ald0uOzpjywiitZKrmaZGwPnTaUjsn3wglsfOTZ/rKDXZiqaqaoAQKxbm+0JkgRNQm7MucPviKRoGKx63v9kwPONXYbLJWvfjGkOoUiK8wbbs4hVsotIEuycOZwrArC19yfrv28R9muePdrk7XslOz95hn4F58CVDWITmUzpPQDu6DxY6V6WznbtH82gvOIZrrS2/qpw7UHFy3FNKpRmL574217icAK+hKKnxLo5S7n4QL553yjAylXD9kHGLxviNBF3wWQh50zRs/jsUUk0wB8/h7l8Cz/Gre+zAPiPnR7vTqEF9WEgG8U4MBiipIXkr63kLN554DWEhmorIyI4b3j5S7pw/KUw+lAu/fv97+BvvalF0NojewkAAAA6dEVYdENvbW1lbnQAIm1hZGVfd2l0aF9fcF9pX3hfZV9sX2FfdF9vX3JfX3BlcnNvbmFsX183dGhzaGFyayKNyS0tAAAAAElFTkSuQmCC",
removeicon = "iVBORw0KGgoAAAANSUhEUgAAAZAAAAGQCAYAAACAvzbMAAAABHNCSVQICAgIfAhkiAAAEYZJREFUeJzt3T2MpdlB5+H/OfejqsvT3QM7qGUCiwSvIEAr2dh8BNZqErRCMg6QLIc4AFIiMkS0GdJughMyLNiMhGRlIbySRTCOkJBnLEAs9hg39ozpme6qmup737PB7Y+x8Q5VZ+65t+vW80h3brU0Oud01X3P7/1oqRIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOA/VPa9gOvk61/84u++dHTr9tRa2/dagO2qpZSH7529+8k/+ZM/3vdarov5vhdwncxvfeQPFkdH91bTtO+lAFs2rzXzWu8nEZBLEpAraK2dPrq4yONpcukGB6QlWdSa1trpvtdyndR9L+B6Ke/7L3Aoyo/5iv+YgADQRUAA6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQALrM972A66QlSSmbPzx9B66/1pJS0jZHOZd0MAH52n/77H+59dP3fm09TesR40/L5TuLi/NZmc1T2zRiCmCP6nqdxXo1ey357Xpy986QOZKs2/TeJ8/e/Z8jxt+1gwnIrZ++92sv3bnz3x+v19s/h2gt09FR7n75TzP7zpvOUeAAlSRT8rF/++jPfGnUSeIsyXlrZxGQF8t6mtaP1+tcrFZDNvhptcr6+Dg1ERA4UKujW7lIS21jjvJZktLaxZDB9+CgHqK3jN/cxQMO0+YZ5w7mOKBt5KACAsDuCAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQALoICABdBASALocVkHYwv2oYOEDlh96uv/m+F7At03L5znR0lGm1GjL+erlMZrMhY79fzdiqtyTLbH7wcss2lCSrJOcZuzO27OIzWzKVOvQgbFPW40bfrZ2U8Otf/OLvzm995A9aa6cjpmxJFhfns7t/+ZcfWx8fb338JMlsltmb30o5PRszfjaf2e8lOcu4H8xRkin5848nX3o7eaXqCB/ClJRl8v2HP/fzv7O8dfL582ka8tltpWR2eprjN74x9APbZrOsF0cZdViUJOupTV+/OP/7W8li0Bwnq+QPP5f88Yjx328nVyAvHd26vTg6uvfo4mLMBKWkzOaZfefN1FzvHfFxNmdyo06ASpJHyf3byVcHTcEN9I27dz43r/OsRwWk1pTVKiVjj++yXme+Ph03/uatLpKPj7if0ZKcJLlIbg8Y/t/ZSUCm1tpqmvJ40IcrSWqbdnSJO1bJJh6jvk8lyeyAbl3yYmjr9byUWcqg55BlmlLSrv3xnWz2qFWSUTfEV0nWO9oKd/oQfdj9snIwz6SAAzd6t9rlbnhY/woLgJ0REAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQALoICABdBOQF1K7ZuMDNNN/3Aq6T0bWdJTlKMiUpg+Y4TvIwuTVoeG6oqSwettk8U9ZjJqg1rdbUjD8RmgaPf0gE5JJqku8leZxxm/tRkneTL58lr9XNXr9VNWnvJscl+dq2x+bF9vqnPv3VUurtpG19f2y1ruYPHnx0/tZbOaljTrNKSVYXF3l7yOjPzZLciYhcloBcUk1yluQ8Y65EWjYf2rPktVeT/zFgCm6wUuonl7WerNuA8/dSM2st5f53h20oJZvjY9Tx95QN8Wp8v66gZPPhHXEFUp6Pv/UrD0hrFxetnUwDAtJay6K1nWwmT4+TkeNzeR6iAx9K+ZF3bg4BAaCLgADQRUAA6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAviPbkvT7/Eq6H9kNvo6e5tuMfovm+F3BdtCRHScqT1wjHSd7dvMFWTbNZq6Wkte1vk63WlDobfjY6T3Ir4856W5LZoLEPlYBc0jLJlPz5o+T+bND37WFyqyRfGzE2L67XP/XLXyklU6ZB58DLxaPlt7/1UkkyZcAJUClZnZ3mnW2P+z7zJOvkn8+SP6vJSyPmWCerk+TeUfL5sxETHCABuaR5ko8nX7qdfHXfa+GwHM/qqy1JG3Rq3UrJ/M1vp6xWQ27T1CSrJI8y7upgkWSd/Msnkt8fNEWS5HvJZ+bJ50fOcUgE5JJakreTV/a9Dg7Pe+sprYy7Bz/VmsV8kaxWQ8ZveX5rd9Tt3SdjD9+vTpNX7oye5IB4iH4FHnAzxKhd94f46F6GY/xqBASALgICQBcBAaCLgADQRUAA6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAwL75LdxcU/N9LwBuulZrUjYdKSMmqDUlZejZ4izJcQatP8kyyWmyGDQ8nQQEPsA//tKv/MVq3U5HjF2TTMeLB4vvfDetDLwQmdWcTqtRo2ee5CL5p/Pkb7LpyFbVpL2XLEryxrbH5sMREPgAP7FcfvYHjx8PO7OuKVn+wzeH3sWqSe4nmbL9K4SW5CjJ4+TvPpF8YcvD84ITEPgAZ9OU82kaFpBpmobfl3l6a2zELayn49bNXSZuGA/R4QOMCgccAgEBoIuAANBFQADoIiAAdBEQALoICABdBASALgICQBcBAaCLgADQRUAA6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgy3/cC4KYrSdoO5hg5tt8dfzMJCHyA1kZv7RujNuCW5xv8069HmNzNuJEEhGvr4Wf+a3uwWo3bFBeL5K//KncHjZ9sdt03n3w94u/RktxJ8gsuEhhAQLi2HqxWebBaDRm7JJlKyctJpiEzPFczdnevSf4o+cnfS94eOA03kIBwbZUfeef/7/Vkve81cHjctwSgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQALoICABdBASALgICQBcBAaCLgADQRUAA6CIgAHSZ73sB8GGUfS9gS9rg8R+Nn4IbSEC4tqbFIlMZl5BpPh9+iT5LcjdjQ3g7yaeTn/py8s7AabiBBIQh/vGXfuUvfmK5/OzZNA3ZHFtryV//VV4eMPZTNcn/zbiDpCV5OcnPHs6FFDeMgDDEat1Of/D4cc6nadgcd5OMG31jns1Vwigjx4bRBIRhSpxaf5AWDya43vwrLAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQALoICABdBASALgICQJf5vhfAYTqUM5P2I+/AcwLCENPx4kFNyTRNw+YYHalZkpefvI8KyJ1B48IuCMgN9Pqnfvkrx7P66nvrKSlbHrwlrdYsvvPdLP/hm1lsefjk+ZLfzNiI3E3ys9v/DsHBEJAbqJRMLUkbsTWWzauVcWftLc939VG7+/vnAH48AbmJppZWx27wu3hmYIOH/TqUZ528QGzscDMICABdBASALgICQBcBAaCLgADQRUAA6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwHhWmpPXsD+zPe9APZguXjUSslUB50/1JrMamrGbfIlyZ2MPQO6PXBsOAQC8oJ5/VOf/mop9ZNp7WLE+NNs1pbf/tZL8ze/ncV8kRFbfEnJ6bTK/Ww2+u2Pv3n9QlL+KPnJ15P1tud4lLRPJz+17XHhkAjIC6aUentZ68lFaycjxq+lbDbg1SpZrUZM8eyqYMq4K4Sn2fu95O1BU+TLyTujxoZDICAvnDatW8vUxtz8aa1lym6eH4y4+tjF2MDleIh+A9l8gW0QEAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQALoICABdBOQKJr8N9kp28XvXYZsc41cz3/cCrouSZJl8f/Q8rdZVSk1rbfuf5Ja0WpNSUjN2g58nOcqYMxRHOKOcJN/3+bo8AbmkVZKHP/fzv/ONu3c+19brId+3qSwezh88+OistSzamO291FlWZ6dZZdxGPEtykfzT4+TvarLc9vglyeTq+cb521//jVen2r5QWj0bMsF8vnrrX+/fe+Vr/2fI8IdIQC7pPMny1snn53WeUmZD5mizeeZvvZVy/7uZZ/sbfMtm130nyaMB4z91nOQ8+ZtPJF8YNAU30Lq0X733kdu/dbpaDRm/lZJ6927Oh4x+mATkkkqS82nKeppSBl0dTFnnpNZnP5SRt5hqxgXkybjHg4bnhppNs/Oz1Sqnq9WQz24rJfP1Osfx/O6y3Aa4ghL332FfprQy8hh0bF+dgADQRUAA6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQhqhJ2/caOCw2qxfPfN8LuE5aKWm1pkzTmAlqTSlJGTP6M/Mki4ybZ5nkvc0UsDXr2fy81ZpWB6Wk1rQ6+ug7LAJySS3J7PQ0ZbVKGXRy3WrN6uIig/KUls0PfJ388zr5lzLo53+aLEryxoixeTH97a//xqvr0n51Ns3Op7St7sI1m3gszx/+Yj1dZ7kec4S0WlLPzlw6X4GAXFJLcvzGN1Iy7t5MTfJ2kvOMuzq4leQs+bNPJL8/aApuoKm2L9z7yO3fOluthnx2W62pp+ssv/K/sxww/rN54t7rVQjIFYz+cD0du2ZcQOrm9dKg4bmhSqtnp6tVTgcGZLmeskyGXaFzdZ5LAVvjCcLNIiAAdBEQALoICABdBASALgICQBcBAaCLgADQRUAA6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF12GpA2bOBhIwNs1ejdape74XwXk9RSyrzWLOqgXpWSul6nPPmjnPx47clrnaz2vRYOzHy+aqWklfLsONyqWtPqkJH/nZGz1CevecZsvu3JuNPYv8YzOwnIw/fO3p3Xer+1djri79XSslivZlPysdXRrUHfupLZ4/dS1usRgz8zy+aHMuqnP0tyktz7XvKZ0+SVqrd8CFNSTpLvv/Wv9+/Vu3czH3R8tFpSz86Gf1inJOcZd/yVJOtkWid/v04WI+Z4lJyskndHjP2jdpP0HXgt+e3jj/7Mly4GfcSmUvPK2/czPz8dMv5Tu7ineJRNpJSDbSjZXNKO3HiT51fQo5Qkj5K8ls0xMkJNMiVv/2bynwZNsVM7uQLZhXpy905tU+qo5yE12cWWOw2fITnbwRzcTNf9pKRkE4/loPFrkra5EXAQ/CssgN267p19RkAA6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQALoICABd5vtewLbUJLMnr23/xvryvvfyQf8jcG3VbI7vmnFn1jXJerNNHYSDCci6Te+dt3ZWWrvIlhvSktKmrNdTezlJbRESOCQtzzb3aUr+rY05F30ajx9se9x9sQ9ewf9K3lgkH1/teyHA1s2TrJNv/mbyn/e9luviYK5AduFWsnh6mww4LE8Cstj3Oq4TD9EB6CIgAHQREAC6CAgAXQQEgC4CAkAXAQGgi4AA0EVAAOgiIAB0ERAAuggIAF0EBIAuAgJAFwEBoIuAANBFQADoIiAAdBEQALoICABdBOSK2r4XAAzh2L66+b4XcJ2U5OQkyWrzNXAgWjab4aPkZN9ruU4E5ApWyR9eJLfXTlbg4ExJWSXv7nsdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAgfl/NC9xjgK859wAAAAASUVORK5CYII=",
diamondpick="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",
diamondaxe="iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAMAAABHPGVmAAAAAXNSR0IB2cksfwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAhlQTFRFAAAADj82Dj82Dj82KsCmIZiDDj82M+vLJquUDj82Dj82Dj82HIBuK8OoGnhoDj82Dj82E1hLGGpcMN2/MeDBMeLEMuXGF2pbJ7KaKb2jK8esLtW4Dj82FmRXHop3KbqhKsKoMMGkOb6eNJ+CJUMwJUMwDj82Dj82JKKML9a5MNu9KbmgJ7ObKLWcM45yRk0sTE0pXUwhXUwhNIRpSTYVUTwYaE4eaE4eJKONIJSAJpR+MJN5MnlfOCoQGzkqI56JIpmFKI13KB4LFTcrDj82HIFvIZWBJauTL9m8OHRYLYlwJJF7KGhTIop1GnhoDj82IZSADj82Dj82F2dYPGVHJZB6IpyHSDYVKFZBFj4yFj4yUTwXYEgcQjUWJSIRJltHLc6yH498Dj82QjcZQjcZgWElMCQOITAfETsxHnppMuTFGnhoE1VJElJHDj82Dj82STYViWcnGy8hSTYVSTYVTDgWTTkWfV4kKB4LGy8hG3xrF2laDj82STYVSTYVUTwXZEsdNCcPKB4LGy8hElFFEU9EDj82STYVSTYVSTYVVT8ZWUIaVD8YKB4LSTYVXUUbWEIZZEsdaU8eVT8YQzMTeVsjTToWKB4LSTYVcVUgSzgVKB4LSTYVQDASMiUOKB4LKB4LSTYVUDwXNyoQKB4LSTYVMSUOKB4LSTYVX0ccYUgcQTESPy8RKB4LaE4eaE4eTjsWKB4LKB4LTIXpTAAAALN0Uk5TAP+gv//nkP//wBhg///XQChw/////////////zC3/////////0Co3/P///////////9A/////0D////////P//////+Az///////////v1z/mXjP//////9A/////////+97QP///////////5AgD0D//xQgWP//39/r53CM3+f//yAgdFgQoGCAz///gMD//9///9///78Q/+uncP90GGAPkOdUe3BAmZn//88QmVyZmXoJpycmAAAClElEQVR4nO2Y91NTQRDHAVEIUYOiooCAWBG7oFgQkQhixQoaey+IDXtBxRYUlCAqYsEaG1j+Qme/y4zrxB88csw83uznp8zde/d5e7O3d5eYGKXPiRXEqUQllhgA4gUD0TLIpoS/PkGQiBaPSlwqSfKCwUBKhqBlKHcnRSfxRcYgiedun0rcI0n2EcOGAx4yBYwYSYyyIonD66nyu0eDMWlEukpcJ8lAXo1FWmXKvGJJVjYxLocYPwFMNJdMmkxMySWmsiQPsGTadGLGTGLWbDDHXOLBFCRGTpRkbj5RMA/MV4lLJcjabB6+cAGxcBGxuAgswUnPG6UE6y+NJcWZxFL8LlkGSvGGXyX9W+L1E8vLiHKWrAAVYGXxH1atBmvw7Fq8t85E9Y9Sj6WRX8GJjHgqObgUdJfhjfUq6d+SDR5iI19DsdfmFIBNJcTmSmJLlBKm55jKMXDJrcLSqJYlWSWuk2zdBgJgO9ixk9iVJ9iNM9oenNf2mkv27QcHwEFw6DBx5KjgWA1xvJY4YS45yRN1CnBdP41Z+eu+nWpe6lXSC8mZOuLsOXAeXAAXkUSXcgWX0XTFXHL1GlF/HdwAN0EDkuhWjeA2mu6YS+5ingK8AHmiZLc3VtDr65xKnCS5FyQa7xMPqkATkA9l+AW15pJmxPAQITyKjMEOKnGQpA5pFWwJEa1Iq8eReRUlPXW9DXX9CUJ4anF4lThP8kzute3Ya59jr+2wKHkh99qX2GtfYa99bVESlHW9CBPVaXF4lRjxBnn1FleDVr4bvENevbco+dBMtLQRIf4f7mOYsJlXnzBRIay/dq7rYYvDq8Spks9fiMBX4hvSKtxlXdIt7ub2Nw+VOFbyvZv48ZP41VcS5T/4DZEhHXkWhiLGAAAAAElFTkSuQmCC",
diamondbow="iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAMAAABHPGVmAAAAAXNSR0IB2cksfwAAAAlwSFlzAAA11AAANdQBXmXlCAAAAKVQTFRFAAAA////////STYYSTYY0NDQ0NDQ2NjYSTYYSTYYb1MlXEQeZ00iTToZKB4MsbGxsbGx2NjYiGctaE4ie10pTjsZKB4MsbGxsbGxbmheiGctaltCXVZKXEswQjEVSTcXQDAUKB4Md2lSa2traVo/YkogRERERERElpaWVE5DfHx8XVlSRjUWREREREREa2trZEsha2trKB4MiGctiGctalAjREREMTtEvwAAADd0Uk5TAJn//2aZ/5lcmf///8KZmf////////89Zv+Z1v////+jZv//////Zv///6PCmSlm1ik9PWbCelgBOAYAAAF5SURBVHic7ZjZUsJAEEVRcWFVI4mKawTELaC4/P+nWc69PDQ2ERCRqtzzNpmkT0/VTKZnSqXAxiYo5bE1N2XzvSQFlWzvgF3Ap3sVQxXUQL3qwU62Gs0Aw+0fgEPApxWbVwSOQCvyYCdbcRKQpNiS4xNwCtrg7DxwwXkZg0twFXuwk63rNDCx3mBOmMhNJ9BlesncTIaXRJK/lnDZ8Z2ecXXcL3xuQV8SSVYkGe8cDHcH7o0rkkSS9Zd0wQN4RLHxxNqDNUxu9Az0wcCVcOfggIbobNpdZpYhuH2SFE6C4+AzD3msl4fgBa+MMJNTO5Nf55BgBFVmyZz9LO2A3iSRZI0kNVu4+xLr6rkuSST5H0m9BWaRpKaGebc//l8vRkvTHZAkkixDMvJmcpuV9rIk7oCmFGWSSLK+kgyrz78PkkSSVUlySyLG8cmPLokkK5JMFNyZ4aOfw+BnxZTFuECykkjynXKgwas/ngcXmKUzML7LXFI4SST54hMXCIE7gKIj5QAAAABJRU5ErkJggg==",
mcfont64="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gICAAQD/AAAABQAAAAACAAOAAAMABwALAA8AEwAAITUhFSU1MxUlETMZATUzFT0BIRUBAAEA/oCA/wCAgAEAgICAgICAAYD+gAGAgICAgIAABQAAAAACAAOAAAMABwALAA8AEwAAMTUhFT0BMxU1ETMRATUzFSU1IRUBAICA/wCA/oABAICAgICAgAGA/oABgICAgICAAAAABQAAAQACAAKAAAMABwALAA8AEwAAETUzFSE1MxUlNSEVJTUzFSE1MxWAAQCA/oABAP6AgAEAgAEAgICAgICAgICAgICAAAAAAQAAAIACgAMAAAsAACURITUhETMRIRUhEQEA/wABAIABAP8AgAEAgAEA/wCA/wAAAQAA/4AAgAEAAAMAABURMxGAgAGA/oAAAQAAAYACgAIAAAMAABE1IRUCgAGAgIAAAQAAAAAAgAEAAAMAADERMxGAAQD/AAAABQAAAAACgAOAAAMABwALAA8AEwAAMTUzFTURMxkBNTMVNREzGQE1MxWAgICAgICAgAEA/wABAICAgAEA/wABAICAAAAFAAAAAAKAA4AAAwAHAA8AFwAbAAAzNSEVATUzFQERMxEzFSMVIREjNTM1MxEBNSEVgAGA/wCA/oCAgIABgICAgP4AAYCAgAGAgID/AAKA/oCAgAGAgID9gAKAgIAAAAABAAAAAAKAA4AACwAAMTUhESM1MzUzESEVAQCAgIABAIACAICA/QCAAAAAAAYAAAAAAoADgAAHAAsADwATABcAGwAAMREzFSE1MxEBNTMVPQEhFQE1MxUFETMRATUhFYABgID+AIABAP4AgAGAgP4AAYABAICA/wABAICAgICAAQCAgIABAP8AAQCAgAAAAAAHAAAAAAKAA4AAAwAHAAsADwATABcAGwAAMzUhFSU1MxUhETMRATUhFQE1MxUFETMRATUhFYABgP4AgAGAgP6AAQD+AIABgID+AAGAgICAgIABAP8AAQCAgAEAgICAAQD/AAEAgIAAAAMAAAAAAoADgAADAAcAEwAAEzUzFT0BMxUTESERMxUhESM1IRGAgICA/gCAAYCAAQACAICAgICA/YABAAEAgAGAgPyAAAAAAAQAAAAAAoADgAADAAcACwATAAAzNSEVJTUzFSERMxEBESEVIRUhFYABgP4AgAGAgP2AAoD+AAGAgICAgIABgP6AAYABgICAgAAAAAAFAAAAAAKAA4AAAwAHAA8AEwAXAAAzNSEVNREzESERMxUhFSEZATUzFT0BIRWAAYCA/YCAAYD+gIABAICAgAEA/wACAICA/wACAICAgICAAAMAAAAAAoADgAADAAcADwAAIREzGQE1MxU1ESEVIxEhEQEAgID+gIACgAGA/oABgICAgAEAgAEA/oAAAAcAAAAAAoADgAADAAcACwAPABMAFwAbAAAzNSEVJREzESERMxEBNSEVJREzESERMxEBNSEVgAGA/gCAAYCA/gABgP4AgAGAgP4AAYCAgIABAP8AAQD/AAEAgICAAQD/AAEA/wABAICAAAAAAAUAAAAAAoADgAADAAcACwATABcAADM1IRU9ATMVAREzEQE1ITUhETMRATUhFYABAID+AIABgP6AAYCA/gABgICAgICAAYABAP8A/wCAgAEA/gACAICAAAACAAAAAACAAwAAAwAHAAAxETMRAxEzEYCAgAEA/wACAAEA/wAAAAAAAgAA/4AAgAMAAAMABwAAFREzEQMRMxGAgICAAYD+gAKAAQD/AAAAAAcAAAAAAgADgAADAAcACwAPABMAFwAbAAAhNTMVJTUzFSU1MxUlNTMVPQEzFT0BMxU9ATMVAYCA/wCA/wCA/wCAgICAgICAgICAgICAgICAgICAgICAgIAAAAAAAgAAAIACgAKAAAMABwAAPQEhFQE1IRUCgP2AAoCAgIABgICAAAAAAAcAAAAAAgADgAADAAcACwAPABMAFwAbAAAxNTMVPQEzFT0BMxU9ATMVJTUzFSU1MxUlNTMVgICAgP8AgP8AgP8AgICAgICAgICAgICAgICAgICAgICAAAAGAAAAAAKAA4AAAwAHAAsADwATABcAACE1MxUDNTMVPQEzFQE1MxUFETMRATUhFQEAgICAgP4AgAGAgP4AAYCAgAEAgICAgIABAICAgAEA/wABAICAAAAABAAAAAADAAOAAAMABwAPABMAADM1IRUlETMRNxEhETMRMxEBNSEVgAIA/YCAgAEAgID9gAIAgICAAoD9gIABgP8AAYD+AAIAgIAAAAIAAAAAAoADgAALAA8AADERMxEhETMRIxEhGQE1IRWAAYCAgP6AAYADAP8AAQD9AAGA/oADAICAAAAAAAMAAAAAAoADgAADAAcAEwAAJREzEQM1MxUBESEVIRUhFSERIRUCAICAgP2AAgD+gAGA/oABgIABgP6AAgCAgP2AA4CAgID+gIAAAAAFAAAAAAKAA4AAAwAHAAsADwATAAAzNSEVPQEzFSERMxEBNTMVJTUhFYABgID9gIABgID+AAGAgICAgIACgP2AAgCAgICAgAACAAAAAAKAA4AAAwALAAAlETMRBREhFSERIRUCAID9gAIA/oABgIACgP2AgAOAgP2AgAAAAQAAAAACgAOAAAsAADERIRUhFSEVIREhFQKA/gABAP8AAgADgICAgP6AgAABAAAAAAKAA4AACQAAMREhFSEVIRUhEQKA/gABAP8AA4CAgID+AAAABAAAAAACgAOAAAMACQANABEAADM1IRU1ESE1IREhETMZATUhFYABgP8AAYD9gIACAICAgAGAgP4AAoD9gAKAgIAAAAABAAAAAAKAA4AACwAAMREzESERMxEjESERgAGAgID+gAOA/wABAPyAAgD+AAAAAAABAAAAAAGAA4AACwAAMTUzESM1IRUjETMVgIABgICAgAKAgID9gIAAAwAAAAACgAOAAAMABwALAAAzNSEVJTUzFSERMxGAAYD+AIABgICAgICAgAMA/QAABQAAAAACgAOAAAMABwALABMAFwAAIREzEQE1MxUDNTMVAREzESEVIREBNTMVAgCA/wCAgID+AIABAP8AAYCAAYD+gAGAgIABAICA/YADgP8AgP4AAwCAgAAAAAABAAAAAAKAA4AABQAAMREzESEVgAIAA4D9AIAAAwAAAAACgAOAAAMACwATAAABNTMVAREzFTMVIxEhESM1MzUzEQEAgP6AgICAAYCAgIACAICA/gADgICA/YACgICA/IAAAAAAAwAAAAACgAOAAAMACwATAAABNTMVAREzFTMVIxEhESM1MxEzEQEAgP6AgICAAYCAgIACAICA/gADgICA/YABgIABgPyAAAAABAAAAAACgAOAAAMABwALAA8AADM1IRUlETMRIREzEQE1IRWAAYD+AIABgID+AAGAgICAAoD9gAKA/YACgICAAAIAAAAAAoADgAADAA0AAAE1MxUBESEVIRUhFSERAgCA/YACAP6AAYD+gAKAgID9gAOAgICA/gAABgAAAAACgAOAAAMABwALAA8AEwAXAAAzNSEVMzUzFSU1MxUhETMRJREzEQE1IRWAAQCAgP8AgP4AgAGAgP4AAYCAgICAgICAAoD9gIACAP4AAgCAgAAAAAMAAAAAAoADgAADAAcAEQAAIREzEQM1MxUBESEVIRUhFSERAgCAgID9gAIA/oABgP6AAgD+AAKAgID9gAOAgICA/gAABgAAAAACgAOAAAMABwALAA8AEwAXAAAzNSEVJTUzFSERMxEBNSEVJTUzFT0BIRWAAYD+AIABgID+AAGA/gCAAgCAgICAgAGA/oABgICAgICAgICAAAAAAAEAAAAAAoADgAAHAAAhESE1IRUhEQEA/wACgP8AAwCAgP0AAAMAAAAAAoADgAADAAcACwAAMzUhFSURMxEhETMRgAGA/gCAAYCAgICAAwD9AAMA/QAAAAAFAAAAAAKAA4AAAwAHAAsADwATAAAhNTMVJREzETMRMxEBETMRIREzEQEAgP8AgICA/gCAAYCAgICAAQD/AAEA/wABAAIA/gACAP4AAAAAAAMAAAAAAoADgAADAAsAEwAAATUzFQERMxEzFSMVITUjNTMRMxEBAID+gICAgAGAgICAAQCAgP8AA4D9gICAgIACgPyAAAAAAAkAAAAAAoADgAADAAcACwAPABMAFwAbAB8AIwAAMREzESERMxEBNTMVMzUzFSU1MxUlNTMVMzUzFSU1MxUhNTMVgAGAgP4AgICA/wCA/wCAgID+AIABgIABgP6AAYD+gAGAgICAgICAgICAgICAgICAgIAABQAAAAACgAOAAAMABwALAA8AEwAAIREzEQE1MxUzNTMVJTUzFSE1MxUBAID/AICAgP4AgAGAgAKA/YACgICAgICAgICAgAAABQAAAAACgAOAAAUACQANABEAFwAAMREzFSEVATUzFT0BMxU9ATMVPQEhNSERgAH//gGAgID+AAKAAQCAgAEAgICAgICAgICAgID/AAAAAAABAAAAAAGAA4AABwAAMREhFSERIRUBgP8AAQADgID9gIAAAAAFAAAAAAKAA4AAAwAHAAsADwATAAAhNTMVJREzEQE1MxUlETMRATUzFQIAgP8AgP8AgP8AgP8AgICAgAEA/wABAICAgAEA/wABAICAAAAAAAEAAAAAAYADgAAHAAAxNSERITUhEQEA/wABgIACgID8gAAAAAUAAAIAAoADgAADAAcACwAPABMAABE1MxUhNTMVJTUzFTM1MxUlNTMVgAGAgP4AgICA/wCAAgCAgICAgICAgICAgIAAAQAAAAACgACAAAMAADE1IRUCgICAAAAAAgAAAgABAAOAAAMABwAAEzUzFSURMxGAgP8AgAIAgICAAQD/AAAAAAMAAAAAAoACgAADAA0AEQAAPQEzHQE1ITUhNSE1MxEBNSEVgAGA/oABgID+AAGAgICAgICAgID+AAIAgIAAAAADAAAAAAKAA4AAAwAHABEAACURMxEBNSEVAREzETMVIxEhFQIAgP6AAQD+AICAgAGAgAGA/oABgICA/gADgP6AgP8AgAAAAAAFAAAAAAKAAoAAAwAHAAsADwATAAAzNSEVPQEzFSERMxEBNTMVJTUhFYABgID9gIABgID+AAGAgICAgIABgP6AAQCAgICAgAADAAAAAAKAA4AAAwAHABEAADURMxkBNSEVATUhESM1MxEzEYABAP8AAYCAgICAAYD+gAGAgID+AIABAIABgPyAAAAAAAMAAAAAAoACgAADAA0AEQAAMzUhFSURMxUhNTMRIRURNSEVgAIA/YCAAYCA/gABgICAgAGAgID/AIABgICAAAACAAAAAAIAA4AACwAPAAAzESM1MzUzFSEVIRkBNSEVgICAgAEA/wABAAIAgICAgP4AAwCAgAAAAAMAAP+AAoACgAADAAcAEQAAFTUhFQERMxEBNSE1IREhNSERAgD+AIABgP6AAYD+gAIAgICAAYABAP8A/wCAgAEAgP2AAAAAAAMAAAAAAoADgAADAAcADwAAIREzEQE1IRUBETMRMxUjEQIAgP6AAQD+AICAgAIA/gACAICA/gADgP6AgP6AAAACAAAAAACAA4AAAwAHAAAxETMRAzUzFYCAgAKA/YADAICAAAAEAAD/gAKAA4AAAwAHAAsADwAAFzUhFSURMxEhETMRAzUzFYABgP4AgAGAgICAgICAgAEA/wACgP2AAwCAgAAABQAAAAACAAOAAAMABwALAA8AFwAAITUzFSU1MxUDNTMVPQEzFQERMxEzFSMRAYCA/wCAgICA/gCAgICAgICAgAEAgICAgID+AAOA/gCA/wAAAAAAAgAAAAABAAOAAAMABwAAMzUzFSURMxGAgP8AgICAgAMA/QAABAAAAAACgAKAAAMABwANABEAAAERMxETETMRIREhFSMRATUzFQEAgICA/YABAIABAIABAAEA/wD/AAIA/gACgID+AAIAgIAAAgAAAAACgAKAAAMACQAAIREzESERIRUhEQIAgP2AAgD+gAIA/gACgID+AAAEAAAAAAKAAoAAAwAHAAsADwAAMzUhFSURMxEhETMRATUhFYABgP4AgAGAgP4AAYCAgIABgP6AAYD+gAGAgIAAAwAA/4ACgAKAAAMADwATAAABETMRAREzFTMVIxUhFSEREzUhFQIAgP2AgICAAYD+gIABAAEAAQD/AP6AAwCAgICA/wACgICAAAAAAAMAAP+AAoACgAADAAcAEwAAGQEzGQE1IRUTESE1ITUjNTM1MxGAAQCA/oABgICAgAEAAQD/AAEAgID9gAEAgICAgP0AAAAAAAMAAAAAAoACgAADAAsADwAAATUzFQERMxUzFSMREzUhFQIAgP2AgICAgAEAAYCAgP6AAoCAgP6AAgCAgAAAAAAFAAAAAAKAAoAAAwAHAAsADwATAAAxNSEVPQEzFSU1IRUlNTMVPQEhFQIAgP4AAYD+AIACAICAgICAgICAgICAgICAAAIAAAAAAYADgAADAA8AACE1MxUlESM1MxEzETMVIxEBAID/AICAgICAgICAAYCAAQD/AID+gAAAAgAAAAACgAKAAAMACQAANREzERU1IREzEYABgICAAgD+AICAAgD9gAAAAAAFAAAAAAKAAoAAAwAHAAsADwATAAAhNTMVJTUzFTM1MxUlETMRIREzEQEAgP8AgICA/gCAAYCAgICAgICAgIABgP6AAYD+gAACAAAAAAKAAoAAAwANAAA1ETMRFTUzETMRMxEzEYCAgICAgAIA/gCAgAEA/wACAP2AAAAACQAAAAACgAKAAAMABwALAA8AEwAXABsAHwAjAAAxNTMVITUzFSU1MxUzNTMVJTUzFSU1MxUzNTMVJTUzFSE1MxWAAYCA/gCAgID/AID/AICAgP4AgAGAgICAgICAgICAgICAgICAgICAgICAgIAAAAMAAP+AAoACgAADAAcADwAAFTUhFQERMxEBNSE1IREzEQIA/gCAAYD+gAGAgICAgAGAAYD+gP8AgIABgP2AAAADAAAAAAKAAoAABwALABMAADE1MzUzFSEVATUzFT0BITUhFSMVgIABgP6AgP6AAoCAgICAgAEAgICAgICAgAAABQAAAAACAAOAAAMABwALAA8AEwAAITUhFSURMxEBNTMVNREzGQE1IRUBAAEA/oCA/wCAgAEAgICAAQD/AAEAgICAAQD/AAEAgIAAAAIAAAAAAIADgAADAAcAADERMxEDETMRgICAAYD+gAIAAYD+gAAAAAAFAAAAAAIAA4AAAwAHAAsADwATAAAxNSEVNREzGQE1MxUlETMRATUhFQEAgID/AID+gAEAgICAAQD/AAEAgICAAQD/AAEAgIAAAAAABAAAAoADAAOAAAMABwALAA8AABE1MxUhNSEVJTUhFSE1MxWAAQABAP4AAQABAIACgICAgICAgICAgAAAAgAAAAAAgAMAAAMABwAAMREzEQM1MxWAgIACAP4AAoCAgAAABAAAAAACgAOAAAMABwALAB8AAAE1MxUhETMRATUzFQE1IzUzESM1MzUzFTMVIxEzFSMVAgCA/YCAAYCA/oCAgICAgICAgIABAICAAYD+gAEAgID+AICAAYCAgICA/oCAgAAAAAMAAAAAAoADgAAPABMAFwAAMTUzESM1MxEzESEVIREhFQM1MxUlNSEVgICAgAEA/wABgICA/oABAIABAIABAP8AgP8AgAKAgICAgIAAAAAACAAAAIACAAMAAAMABwALAA8AEwAXABsAHwAAPQEzFSE1MxUlNSEVJTUzFSE1MxUlNSEVJTUzFSE1MxWAAQCA/oABAP6AgAEAgP6AAQD+gIABAICAgICAgICAgICAgICAgICAgICAgIAAAAAABQAAAAACgAOAABMAFwAbAB8AIwAAITUjNTM1IzUzNTMVMxUjFTMVIxUBNTMVMzUzFSU1MxUhNTMVAQCAgICAgICAgID/AICAgP4AgAGAgICAgICAgICAgIACgICAgICAgICAgAAAAAACAAAAAACAA4AAAwAHAAAxETMRAxEzEYCAgAGA/oACAAGA/oAAAAAACAAAAAACAAOAAAMABwALAA8AEwAXABsAHwAAMTUhFT0BMxUlNSEVJTUzFSE1MxUlNSEVJTUzFT0BIRUBgID+gAEA/oCAAQCA/oABAP6AgAGAgICAgICAgICAgICAgICAgICAgICAgAACAAADAAKAA4AAAwAHAAARNSEVMzUhFQEAgAEAAwCAgICAAAADAAAAAAMAAoAADQARABsAADM1IxEzETMVMzUzFTMVNREzESURIzUhFSMVIxWAgICAgICAgP4AgAIAgICAAYD/AICAgICAAYD+gIABAICAgIAAAAABAAACAAGAA4AACQAAETUzNSM1IRUzEYCAAQCAAgCAgICA/wAAAAAACgAAAAACgAKAAAMABwALAA8AEwAXABsAHwAjACcAACE1MxUzNTMVJTUzFTM1MxUlNTMVMzUzFSU1MxUzNTMVJTUzFTM1MxUBAICAgP4AgICA/gCAgID/AICAgP8AgICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAAAEAAAAAAoABgAAFAAAhESE1IRECAP4AAoABAID+gAAAAQAAAgACgAKAAAMAABE1IRUCgAIAgIAAAwAAAQADAAOAAAMABwAZAAABNSMVIREzERU1MxEzNSE1IRUjFTM1MxEjFQIAgP6AgICA/wACAICAgIABgICAAYD+gICAAQCAgICAgP6AgAABAAADAAKAA4AAAwAAETUhFQKAAwCAgAAEAAACAAGAA4AAAwAHAAsADwAAEzUzFSU1MxUzNTMVJTUzFYCA/wCAgID/AIACAICAgICAgICAgIAAAAACAAAAAAMAA4AAAwAPAAAxNSEVAREhNSERIREhFSERAwD+AP8AAQABAAEA/wCAgAEAAQCAAQD/AID/AAABAAABAAIAA4AAEQAAGQEzNTM1ITUhFTMVIxUjFSEVgID/AAGAgICAAQABAAEAgICAgICAgIAAAAEAAAEAAgADgAAPAAARNSE1IzUzNSE1IRUzESMVAQCAgP8AAYCAgAEAgICAgICA/oCAAAACAAACAAEAA4AAAwAHAAARNTMVNREzEYCAAgCAgIABAP8AAAABAAAAgAOAA4AADwAAPQEzESERIREhESMVIRUjFYABAAEAAQCA/oCAgIACgP6AAYD+gICAgAAAAAIAAAAABAADgAADABEAAAERIxETESE1IxEzNSERIREjEQGAgID/AICAA4D/AIACAAEA/wD+AAGAgAEAgPyAAwD9AAAAAQAAAQABAAGAAAMAABE1IRUBAAEAgIAAAwAAAAABgAIAAAMABwANAAAxNSEVPQEzFSU1MzUzEQEAgP6AgICAgICAgICAgP8AAAAAAAEAAAIAAQADgAAFAAATESM1IRGAgAEAAgABAID+gAAABAAAAgABgAOAAAMABwALAA8AABM1MxUlNTMVMzUzFSU1MxWAgP8AgICA/wCAAgCAgICAgICAgICAAAAACgAAAAACgAKAAAMABwALAA8AEwAXABsAHwAjACcAADE1MxUzNTMVJTUzFTM1MxUlNTMVMzUzFSU1MxUzNTMVJTUzFTM1MxWAgID/AICAgP8AgICA/gCAgID+AICAgICAgICAgICAgICAgICAgICAgICAgICAgAAABwAAAAACgAOAAAMABwANABEAFQAZAB0AADE1MxU1ETMRBTUjESERATUzFTURMxElETMRJTUzFYCAAQCAAQD+gICA/gCAAYCAgICAAQD/AICAAQD+gAGAgICAAQD/AIABAP8AgICAAAAIAAAAAAKAA4AAAwAJAA0AEQAVABkAHQAhAAAxNTMVIREzFTMVJREzESU1MxUlNTMVNREzESURMxElNTMVgAEAgID+AIABAID+gICA/gCAAYCAgIABAICAgAEA/wCAgICAgICAAQD/AIABAP8AgICAAAAAAAUAAAAAAoADgAADAAkADQAbAB8AADE1MxUhNSMRIREBETMRAREjNTM1IxEhETMVIxEBNTMVgAGAgAEA/wCA/oCAgIABAICAAQCAgICAAQD+gAIAAQD/AP6AAQCAgAEA/oCA/wACgICAAAAAAAYAAAAAAoADgAADAAcACwAPABMAFwAAMzUhFT0BMxUhETMZATUzFT0BMxUDNTMVgAGAgP2AgICAgICAgICAgAEA/wABAICAgICAAQCAgAAABAAAAAACgAUAAAsADwATABcAADERMxEhETMRIxEhGQE1IRUBNTMVJTUzFYABgICA/oABgP8AgP8AgAMA/wABAP0AAYD+gAMAgIABAICAgICAAAAABAAAAAACgAUAAAsADwATABcAADERMxEhETMRIxEhGQE1IRUBNTMVPQEzFYABgICA/oABgP8AgIADAP8AAQD9AAGA/oADAICAAQCAgICAgAAFAAAAAAKABQAACwAPABMAFwAbAAAxETMRIREzESMRIRkBNSEVATUzFTM1MxUlNTMVgAGAgID+gAGA/oCAgID/AIADAP8AAQD9AAGA/oADAICAAQCAgICAgICAAAMAAAAAAoAEgAALAA8AEwAAMREzESERMxEjESEZATUhFQE1IRWAAYCAgP6AAYD+gAGAAwD/AAEA/QABgP6AAwCAgAEAgIAAAAQAAAAAAoAEgAALAA8AEwAXAAAxETMRIREzESMRIRkBNSEVATUhFTM1IRWAAYCAgP6AAYD+AAEAgAEAAwD/AAEA/QABgP6AAwCAgAEAgICAgAAAAAMAAAAAAoAEgAALABMAFwAAMREzESERMxEjESEZAjMVMzUzEQE1MxWAAYCAgP6AgICA/wCAAwD/AAEA/QABgP6AAwABAICA/wABAICAAAAAAQAAAAACgAOAABUAADERMxUzNSM1IRUhFTMVIxEhFSERIxGAgIACAP8AgIABAP6AgAMAgICAgICA/oCAAgD+AAAAAAAHAAD/AAKAA4AABwALAA8AEwAXABsAHwAAATUjNSEVMxUDNTMVJTUhFT0BMxUhETMRATUzFSU1IRUBgIABAICAgP4AAYCA/YCAAYCA/gABgP8AgICAgAEAgICAgICAgIACAP4AAYCAgICAgAADAAAAAAKABQAACwAPABMAADERIRUhFSEVIREhFQE1MxUlNTMVAoD+AAEA/wACAP6AgP8AgAOAgICA/oCABACAgICAgAAAAAADAAAAAAKABQAACwAPABMAADERIRUhFSEVIREhFQE1MxU9ATMVAoD+AAEA/wACAP6AgIADgICAgP6AgAQAgICAgIAAAAQAAAAAAoAFAAALAA8AEwAXAAAxESEVIRUhFSERIRUBNTMVMzUzFSU1MxUCgP4AAQD/AAIA/gCAgID/AIADgICAgP6AgAQAgICAgICAgAAAAwAAAAACgASAAAsADwATAAAxESEVIRUhFSERIRUBNSEVMzUhFQKA/gABAP8AAgD9gAEAgAEAA4CAgID+gIAEAICAgIAAAAAAAwAAAAABAAQAAAMABwALAAAzETMRAzUzFSU1MxWAgICA/wCAAoD9gAMAgICAgIAAAwCAAAABgAQAAAMABwALAAAzETMRAzUzFT0BMxWAgICAgAKA/YADAICAgICAAAAABAAAAAABgAQAAAMABwALAA8AADMRMxEBNTMVMzUzFSU1MxWAgP8AgICA/wCAAoD9gAMAgICAgICAgAAAAwAAAAABgAOAAAMABwALAAAzETMRATUzFTM1MxWAgP8AgICAAoD9gAMAgICAgAAAAv+AAAACgAOAAAMAEwAAJREzEQURIzUzESEVIREhFSERIRUCAID9gICAAgD+gAEA/wABgIACgP2AgAGAgAGAgP8AgP8AgAAABAAAAAACgASAAAMACwATABcAAAE1MxUBETMVMxUjESERIzUzETMRATUhFQEAgP6AgICAAYCAgID+AAGAAgCAgP4AA4CAgP2AAYCAAYD8gAQAgIAABgAAAAACgAUAAAMABwALAA8AEwAXAAAzNSEVJREzESERMxEBNSEVATUzFSU1MxWAAYD+AIABgID+AAGA/wCA/wCAgICAAoD9gAKA/YACgICAAQCAgICAgAAAAAAGAAAAAAKABQAAAwAHAAsADwATABcAADM1IRUlETMRIREzEQE1IRUBNTMVPQEzFYABgP4AgAGAgP4AAYD/AICAgICAAoD9gAKA/YACgICAAQCAgICAgAAABgAAAAACgAUAAAMABwALAA8AFQAZAAAzNSEVJREzESERMxEBNTMVAzUhETMRATUzFYABgP4AgAGAgP4AgIABAID/AICAgIACgP2AAoD9gAOAgID/AIABAP6AAYCAgAAABQAAAAACgASAAAMABwALAA8AEwAAMzUhFSURMxEhETMRATUhFQE1IRWAAYD+AIABgID+AAGA/oABgICAgAKA/YACgP2AAoCAgAEAgIAAAAAGAAAAAAKABIAAAwAHAAsADwATABcAADM1IRUlETMRIREzEQE1IRUBNSEVMzUhFYABgP4AgAGAgP4AAYD+AAEAgAEAgICAAoD9gAKA/YACgICAAQCAgICAAAAAAAkAAACAAoADAAADAAcACwAPABMAFwAbAB8AIwAAPQEzFSE1MxUlNTMVMzUzFSU1MxUlNTMVMzUzFSU1MxUhNTMVgAGAgP4AgICA/wCA/wCAgID+AIABgICAgICAgICAgICAgICAgICAgICAgICAgAAFAAAAAAKAA4AAAwAHAA8AFwAbAAAzNSEVATUzFQERMxEzFSMVIREjNTM1MxEBNSEVgAGA/wCA/oCAgIABgICAgP4AAYCAgAGAgID/AAKA/oCAgAGAgID9gAKAgIAAAAAFAAAAAAKABIAAAwAHAAsADwATAAAzNSEVJREzESERMxEBNTMVJTUzFYABgP4AgAGAgP6AgP8AgICAgAMA/QADAP0AAwCAgICAgAAABQAAAAACgASAAAMABwALAA8AEwAAMzUhFSURMxEhETMRATUzFT0BMxWAAYD+AIABgID+gICAgICAAwD9AAMA/QADAICAgICAAAAAAAQAAAAAAoAEgAADAAcACwAPAAAzNSEVJREzESERMxEBNSEVgAGA/gCAAYCA/gABgICAgAMA/QADAP0AA4CAgAAFAAAAAAKA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AAACgAOAAAMABwALAA8AEwAXAAAzNSEVJREzESERMxEBNSEVPQEzFSU1IRWAAYD+AIABgID+AAGAgP4AAYCAgIABgP6AAYD+gAGAgICAgICAgIAAAAUAAAAAAoADgAADAAcACwAPABMAADM1IRUlETMRIREzEQE1IRUBNSEVgAGA/gCAAYCA/gABgP6AAYCAgIABgP6AAYD+gAGAgIABAICAAAAABgAAAAACgAOAAAMABwALAA8AEwAXAAAzNSEVJREzESERMxEBNSEVATUhFTM1IRWAAYD+AIABgID+AAGA/gABAIABAICAgAGA/oABgP6AAYCAgAEAgICAgAAAAAADAAAAAAMAA4AAAwAHAAsAACERIREBNSEVAREhEQEAAQD+AAMA/gABAAEA/wABgICAAQABAP8AAAMAAAAAAoACgAADAA0AFwAAATUzFQE1IxEzETMVIRU1ESM1ITUhFTMRAQCA/wCAgIABAID/AAGAgAEAgID/AIABgP8AgICAAQCAgID+gAAAAwAAAAACgAOAAAMACQANAAA1ETMRFTUhETMRATUhFYABgID9gAEAgAIA/gCAgAIA/YADAICAAAADAAAAAAKAA4AAAwAJAA0AADURMxEVNSERMxEBNSEVgAGAgP8AAQCAAgD+AICAAgD9gAMAgIAAAAMAAAAAAoADgAADAAkADQAANREzERU1IREzEQE1MxWAAYCA/oCAgAIA/gCAgAIA/YADAICAAAAABAAAAAACgAOAAAMACQANABEAADURMxEVNSERMxEBNTMVMzUzFYABgID+AICAgIACAP4AgIACAP2AAwCAgICAAAUAAP+AAoADgAADAAcADwATABcAABU1IRUBETMRATUhNSERMxEBNTMVPQEzFQIA/gCAAYD+gAGAgP6AgICAgIABgAGA/oD/AICAAYD9gAKAgICAgIAAAAACAAD/gAGAAwAAAwAPAAABNTMVAREzETMVIxUzFSMRAQCA/oCAgICAgAEAgID+gAOA/wCAgID/AAAAAAAFAAD/gAKAA4AAAwAHAA8AEwAXAAAVNSEVAREzEQE1ITUhETMRATUzFTM1MxUCAP4AgAGA/oABgID+AICAgICAgAGAAYD+gP8AgIABgP2AAwCAgICAAAAABwAAAAACgASAAAMABwALAA8AEwAXABsAACERMxEBNTMVMzUzFSU1MxUhNTMVATUhFTM1IRUBAID/AICAgP4AgAGAgP2AAQCAAQACgP2AAoCAgICAgICAgIABAICAgIAAAwAAAAACgAOAAAMACwARAAAhNSEVNREjNTMRMxEFESEVIREBAAEAgICA/YACAP6AgICAAQCAAQD9gIADgID9AAAAAAABAAABgAKAAgAAAwAAETUhFQKAAYCAgAACAAACAAEAA4AAAwAHAAARNTMVNREzEYCAAgCAgIABAP8AAAACAAACAAEAA4AAAwAHAAARNTMVNREzEYCAAgCAgIABAP8AAAACAAAAAAEAAYAAAwAHAAAxNTMVNREzEYCAgICAAQD/AAAAAAACAAACAAEAA4AAAwAHAAATNTMVJREzEYCA/wCAAgCAgIABAP8AAAAABAAAAgACAAOAAAMABwALAA8AABE1MxUzNTMVJREzETMRMxGAgID/AICAgAIAgICAgIABAP8AAQD/AAAABAAAAgACAAOAAAMABwALAA8AABE1MxUzNTMVJREzETMRMxGAgID/AICAgAIAgICAgIABAP8AAQD/AAAABAAAAAACAAGAAAMABwALAA8AADE1MxUzNTMVJREzETMRMxGAgID/AICAgICAgICAAQD/AAEA/wAAAAAAAQAAAAACgAOAAAsAACERITUhETMRIRUhEQEA/wABAIABAP8AAgCAAQD/AID+AAAAAQAAAQABgAKAAAsAABM1IzUzNTMVMxUjFYCAgICAgAEAgICAgICAAAMAAAAAAoABAAADAAcACwAAMREzETMRMxEzETMRgICAgIABAP8AAQD/AAEA/wAAAAUAAACAAYADAAADAAcACwAPABMAACU1MxUlNTMVJTUzFT0BMxU9ATMVAQCA/wCA/wCAgICAgICAgICAgICAgICAgIAABQAAAIABgAMAAAMABwALAA8AEwAAPQEzFT0BMxU9ATMVJTUzFSU1MxWAgID/AID/AICAgICAgICAgICAgICAgIAAAAABAAAAAAKAA4AAFwAAITUjNSMRMzUzNSEVIRUjFSEVIRUzFSEVAQCAgICAAYD/AIABgP6AgAEAgIABgICAgICAgICAgAAAAAABAAACAAMAA4AADwAAExEjNSEVMzUzFTMRITUjFYCAAYCAgID/AIACAAEAgICAgP8AgIAAAwAAAAACgAOAAA0AEQAVAAAzESM1MzUzFSER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";

var themeBtn = "blue";
var themeId = 2;


var themeStroke = Color.parseColor("#360200");
var modTextColor = Color.parseColor("#ffff54");
var zcramps;
var zcrampss = false;
var zcramped = false;
var themeRedNotClicked = new android.graphics.drawable.GradientDrawable();
themeRedNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeRedNotClicked.setStroke(0, themeStroke);
themeRedNotClicked.setCornerRadius(0);
themeRedNotClicked.setAlpha(80);
var themeRedClicked = new android.graphics.drawable.GradientDrawable();
themeRedClicked.setColor(Color.parseColor("#21ff00"));
themeRedClicked.setStroke(1, Color.parseColor("#21ff00"));
themeRedClicked.setCornerRadius(0);
themeRedClicked.setAlpha(80);
var themeBackgroundRed = Color.parseColor("#360200");
var themeForegroundRed = Color.parseColor("#730000");
var themeStrokeRed = android.graphics.Color.RED;
var themeTextRed = Color.parseColor("#ff0000");
var modTextColorRed = Color.parseColor("#ffffff");
var themeGreenNotClicked = new android.graphics.drawable.GradientDrawable();
themeGreenNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeGreenNotClicked.setStroke(0, themeStroke);
themeGreenNotClicked.setCornerRadius(0);
themeGreenNotClicked.setAlpha(80);
var themeGreenClicked = new android.graphics.drawable.GradientDrawable();
themeGreenClicked.setColor(Color.parseColor("#21ff00"));
themeGreenClicked.setStroke(2, Color.parseColor("#21ff00"));
themeGreenClicked.setCornerRadius(0);
themeGreenClicked.setAlpha(80);
var themeBackgroundGreen = Color.parseColor("#003603");
var themeForegroundGreen = Color.parseColor("#017300");
var themeStrokeGreen = android.graphics.Color.GREEN;
var themeTextGreen = Color.parseColor("#32ff00");
var modTextColorGreen = Color.parseColor("#ffffff");
var themeBlueNotClicked = new android.graphics.drawable.GradientDrawable();
themeBlueNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeBlueNotClicked.setStroke(0, themeStroke);
themeBlueNotClicked.setCornerRadius(0);
themeBlueNotClicked.setAlpha(80);
var themeBlueClicked = new android.graphics.drawable.GradientDrawable();
themeBlueClicked.setColor(Color.parseColor("#21ff00"));
themeBlueClicked.setStroke(1, Color.parseColor("#21ff00"));
themeBlueClicked.setCornerRadius(0);
themeBlueClicked.setAlpha(80);
var themeBackgroundBlue = Color.parseColor("#050036");
var themeForegroundBlue = Color.parseColor("#001a73");
var themeStrokeBlue = android.graphics.Color.BLUE;
var themeTextBlue = Color.parseColor("#0043ff");
var modTextColorBlue = Color.parseColor("#ffffff");
var themeOrangeNotClicked = new android.graphics.drawable.GradientDrawable();
themeOrangeNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeOrangeNotClicked.setStroke(0, themeStroke);
themeOrangeNotClicked.setCornerRadius(0);
themeOrangeNotClicked.setAlpha(80);
var themeOrangeClicked = new android.graphics.drawable.GradientDrawable();
themeOrangeClicked.setColor(Color.parseColor("#21ff00"));
themeOrangeClicked.setStroke(1, Color.parseColor("#21ff00"));
themeOrangeClicked.setCornerRadius(0);
themeOrangeClicked.setAlpha(80);
var themeBackgroundOrange = Color.parseColor("#442500");
var themeForegroundOrange = Color.parseColor("#d15500");
var themeStrokeOrange = Color.parseColor("#ffaa00");
var themeTextOrange = Color.parseColor("#ffaa00");
var modTextColorOrange = Color.parseColor("#ffffff");
var themeWhiteNotClicked = new android.graphics.drawable.GradientDrawable();
themeWhiteNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeWhiteNotClicked.setStroke(0, themeStroke);
themeWhiteNotClicked.setCornerRadius(0);
themeWhiteNotClicked.setAlpha(80);
var themeWhiteClicked = new android.graphics.drawable.GradientDrawable();
themeWhiteClicked.setColor(Color.parseColor("#108200"));
themeWhiteClicked.setStroke(1, Color.parseColor("#21ff00"));
themeWhiteClicked.setCornerRadius(0);
themeWhiteClicked.setAlpha(80);
var themeBackgroundWhite = Color.parseColor("#f7f7f7");
var themeForegroundWhite = Color.parseColor("#ffffff");
var themeStrokeWhite = Color.parseColor("#000000");
var themeTextWhite = Color.parseColor("#ffffff");
var modTextColorWhite = Color.parseColor("#000000");
var themeMagentaNotClicked = new android.graphics.drawable.GradientDrawable();
themeMagentaNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeMagentaNotClicked.setStroke(0, themeStroke);
themeMagentaNotClicked.setCornerRadius(0);
themeMagentaNotClicked.setAlpha(80);
var themeMagentaClicked = new android.graphics.drawable.GradientDrawable();
themeMagentaClicked.setColor(Color.parseColor("#21ff00"));
themeMagentaClicked.setStroke(1, Color.parseColor("#21ff00"));
themeMagentaClicked.setCornerRadius(0);
themeMagentaClicked.setAlpha(80);
var themeBackgroundMagenta = Color.parseColor("#70005b");
var themeForegroundMagenta = Color.parseColor("#d600d2");
var themeStrokeMagenta = Color.parseColor("#ff00fa");
var themeTextMagenta = Color.parseColor("#ffccf8");
var modTextColorMagenta = Color.parseColor("#ffffff");
var themeDarkNotClicked = new android.graphics.drawable.GradientDrawable();
themeDarkNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeDarkNotClicked.setStroke(0, themeStroke);
themeDarkNotClicked.setCornerRadius(0);
themeDarkNotClicked.setAlpha(80);
var themeDarkClicked = new android.graphics.drawable.GradientDrawable();
themeDarkClicked.setColor(Color.parseColor("#21ff00"));
themeDarkClicked.setStroke(1, Color.parseColor("#0280e8"));
themeDarkClicked.setCornerRadius(0);
themeDarkClicked.setAlpha(80);
var themeBackgroundDark = Color.parseColor("#161616");
var themeForegroundDark = Color.parseColor("#303030");
var themeStrokeDark = Color.parseColor("#0280e8");
var themeTextDark = Color.parseColor("#0280e8");
var modTextColorDark = Color.parseColor("#0280e8");
var themeBlackNotClicked = new android.graphics.drawable.GradientDrawable();
themeBlackNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeBlackNotClicked.setStroke(0, themeStroke);
themeBlackNotClicked.setCornerRadius(0);
themeBlackNotClicked.setAlpha(80);
var themeBlackClicked = new android.graphics.drawable.GradientDrawable();
themeBlackClicked.setColor(Color.parseColor("#21ff00"));
themeBlackClicked.setStroke(1, Color.parseColor("#0280e8"));
themeBlackClicked.setCornerRadius(0);
themeBlackClicked.setAlpha(80);
var themeBackgroundBlack = Color.parseColor("#000000");
var themeForegroundBlack = Color.parseColor("#000000");
var themeStrokeBlack = Color.parseColor("#0280e8");
var themeTextBlack = Color.parseColor("#ffffff");
var modTextColorBlack = Color.parseColor("#ffffff");
var themeXmasNotClicked = new android.graphics.drawable.GradientDrawable();
themeXmasNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themeXmasNotClicked.setStroke(0, themeStroke);
themeXmasNotClicked.setCornerRadius(0);
themeXmasNotClicked.setAlpha(80);
var themeXmasClicked = new android.graphics.drawable.GradientDrawable();
themeXmasClicked.setColor(Color.parseColor("#21ff00"));
themeXmasClicked.setStroke(1, Color.parseColor("#fafefd"));
themeXmasClicked.setCornerRadius(0);
themeXmasClicked.setAlpha(80);
var themeBackgroundXmas = Color.parseColor("#3c0105");
var themeForegroundXmas = Color.parseColor("#e7161b");
var themeStrokeXmas = Color.parseColor("#fafefd");
var themeTextXmas = Color.parseColor("#fafefd");
var modTextColorXmas = Color.parseColor("#fafefd");
var themePurpleNotClicked = new android.graphics.drawable.GradientDrawable();
themePurpleNotClicked.setColor(android.graphics.Color.TRANSPARENT);
themePurpleNotClicked.setStroke(0, themeStroke);
themePurpleNotClicked.setCornerRadius(0);
themePurpleNotClicked.setAlpha(80);
var themePurpleClicked = new android.graphics.drawable.GradientDrawable();
themePurpleClicked.setColor(Color.parseColor("#ffffff"));
themePurpleClicked.setStroke(1, Color.parseColor("#fcfafe"));
themePurpleClicked.setCornerRadius(0);
themePurpleClicked.setAlpha(80);
var themeBackgroundPurple = Color.parseColor("#4b0077");
var themeForegroundPurple = Color.parseColor("#730096");
var themeStrokePurple = Color.parseColor("#380049");
var themeTextPurple = Color.parseColor("#fcfafe");
var modTextColorPurple= Color.parseColor("#fcfafe");
var themedOrange = false;
var themedWhite = false;
var themedRed = false;
var themedBlue = false;
var themedGreen = false;
var themedMagenta = false;
var themedBlack = false;
var themedPurple = false;
var themedXmas = false;
var themedDark = false;
var betToastUi = new android.graphics.drawable.GradientDrawable();
betToastUi.setColor(android.graphics.Color.BLACK);
betToastUi.setStroke(2, themeStroke);
betToastUi.setCornerRadius(10);
var of = new android.graphics.drawable.GradientDrawable(); of .setStroke(1, themeStroke); of .setColor(android.graphics.Color.BLACK); of .setCornerRadius(10);
var ofLong = new android.graphics.drawable.GradientDrawable(); ofLong .setStroke(1, themeStroke); ofLong .setColor(android.graphics.Color.BLACK); ofLong .setCornerRadius(10);
var qpof = new android.graphics.drawable.GradientDrawable(); qpof .setStroke(1, themeStroke); qpof .setColor(android.graphics.Color.BLACK); qpof .setCornerRadius(10);

var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(0);

function themeFinish() {
if (themeBtn == "red") {
themeBtnClicked = themeRedClicked;
themeBtnNotClicked = themeRedNotClicked;
themeBackground = themeBackgroundRed;
themeForeground = themeForegroundRed;
themeStroke = themeStrokeRed;
themeText = themeTextRed;
seekProgressTheme = Color.parseColor("#ff9696");
seekThumbTheme = Color.parseColor("#ff4242");
themedOrange = false;
themedPurple = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorRed;
}
if (themeBtn == "green") {
themeBtnClicked = themeGreenClicked;
themeBtnNotClicked = themeGreenNotClicked;
themeBackground = themeBackgroundGreen;
themeForeground = themeForegroundGreen;
themeStroke = themeStrokeGreen;
themeText = themeTextGreen;
seekProgressTheme = Color.parseColor("#96ffa4");
seekThumbTheme = Color.parseColor("#04ff00");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedPurple = false;
themedGreen = true;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorGreen;
}
if (themeBtn == "blue") {
themeBtnClicked = themeBlueClicked;
themeBtnNotClicked = themeBlueNotClicked;
themeBackground = themeBackgroundBlue;
themeForeground = themeForegroundBlue;
themeStroke = themeStrokeBlue;
themeText = themeTextBlue;
seekProgressTheme = Color.parseColor("#96a2ff");
seekThumbTheme = Color.parseColor("#0094ff");
themedOrange = false;
themedWhite = false;
themedPurple = false;
themedRed = false;
themedBlue = true;
themedGreen = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorBlue;
}
if (themeBtn == "orange") {
themeBtnClicked = themeOrangeClicked;
themeBtnNotClicked = themeOrangeNotClicked;
themeBackground = themeBackgroundOrange;
themeForeground = themeForegroundOrange;
themeStroke = themeStrokeOrange;
themeText = themeTextOrange;
seekProgressTheme = Color.parseColor("#ffe196");
seekThumbTheme = Color.parseColor("#ff8800");
themedOrange = true;
themedWhite = false;
themedRed = false;
themedPurple = false;
themedBlue = false;
themedGreen = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorOrange;
}
if (themeBtn == "white") {
themeBtnClicked = themeWhiteClicked;
themeBtnNotClicked = themeWhiteNotClicked;
themeBackground = themeBackgroundWhite;
themeForeground = themeForegroundWhite;
themeStroke = themeStrokeWhite;
themeText = themeTextWhite;
seekProgressTheme = Color.parseColor("#b7b7b7");
seekThumbTheme = Color.parseColor("#262626");
themedOrange = false;
themedWhite = true;
themedRed = false;
themedPurple = false;
themedBlue = false;
themedGreen = false;
themedBlack = false;
themedDark = false;
themedMagenta = false;
themedXmas = false;
modTextColor = modTextColorWhite;
}
if (themeBtn == "magenta") {
themeBtnClicked = themeMagentaClicked;
themeBtnNotClicked = themeMagentaNotClicked;
themeBackground = themeBackgroundMagenta;
themeForeground = themeForegroundMagenta;
themeStroke = themeStrokeMagenta;
themeText = themeTextMagenta;
seekProgressTheme = Color.parseColor("#ff96f8");
seekThumbTheme = Color.parseColor("#ff00ff");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedPurple = false;
themedMagenta = true;
themedDark = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorMagenta;
}
if (themeBtn == "purple") {
themeBtnClicked = themePurpleClicked;
themeBtnNotClicked = themePurpleNotClicked;
themeBackground = themeBackgroundPurple;
themeForeground = themeForegroundPurple;
themeStroke = themeStrokePurple;
themeText = themeTextPurple;
seekProgressTheme = Color.parseColor("#ffe0ff");
seekThumbTheme = Color.parseColor("#ba00ba");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedPurple = true;
themedDark = false;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorMagenta;
}
if (themeBtn == "dark") {
themeBtnClicked = themeDarkClicked;
themeBtnNotClicked = themeDarkNotClicked;
themeBackground = themeBackgroundDark;
themeForeground = themeForegroundDark;
themeStroke = themeStrokeDark;
themeText = themeTextDark;
seekProgressTheme = Color.parseColor("#aad1ed");
seekThumbTheme = Color.parseColor("#0094ff");
themedOrange = false;
themedWhite = false;
themedPurple = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = true;
themedBlack = false;
themedXmas = false;
modTextColor = modTextColorDark;
}
if (themeBtn == "black") {
themeBtnClicked = themeBlackClicked;
themeBtnNotClicked = themeBlackNotClicked;
themeBackground = themeBackgroundBlack;
themeForeground = themeForegroundBlack;
themeStroke = themeStrokeBlack;
themeText = themeTextBlack;
seekProgressTheme = Color.parseColor("#aad1ed");
seekThumbTheme = Color.parseColor("#0094ff");
themedOrange = false;
themedPurple = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = true;
themedXmas = false;
modTextColor = modTextColorBlack;
}
if (themeBtn == "xmas") {
themeBtnClicked = themeXmasClicked;
themeBtnNotClicked = themeXmasNotClicked;
themeBackground = themeBackgroundXmas;
themeForeground = themeForegroundXmas;
themeStroke = themeStrokeXmas;
themeText = themeTextXmas;
seekProgressTheme = Color.parseColor("#ff6e74");
seekThumbTheme = Color.parseColor("#3fc100");
themedOrange = false;
themedPurple = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = true;
modTextColor = modTextColorXmas;
}
of .setStroke(2, themeStroke); of .setColor(android.graphics.Color.BLACK); of .setCornerRadius(10);
betToastUi.setStroke(3, themeStroke);
telebtn.setStroke(2, themeStroke);
};
themeFinish();
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var bg2 = new android.graphics.drawable.GradientDrawable();
bg2.setColor(android.graphics.Color.CYAN);
bg2.setStroke(4, android.graphics.Color.WHITE);
bg2.setCornerRadius(0);
var xbgs = new android.graphics.drawable.GradientDrawable();
xbgs.setStroke(1, android.graphics.Color.WHITE);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
xbg2.setCornerRadius(120);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var xbg = new android.graphics.drawable.GradientDrawable();
xbg.setColor(android.graphics.Color.CYAN);
xbg.setStroke(4, android.graphics.Color.WHITE);
xbg.setCornerRadius(0);
var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var closebtnBackground = new android.graphics.drawable.GradientDrawable();
closebtnBackground.setColor(themeForeground);
closebtnBackground.setCornerRadius(0);
closebtnBackground.setAlpha(255);
closebtnBackground.setStroke(2, themeStroke);
var bgClicked = new android.graphics.drawable.GradientDrawable();
bgClicked.setColor(themeBackground);
bgClicked.setStroke(0, themeStroke);
bgClicked.setCornerRadius(0);
bgClicked.setAlpha(255);
var bgNotClicked = new android.graphics.drawable.GradientDrawable();
bgNotClicked.setColor(themeForeground);
bgNotClicked.setStroke(2, themeStroke);
bgNotClicked.setCornerRadius(5);
var sideMenuStroke = new android.graphics.drawable.GradientDrawable();
sideMenuStroke.setStroke(2, themeStroke);
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setStroke(2, themeStroke);
var settingNotClickedH = new android.graphics.drawable.GradientDrawable();
settingNotClickedH.setColor(themeBackground);
settingNotClickedH.setStroke(0, themeStroke);
settingNotClickedH.setCornerRadius(0);
settingNotClickedH.setAlpha(255);
var settingClickedH = new android.graphics.drawable.GradientDrawable();
settingClickedH.setColor(themeBackground);
settingClickedH.setStroke(2, Color.parseColor("#21ff00"));
settingClickedH.setCornerRadius(0);
settingClickedH.setAlpha(255);
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(3, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(2, themeStroke);
title.setCornerRadius(0);
var xbgGS = new android.graphics.drawable.GradientDrawable();
xbgGS.setStroke(0, android.graphics.Color.CYAN);
var xbgWP = new android.graphics.drawable.GradientDrawable();
xbgWP.setStroke(0, android.graphics.Color.YELLOW);
var waypointactive = new android.graphics.drawable.GradientDrawable();
waypointactive.setStroke(2, android.graphics.Color.YELLOW);
var xbgAW = new android.graphics.drawable.GradientDrawable();
xbgAW.setStroke(0, android.graphics.Color.BLUE);
var sleekUI = new android.graphics.drawable.GradientDrawable();
sleekUI.setColor(Color.parseColor("#000000"));
sleekUI.setStroke(2, themeStroke);
sleekUI.setCornerRadius(3);
var sleekUIbtn = new android.graphics.drawable.GradientDrawable();
sleekUIbtn.setColor(Color.parseColor("#000000"));
sleekUIbtn.setStroke(1, themeStroke);
sleekUIbtn.setCornerRadius(0);
sleekUIbtn.setAlpha(0);
var sleekTitle = new android.graphics.drawable.GradientDrawable();
sleekTitle.setColor(themeForeground);
sleekTitle.setStroke(2, themeStroke);
sleekTitle.setCornerRadius(0);
sleekTitle.setAlpha(90);
var sleekUIbtnSet1 = new android.graphics.drawable.GradientDrawable();
sleekUIbtnSet1.setColor(themeForeground);
sleekUIbtnSet1.setStroke(2, themeStroke);
sleekUIbtnSet1.setCornerRadius(0);
sleekUIbtnSet1.setAlpha(180);
var sleekUIbtnSet2 = new android.graphics.drawable.GradientDrawable();
sleekUIbtnSet2.setColor(themeForeground);
sleekUIbtnSet2.setStroke(0, themeStroke);
sleekUIbtnSet2.setCornerRadius(0);
sleekUIbtnSet2.setAlpha(0);
var addX = false;
var addZ = false;
var subtractX = false;
var subtractZ = false;
var way = "x+";
var thous = 1000;
var currentX = 0;
var currentZ = 0;
var goalX = 0;
var goalZ = 0;
var entry = getPlayerEnt(),
serverNames = ["", ""],
serverIps = ["", ""],
serverPorts = ["", ""],
siteUrl = "",
tmiList = "",
canOpenT = "no",
FAQ = "Connect to Internet",
publicVer = "",
confirmed = false,
wName = "Name",
useLegal = false,
serverSelect = false,
enchantPicker = false,
xrrayin=false,
colorPicker = false,
coordtimer = 2,
crosshairOn = false,
mopenCount = 20,
crosshairDimension = 150,
avoidX = 20,
avoidY = 20,
avoidZ = 20,
avoidplayerdo = false,
phaseBlockss = false,
phaseBlocksd = false,
avoidRange = 15,
avoidplayers = false,
snowIt=false,
tmiId = 1,
tmiAmount = 64,
tmiDamage = 0,
tmiRepeat = false,
effectIn = false,
waila=false,
totemSp = false,
incTog = false,
eAimbot = false,
airjumps = false,
signedits = true,
FovsbpProgress = 20,
fovsbp = false,
stepss = false,
crouchtpss = false,
destroyingWood=false,
fastfalls = false,
fastfalld = false,
openMenu8Status = false,
openMenu9Status = false,
openMenu10Status = false,
blockesptracers=false,
openMenu11Status = false,
canPreset = false,
lstUrlTran="",
jetskiss = false,
jetskisd = false,
smoothjesuss = false,
lavajes=false,
smoothjesusd = false,
longjumps = false,
longjumpd = false,
boostKBBo=false,
warnState = false,
tapRiderd = false,
treeSw=false,
treecs=false,
tapRider = false,
eTog = false,
fastbridger=false,
filterHueN = 0,
rgbesp=false,
strokeesp=false,
rgbticked=0,
tapMorphd = false,
tapMorphs = false,
curBiomes = false,
displayActiveMods=false,
trydelete=false,
antispammer=false,
hascycled=false,
deathX=0,
deathY=0,
deathZ=0,
entry2,
acrashchnks=false,
espOnsave=false,
espOnTsave=false,
espOnBsave=false,
curBiomed = false,
jumpsprints = false,
jumpsprintd = false,
htmltxtcolor = "#fffff",
spammsg1="",
deathcOM=false,
elytrad = false,
blockEspTracer = false,
elytras = false,
miningfs = false,
effectb = false,
preTranslatedChat="",
moving = false,
chatLogtxt="",
fontid="mc",
disSpeed=false,
dx = 0,
dy = 0,
mPosX = 0,
mPosY = 0,
cs_script="",
cs_title="",
schematic_script="",
schematic_title="",
nevvhun=false,
effectn = false,
rgbspeed=7,
rgbtick=rgbspeed,
violatord = false,
invCheck = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],
violators = false,
hoveraurad = false,
zomS=false,
hoverauras = false,
playerStats=false,
twerkit=false,
twe=0,
effectRemove=false,
effectAdd=false,
espmenus=false,
autolog=false,
healthmin=6,
fortunelimiter=true,
aerialauras = false,
aimbotRange = 16,
freeSpeed = 1,
spamMsg = "§cInstinct is the best client. §eDownload at §binstinctmods.com",
creator = "this guy",
TIPstart="1. If this client is laggy, go to the settings tab and disable the icons.\n\n 2. Make sure you read how to use the Xrays\n\n 3. If the Set Offhand interface is too laggy for your device, enable the Use Old TMI GUI setting.",
filterHue = android.graphics.Color.RED,
curTip=2,
atotemd = false,
atotems = false,
datalogging=true,
blocksToReplaceX = [],
blocksToReplaceY = [],
blocksToReplaceZ = [],
blocksReplacedX = [],
blocksReplacedY = [],
blocksReplacedZ = [],
blocksToSkip = [],
fasteats = false,
fasteatd = false,
effectSat=false,
effectAbs=false,
checkonthread1=false,
checkonthread2=false,
modtickedcount=0,
chatTranslator=false,
armorB=false,
discordUrl="",
checkedno=true,

nameEnemy,
healthEnemy,
max_healthEnemy,
headEnemy,
chestEnemy,
legsEnemy,
feetEnemy,
handEnemy,
head_damageEnemy,
chest_damageEnemy,
legs_damageEnemy,
feet_damageEnemy,
hand_damageEnemy,
max_dura_headEnemy,
max_dura_chestEnemy,
max_dura_legsEnemy,
max_dura_feetEnemy,
max_dura_handEnemy,

effectHealth=false,
effectWither=false,
effectPois=false,
effectWeak=false,
effectHunger=false,
effectWater=false,
effectFireRes=false,
effectDmgRes=false,
effectHarm=false,
effectHeal=false,
effectStrgth=false,
effectSlow=false,
effectSwift=false,
aerialaurad = false,
swordSlot = 0,

area_schem,
X_schem,
Y_schem,
Z_schem,
I_schem,
D_schem,

invId = 0,
checking = false,
showGradient=true,
modpool,
modFlyState=false,
webviewList=undefined,
lstUrl="",
windowOpen=false,
bowSlot = 0,
huds = false,
hbS=false,
activemodtick=20,
hudd = false,
noclipd = false,
lockedaxis=false,
lockedx=false,
lockedy=false,
lockedz=false,
noclips = false,
gp, tick1 = 0,
gps = false,
gped = false,
time = 0,
safe, safes = false,
safed = false,
GUI, menu, exitUI, VERSION = " 1.0.0",
NAME = "Instinct",
DEVELOPERS = creator,
cBtn = "Instinct",
pvpBtn, aim, aimbot = false,
aimed = false,
spam2=false,
sf = false,
FPS=0,
gmcc1 = false,
im = false,
ims = false,
hsfind=false,
gmLans=false,
hj = false,
hjs = false,
waypointtracer=false,
malf = 0,
nearestHud=false,
esp = false,
canOpen = false,
esps = false,
espd = false,
espbtn = false,
defaultDestroyTime = [null, 1.5, 0.6, 0.5, 2, 2, 0, -1, null, null, null, null, 0.5, 0.6, 3, 3, 3, 2, 0.2, 0.6, 0.3, 3, 3, null, 0.8, null, 0.2, 0.7, null, null, 4, 0, 0, null, null, 0.8, null, 0, 0, 0, 0, 3, 5, 2, 2, 2, 0, 1.5, 2, 50, 0, 0, null, 2, 2.5, null, 3, 5, 2.5, 0, 0.6, 3.5, 3.5, 1, 3, 0.4, 0.7, 2, 1, null, null, 5, null, 3, 3, null, null, null, 0.1, 0.5, 0.2, 0.4, 0.6, 0, null, 2, 1, 0.4, 0.3, null, 1, 0.5, null, null, -1, 3, null, 1.5, null, null, 5, 0.3, 1, 0, 0, null, 2, 2, 1.5, null, null, 2, null, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, 0.8, null, null, null, null, null, 2, 2, 2, null, null, 2, null, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, 0.8, 0.8, 2, 2, null, null, null, null, null, null, null, null, null, null, null, 0.5, 0.1, 5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 3.5, 50, 5, 0.6, 0.6, 5, null, null, null, null, 0],
playerDir = [0, 0, 0],
DEG_TO_RAD = Math.PI / 180,
playerFlySpeed = 50,
falling = 0,
next = 0,
colors = ["§c","§6","§e","§a","§b","§9"],
/*
0:  c0
1:  61
2:  e2
3:  a3
4:  b4
5:  95
6:  c0
7:  61
8:  e2
9:  a3
10: b4
11: 95
12: c0
13: 61
14: a2
15: b3
*/
banslist = [],
px, py, pz, lx, ly, lz, vel, freecamSon = false,
saver, host, cd = 0,
s = 0,
Xdiff, Zdiff, Xpos, Zpos, can = 1,
canGetHP = 1,
HP, gravity = -0.07840000092983246,
Entities = [],
counter = 0,
far, farbot = false,
mcps, mcpss = false,
espTicker=0,
mcped = false,
currentselecti=0,
fared = false,
spee = false,
shuffleMusic = false,
armorE=false,
radius, radiuss = false,
themeAlpha = 168,
radiused = false,
afks, afkss = false,
numbers = android.text.InputType.TYPE_CLASS_NUMBER,
number = android.text.InputType.TYPE_NUMBER_FLAG_SIGNED,
gamespeedset = 1,
afked = false,
tipMessage = "",
aurRan=12,
tipList = ["Customize with THEMES in the Settings tab","Customize with THEMES in the Settings tab","Best PVP setup: Auto Reach, Aimbot, & Blast Aura","Set HOMES using Waypoints!","Check the FAQ's in Settings!","Join the Discord server to help grow the mod menu!","Over 9,000 downloads and counting!","The button to open the menu is movable!","Dupe items on realms using the Dupe mod!","You'll be nofitied when an update is available!","Don't get banned on servers, be smart","Phase and noclip are very similar, but different!","These messages are random!","Mod suggestions are welcome!","Don't like thunderstorms? Enable clear weather mod","Wallhack is good for finding mineshafts!","The crosshair size is adjustable!","Want to be incognito? Hide the menu in the MISC. tab!","Biome ID might be the most useless mod","Now with Keybinds!","Rainbow chat is hidden in the color chat mod!","Join the Discord server to access Instinct Betas!"],
tick = 0,
espRed=0.129,
espGreen=0.078,
espBlue=1,
sfs = false,
bright = false,
god = false,
chlog=false,
chlogAlways=false,
backOpen = false,
spamss = false,
spamed = false,instinctChat = false,
blockEspTracer = false,
spamTime = 0,
autoBlockB = 20,
spamDelay = 35,
wallhacks, wallhackss = false,
wallhacked = false,
firstloadsince7=true,
nvS=false,
translatelang="googtrans(auto|en)",
ctrlzooms, ctrlzoomed = false,
ctrlzoomtoggle = false,
zoomed = false,
heals, GUIy, mopen = false,
jetpacks, jetpackss = false,
jetpacked = false,
pvp, pvpd = false,
pvps = false,
minerd=false,
xphits, xphitss = false,
xphited = false,
CoordsBtn = ("Launch World"),
boom, boomed = false,
booms = false,
potion, potions = false,
recentChecked,
potioned = false,
coordds = false,
xrrayin2=false,
coordd, autoBridges, autoBridgess = false,
autoBridged = false,
hjj, hjjs = false,
swis = false,
showParticles=false,
chatSplit=[],
sbS=false,
ride, rides = false,woodticker=60,
firstLoad = true,
canSplit=false,
espBlock = 54,
espBlock2 = 0,
espBlock3 = 0,
espBlock4 = 0,
espBlock5 = 0,
espBlock6 = 0,
espBlock7 = 0,
espBlock8 = 0,
espBlocks = [],
espBlocks2 = [],
espBlocks3 = [],
espBlocks4 = [],
espBlocks5 = [],
espBlocks6 = [],
espBlocks7 = [],
espBlocks8 = [],
espB2 = false,
espB3 = false,
espB4 = false,
espB5 = false,
espB6 = false,
espB7 = false,
espB8 = false,
rided = false,
muteUpdate = false,
pitchtrigger=40,
starter, starters = false,
starterd = false,
tpaur=false,
elevating=false,
iconcount=2,
ntnts = false,
faimed=false,
faimbot=false,
customItemname="My Item",
faimbotBtn=false,
ntnt, ntnted = false,
lantntS = false,
gunChecked = false,
tntcanOn = false,
activeMods=[""],
playerNameStat=false,
entityType = "65",
entityName = "Primed TNT",
GUIz, jesus, jesused = false,
jesuss = false,
lankillaura=false,
walks, walkss = false,
clipsBls = false,
clipBtn = false,
rendering=false,
offhandKB=false,
walked = false,
tapjumps, tapjumpss = false,
wwv,urlNow,
url="http://instinctmods.com/htmlmodlist/index.html#",
minus = 2,
ticker = 0,
blastau = false,
blastaurS,
tapjumped = false,
currentScreen="",
spider, spiders = false,
spiderd = false,
snipers, sniperss = false,
snipered = false,
antikbs, antikbss = false,
antikbed = false,
aos, aoss = false,
aoed = false,
chestesp, chestespd = false,
chestesps = false,
storageESPrange = 25,
codetalker, codetalkers = false,
codetalkered = false,
colormychat, colormychatss = false,
dimensionIn=0,
useCustom = false,
colormychatd = false,
spamTime=4,
colorchat, colorchatss = false,
colorchatdpfss = false,
clearweather = false,
dispro=150,
allday = false,
allRight=false,
nearestHudTsave=false,
allnight = false,
bedrocke = false,
chatcolor = "§b",
quickturn, quickturns = false,
quickturnd = false,
waypointd = false,
translateWindowIsOpen=false,
friendList = [],
waypoint, waypoints = false,
waypointNameAdd = "Waypoint",
numberOfWaypoints = 0,
kbWay, kbWayd = false,
GUIkbw, kbWays = false,
indiW,
ncoordds = false,
openMenu1Status = false,
pfss=false,
pfsd=false,
nOffs=false,
checkedBlock=0,
destroyNextWood=false,
freeX=0,
freeY=0,
freeZ=0,
openMenu2Status = false,
backgroundIsOpen = false,
openMenu3Status = false,
openMenu4Status = false,
openMenu5Status = false,
pointedX = 0,
pointedY = 0,
combatESP=false,
pointedZ = 0,
tapPart=false,
hiddenMenu = false,
digurl=false,
checkdownload=false,
idurl="http://instinctmods.com/idlist.html",
updateNotifier = false,
openMenu6Status = false,
openMenu7Status = false,
canStat=true,
oldTMI=false,
debugUic, debugUicd = false,
aimbotBtn=false,
rgbmenu=false,
filterOn = false,
taptosee, taptoseed = false,
showAllMenu = true,
sleekMenuOn = false,
showSleekMenuOn=false,
showHTMLMenu=false,
windowOpen=false,
animations = true,
iconsB=true,
fireproof=false,
helpB=false,
realmnfd=false,
levs=false,
x933q=true,
magiccarpetParent=false,
magiccarpets=false,
vibrations=true,
showAllMenuStatus = true,
showAllMenuStatusOpposite = false,
spaceholderWidth = icon_dimensions*.74,
spaceholderHeight = icon_dimensions,
reachDistanceSlider, reachDistance = "13",
autoReachs = false,
instantportalnether = false,
instantportalend = false,
elytraspoof = false,
autoReachd = false,
foilits=false,
autoReach, maximalrange = 7,
aimplayer = true,
compactView=false,
chatlinks=false,
friendName="",
aimmobs = false,
espt = false,
crack = false,
indiSta=false,
safewalkswitchs = false,
safewalkswitchd = false,
taptpswitchs = false,
taptpswitchd = false,
negativelvls=false,
betterladss = false,
EntityName = {"-1":"Unknown","10":"Chicken","11":"Cow","12":"Pig","13":"Sheep","14":"Wolf","15":"Villager","16":"Mooshroom","17":"Squid","18":"Rabbit","19":"Bat","20":"Iron Golem","21":"Snow Golem","22":"Ocelot","23":"Horse","24":"Donkey","25":"Mule","26":"Skeleton Horse","27":"Zombie Horse","28":"Polar Bear","29":"Llama","32":"Zombie","33":"Creeper","34":"Skeleton","35":"Spider","36":"Zombie Pigman","37":"Slime","38":"Enderman","39":"Silverfish","40":"Cave Spider","41":"Ghast","42":"Magma Cube","43":"Blaze","44":"Zombie Villager","45":"Witch","46":"Stray","47":"Husk","48":"Wither Skeleton","49":"Guardian","50":"Elder Guardian","52":"Wither","53":"Ender Dragon","54":"Shulker","55":"Endermite","57":"Vindicator","63":"Player","104":"Evoker","105":"Vex",},
vmb=false,
betterladsd = false,
borderChooser=false,
speedTick=10,
speedometerS=false,
swapForeground=false,

amoledRed = 0/255,
amoledGreen = 33/255,
amoledBlue = 255/255,
amoledBorderRGB = android.graphics.Color.rgb(amoledRed, amoledGreen, amoledBlue),

menuFailed1=false,
menuFailed2=false,
menuFailed3=false,
menuFailed4=false,
menuFailed5=false,
menuFailed6=false,
menuFailed8=false,
menuFailed9=false,
menuFailed10=false,
menuFailed11=false,

swifta=30,
swiftd=999999,
slowa=2,
slowd=999999,
strengta=200,
strengthd=999999,
resa=200,
resd=999999,
fresa=200,
fresd=999999,
waterba=200,
waterbd=999999,
hungera=200,
hungerd=999999,
weaka=200,
weakd=999999,
poisona=200,
poisond=999999,
withera=200,
witherd=999999,
healboa=200,
healbod=999999,
absoa=200,
sbsod=999999,
invisa=200,
invisd=999999,
blinda=200,
blindd=999999,
nausa=8,
nausd=999999,
jumpa=8,
jumpd=999999,
leva=3,
levd=999999,
mina=200,
mind=999999,
hasta=200,
hastd=999999,
niva=200,
nivd=999999,


build_Ocean_Monument=false,
build_Stronghold=false,
build_Village_House_Big=false,
build_Blacksmith=false,
build_Church=false,
build_Farm_Small=false,
build_Village_House_Small_1=false,
build_Village_House_Small_2=false,
build_Village_Well=false,
build_Farm_Big=false,

cs_directory = android.os.Environment.getExternalStorageDirectory ().getPath () +"/games/Instinct",
schematic_directory = android.os.Environment.getExternalStorageDirectory ().getPath () +"/games/Instinct/Schematics",
sniperss = false,
snipersd = false,
bowaimbot = false,
mGLSurfaceView=false,
namestore = "",
immunity=["",""],
branchactive=false,
customName=["",""],
customNameC=["",""],
particleEffect=["",""],
donators=["",""],
supportclicks=0,
survivaltab=true,
blacklistedMods=["List Off","GIF Background","Join Realm","Set Offhand","Enchant","Day","Night","Rename","Dupe","Suicide","Clear Inventory","Too Many Items","Diamond Kit","Structures","Reset Hitboxes","Add Waypoint","Remove All Effects","Add XP","Heal","Scaffold ID","Launch","TP to Deathpoint","TP to Nearest","Player Teleports","Teleport","Default Gamespeed","Custom Spam","Stackable Items","Hide Menu","Ride Nearest","Open Log","Delete Log","Spy Cam","Servers","IP Address","Sneak Chat","Wipe Data","Language","Custom Script","Changelog","Download Instinct","Credits","FAQ","Website","JoinRealm","Join Discord","Donate","Donator Mods","Old ID List","GUI Settings","Tab Disabler","Use Old TMI","Mute Update","Use DigMinecraft","Chat Log Always On","PVP Menu Left","Menu on Right","Vibrations Off","Disable Animations","Disable Icons","Disable Help","Enable Help","Menu Gradient","Compact View","Holiday Theme","Orange Theme","White Theme","Red Theme","Green Theme","Amoled Theme","Blue Theme","Dark Theme","Magenta Theme","Starter Preset","PVP Preset","Miner Preset","Add Friend","Show Discord"],
pvptab=true,
waypointtab=true,
friendtab=true,
musicTime,
infreach=false,
potiontab=true,
movementtab=true,
discordtab=true,
misctab=true,
presettab=true,
settingtab=true,
currentSelect=[0],
savedg="",
bowaimbotd = false,
swordaimbot = false,
swordaimbotd = false,
textures=[0],
playerIsFriend=false,
gpsZ=0,
gpsX=0,
tblock = 54,
autoSword = false,
autoBow = false,
surfacing=false,
updateMod,noclip2s=false,
sleekLeft = false,
stoprideshowing=false,

density = ctx.getResources().getDisplayMetrics().density,

useGIF = false,
gifback=undefined,
backOpen=false,
giflink="https://i.pinimg.com/originals/51/b3/5b/51b35b069fdabf0f5f07eaf8d0829c88.gif",
gif2="https://i.pinimg.com/originals/b5/5e/3b/b55e3bafe484a0ead34d5e3849bd1e11.gif",
gif1="https://i.pinimg.com/originals/51/b3/5b/51b35b069fdabf0f5f07eaf8d0829c88.gif",
gif3="http://1.bp.blogspot.com/-r5Aj9YbCQQk/UF80dyv17SI/AAAAAAAAEZU/aXoSQPybltI/s1600/Beautiful+3D+hd+nature+wallpaper+mobile+phones++Download++animated+gif+pictures+and+wallpapers++smartphone+phone+wallpapers+backgrounds+images+photos+gif+pictures++moon+water+reflexive.gif",
/*Roughly 100px*/
icon_dimensions=ctx.getWindowManager().getDefaultDisplay().getHeight()/19,
tabWidth = 8.5,
fullheight = ctx.getWindowManager().getDefaultDisplay().getHeight(),
fullwidth = ctx.getWindowManager().getDefaultDisplay().getWidth(),
left_width = ctx.getWindowManager().getDefaultDisplay().getWidth() / tabWidth,
btntextsize= 6,
switchfontsize = 6,
menuWidth = .28,
menuIcon = 1.6,
tpQuickwidth = 3,
spaceHold = .5,
closemenuWidth = 8.5,
colorWidth = 6,
titleSize = 15,
pvpmenuWidth = 7,
pvpmenuHeight = 2.3,
pvptextsize = 9,
switchWidth = icon_dimensions*6.5,
modPadL = 0,
modPadT = icon_dimensions/4,
modPadR = 0,
modPadB = icon_dimensions/4;

if(!helpB){iconcount--};
if(!iconsB){iconcount--};
var tab_width = 60*density,
tab_height = 1.3,
title_width = 80*density,
list_width_var=200,
list_width = list_width_var*density,
icon_dimensions = list_width/9,
close_width = 110*density,
gap_width = 10*density,
switch_width = ((list_width-(icon_dimensions*iconcount))-gap_width),
wayNameWidth = list_width-(icon_dimensions*4),
help_width = icon_dimensions,
left_width = tab_width;

var language="English";
var langMsg=[""]; 
var cs_functionarr = {};
var schematic_functionarr = {};
var mpelang = ModPE.getLanguage();
var m3=mpelang;
if(m3=="es_MX"||m3=="es_ES"){language="Spanish";}
if(m3=="id_ID"){language="Indonesian";}
if(m3=="en_US"||m3=="en_GB"){language="English";}/*
if(m3=="da_DK"){language="Danish";}
if(m3=="de_DE"){language="German";}
if(m3=="fr_CA"||m3=="fr_FR"){language="French";}
if(m3=="it_IT"){language="Italian";}
if(m3=="ja_JP"){language="Japan";}
if(m3=="zh_CN"){language="Chinese";}
if(m3=="ko_KR"){language="Korean";}
if(m3=="ru_RU"){language="Russian";}
if(m3=="bg_BG"){language="Bulgarian";}
if(m3=="el_GR"){language="Greek";}*/
langMsg["English"]={
"Close Menu":"Close Menu",
"Enable PVP Menu":"Enable PVP Menu",
"Survival":"Survival",
"PVP":"PVP",
"Waypoints":"Waypoints",
"Waypoint":"Waypoint",
"Friends":"Friends",
"Potions":"Potions",
"Movement":"Movement",
"Discord":"Discord",
"Misc.":"Misc.",
"Presets":"Presets",
"Settings":"Settings",
"Disable PVP Menu":"Disable PVP Menu",
"Survival Menu":"Survival Menu",
"LAN Only Mods":"LAN Only Mods",
"PVP Menu":"PVP Menu",
"Hitboxes":"Hitboxes",
"Potions Menu":"Potions Menu",
"Movement Menu":"Movement Menu",
"Quick TP":"Quick TP",
"Misc Menu":"Misc Menu",
"Theme":"Theme",
"Tip: These mods only work on LAN worlds, not realms or most servers":"Tip: These mods only work on LAN worlds, not realms or most servers",
"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data":"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data",
"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added":"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added",
"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.":"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.",
"You are a donator and chose:":"You are a donator and chose:",
"- Particle Effect":"- Particle Effect",
"- Immunity":"- Immunity",
"- Custom Name: ":"- Custom Name: ",
"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices":"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices",
"Enchants the item in your hand":"Enchants the item in your hand",
"Increases hitbox size of victim you hit":"Increases hitbox size of victim you hit",
"Adds button to zoom in":"Adds button to zoom in",
"Double Tap jump":"Double Tap jump",
"Fly in survival just like in creative":"Fly in survival just like in creative",
"Xray Stone - See ores from the bottom up - USE WHILE MINING":"Xray Stone - See ores from the bottom up - USE WHILE MINING",
"Xray Stone - See ores from the top down - DON'T USE WHILE MINING":"Xray Stone - See ores from the top down - DON'T USE WHILE MINING",
"Indicates what biome you're in":"Indicates what biome you're in",
"Indicates your coordinates, location":"Indicates your coordinates, location",
"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld":"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld",
"Shows direction to where you died":"Shows direction to where you died",
"Made by MxGoldo, implemented and fixed by ":"Made by MxGoldo, implemented and fixed by ",
"Shows a minimap of your area":"Shows a minimap of your area",
"Walk next to a wall":"Walk next to a wall",
"Allows you to see through walls, go walk next to one.":"Allows you to see through walls, go walk next to one.",
"Always clear weather":"Always clear weather",
"Forces time to day":"Forces time to day",
"Forces time to night":"Forces time to night",
"Sets time to day on single player worlds":"Sets time to day on single player worlds",
"Sets time to night on single player worlds":"Sets time to night on single player worlds",
"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices":"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices",
"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it":"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it",
"Move item to crafting table":"Move item to crafting table",
"Duplicates item in hand, move to crafting table in inventory after.":"Duplicates item in hand, move to crafting table in inventory after.",
"Only for single player, kits you with diamond gear":"Only for single player, kits you with diamond gear",
"Teleports you to the void, killing you.":"Teleports you to the void, killing you.",
"Erases everything in your inventory":"Erases everything in your inventory",
"Adds crosshair to the center of the screen":"Adds crosshair to the center of the screen",
"Adjusts crosshair size":"Adjusts crosshair size",
"Enable FOV":"Enable FOV",
"Adjusts FOV":"Adjusts FOV",
"Displays armor durabilty in top left":"Displays armor durabilty in top left",
"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.":"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.",
"Don't get knocked back when hit":"Don't get knocked back when hit",
"Easier to see where everyone is, even the invisible":"Easier to see where everyone is, even the invisible",
"Easier to see where everyone is, even the invisible":"Easier to see where everyone is, even the invisible",
"Displays health of nearest player above their head":"Displays health of nearest player above their head",
"Eat food instantly, good for Pvp battles":"Eat food instantly, good for Pvp battles",
"Adds a totem of undying when hit":"Adds a totem of undying when hit",
"Teleports to the nearest people over and over":"Teleports to the nearest people over and over",
"Teleports to the victim":"Teleports to the victim",
"Use with aimbot and reach, hard to get killed":"Use with aimbot and reach, hard to get killed",
"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better":"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better",
"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.":"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.",
"Teleports above player within 4 blocks. Combine with aimbot.":"Teleports above player within 4 blocks. Combine with aimbot.",
"Sticks to a player":"Sticks to a player",
"Disable Regular aimbot first!":"Disable Regular aimbot first!",
"Disable Body Aimbot first!":"Disable Body Aimbot first!",
"Range: ":"Range: ",
"Good for easy pillaring":"Good for easy pillaring",
"Replaces nametag with stats":"Replaces nametag with stats",
"Get XP by hitting mobs":"Get XP by hitting mobs",
"Get XP when you hit someone":"Get XP when you hit someone",
"Adds button to quickly turn around":"Adds button to quickly turn around",
"Teleports away when anyone is near. Impossible to kill":"Teleports away when anyone is near. Impossible to kill",
"Adjust how far you teleport away from a player":"Adjust how far you teleport away from a player",
"Quickly adjust how close players can get near you while using Untouchable":"Quickly adjust how close players can get near you while using Untouchable",
"Sets players hitbox to large once you hit them":"Sets players hitbox to large once you hit them",
"Distance: ":"Distance: ",
"Automatically increases nearest players hitbox":"Automatically increases nearest players hitbox",
"Resets nearest player's hitbox size":"Resets nearest player's hitbox size",
"Removed all effects":"Removed all effects",
"Added experience":"Added experience",
"Effects can only be applied in-game!":"Effects can only be applied in-game!",
"Enabled Nightvision":"Enabled Nightvision",
"Enabled InstaMine":"Enabled InstaMine",
"Enabled Mining Fatigue":"Enabled Mining Fatigue",
"Healed":"Healed",
"Fly in any direction":"Fly in any direction",
"Fly in survival just like in creative":"Fly in survival just like in creative",
"Activated only when you look up and jump":"Activated only when you look up and jump",
"Gravity is increased":"Gravity is increased",
"Quickly ascend/descend":"Quickly ascend/descend",
"Quickly ascend/descend to surfaces":"Quickly ascend/descend to surfaces",
"Climb anything":"Climb anything",
"Crouch and glide to anywhere":"Crouch and glide to anywhere",
"Jump in the air":"Jump in the air",
"Step over anything, similar to Spider":"Step over anything, similar to Spider",
"Fly around without player moving. Permission to use by TimmYCode.":"Fly around without player moving. Permission to use by TimmYCode.",
"Jump far":"Jump far",
"Sprint and jumping at the same time":"Sprint and jumping at the same time",
"Boost forward":"Boost forward",
"Walk around on a carpet":"Walk around on a carpet",
"Builds a bridge underneath you.":"Builds a bridge underneath you.",
"Change Auto Bridge block":"Change Auto Bridge block",
"Quickly build bridges or pillars.":"Quickly build bridges or pillars.",
"Walk on water":"Walk on water",
"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack":"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack",
"Walk on water and go fast":"Walk on water and go fast",
"Always crouching but can still sprint":"Always crouching but can still sprint",
"Teleport anywhere you look":"Teleport anywhere you look",
"Can't take fall damage":"Can't take fall damage",
"Crouch and glide through any block":"Crouch and glide through any block",
"Go through any block":"Go through any block",
"Go through blocks - Much more dangerous than the original NoClip":"Go through blocks - Much more dangerous than the original NoClip",
"Climb ladders super fast":"Climb ladders super fast",
"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.":"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.",
"Launches you into the sky":"Launches you into the sky",
"You haven't died yet!":"You haven't died yet!",
"Teleports to the nearest person within range":"Teleports to the nearest person within range",
"Teleport anywhere":"Teleport anywhere",
"Speed: Default":"Speed: Default",
"Speed: ":"Speed: ",
"Sends hundreds of messages to the server at once":"Sends hundreds of messages to the server at once",
"Edit message to spam":"Edit message to spam",
"Prevents spam/duplicated messages from being shown":"Prevents spam/duplicated messages from being shown",
"Disable Medium Encryption first":"Disable Medium Encryption first",
"Makes messages trickier to read, but still readable":"Makes messages trickier to read, but still readable",
"Disable Lite Encryption first":"Disable Lite Encryption first",
"Only people using Instinct can read your messages":"Only people using Instinct can read your messages",
"Crouch and select first hotbar slot to open menu":"Crouch and select first hotbar slot to open menu",
"Never get booted for AFK'ing":"Never get booted for AFK'ing",
"Can break bedrock":"Can break bedrock",
"Sets break time to .1, mine most blocks quickly":"Sets break time to .1, mine most blocks quickly",
"Sets friction to .1":"Sets friction to .1",
"Makes all blocks bright":"Makes all blocks bright",
"Walk around whilst dead, restart to disable. Works only for realms":"Walk around whilst dead, restart to disable. Works only for realms",
"Shows who the nearest player is":"Shows who the nearest player is",
"Colors your messages":"Colors your messages",
"Particle effects when someone is hit":"Particle effects when someone is hit",
"Valuable information on your screen, like block ID's":"Valuable information on your screen, like block ID's",
"Ride anything you touch":"Ride anything you touch",
"Ride the nearest player":"Ride the nearest player",
"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests":"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests",
"Change what block to show on ESP":"Change what block to show on ESP",
"Shows ui elements":"Shows ui elements",
"Open links received in chat in a popup window":"Open links received in chat in a popup window",
"Chat log is always logging chat":"Chat log is always logging chat",
"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player":"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player",
"See what the nearest person sees":"See what the nearest person sees",
"List of servers to join":"List of servers to join",
"Shows the server's IP address":"Shows the server's IP address",
"Chat while crouching":"Chat while crouching",
"Applies filter to screen":"Applies filter to screen",
"Dim":"Dim",
"Cool":"Cool",
"Yellow":"Yellow",
"Red":"Red",
"Vivid":"Vivid",
"White":"White",
"Romantic":"Romantic",
"Cyan":"Cyan",
"Adjusts filter hue":"Adjusts filter hue",
"Disable other preset":"Disable other preset",
"Must be in a world to activate":"Must be in a world to activate",
"Basic modules":"Basic modules",
"Basic modules for PVP":"Basic modules for PVP",
"Everything for mining":"Everything for mining",
"Block Found":"Block Found",
"Coordiantes Error, Format as such: ":"Coordiantes Error, Format as such: ",
" added to external_servers.txt. Restart game to take effect.":" added to external_servers.txt. Restart game to take effect.",
"Server ":"Server ",
"Could not connect to the internet. Enable Wi-Fi or Mobile Data":"Could not connect to the internet. Enable Wi-Fi or Mobile Data",
"Failed Update":"Failed Update",
"Name is too long":"Name is too long",
"Enter a name":"Enter a name",
"Access has been locked, connect to WiFi and restart game.":"Access has been locked, connect to WiFi and restart game.",
" has locked this client":" has locked this client",
"Update available, update to version ":"Update available, update to version ",
"Your account is banned from using this client, request access on Discord at v7thSharkv#0101":"Your account is banned from using this client, request access on Discord at v7thSharkv#0101",
"Tap the arrow to move":"Tap the arrow to move",
"Can't go farther down":"Can't go farther down",
"Free Cam Speed: ":"Free Cam Speed: ",
"Black":"Black",
"Dark Blue":"Dark Blue",
"Dark Green":"Dark Green",
"Dark Aqua":"Dark Aqua",
"Dark Red":"Dark Red",
"Dark Purple":"Dark Purple",
"Orange":"Orange",
"Grey":"Grey",
"Dark Grey":"Dark Grey",
"Indigo":"Indigo",
"Green":"Green",
"Aqua":"Aqua",
"Pink":"Pink",
"White":"White",
"Rainbow":"Rainbow",
"Close":"Close",
"Choose Enchants":"Choose Enchants",
"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.":"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.",
"32k Sword":"32k Sword",
"32k Pickaxe":"32k Pickaxe",
"32k Axe":"32k Axe",
"32k Bow":"32k Bow",
"32k Armor":"32k Armor",
"Use Legal Enchant Lvls":"Use Legal Enchant Lvls",
"Use Custom Name":"Use Custom Name",
"Protection":"Protection",
"Fire Protection":"Fire Protection",
"Feather Falling":"Feather Falling",
"Blast Protection":"Blast Protection",
"Projectile Protection":"Projectile Protection",
"Thorns":"Thorns",
"Respiration":"Respiration",
"Aqua Affinity":"Aqua Affinity",
"Depth Strider":"Depth Strider",
"Sharpness":"Sharpness",
"Smite":"Smite",
"Bane of Anthropods":"Bane of Anthropods",
"Knockback":"Knockback",
"Fire Aspect":"Fire Aspect",
"Looting":"Looting",
"Efficiency":"Efficiency",
"Silk Touch":"Silk Touch",
"Unbreaking":"Unbreaking",
"Fortune":"Fortune",
"Power":"Power",
"Punch":"Punch",
"Flame":"Flame",
"Infinity":"Infinity",
"Luck of the Sea":"Luck of the Sea",
"Lure":"Lure",
"Cancel":"Cancel",
" ID:":" ID:",
" Amount:":" Amount:",
" Damage/Meta:":" Damage/Meta:",
" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.":" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.",
"LAN Only Potions":"LAN Only Potions",
"Presets":"Presets",
"Tip: Enter waypoint name and coordinates.":"Tip: Enter waypoint name and coordinates.",
"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers.":"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers."
}; 
langMsg["Indonesian"]={
"Close Menu":"Tutup Menu",

"Enable PVP Menu":"Aktifkan Menu PVP",

"Survival":"Bertahan hidup",

"PVP":"PVP",

"Waypoints":"Titik lewat",

"Friends":"Teman",

"Potions":"Ramuan",

"Movement":"Gerakan",

"Discord":"Discord",

"Misc.":"Lain",

"Presets":"Preset",

"Settings":"Pengaturan",

"Disable PVP Menu":"Nonaktifkan Menu PVP",

"Survival Menu":"Menu Survival",

"LAN Only Mods":"Modifikasi LAN Saja",

"PVP Menu":"Menu PVP",

"Hitboxes":"Kotak hit",

"Potions Menu":"Menu Ramuan",

"Movement Menu":"Menu Gerakan",

"Quick TP":"TP cepat",

"Misc Menu":"Menu Lain",

"Theme":"Tema",

"Tip: These mods only work on LAN worlds, not realms or most servers":"Kiat: Mod ini hanya berfungsi di dunia LAN, bukan ranah atau sebagian besar server",

"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data":"Tip: Jika menu ini kosong setelah menambahkan titik arah, buka tab Pengaturan dan klik Hapus Data",

"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added":"Kiat: Pemain ini tidak ditargetkan oleh Aimbot, dan tidak dapat dipukul. \n Ada akan ada teman kosong, dan hanya dapat dihapus setelah teman baru ditambahkan",

"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.":"Tip: Hanya satu preset yang dapat diaktifkan sekaligus. Preset mengaktifkan mod tertentu di klien.",

"You are a donator and chose:":"Anda adalah donator dan memilih",

"- Particle Effect":"- Efek Partikel",

"- Immunity":"- Kekebalan",

"- Custom Name: ":"- Nama Khusus: ",

"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices":"TMI untuk ranah. Meretas item apa pun ke ranah. Pindahkan item dari Anda yang sebelumnya ke inventaris Anda. Aktifkan 'GUI TMI Lama' di Pengaturan untuk perangkat kelas bawah",

"Enchants the item in your hand":"Mempesona item di tangan Anda",

"Increases hitbox size of victim you hit":"Meningkatkan ukuran hitbox korban yang Anda tekan",

"Adds button to zoom in":"Menambahkan tombol untuk memperbesar",

"Double Tap jump":"Ketuk ganda, lompat",

"Fly in survival just like in creative":"Terbang dalam kelangsungan hidup seperti dalam kreatif",

"Xray Stone - See ores from the bottom up - USE WHILE MINING":"Xray Stone - Lihat bijih dari bawah ke atas - GUNAKAN WHILE MINING",

"Xray Stone - See ores from the top down - DON'T USE WHILE MINING":"Xray Stone - Lihat bijih dari atas ke bawah - JANGAN GUNAKAN SAAT MINING",

"Indicates what biome you're in":"Menunjukkan bioma yang Anda jalani",

"Indicates your coordinates, location":"Menunjukkan koordinat Anda, lokasi",

"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld":"Mengonversi koordinat bawah ke dunia luar. Gunakan saat berada di bawah untuk melihat di mana Anda berada dalam hubungannya dengan dunia luar",

"Shows direction to where you died":"Menunjukkan arah ke tempat Anda meninggal",

"Made by MxGoldo, implemented and fixed by ":"Dibuat oleh MxGoldo, diimplementasikan dan diperbaiki oleh ",

"Shows a minimap of your area":"Menunjukkan minimap area Anda",

"Walk next to a wall":"Berjalan di sebelah tembok",

"Allows you to see through walls, go walk next to one.":"Memungkinkan Anda melihat menembus dinding, berjalan di sebelahnya.",

"Always clear weather":"Cuaca selalu cerah",

"Forces time to day":"Memaksa waktu ke hari",

"Forces time to night":"Pasukan waktu untuk malam",

"Sets time to day on single player worlds":"Tetapkan waktu untuk hari di dunia pemain tunggal",

"Sets time to night on single player worlds":"Tetapkan waktu untuk malam di dunia pemain tunggal",

"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices":"Menambahkan item apa saja ke inventaris Anda di dunia pemain tunggal. Aktifkan 'GUI TMI Lama' di Pengaturan untuk perangkat kelas bawah",

"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it":"Mengganti nama item di tangan Anda. Pindahkan item ke tabel kerajinan di inventaris Anda untuk menerapkan nama dan menggandakannya",

"Move item to crafting table":"Pindahkan item ke tabel kerajinan",

"Duplicates item in hand, move to crafting table in inventory after.":"Duplikat item di tangan, pindah ke tabel kerajinan di inventaris setelah.",

"Only for single player, kits you with diamond gear":"Hanya untuk pemain tunggal, kit Anda dengan gigi berlian",

"Teleports you to the void, killing you.":"Teleport Anda ke kekosongan, membunuh Anda.",

"Erases everything in your inventory":"Hapus semua yang ada di inventaris Anda",

"Adds crosshair to the center of the screen":"Menambahkan crosshair ke tengah layar",

"Adjusts crosshair size":"Menyesuaikan ukuran crosshair",

"Enable FOV":"Aktifkan FOV",

"Adjusts FOV":"Menyesuaikan FOV",

"Displays armor durabilty in top left":"Menampilkan daya tahan lapis baja di kiri atas",

"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.":"Menampilkan statistik dan kesehatan armor musuh. Terima kasih kepada DanCuber untuk membuat pengembangan berjalan lebih cepat.",

"Don't get knocked back when hit":"Jangan sampai terlempar ke belakang saat dipukul",

"Easier to see where everyone is, even the invisible":"Lebih mudah untuk melihat di mana semua orang berada, bahkan yang tidak terlihat",

"Easier to see where everyone is, even the invisible":"Lebih mudah untuk melihat di mana semua orang berada, bahkan yang tidak terlihat",

"Displays health of nearest player above their head":"Menampilkan kesehatan pemain terdekat di atas kepala mereka",

"Eat food instantly, good for Pvp battles":"Makan makanan secara instan, bagus untuk pertarungan Pvp",

"Adds a totem of undying when hit":"Menambahkan totem dari kematian saat dipukul",

"Teleports to the nearest people over and over":"Teleport ke orang-orang terdekat berulang-ulang",

"Teleports to the victim":"Teleport ke korban",

"Use with aimbot and reach, hard to get killed":"Gunakan dengan aimbot dan jangkauan, sulit terbunuh",

"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better":"Gunakan dengan aimbot dan jangkauan, benar-benar mematikan. Mirip dengan aura petir tetapi lebih baik",

"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.":"Teleport tepat di atas seseorang setiap kali Anda menabraknya. Kombinasikan dengan aimbot untuk mematikan.",

"Teleports above player within 4 blocks. Combine with aimbot.":"Teleports pemain di atas dalam 4 blok. Kombinasikan dengan aimbot.",

"Sticks to a player":"Menempel pemain",

"Disable Regular aimbot first!":"Nonaktifkan aimbot Biasa dulu!",

"Disable Body Aimbot first!":"Nonaktifkan Tubuh Aimbot dulu!",

"Range: ":"Jarak: ",

"Good for easy pillaring":"Bagus untuk pilar mudah",

"Replaces nametag with stats":"Mengganti tag nama dengan statistik",

"Get XP by hitting mobs":"Dapatkan XP dengan memukul monster",

"Get XP when you hit someone":"Dapatkan XP saat Anda menekan seseorang",

"Adds button to quickly turn around":"Tambahkan tombol untuk berbalik dengan cepat",

"Teleports away when anyone is near. Impossible to kill":"Teleport pergi ketika ada orang yang dekat. Tidak mungkin membunuh",

"Adjust how far you teleport away from a player":"Sesuaikan seberapa jauh Anda teleport dari pemain",

"Quickly adjust how close players can get near you while using Untouchable":"Sesuaikan dengan cepat seberapa dekat pemain bisa mendekati Anda saat menggunakan Untouchable",

"Sets players hitbox to large once you hit them":"Mengatur pemain hitbox menjadi besar setelah Anda menekan mereka",

"Distance: ":"Jarak: ",

"Automatically increases nearest players hitbox":"Secara otomatis meningkatkan hitbox pemain terdekat",

"Resets nearest player's hitbox size":"Mereset ukuran hitbox pemain terdekat",

"Removed all effects":"Menghapus semua efek",

"Added experience":"Pengalaman yang ditambahkan",

"Effects can only be applied in-game!":"Efek hanya dapat diterapkan dalam game!",

"Enabled Nightvision":"Diaktifkan Nightvision",

"Enabled InstaMine":"Diaktifkan InstaMine",

"Enabled Mining Fatigue":"Diaktifkan Mining Fatigue",

"Healed":"Sembuh",

"Fly in any direction":"Terbang ke segala arah",

"Double Tap jump":"Ketuk ganda, lompat",

"Fly in survival just like in creative":"Terbang dalam kelangsungan hidup seperti dalam kreatif",

"Activated only when you look up and jump":"Diaktifkan hanya ketika Anda melihat ke atas dan melompat",

"Gravity is increased":"Gravitasi meningkat",

"Quickly ascend/descend":"Cepat naik / turun",

"Quickly ascend/descend to surfaces":"Dengan cepat naik / turun ke permukaan",

"Climb anything":"Panjat apa saja",

"Crouch and glide to anywhere":"Crouch dan meluncur ke mana saja",

"Jump in the air":"Langsung di udara",

"Step over anything, similar to Spider":"Melangkah apa pun, mirip dengan Spider",

"Fly around without player moving. Permission to use by TimmYCode.":"Terbang berkeliling tanpa pemain bergerak. Izin untuk digunakan oleh TimmYCode.",

"Jump far":"Lompat jauh",

"Sprint and jumping at the same time":"Berlari cepat dan melompat pada saat bersamaan",

"Boost forward":"Dorong maju",

"Walk around on a carpet":"Berjalanlah di atas karpet",

"Builds a bridge underneath you.":"Bangun jembatan di bawah Anda.",

"Change Auto Bridge block":"Ubah blok Auto Bridge",

"Quickly build bridges or pillars.":"Cepat membangun jembatan atau pilar.",

"Walk on water":"Walk on water",

"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack":"Berjalanlah di atas air yang lebih halus, terkadang susah untuk keluar dari air tidak seperti retakan Yesus lainnya",

"Walk on water and go fast":"Berjalanlah di atas air dan lakukan dengan cepat",

"Always crouching but can still sprint":"Selalu berjongkok tetapi masih bisa berlari",

"Teleport anywhere you look":"Teleportasi ke mana pun Anda melihat",

"Can't take fall damage":"Tidak bisa menerima kerusakan akibat jatuh",

"Crouch and glide through any block":"Crouch dan meluncur melewati blok apa pun",

"Go through any block":"Pergi melalui blok apa pun",

"Go through blocks - Much more dangerous than the original NoClip":"Pergi melalui blok - Jauh lebih berbahaya daripada NoClip asli",

"Climb ladders super fast":"Naiki tangga dengan sangat cepat",

"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.":"Tetapkan koordinat Anda 150 blok di atas pemain terdekat, mereka tidak dapat melihat Anda dari bawah.",

"Launches you into the sky":"Meluncurkan Anda ke langit",

"You haven't died yet!":"Anda belum mati!",

"Teleports to the nearest person within range":"Teleport ke orang terdekat dalam jangkauan",

"Teleport anywhere":"Teleportasi ke mana saja",

"Speed: Default":"Kecepatan: Default",

"Speed: ":"Kecepatan: ",

"Sends hundreds of messages to the server at once":"Mengirim ratusan pesan ke server sekaligus",

"Edit message to spam":"Edit pesan ke spam",

"Prevents spam/duplicated messages from being shown":"Mencegah ditampilkannya pesan spam / digandakan",

"Disable Medium Encryption first":"Nonaktifkan Enkripsi Medium terlebih dahulu",

"Makes messages trickier to read, but still readable":"Membuat pesan lebih sulit untuk dibaca, tetapi masih dapat dibaca",

"Disable Lite Encryption first":"Nonaktifkan Enkripsi Lite terlebih dahulu",

"Only people using Instinct can read your messages":"Hanya orang yang menggunakan Insting yang dapat membaca pesan Anda",

"Crouch and select first hotbar slot to open menu":"Crouch dan pilih slot hotbar pertama untuk membuka menu",

"Never get booted for AFK'ing":"Jangan pernah di-boot karena AFK'ing",

"Can break bedrock":"Dapat merusak batuan dasar",

"Sets break time to .1, mine most blocks quickly":"Atur waktu istirahat ke .1, menambang sebagian besar blok dengan cepat",

"Sets friction to .1":"Setel gesekan ke .1",

"Makes all blocks bright":"Membuat semua blok cerah",

"Walk around whilst dead, restart to disable. Works only for realms":"Jalan-jalan sambil mati, mulai ulang untuk menonaktifkan. Hanya bekerja untuk ranah",

"Shows who the nearest player is":"Menunjukkan siapa pemain terdekat",

"Colors your messages":"Warna pesan Anda",

"Particle effects when someone is hit":"Efek partikel ketika seseorang dipukul",

"Valuable information on your screen, like block ID's":"Informasi berharga di layar Anda, seperti ID blokir",

"Ride anything you touch":"Naik apa pun yang Anda sentuh",

"Ride the nearest player":"Naik pemain terdekat",

"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests":"Menunjukkan di mana blok berada, ESP untuk blok. Ubah ID untuk menemukan blok selain dari Peti",

"Change what block to show on ESP":"Ubah blok apa yang akan ditampilkan pada ESP",

"Shows ui elements":"Menunjukkan elemen ui",

"Open links received in chat in a popup window":"Buka tautan yang diterima dalam obrolan di jendela sembulan",

"Chat log is always logging chat":"Log obrolan selalu mencatat obrolan",

"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player":"Menyetel kamera ke mata korban, jatuh jika korban bergerak terlalu jauh dari pemain",

"See what the nearest person sees":"Lihat apa yang dilihat orang terdekat",

"List of servers to join":"Daftar server untuk bergabung",

"Shows the server's IP address":"Menunjukkan alamat IP server",

"Chat while crouching":"Mengobrol sambil berjongkok",

"Applies filter to screen":"Terapkan filter ke layar",

"Dim":"Redup",

"Cool":"Keren",

"Yellow":"Kuning",

"Red":"Merah",

"Vivid":"Jelas",

"White":"putih",

"Romantic":"Romantis",

"Cyan":"Cyan",

"Adjusts filter hue":"Menyesuaikan rona filter",

"Disable other preset":"Nonaktifkan preset lainnya",

"Must be in a world to activate":"Harus ada di dunia untuk diaktifkan",

"Basic modules":"Modul dasar",

"Basic modules for PVP":"Modul dasar untuk PVT",

"Everything for mining":"Semuanya untuk penambangan",

"Block Found":"Blokir Ditemukan",

"Coordiantes Error, Format as such: ":"Kesalahan Koordinat, Format seperti itu: ",

" added to external_servers.txt. Restart game to take effect.":" ditambahkan ke external_servers.txt. Mulai ulang game agar mulai berlaku.",

"Server ":"Server ",

"Could not connect to the internet. Enable Wi-Fi or Mobile Data":"Tidak dapat terhubung ke internet. Aktifkan Wi-Fi atau Data Seluler",

"Failed Update":"Pembaruan Gagal",

"Name is too long":"Nama terlalu panjang",

"Enter a name":"Masukkan nama",

"Access has been locked, connect to WiFi and restart game.":"Akses telah dikunci, terhubung ke WiFi dan mulai ulang game.",

" has locked this client":" telah mengunci klien ini",

"Update available, update to version ":"Pembaruan tersedia, perbarui ke versi ",

"Your account is banned from using this client, request access on Discord at v7thSharkv#0101":"Akun Anda dilarang menggunakan klien ini, meminta akses pada Discord at v7thSharkv#0101",

"Tap the arrow to move":"Ketuk panah untuk bergerak",

"Can't go farther down":"Tidak bisa turun lebih jauh",

"Free Cam Speed: ":"Kecepatan Cam Gratis: ",

"Black":"Hitam",

"Dark Blue":"Biru tua",

"Dark Green":"Hijau tua",

"Dark Aqua":"Aqua Gelap",

"Dark Red":"Merah gelap",

"Dark Purple":"Ungu tua",

"Orange":"Jeruk",

"Grey":"Abu-abu",

"Dark Grey":"Abu-abu gelap",

"Indigo":"Nila",

"Green":"hijau",

"Aqua":"Aqua",

"Pink":"Berwarna merah muda",

"White":"putih",

"Rainbow":"Pelangi",

"Close":"dekat",

"Choose Enchants":"Pilih Enchants",

"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.":"Tip: Letakkan item di tangan Anda, pilih pesona, lalu masukkan item ke dalam tabel kerajinan.",

"32k Sword":"Pedang 32k",

"32k Pickaxe":"32k Beliung",

"32k Axe":"Kapak 32k",

"32k Bow":"Busur 32k",

"32k Armor":"32k Armor",

"Use Legal Enchant Lvls":"Gunakan Level Enchant Legal",

"Use Custom Name":"Gunakan Nama Kustom",

"Protection":"Perlindungan",

"Fire Protection":"Proteksi Kebakaran",

"Feather Falling":"Bulu Jatuh",

"Blast Protection":"Perlindungan Ledakan",

"Projectile Protection":"Perlindungan Proyektil",

"Thorns":"Duri",

"Respiration":"Pernafasan",

"Aqua Affinity":"Aqua Affinity",

"Depth Strider":"Kedalaman Strider",

"Sharpness":"Ketajaman",

"Smite":"Memukul",

"Bane of Anthropods":"Kutukan Arthropoda",

"Knockback":"Knockback",

"Fire Aspect":"Aspek Kebakaran",

"Looting":"Penjarahan",

"Efficiency":"Efisiensi",

"Silk Touch":"Sentuhan sutra",

"Unbreaking":"Tidak pecah",

"Fortune":"Nasib",

"Power":"Kekuasaan",

"Punch":"Meninju",

"Flame":"Api",

"Infinity":"Infinity",

"Luck of the Sea":"Keberuntungan Laut",

"Lure":"Memikat",

"Cancel":"Membatalkan",

" ID:":" ID:",

" Amount:":" Jumlah:",

"Presets":"Preset",

" Damage/Meta:":" Kerusakan / Meta::",

" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.":"Kiat: Ramuan hanya bisa diaktifkan dalam gim. \nKiat 2: Penangkal spam membersihkan efek negatif.",

"LAN Only Potions":"Ramuan Hanya LAN",

"Tip: Enter waypoint name and coordinates.":"Kiat: Masukkan nama titik koordinat dan koordinat.",

"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers.":"Tip: Ramuan ini hanya berfungsi di dunia LAN, bukan ranah. Mungkin beberapa akan berfungsi di server."
}; 
langMsg["Spanish"]={
"Close Menu":"Cerrar menú",

"Enable PVP Menu":"Habilitar el menú de PVP",

"Waypoint":"Waypoint",
"Survival":"Supervivencia",

"PVP":"PVP",

"Waypoints":"Puntos de referencia",

"Friends":"Amigos",

"Potions":"Pociones",

"Movement":"Movimiento",

"Discord":"Discord",

"Misc.":"Otro",

"Presets":"Presets",

"Settings":"Ajustes",

"Disable PVP Menu":"Desactivar el menú de PVP",

"Survival Menu":"Menú de supervivencia",

"LAN Only Mods":"Mods de LAN solamente",

"PVP Menu":"Menú PVP",

"Hitboxes":"Hitboxes",

"Potions Menu":"Menú de pociones",

"Movement Menu":"Menú de movimiento",

"Quick TP":"Rápido TP",

"Misc Menu":"Otro menú",

"Theme":"Tema",

"Tip: These mods only work on LAN worlds, not realms or most servers":"Consejo: estos mods solo funcionan en mundos LAN, no en reinos o en la mayoría de los servidores",

"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data":"Consejo: si este menú está en blanco después de agregar puntos de ruta, vaya a la pestaña Configuración y haga clic en Borrar datos",

"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added":"Consejo: Aimbot no apunta a estos jugadores y no puede ser golpeado. \nHabrá un amigo en blanco, y solo se podrá eliminar una vez que se agregue un nuevo amigo.",

"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.":"Consejo: solo se puede habilitar un preajuste a la vez. Los presets habilitan ciertos mods en el cliente.",

"You are a donator and chose:":"Eres un donador y elegiste:",

"- Particle Effect":"- Efecto particula",

"- Immunity":"- Inmunidad",

"- Custom Name: ":"- Nombre personalizado: ",

"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices":"TMI para reinos. Hackea cualquier objeto a un reino. Mueve el objeto de tu mano a tu inventario. Habilitar 'Old TMI GUI' en la configuración para dispositivos de gama baja",

"Enchants the item in your hand":"Encanta el objeto en tu mano.",

"Increases hitbox size of victim you hit":"Aumenta el tamaño de hitbox de la víctima que golpeas.",

"Adds button to zoom in":"Agrega botón para acercar",

"Double Tap jump":"Doble toque de salto",

"Fly in survival just like in creative":"Vuela en supervivencia como en creativo.",

"Xray Stone - See ores from the bottom up - USE WHILE MINING":"Piedra de rayos X - vea minerales de abajo hacia arriba - USE MIENTRAS QUE MINERA",

"Xray Stone - See ores from the top down - DON'T USE WHILE MINING":"Xray Stone - vea minerales de arriba hacia abajo - NO USE MIENTRAS QUE MINERA",

"Indicates what biome you're in":"Indica en qué bioma estás",

"Indicates your coordinates, location":"Indica tus coordenadas, ubicación",

"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld":"Convierte coordenadas nether a overworld. Use mientras está en el interior para ver dónde se encuentra en relación con el mundo terrenal",

"Shows direction to where you died":"Muestra dirección a donde moriste",

"Made by MxGoldo, implemented and fixed by ":"Hecho por MxGoldo, implementado y arreglado por ",

"Shows a minimap of your area":"Muestra un minimapa de tu área.",

"Walk next to a wall":"Caminar al lado de una pared",

"Allows you to see through walls, go walk next to one.":"Te permite ver a través de las paredes, camina junto a una.",

"Always clear weather":"Siempre clima despejado",

"Forces time to day":"Fuerzas del día a día",

"Forces time to night":"Fuerzas de tiempo a la noche",

"Sets time to day on single player worlds":"Establece el tiempo del día en los mundos de un solo jugador.",

"Sets time to night on single player worlds":"Establece el tiempo para la noche en mundos de un solo jugador",

"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices":"Agrega cualquier artículo a tu inventario en los mundos de un solo jugador. Habilitar 'Old TMI GUI' en la configuración para dispositivos de gama baja",

"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it":"Renombra el objeto en tu mano. Mueva el artículo a la tabla de elaboración en su inventario para aplicar el nombre y duplicarlo",

"Move item to crafting table":"Mueve el objeto a la mesa de elaboración",

"Duplicates item in hand, move to crafting table in inventory after.":"Duplica el elemento en la mano, luego pasa a la tabla de elaboración en el inventario.",

"Only for single player, kits you with diamond gear":"Solo para un jugador, te equipa con equipo de diamante.",

"Teleports you to the void, killing you.":"Te teletransporta al vacío, matándote.",

"Erases everything in your inventory":"Borra todo en tu inventario",

"Adds crosshair to the center of the screen":"Añade punto de cruz al centro de la pantalla.",

"Adjusts crosshair size":"Ajusta el tamaño de la cruz.",

"Enable FOV":"Habilitar FOV",

"Adjusts FOV":"Ajusta FOV",

"Displays armor durabilty in top left":"Muestra la durabilidad de la armadura en la parte superior izquierda.",

"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.":"Muestra las estadísticas de armadura enemiga y la salud. Gracias a DanCuber por hacer que el desarrollo sea más rápido.",

"Don't get knocked back when hit":"No vuelvas a caer cuando te golpean",

"Easier to see where everyone is, even the invisible":"Más fácil de ver donde están todos, incluso lo invisible.",

"Easier to see where everyone is, even the invisible":"Más fácil de ver donde están todos, incluso lo invisible.",

"Displays health of nearest player above their head":"Muestra la salud del jugador más cercano por encima de su cabeza.",

"Eat food instantly, good for Pvp battles":"Comer comida al instante, bueno para batallas Pvp.",

"Adds a totem of undying when hit":"Añade un tótem de no morir cuando se golpea.",

"Teleports to the nearest people over and over":"Teletransportarse a las personas más cercanas una y otra vez.",

"Teleports to the victim":"Teletransportarse a la víctima.",

"Use with aimbot and reach, hard to get killed":"Usar con aimbot y alcance, difícil de matar",

"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better":"Usar con aimbot y alcance, absolutamente letal. Similar al aura del rayo pero mejor",

"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.":"Teletransporta justo encima de alguien cada vez que los golpeas. Combínalo con aimbot para la letalidad.",

"Teleports above player within 4 blocks. Combine with aimbot.":"Teletransporta al jugador por encima de 4 cuadras. Combinar con aimbot.",

"Sticks to a player":"Se pega a un jugador",

"Disable Regular aimbot first!":"¡Deshabilita el aimbot regular primero!",

"Disable Body Aimbot first!":"¡Desactiva el cuerpo Aimbot primero!",

"Range: ":"Distancia: ",

"Good for easy pillaring":"Bueno para facilitar el pilar",

"Replaces nametag with stats":"Reemplaza la tarjeta de identificación con estadísticas",

"Get XP by hitting mobs":"Consigue XP golpeando mobs",

"Get XP when you hit someone":"Obtén XP cuando golpeas a alguien",

"Adds button to quickly turn around":"Agrega un botón para dar vuelta rápidamente",

"Teleports away when anyone is near. Impossible to kill":"Teletransportarse lejos cuando alguien está cerca. Imposible matar",

"Adjust how far you teleport away from a player":"Ajusta la distancia a la que te teletransportas lejos de un jugador.",

"Quickly adjust how close players can get near you while using Untouchable":"Ajusta rápidamente cómo los jugadores cercanos pueden acercarse a ti mientras usas Untouchable",

"Sets players hitbox to large once you hit them":"Establece los jugadores en hitbox en grande una vez que los golpeas",

"Distance: ":"Distancia: ",

"Automatically increases nearest players hitbox":"Aumenta automáticamente el hitbox de los jugadores más cercanos.",

"Resets nearest player's hitbox size":"Restablece el tamaño del hitbox del jugador más cercano",

"Removed all effects":"Eliminado todos los efectos.",

"Added experience":"Experiencia añadida",

"Effects can only be applied in-game!":"¡Los efectos solo se pueden aplicar en el juego!",

"Enabled Nightvision":"Habilitado Nightvision",

"Enabled InstaMine":"Habilitado InstaMine",

"Enabled Mining Fatigue":"Habilitado Mining Fatigue",

"Healed":"Sanado",

"Fly in any direction":"Vuela en cualquier direccion",

"Double Tap jump":"Doble toque de salto",

"Fly in survival just like in creative":"Vuela en supervivencia como en creativo.",

"Activated only when you look up and jump":"Se activa solo cuando miras hacia arriba y saltas.",

"Gravity is increased":"La gravedad aumenta",

"Quickly ascend/descend":"Rápidamente ascender / descender",

"Quickly ascend/descend to surfaces":"Rápidamente ascender / descender a superficies",

"Climb anything":"Subir cualquier cosa",

"Crouch and glide to anywhere":"Agacharse y deslizarse a cualquier lugar",

"Jump in the air":"Saltar en el aire",

"Step over anything, similar to Spider":"Paso sobre cualquier cosa, similar a la araña",

"Fly around without player moving. Permission to use by TimmYCode.":"Vuela sin que el jugador se mueva. Permiso de uso por TimmYCode.",

"Jump far":"Saltar lejos",

"Sprint and jumping at the same time":"Sprint y salto al mismo tiempo.",

"Boost forward":"Impulsar hacia adelante",

"Walk around on a carpet":"Caminar alrededor de una alfombra",

"Builds a bridge underneath you.":"Construye un puente debajo de ti.",

"Change Auto Bridge block":"Cambiar bloque de Auto Bridge",

"Quickly build bridges or pillars.":"Construye rápidamente puentes o pilares.",

"Walk on water":"Caminar sobre el agua",

"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack":"Camina sobre el agua con más suavidad, a veces es difícil salir del agua, a diferencia de otros trucos de Jesús",

"Walk on water and go fast":"Camina sobre el agua y ve rápido",

"Always crouching but can still sprint":"Siempre en cuclillas, pero todavía puede correr",

"Teleport anywhere you look":"Teletransportarse a donde quiera que mire",

"Can't take fall damage":"No puedo recibir daño de caída",

"Crouch and glide through any block":"Agacharse y deslizarse a través de cualquier bloque",

"Go through any block":"Ir a través de cualquier bloque",

"Go through blocks - Much more dangerous than the original NoClip":"Ir a través de bloques - mucho más peligroso que el NoClip original",

"Climb ladders super fast":"Subir escaleras super rapido",

"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.":"Establece tus coordenadas 150 cuadras sobre el jugador más cercano, no pueden verte desde abajo.",

"Launches you into the sky":"Te lanza al cielo",

"You haven't died yet!":"¡Aún no has muerto!",

"Teleports to the nearest person within range":"Teletransporta a la persona más cercana dentro del rango",

"Teleport anywhere":"Teletransportarse a cualquier lugar",

"Speed: Default":"Velocidad: Defecto",

"Speed: ":"Velocidad: ",

"Sends hundreds of messages to the server at once":"Envía cientos de mensajes al servidor a la vez.",

"Edit message to spam":"Editar mensaje a spam",

"Prevents spam/duplicated messages from being shown":"Evita que se muestren mensajes spam / duplicados",

"Disable Medium Encryption first":"Desactivar el cifrado medio primero",

"Makes messages trickier to read, but still readable":"Hace que los mensajes sean más difíciles de leer, pero aún así legibles",

"Disable Lite Encryption first":"Deshabilite el cifrado Lite primero",

"Only people using Instinct can read your messages":"Solo las personas que usan Instinct pueden leer tus mensajes.",

"Crouch and select first hotbar slot to open menu":"Agacharse y seleccionar la primera ranura de hotbar para abrir el menú",

"Never get booted for AFK'ing":"Nunca ser botado por AFK'ing",

"Can break bedrock":"Puede romper la roca",

"Sets break time to .1, mine most blocks quickly":"Establece el tiempo de descanso en .1, mina la mayoría de los bloques rápidamente",

"Sets friction to .1":"Establece la fricción en .1",

"Makes all blocks bright":"Hace que todos los bloques brillen.",

"Walk around whilst dead, restart to disable. Works only for realms":"Camina por ahí muerto, reinicia para deshabilitar. Funciona solo para reinos",

"Shows who the nearest player is":"Muestra quién es el jugador más cercano.",

"Colors your messages":"Colorea tus mensajes",

"Particle effects when someone is hit":"Efectos de partículas cuando alguien es golpeado",

"Valuable information on your screen, like block ID's":"Información valiosa en su pantalla, como ID de bloque",

"Ride anything you touch":"Montar cualquier cosa que toques",

"Ride the nearest player":"Monta al jugador más cercano",

"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests":"Muestra dónde están los bloques, ESP para bloques. Cambiar ID para encontrar bloques que no sean cofres",

"Change what block to show on ESP":"Cambia qué bloque mostrar en ESP",

"Shows ui elements":"Muestra elementos de la interfaz de usuario.",

"Open links received in chat in a popup window":"Abrir enlaces recibidos en el chat en una ventana emergente",

"Chat log is always logging chat":"El registro de chat siempre está registrando chat",

"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player":"Coloca la cámara en los ojos de la víctima y se bloquea si la víctima se aleja demasiado del jugador.",

"See what the nearest person sees":"Vea lo que ve la persona más cercana",

"List of servers to join":"Lista de servidores para unirse",

"Shows the server's IP address":"Muestra la dirección IP del servidor.",

"Chat while crouching":"Chat mientras agachado",

"Applies filter to screen":"Aplica filtro a pantalla.",

"Dim":"Oscuro",

"Cool":"Guay",

"Yellow":"Amarillo",

"Red":"rojo",

"Vivid":"Vívido",

"White":"Blanco",

"Romantic":"Romántico",

"Cyan":"Cian",

"Adjusts filter hue":"Ajusta el matiz del filtro.",

"Disable other preset":"Deshabilitar otro preset",

"Must be in a world to activate":"Debe estar en un mundo para activar.",

"Basic modules":"Modulos basicos",

"Basic modules for PVP":"Módulos básicos para PVP",

"Everything for mining":"Todo para la mineria",

"Block Found":"Bloque encontrado",

"Coordiantes Error, Format as such: ":"Error de Coordiniantes, Formato como tal.: ",

" added to external_servers.txt. Restart game to take effect.":" añadido a external_servers.txt. Reinicia el juego para que tenga efecto.",

"Server ":"Servidor ",

"Could not connect to the internet. Enable Wi-Fi or Mobile Data":"No se pudo conectar a internet. Habilitar Wi-Fi o datos móviles",

"Failed Update":"Actualización fallida",

"Name is too long":"El nombre es demasiado largo",

"Enter a name":"Ingresa un nombre",

"Access has been locked, connect to WiFi and restart game.":"El acceso ha sido bloqueado, conectarse a WiFi y reiniciar el juego.",

" has locked this client":" ha bloqueado este cliente",

"Update available, update to version ":"Actualización disponible, actualización a versión ",

"Your account is banned from using this client, request access on Discord at v7thSharkv#0101":"Su cuenta tiene prohibido el uso de este cliente, solicite acceso en Discord at v7thSharkv#0101",

"Tap the arrow to move":"Toca la flecha para moverte.",

"Can't go farther down":"No puedo ir mas abajo",

"Free Cam Speed: ":"Velocidad de cámara libre: ",

"Black":"Negro",

"Dark Blue":"Azul oscuro",

"Dark Green":"Verde oscuro",

"Dark Aqua":"Aqua oscuro",

"Dark Red":"Rojo oscuro",

"Dark Purple":"Morado oscuro",

"Orange":"naranja",

"Grey":"Gris",

"Dark Grey":"Gris oscuro",

"Indigo":"Índigo",

"Green":"Verde",

"Aqua":"Agua",

"Pink":"Rosado",

"White":"Blanco",

"Rainbow":"Arco iris",

"Close":"Cerrar",

"Choose Enchants":"Elegir encantadores",

"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.":"Consejo: ponga el objeto en su mano, elija el encantamiento y luego colóquelo en una mesa de elaboración.",

"32k Sword":"Espada 32k",

"32k Pickaxe":"Piqueta 32k",

"32k Axe":"Hacha 32k",

"32k Bow":"Arco 32k",

"32k Armor":"Armadura 32k",

"Use Legal Enchant Lvls":"Usa niveles de encantamiento legal",

"Use Custom Name":"Usar nombre personalizado",

"Protection":"Proteccion",

"Fire Protection":"Protección contra incendios",

"Feather Falling":"Pluma cayendo",

"Blast Protection":"Protección contra explosiones",

"Projectile Protection":"Protección antiproyectiles",

"Thorns":"Espinas",

"Respiration":"Respiración",

"Aqua Affinity":"Afinidad al agua",

"Depth Strider":"Strider de profundidad",

"Sharpness":"Nitidez",

"Smite":"Herir",

"Bane of Anthropods":"Perdición de los antrópodos",

"Knockback":"Knockback",

"Fire Aspect":"Aspecto de fuego",

"Looting":"Saqueo",

"Efficiency":"Eficiencia",

"Silk Touch":"Toque de seda",

"Unbreaking":"Rompiendo",

"Fortune":"Fortuna",

"Power":"Poder",

"Punch":"Puñetazo",

"Flame":"Llama",

"Infinity":"infinito",

"Luck of the Sea":"Suerte del Mar",

"Lure":"Señuelo",

"Cancel":"Cancelar",

" ID:":" carné de identidad:",

" Amount:":" Cantidad:",

"Presets":"Presets",

" Damage/Meta:":" Daño / Meta:",

" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.":"Consejo: las pociones solo se pueden habilitar en el juego. \nConsejo 2: Antidote spam elimina los efectos negativos.",

"LAN Only Potions":"LAN solo pociones",

"Tip: Enter waypoint name and coordinates.":"Consejo: introduzca el nombre del punto de referencia y las coordenadas.",

"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers.":"Consejo: estas pociones solo funcionan en mundos LAN, no en reinos. Tal vez algunos funcionen en servidores."
}; 

langMsg["TEST"]={
"Close Menu":"translation",

"Enable PVP Menu":"translation",

"Waypoint":"Waypoint",
"Survival":"translation",

"PVP":"translation",

"Waypoints":"translation",

"Friends":"translation",

"Potions":"translation",

"Movement":"translation",

"Discord":"translation",

"Misc.":"translation",

"Presets":"translation",

"Settings":"translation",

"Disable PVP Menu":"translation",

"Survival Menu":"translation",

"LAN Only Mods":"translation",

"PVP Menu":"translation",

"Hitboxes":"translation",

"Potions Menu":"translation",

"Movement Menu":"translation",

"Quick TP":"translation",

"Misc Menu":"translation",

"Theme":"translation",

"Tip: These mods only work on LAN worlds, not realms or most servers":"translation",

"Tip: If this menu is blank after adding waypoints, go to the Settings tab and click Wipe Data":"translation",

"Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added":"translation",

"Tip: Only one preset can be enabled at once. Presets enable certain mods in the client.":"translation",

"You are a donator and chose:":"translation",

"- Particle Effect":"- translation",

"- Immunity":"- translation",

"- Custom Name: ":"- translation: ",

"TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices":"translation",

"Enchants the item in your hand":"translation",

"Increases hitbox size of victim you hit":"translation",

"Adds button to zoom in":"translation",

"Double Tap jump":"translation",

"Fly in survival just like in creative":"translation",

"Xray Stone - See ores from the bottom up - USE WHILE MINING":"translation",

"Xray Stone - See ores from the top down - DON'T USE WHILE MINING":"translation",

"Indicates what biome you're in":"translation",

"Indicates your coordinates, location":"translation",

"Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld":"translation",

"Shows direction to where you died":"translation",

"Made by MxGoldo, implemented and fixed by ":"translation ",

"Shows a minimap of your area":"translation",

"Walk next to a wall":"translation",

"Allows you to see through walls, go walk next to one.":"translation",

"Always clear weather":"translation",

"Forces time to day":"translation",

"Forces time to night":"translation",

"Sets time to day on single player worlds":"translation",

"Sets time to night on single player worlds":"translation",

"Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices":"translation",

"Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it":"translation",

"Move item to crafting table":"translation",

"Duplicates item in hand, move to crafting table in inventory after.":"translation",

"Only for single player, kits you with diamond gear":"translation",

"Teleports you to the void, killing you.":"translation",

"Erases everything in your inventory":"translation",

"Adds crosshair to the center of the screen":"translation",

"Adjusts crosshair size":"translation",

"Enable FOV":"translation",

"Adjusts FOV":"translation",

"Displays armor durabilty in top left":"translation",

"Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster.":"translation",

"Don't get knocked back when hit":"translation",

"Easier to see where everyone is, even the invisible":"translation",

"Easier to see where everyone is, even the invisible":"translation",

"Displays health of nearest player above their head":"translation",

"Eat food instantly, good for Pvp battles":"translation",

"Adds a totem of undying when hit":"translation",

"Teleports to the nearest people over and over":"translation",

"Teleports to the victim":"translation",

"Use with aimbot and reach, hard to get killed":"translation",

"Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better":"translation",

"Teleports right above someone whenever you hit them. Combine with aimbot for lethality.":"translation",

"Teleports above player within 4 blocks. Combine with aimbot.":"translation",

"Sticks to a player":"translation",

"Disable Regular aimbot first!":"translation",

"Disable Body Aimbot first!":"translation",

"Range: ":"translation: ",

"Good for easy pillaring":"translation",

"Replaces nametag with stats":"translation",

"Get XP by hitting mobs":"translation",

"Get XP when you hit someone":"translation",

"Adds button to quickly turn around":"translation",

"Teleports away when anyone is near. Impossible to kill":"translation",

"Adjust how far you teleport away from a player":"translation",

"Quickly adjust how close players can get near you while using Untouchable":"translation",

"Sets players hitbox to large once you hit them":"translation",

"Distance: ":"translation: ",

"Automatically increases nearest players hitbox":"translation",

"Resets nearest player's hitbox size":"translation",

"Removed all effects":"translation",

"Added experience":"translation",

"Effects can only be applied in-game!":"translation",

"Enabled Nightvision":"translation Nightvision",

"Enabled InstaMine":"translation InstaMine",

"Enabled Mining Fatigue":"translation Mining Fatigue",

"Healed":"translation",

"Fly in any direction":"translation",

"Double Tap jump":"translation",

"Fly in survival just like in creative":"translation",

"Activated only when you look up and jump":"translation",

"Gravity is increased":"translation",

"Quickly ascend/descend":"translation",

"Quickly ascend/descend to surfaces":"translation",

"Climb anything":"translation",

"Crouch and glide to anywhere":"translation",

"Jump in the air":"translation",

"Step over anything, similar to Spider":"translation",

"Fly around without player moving. Permission to use by TimmYCode.":"translation",

"Jump far":"translation",

"Sprint and jumping at the same time":"translation",

"Boost forward":"translation",

"Walk around on a carpet":"translation",

"Builds a bridge underneath you.":"translation",

"Change Auto Bridge block":"translation",

"Quickly build bridges or pillars.":"translation",

"Walk on water":"translation",

"Walk on water smoother, sometimes hard to exit water unlike other Jesus hack":"translation",

"Walk on water and go fast":"translation",

"Always crouching but can still sprint":"translation",

"Teleport anywhere you look":"translation",

"Can't take fall damage":"translation",

"Crouch and glide through any block":"translation",

"Go through any block":"translation",

"Go through blocks - Much more dangerous than the original NoClip":"translation",

"Climb ladders super fast":"translation",

"Sets your coordinates 150 blocks above the nearest player, they can't see you from below.":"translation",

"Launches you into the sky":"translation",

"You haven't died yet!":"translation",

"Teleports to the nearest person within range":"translation",

"Teleport anywhere":"translation",

"Speed: Default":"translation: translation",

"Speed: ":"translation: ",

"Sends hundreds of messages to the server at once":"translation",

"Edit message to spam":"translation",

"Prevents spam/duplicated messages from being shown":"translation",

"Disable Medium Encryption first":"translation",

"Makes messages trickier to read, but still readable":"translation",

"Disable Lite Encryption first":"translation",

"Only people using Instinct can read your messages":"translation",

"Crouch and select first hotbar slot to open menu":"translation",

"Never get booted for AFK'ing":"translation",

"Can break bedrock":"translation",

"Sets break time to .1, mine most blocks quickly":"translation",

"Sets friction to .1":"translation",

"Makes all blocks bright":"translation",

"Walk around whilst dead, restart to disable. Works only for realms":"translation",

"Shows who the nearest player is":"translation",

"Colors your messages":"translation",

"Particle effects when someone is hit":"translation",

"Valuable information on your screen, like block ID's":"translation",

"Ride anything you touch":"translation",

"Ride the nearest player":"translation",

"Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests":"translation",

"Change what block to show on ESP":"translation",

"Shows ui elements":"translation",

"Open links received in chat in a popup window":"translation",

"Chat log is always logging chat":"translation",

"Sets camera to the eyes of the victim, crashes if the victim moves too far from the player":"translation",

"See what the nearest person sees":"translation",

"List of servers to join":"translation",

"Shows the server's IP address":"translation",

"Chat while crouching":"translation",

"Applies filter to screen":"translation",

"Dim":"translation",

"Cool":"translation",

"Yellow":"translation",

"Red":"translation",

"Vivid":"translation",

"White":"translation",

"Romantic":"translation",

"Cyan":"translation",

"Adjusts filter hue":"translation",

"Disable other preset":"translation",

"Must be in a world to activate":"translation",

"Basic modules":"translation",

"Basic modules for PVP":"translation",

"Everything for mining":"translation",

"Block Found":"translation",

"Coordiantes Error, Format as such: ":"translation: ",

" added to external_servers.txt. Restart game to take effect.":" translation external_servers.txt. translation",

"Server ":"translation ",

"Could not connect to the internet. Enable Wi-Fi or Mobile Data":"translation",

"Failed Update":"translation",

"Name is too long":"translation",

"Enter a name":"translation",

"Access has been locked, connect to WiFi and restart game.":"translation",

" has locked this client":" translation",

"Update available, update to version ":"translation ",

"Your account is banned from using this client, request access on Discord at v7thSharkv#0101":"translation v7thSharkv#0101",

"Tap the arrow to move":"translation",

"Can't go farther down":"translation",

"Free Cam Speed: ":"translation: ",

"Black":"translation",

"Dark Blue":"translation",

"Dark Green":"translation",

"Dark Aqua":"translation",

"Dark Red":"translation",

"Dark Purple":"translation",

"Orange":"translation",

"Grey":"translation",

"Dark Grey":"translation",

"Indigo":"translation",

"Green":"translation",

"Aqua":"translation",

"Pink":"translation",

"White":"translation",

"Rainbow":"translation",

"Close":"translation",

"Choose Enchants":"translation",

"Tip: Put item in your hand, choose enchantment, then put the item in a crafting table.":"translation",

"32k Sword":"translation",

"32k Pickaxe":"translation",

"32k Axe":"translation",

"32k Bow":"translation",

"32k Armor":"translation",

"Use Legal Enchant Lvls":"translation",

"Use Custom Name":"translation",

"Protection":"translation",

"Fire Protection":"translation",

"Feather Falling":"translation",

"Blast Protection":"translation",

"Projectile Protection":"translation",

"Thorns":"translation",

"Respiration":"translation",

"Aqua Affinity":"translation",

"Depth Strider":"translation",

"Sharpness":"translation",

"Smite":"translation",

"Bane of Anthropods":"translation",

"Knockback":"translation",

"Fire Aspect":"translation",

"Looting":"translation",

"Efficiency":"translation",

"Silk Touch":"translation",

"Unbreaking":"translation",

"Fortune":"translation",

"Power":"translation",

"Punch":"translation",

"Flame":"translation",

"Infinity":"translation",

"Luck of the Sea":"translation",

"Lure":"translation",

"Cancel":"translation",

" ID:":" translation:",

" Amount:":" translation:",

"Presets":"translation",

" Damage/Meta:":" translation:",

" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects.":"translation",

"LAN Only Potions":"translation",

"Tip: Enter waypoint name and coordinates.":"translation",

"Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers.":"translation"
}; 
/*
langMsg[language]["Ok"]
*/
fontscript = ["\x67\x65\x74", "\x63\x75\x72\x72\x65\x6E\x74\x4D\x61\x69\x6E\x41\x63\x74\x69\x76\x69\x74\x79", "\x4D\x61\x69\x6E\x41\x63\x74\x69\x76\x69\x74\x79", "\x6D\x69\x6E\x65\x63\x72\x61\x66\x74\x70\x65", "\x6D\x6F\x6A\x61\x6E\x67", "\x42\x75\x74\x74\x6F\x6E", "\x77\x69\x64\x67\x65\x74", "\x4C\x69\x6E\x65\x61\x72\x4C\x61\x79\x6F\x75\x74", "\x52\x65\x6C\x61\x74\x69\x76\x65\x4C\x61\x79\x6F\x75\x74", "\x50\x6F\x70\x75\x70\x57\x69\x6E\x64\x6F\x77", "\x53\x63\x72\x6F\x6C\x6C\x56\x69\x65\x77", "\x54\x65\x78\x74\x56\x69\x65\x77", "\x43\x68\x65\x63\x6B\x42\x6F\x78", "\x53\x77\x69\x74\x63\x68", "\x54\x6F\x61\x73\x74", "\x52\x75\x6E\x6E\x61\x62\x6C\x65", "\x6C\x61\x6E\x67", "\x56\x69\x65\x77", "\x76\x69\x65\x77", "\x43\x6F\x6C\x6F\x72\x44\x72\x61\x77\x61\x62\x6C\x65", "\x64\x72\x61\x77\x61\x62\x6C\x65", "\x67\x72\x61\x70\x68\x69\x63\x73", "\x43\x6F\x6C\x6F\x72", "\x47\x72\x61\x76\x69\x74\x79", "\x49\x6E\x74\x65\x6E\x74", "\x63\x6F\x6E\x74\x65\x6E\x74", "\x55\x72\x69", "\x6E\x65\x74", "\x67\x65\x74\x56\x65\x6C\x58", "\x70\x6F\x77", "\x67\x65\x74\x56\x65\x6C\x5A", "\x73\x71\x72\x74", "\x67", "\x72\x65\x70\x6C\x61\x63\x65", "\x67\x65\x74\x58", "\x67\x65\x74\x59", "\x67\x65\x74\x5A", "\x69\x73\x4C\x69\x71\x75\x69\x64", "\x42\x6C\x6F\x63\x6B", "\x63\x61\x6C\x63\x75\x6C\x61\x74\x65\x53\x70\x65\x65\x64", "\x56\x65\x6C\x6F\x63\x69\x74\x79", "\x69\x73\x4C\x61\x64\x64\x65\x72", "\x72\x6F\x75\x6E\x64", "\x67\x65\x74\x44\x65\x73\x74\x72\x6F\x79\x54\x69\x6D\x65", "\x41\x41\x45\x41\x41\x41\x41\x4E\x41\x49\x41\x41\x41\x77\x42\x51\x52\x6B\x5A\x55\x54\x56\x2F\x4A\x41\x49\x67\x41\x41\x45\x63\x67\x41\x41\x41\x41\x48\x45\x64\x45\x52\x55\x59\x42\x41\x77\x41\x6B\x41\x41\x42\x47\x2B\x41\x41\x41\x41\x43\x68\x50\x55\x79\x38\x79\x5A\x73\x4D\x7A\x64\x77\x41\x41\x41\x56\x67\x41\x41\x41\x42\x67\x59\x32\x31\x68\x63\x47\x36\x65\x74\x63\x6B\x41\x41\x41\x55\x49\x41\x41\x41\x42\x6F\x6D\x64\x68\x63\x33\x44\x2F\x2F\x77\x41\x44\x41\x41\x42\x47\x38\x41\x41\x41\x41\x41\x68\x6E\x62\x48\x6C\x6D\x77\x67\x6C\x53\x61\x51\x41\x41\x43\x46\x67\x41\x41\x44\x64\x59\x61\x47\x56\x68\x5A\x50\x6B\x39\x63\x71\x4D\x41\x41\x41\x44\x63\x41\x41\x41\x41\x4E\x6D\x68\x6F\x5A\x57\x45\x49\x67\x77\x48\x55\x41\x41\x41\x42\x46\x41\x41\x41\x41\x43\x52\x6F\x62\x58\x52\x34\x4F\x4A\x30\x41\x41\x41\x41\x41\x41\x62\x67\x41\x41\x41\x4E\x4F\x62\x47\x39\x6A\x59\x61\x56\x6C\x6C\x34\x49\x41\x41\x41\x61\x73\x41\x41\x41\x42\x71\x6D\x31\x68\x65\x48\x41\x41\x33\x77\x41\x71\x41\x41\x41\x42\x4F\x41\x41\x41\x41\x43\x42\x75\x59\x57\x31\x6C\x4A\x2F\x46\x44\x4C\x67\x41\x41\x50\x37\x41\x41\x41\x41\x55\x54\x63\x47\x39\x7A\x64\x4E\x6D\x62\x6C\x47\x6B\x41\x41\x45\x54\x45\x41\x41\x41\x43\x4B\x77\x41\x42\x41\x41\x41\x41\x41\x51\x41\x41\x2B\x39\x32\x6C\x76\x6C\x38\x50\x50\x50\x55\x41\x43\x77\x51\x41\x41\x41\x41\x41\x41\x4D\x74\x50\x46\x74\x4D\x41\x41\x41\x41\x41\x79\x30\x38\x57\x30\x2F\x2B\x41\x2F\x77\x41\x45\x41\x41\x55\x41\x41\x41\x41\x41\x43\x41\x41\x43\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x55\x41\x2F\x77\x41\x41\x41\x41\x53\x41\x2F\x34\x44\x39\x67\x41\x51\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x44\x54\x41\x41\x45\x41\x41\x41\x44\x55\x41\x43\x67\x41\x43\x67\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x67\x4B\x70\x41\x5A\x41\x41\x42\x51\x41\x45\x41\x67\x41\x43\x41\x41\x41\x41\x2F\x38\x41\x43\x41\x41\x49\x41\x41\x41\x41\x43\x41\x41\x41\x7A\x41\x4D\x77\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x41\x41\x41\x43\x67\x41\x41\x41\x48\x51\x41\x41\x41\x43\x67\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x52\x6C\x4E\x55\x55\x67\x42\x41\x41\x43\x44\x37\x41\x67\x4F\x41\x2F\x34\x41\x41\x41\x41\x55\x41\x41\x51\x41\x41\x41\x41\x48\x37\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x41\x41\x67\x41\x41\x45\x42\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x4B\x4F\x41\x41\x41\x43\x6A\x67\x41\x41\x41\x51\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x45\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x45\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4F\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x59\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x45\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x34\x41\x41\x41\x41\x45\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x34\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x67\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x42\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x53\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x67\x41\x41\x41\x41\x47\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x67\x41\x41\x67\x41\x49\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x44\x2F\x67\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x47\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x51\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x34\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x47\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x59\x41\x41\x41\x41\x4B\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x6F\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x4F\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x44\x41\x41\x41\x41\x48\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x63\x41\x41\x4D\x41\x41\x51\x41\x41\x41\x42\x77\x41\x42\x41\x43\x41\x41\x41\x41\x41\x48\x41\x41\x51\x41\x41\x4D\x41\x44\x41\x42\x2B\x41\x50\x38\x42\x65\x42\x36\x65\x49\x42\x51\x67\x48\x69\x41\x67\x49\x43\x49\x67\x4A\x69\x41\x36\x49\x4B\x77\x68\x49\x76\x73\x43\x2F\x2F\x38\x41\x41\x41\x41\x67\x41\x4B\x45\x42\x65\x42\x36\x65\x49\x42\x51\x67\x47\x43\x41\x67\x49\x43\x49\x67\x4A\x69\x41\x35\x49\x4B\x77\x68\x49\x76\x73\x42\x2F\x2F\x2F\x2F\x34\x2F\x2F\x42\x2F\x30\x6E\x69\x4A\x4F\x43\x76\x34\x4B\x7A\x67\x71\x2B\x43\x71\x34\x4B\x66\x67\x6C\x65\x41\x6B\x33\x36\x38\x46\x30\x51\x41\x42\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x51\x59\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x51\x49\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x77\x51\x46\x42\x67\x63\x49\x43\x51\x6F\x4C\x44\x41\x30\x4F\x44\x78\x41\x52\x45\x68\x4D\x55\x46\x52\x59\x58\x47\x42\x6B\x61\x47\x78\x77\x64\x48\x68\x38\x67\x49\x53\x49\x6A\x4A\x43\x55\x6D\x4A\x79\x67\x70\x4B\x69\x73\x73\x4C\x53\x34\x76\x4D\x44\x45\x79\x4D\x7A\x51\x31\x4E\x6A\x63\x34\x4F\x54\x6F\x37\x50\x44\x30\x2B\x50\x30\x42\x42\x51\x6B\x4E\x45\x52\x55\x5A\x48\x53\x45\x6C\x4B\x53\x30\x78\x4E\x54\x6B\x39\x51\x55\x56\x4A\x54\x56\x46\x56\x57\x56\x31\x68\x5A\x57\x6C\x74\x63\x58\x56\x35\x66\x59\x47\x45\x41\x68\x59\x61\x49\x69\x70\x4B\x58\x6E\x61\x4B\x68\x6F\x36\x57\x6B\x70\x71\x69\x71\x71\x61\x75\x73\x72\x71\x32\x76\x73\x4C\x4B\x30\x73\x37\x57\x33\x74\x72\x75\x36\x76\x4C\x33\x4C\x63\x57\x4E\x6B\x61\x4D\x78\x33\x6F\x47\x39\x71\x30\x58\x56\x70\x41\x49\x65\x5A\x41\x48\x49\x41\x41\x47\x5A\x32\x41\x41\x41\x41\x41\x41\x42\x72\x65\x77\x43\x6E\x75\x59\x42\x69\x62\x51\x41\x41\x41\x41\x42\x73\x66\x4D\x30\x41\x67\x59\x53\x57\x41\x41\x41\x41\x77\x38\x6A\x4A\x78\x4D\x57\x34\x41\x4D\x44\x42\x41\x4E\x44\x4F\x7A\x39\x4C\x54\x41\x48\x6A\x47\x79\x67\x43\x44\x69\x34\x4B\x4D\x69\x59\x36\x50\x6B\x49\x32\x55\x6C\x51\x43\x54\x6D\x35\x79\x61\x41\x41\x41\x41\x63\x41\x41\x41\x41\x48\x6B\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x77\x41\x44\x41\x41\x4D\x41\x41\x77\x41\x48\x67\x41\x38\x41\x47\x77\x41\x6D\x67\x44\x4D\x41\x51\x77\x42\x48\x67\x46\x43\x41\x57\x59\x42\x69\x67\x47\x69\x41\x61\x34\x42\x75\x67\x48\x47\x41\x65\x67\x43\x47\x41\x49\x75\x41\x6D\x41\x43\x6C\x41\x4B\x34\x41\x74\x34\x44\x42\x67\x4D\x6B\x41\x31\x6F\x44\x68\x67\x4F\x61\x41\x36\x34\x44\x33\x41\x50\x77\x42\x42\x77\x45\x53\x41\x52\x75\x42\x49\x77\x45\x73\x67\x54\x57\x42\x50\x41\x46\x42\x67\x55\x61\x42\x54\x77\x46\x56\x41\x56\x6F\x42\x59\x41\x46\x72\x67\x57\x38\x42\x65\x41\x47\x42\x41\x59\x6B\x42\x6B\x41\x47\x62\x41\x61\x4F\x42\x72\x6F\x47\x7A\x41\x62\x6D\x42\x77\x34\x48\x4D\x67\x64\x73\x42\x35\x41\x48\x75\x41\x66\x4B\x42\x2F\x49\x49\x42\x41\x67\x6D\x43\x44\x49\x49\x52\x67\x68\x6D\x43\x49\x6F\x49\x72\x67\x6A\x51\x43\x50\x41\x4A\x44\x41\x6B\x77\x43\x56\x41\x4A\x59\x67\x6D\x43\x43\x61\x77\x4A\x76\x67\x6E\x69\x43\x66\x67\x4B\x47\x41\x6F\x2B\x43\x6D\x49\x4B\x67\x67\x71\x6B\x43\x73\x41\x4B\x31\x67\x72\x36\x43\x78\x51\x4C\x54\x41\x74\x73\x43\x34\x77\x4C\x73\x67\x76\x47\x43\x2B\x77\x4D\x43\x67\x77\x63\x44\x45\x34\x4D\x64\x67\x79\x73\x44\x4F\x41\x4D\x39\x41\x30\x6F\x44\x54\x6F\x4E\x5A\x41\x31\x34\x44\x62\x59\x4E\x78\x67\x33\x53\x44\x66\x6F\x4F\x42\x67\x34\x6B\x44\x6B\x49\x4F\x58\x67\x35\x34\x44\x6F\x6F\x4F\x70\x67\x37\x49\x44\x74\x51\x4F\x37\x67\x37\x2B\x44\x78\x77\x50\x57\x41\x2B\x4D\x44\x38\x59\x50\x2F\x42\x41\x6B\x45\x45\x34\x51\x64\x68\x43\x6B\x45\x4D\x67\x51\x38\x68\x45\x61\x45\x54\x77\x52\x63\x68\x47\x57\x45\x62\x67\x52\x34\x42\x49\x45\x45\x68\x77\x53\x4E\x42\x4A\x53\x45\x6D\x6F\x53\x6A\x68\x4B\x34\x45\x75\x59\x54\x45\x68\x4E\x43\x45\x32\x6F\x54\x6D\x42\x50\x51\x46\x41\x41\x55\x4A\x68\x52\x4D\x46\x47\x77\x55\x6B\x68\x54\x43\x46\x4F\x49\x56\x43\x42\x55\x77\x46\x56\x59\x56\x66\x42\x57\x69\x46\x63\x34\x57\x41\x42\x59\x73\x46\x6D\x49\x57\x69\x68\x61\x77\x46\x74\x59\x58\x41\x68\x63\x57\x46\x79\x67\x58\x51\x42\x64\x65\x46\x34\x59\x58\x6F\x68\x66\x4B\x46\x2F\x49\x59\x48\x68\x68\x47\x47\x48\x51\x59\x6B\x42\x69\x34\x47\x4E\x51\x59\x38\x42\x6B\x4D\x47\x53\x77\x5A\x57\x42\x6C\x32\x47\x61\x49\x5A\x30\x68\x6E\x30\x47\x67\x41\x61\x45\x68\x6F\x6B\x47\x6A\x59\x61\x53\x68\x70\x6F\x47\x6F\x59\x61\x70\x42\x71\x38\x47\x74\x41\x61\x36\x42\x73\x4B\x47\x79\x77\x62\x55\x42\x74\x71\x47\x34\x34\x62\x72\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x34\x41\x44\x67\x41\x41\x44\x41\x41\x41\x78\x45\x53\x45\x52\x41\x34\x41\x44\x67\x50\x79\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x49\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x41\x44\x45\x31\x4D\x78\x55\x44\x45\x54\x4D\x52\x67\x49\x43\x41\x67\x49\x41\x42\x41\x41\x4B\x41\x2F\x59\x41\x41\x41\x41\x51\x41\x41\x41\x49\x41\x41\x67\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x41\x41\x52\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x52\x4D\x78\x45\x7A\x45\x54\x4D\x52\x67\x49\x43\x41\x2F\x77\x43\x41\x67\x49\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x42\x38\x41\x41\x41\x45\x31\x49\x78\x55\x44\x45\x53\x4D\x31\x4D\x7A\x55\x6A\x4E\x54\x4D\x52\x4D\x78\x45\x7A\x45\x54\x4D\x52\x4D\x78\x55\x6A\x46\x54\x4D\x56\x49\x78\x45\x6A\x45\x53\x4D\x52\x41\x59\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x2F\x6F\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x50\x38\x41\x67\x49\x43\x41\x2F\x77\x41\x42\x41\x50\x38\x41\x41\x41\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x73\x41\x41\x43\x45\x31\x49\x54\x55\x68\x46\x53\x4D\x56\x45\x7A\x55\x7A\x46\x53\x55\x31\x49\x52\x55\x6C\x4E\x54\x4D\x56\x50\x51\x45\x7A\x4E\x54\x4D\x56\x49\x52\x55\x42\x41\x50\x38\x41\x41\x67\x43\x41\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x67\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x41\x44\x45\x31\x4D\x78\x55\x68\x45\x54\x4D\x52\x4A\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x55\x31\x45\x54\x4D\x52\x4A\x52\x45\x7A\x45\x53\x55\x31\x4D\x78\x57\x41\x41\x59\x43\x41\x2F\x67\x43\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x49\x41\x42\x41\x50\x38\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x73\x41\x48\x77\x41\x6A\x41\x43\x63\x41\x41\x44\x4D\x31\x49\x52\x55\x7A\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x42\x4E\x53\x4D\x31\x49\x7A\x55\x7A\x4E\x54\x4D\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x41\x51\x43\x41\x67\x50\x32\x41\x67\x41\x47\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x67\x49\x43\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x44\x2F\x41\x50\x38\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x67\x41\x42\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x45\x54\x55\x7A\x46\x54\x55\x52\x4D\x78\x47\x41\x67\x41\x49\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x49\x54\x55\x68\x46\x53\x55\x31\x4D\x78\x55\x6C\x45\x54\x4D\x5A\x41\x54\x55\x7A\x46\x54\x30\x42\x49\x52\x55\x42\x41\x41\x45\x41\x2F\x6F\x43\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x54\x55\x68\x46\x54\x30\x42\x4D\x78\x55\x31\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x53\x55\x31\x49\x52\x55\x42\x41\x49\x43\x41\x2F\x77\x43\x41\x2F\x6F\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x51\x41\x41\x41\x51\x41\x43\x41\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x45\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x57\x41\x41\x51\x43\x41\x2F\x6F\x41\x42\x41\x50\x36\x41\x67\x41\x45\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x49\x41\x43\x67\x41\x4D\x41\x41\x41\x73\x41\x41\x43\x55\x52\x49\x54\x55\x68\x45\x54\x4D\x52\x49\x52\x55\x68\x45\x51\x45\x41\x2F\x77\x41\x42\x41\x49\x41\x42\x41\x50\x38\x41\x67\x41\x45\x41\x67\x41\x45\x41\x2F\x77\x43\x41\x2F\x77\x41\x41\x41\x51\x41\x41\x2F\x34\x41\x41\x67\x41\x45\x41\x41\x41\x4D\x41\x41\x42\x55\x52\x4D\x78\x47\x41\x67\x41\x47\x41\x2F\x6F\x41\x41\x41\x51\x41\x41\x41\x59\x41\x43\x67\x41\x49\x41\x41\x41\x4D\x41\x41\x42\x45\x31\x49\x52\x55\x43\x67\x41\x47\x41\x67\x49\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x67\x41\x45\x41\x41\x41\x4D\x41\x41\x44\x45\x52\x4D\x78\x47\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x54\x55\x7A\x46\x54\x55\x52\x4D\x78\x6B\x42\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x57\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x38\x41\x46\x77\x41\x62\x41\x41\x41\x7A\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x51\x45\x52\x4D\x78\x45\x7A\x46\x53\x4D\x56\x49\x52\x45\x6A\x4E\x54\x4D\x31\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x77\x43\x41\x2F\x6F\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x41\x47\x41\x67\x49\x44\x2F\x41\x41\x4B\x41\x2F\x6F\x43\x41\x67\x41\x47\x41\x67\x49\x44\x39\x67\x41\x4B\x41\x67\x49\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x43\x77\x41\x41\x4D\x54\x55\x68\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x45\x53\x45\x56\x41\x51\x43\x41\x67\x49\x41\x42\x41\x49\x41\x43\x41\x49\x43\x41\x2F\x51\x43\x41\x41\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x47\x77\x41\x41\x4D\x52\x45\x7A\x46\x53\x45\x31\x4D\x78\x45\x42\x4E\x54\x4D\x56\x50\x51\x45\x68\x46\x51\x45\x31\x4D\x78\x55\x46\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x67\x49\x44\x2B\x41\x49\x41\x42\x41\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x41\x42\x41\x49\x43\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x43\x41\x67\x41\x41\x41\x41\x41\x41\x48\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x47\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x31\x4D\x78\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x31\x4D\x78\x55\x46\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x36\x41\x41\x51\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x45\x77\x41\x41\x45\x7A\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x54\x45\x53\x45\x52\x4D\x78\x55\x68\x45\x53\x4D\x31\x49\x52\x47\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x41\x51\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x2F\x59\x41\x42\x41\x41\x45\x41\x67\x41\x47\x41\x67\x50\x79\x41\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x52\x4D\x78\x45\x42\x45\x53\x45\x56\x49\x52\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x32\x41\x41\x6F\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x41\x42\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4E\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x55\x68\x46\x53\x45\x5A\x41\x54\x55\x7A\x46\x54\x30\x42\x49\x52\x57\x41\x41\x59\x43\x41\x2F\x59\x43\x41\x41\x59\x44\x2B\x67\x49\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x43\x41\x49\x43\x41\x2F\x77\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x44\x77\x41\x41\x49\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x55\x31\x45\x53\x45\x56\x49\x78\x45\x68\x45\x51\x45\x41\x67\x49\x44\x2B\x67\x49\x41\x43\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x41\x45\x41\x67\x41\x45\x41\x2F\x6F\x41\x41\x41\x41\x63\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x54\x41\x42\x63\x41\x41\x44\x4D\x31\x49\x52\x55\x39\x41\x54\x4D\x56\x41\x52\x45\x7A\x45\x51\x45\x31\x49\x54\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x41\x49\x44\x2B\x41\x49\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x41\x59\x41\x42\x41\x50\x38\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x2F\x67\x41\x43\x41\x49\x43\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x43\x41\x41\x77\x41\x41\x41\x77\x41\x48\x41\x41\x41\x78\x45\x54\x4D\x52\x41\x78\x45\x7A\x45\x59\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x43\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x2F\x34\x41\x41\x67\x41\x4D\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x46\x52\x45\x7A\x45\x51\x4D\x52\x4D\x78\x47\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x4B\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x41\x41\x63\x41\x41\x41\x41\x41\x41\x67\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x41\x41\x68\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x41\x59\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x49\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x50\x51\x45\x68\x46\x51\x45\x31\x49\x52\x55\x43\x67\x50\x32\x41\x41\x6F\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x63\x41\x41\x41\x41\x41\x41\x67\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x41\x41\x78\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x67\x49\x43\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x47\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x43\x45\x31\x4D\x78\x55\x44\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x51\x45\x31\x4D\x78\x55\x46\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x41\x67\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x44\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x4E\x78\x45\x68\x45\x54\x4D\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x49\x41\x2F\x59\x43\x41\x67\x41\x45\x41\x67\x49\x44\x39\x67\x41\x49\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x49\x41\x42\x67\x50\x38\x41\x41\x59\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x4C\x41\x41\x38\x41\x41\x44\x45\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x49\x78\x45\x68\x47\x51\x45\x31\x49\x52\x57\x41\x41\x59\x43\x41\x67\x50\x36\x41\x41\x59\x41\x44\x41\x50\x38\x41\x41\x51\x44\x39\x41\x41\x47\x41\x2F\x6F\x41\x44\x41\x49\x43\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x45\x77\x41\x41\x4A\x52\x45\x7A\x45\x51\x4D\x31\x4D\x78\x55\x42\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x49\x52\x55\x43\x41\x49\x43\x41\x67\x50\x32\x41\x41\x67\x44\x2B\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x41\x42\x67\x50\x36\x41\x41\x67\x43\x41\x67\x50\x32\x41\x41\x34\x43\x41\x67\x49\x44\x2B\x67\x49\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4A\x54\x55\x68\x46\x59\x41\x42\x67\x49\x44\x39\x67\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x43\x67\x50\x32\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x41\x41\x43\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4C\x41\x41\x41\x6C\x45\x54\x4D\x52\x42\x52\x45\x68\x46\x53\x45\x52\x49\x52\x55\x43\x41\x49\x44\x39\x67\x41\x49\x41\x2F\x6F\x41\x42\x67\x49\x41\x43\x67\x50\x32\x41\x67\x41\x4F\x41\x67\x50\x32\x41\x67\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x73\x41\x41\x44\x45\x52\x49\x52\x55\x68\x46\x53\x45\x56\x49\x52\x45\x68\x46\x51\x4B\x41\x2F\x67\x41\x42\x41\x50\x38\x41\x41\x67\x41\x44\x67\x49\x43\x41\x67\x50\x36\x41\x67\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x43\x51\x41\x41\x4D\x52\x45\x68\x46\x53\x45\x56\x49\x52\x55\x68\x45\x51\x4B\x41\x2F\x67\x41\x42\x41\x50\x38\x41\x41\x34\x43\x41\x67\x49\x44\x2B\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x51\x41\x4E\x41\x42\x45\x41\x41\x44\x4D\x31\x49\x52\x55\x31\x45\x53\x45\x31\x49\x52\x45\x68\x45\x54\x4D\x5A\x41\x54\x55\x68\x46\x59\x41\x42\x67\x50\x38\x41\x41\x59\x44\x39\x67\x49\x41\x43\x41\x49\x43\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x67\x49\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x43\x77\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x6A\x45\x53\x45\x52\x67\x41\x47\x41\x67\x49\x44\x2B\x67\x41\x4F\x41\x2F\x77\x41\x42\x41\x50\x79\x41\x41\x67\x44\x2B\x41\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x47\x41\x41\x34\x41\x41\x43\x77\x41\x41\x4D\x54\x55\x7A\x45\x53\x4D\x31\x49\x52\x55\x6A\x45\x54\x4D\x56\x67\x49\x41\x42\x67\x49\x43\x41\x67\x41\x4B\x41\x67\x49\x44\x39\x67\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x52\x4D\x78\x47\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x4D\x41\x2F\x51\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x42\x4D\x41\x46\x77\x41\x41\x49\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x44\x4E\x54\x4D\x56\x41\x52\x45\x7A\x45\x53\x45\x56\x49\x52\x45\x42\x4E\x54\x4D\x56\x41\x67\x43\x41\x2F\x77\x43\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x41\x50\x38\x41\x41\x59\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x41\x42\x41\x49\x43\x41\x2F\x59\x41\x44\x67\x50\x38\x41\x67\x50\x34\x41\x41\x77\x43\x41\x67\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x42\x51\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x56\x67\x41\x49\x41\x41\x34\x44\x39\x41\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x77\x41\x54\x41\x41\x41\x42\x4E\x54\x4D\x56\x41\x52\x45\x7A\x46\x54\x4D\x56\x49\x78\x45\x68\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x45\x51\x45\x41\x67\x50\x36\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x49\x41\x43\x41\x49\x43\x41\x2F\x67\x41\x44\x67\x49\x43\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x2F\x49\x41\x41\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x77\x41\x54\x41\x41\x41\x42\x4E\x54\x4D\x56\x41\x52\x45\x7A\x46\x54\x4D\x56\x49\x78\x45\x68\x45\x53\x4D\x31\x4D\x78\x45\x7A\x45\x51\x45\x41\x67\x50\x36\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x49\x41\x43\x41\x49\x43\x41\x2F\x67\x41\x44\x67\x49\x43\x41\x2F\x59\x41\x42\x67\x49\x41\x42\x67\x50\x79\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x41\x41\x45\x31\x4D\x78\x55\x42\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x41\x67\x43\x41\x2F\x59\x41\x43\x41\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x4B\x41\x67\x49\x44\x39\x67\x41\x4F\x41\x67\x49\x43\x41\x2F\x67\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x45\x54\x4D\x52\x4A\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x57\x41\x41\x51\x43\x41\x67\x50\x38\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x49\x41\x43\x41\x50\x34\x41\x41\x67\x43\x41\x67\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x45\x51\x41\x41\x49\x52\x45\x7A\x45\x51\x4D\x31\x4D\x78\x55\x42\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x41\x67\x43\x41\x67\x49\x44\x39\x67\x41\x49\x41\x2F\x6F\x41\x42\x67\x50\x36\x41\x41\x67\x44\x2B\x41\x41\x4B\x41\x67\x49\x44\x39\x67\x41\x4F\x41\x67\x49\x43\x41\x2F\x67\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x67\x43\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x48\x41\x41\x41\x68\x45\x53\x45\x31\x49\x52\x55\x68\x45\x51\x45\x41\x2F\x77\x41\x43\x67\x50\x38\x41\x41\x77\x43\x41\x67\x50\x30\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x41\x77\x44\x39\x41\x41\x4D\x41\x2F\x51\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x68\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x45\x42\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x42\x41\x41\x49\x41\x2F\x67\x41\x43\x41\x50\x34\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x73\x41\x45\x77\x41\x41\x41\x54\x55\x7A\x46\x51\x45\x52\x4D\x78\x45\x7A\x46\x53\x4D\x56\x49\x54\x55\x6A\x4E\x54\x4D\x52\x4D\x78\x45\x42\x41\x49\x44\x2B\x67\x49\x43\x41\x67\x41\x47\x41\x67\x49\x43\x41\x41\x51\x43\x41\x67\x50\x38\x41\x41\x34\x44\x39\x67\x49\x43\x41\x67\x49\x41\x43\x67\x50\x79\x41\x41\x41\x41\x41\x41\x41\x6B\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x42\x38\x41\x49\x77\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x50\x34\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x49\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x55\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x55\x41\x43\x51\x41\x4E\x41\x42\x45\x41\x46\x77\x41\x41\x4D\x52\x45\x7A\x46\x53\x45\x56\x41\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x50\x51\x45\x68\x4E\x53\x45\x52\x67\x41\x48\x2F\x2F\x67\x47\x41\x67\x49\x44\x2B\x41\x41\x4B\x41\x41\x51\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2F\x41\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x47\x41\x41\x34\x41\x41\x42\x77\x41\x41\x4D\x52\x45\x68\x46\x53\x45\x52\x49\x52\x55\x42\x67\x50\x38\x41\x41\x51\x41\x44\x67\x49\x44\x39\x67\x49\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x68\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x6C\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x51\x49\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x59\x41\x44\x67\x41\x41\x48\x41\x41\x41\x78\x4E\x53\x45\x52\x49\x54\x55\x68\x45\x51\x45\x41\x2F\x77\x41\x42\x67\x49\x41\x43\x67\x49\x44\x38\x67\x41\x41\x41\x41\x41\x55\x41\x41\x41\x49\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x42\x45\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x50\x34\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x51\x41\x41\x41\x41\x41\x43\x67\x41\x43\x41\x41\x41\x4D\x41\x41\x44\x45\x31\x49\x52\x55\x43\x67\x49\x43\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x67\x41\x42\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x45\x7A\x55\x7A\x46\x53\x55\x52\x4D\x78\x47\x41\x67\x50\x38\x41\x67\x41\x49\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x41\x50\x51\x45\x7A\x48\x51\x45\x31\x49\x54\x55\x68\x4E\x53\x45\x31\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x42\x45\x41\x41\x43\x55\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x52\x45\x7A\x45\x54\x4D\x56\x49\x78\x45\x68\x46\x51\x49\x41\x67\x50\x36\x41\x41\x51\x44\x2B\x41\x49\x43\x41\x67\x41\x47\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x2F\x67\x41\x44\x67\x50\x36\x41\x67\x50\x38\x41\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4A\x54\x55\x68\x46\x59\x41\x42\x67\x49\x44\x39\x67\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x42\x45\x41\x41\x44\x55\x52\x4D\x78\x6B\x42\x4E\x53\x45\x56\x41\x54\x55\x68\x45\x53\x4D\x31\x4D\x78\x45\x7A\x45\x59\x41\x42\x41\x50\x38\x41\x41\x59\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x41\x49\x41\x42\x67\x50\x79\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x55\x68\x4E\x54\x4D\x52\x49\x52\x55\x52\x4E\x53\x45\x56\x67\x41\x49\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x49\x43\x41\x67\x41\x47\x41\x67\x49\x44\x2F\x41\x49\x41\x42\x67\x49\x43\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x49\x41\x41\x34\x41\x41\x43\x77\x41\x50\x41\x41\x41\x7A\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x46\x53\x45\x56\x49\x52\x6B\x42\x4E\x53\x45\x56\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x41\x49\x41\x67\x49\x43\x41\x67\x50\x34\x41\x41\x77\x43\x41\x67\x41\x41\x41\x41\x41\x4D\x41\x41\x50\x2B\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x63\x41\x45\x51\x41\x41\x46\x54\x55\x68\x46\x51\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x31\x49\x52\x45\x68\x4E\x53\x45\x52\x41\x67\x44\x2B\x41\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x49\x41\x67\x49\x43\x41\x41\x59\x41\x42\x41\x50\x38\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x67\x50\x32\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x44\x77\x41\x41\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x45\x54\x4D\x52\x4D\x78\x55\x6A\x45\x51\x49\x41\x67\x50\x36\x41\x41\x51\x44\x2B\x41\x49\x43\x41\x67\x41\x49\x41\x2F\x67\x41\x43\x41\x49\x43\x41\x2F\x67\x41\x44\x67\x50\x36\x41\x67\x50\x36\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x43\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x78\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x59\x43\x41\x67\x41\x4B\x41\x2F\x59\x41\x44\x41\x49\x43\x41\x41\x41\x41\x45\x41\x41\x44\x2F\x67\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x41\x46\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x43\x67\x50\x32\x41\x41\x77\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x46\x77\x41\x41\x49\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x44\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x51\x45\x52\x4D\x78\x45\x7A\x46\x53\x4D\x52\x41\x59\x43\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x41\x41\x4F\x41\x2F\x67\x43\x41\x2F\x77\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x42\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x4D\x7A\x55\x7A\x46\x53\x55\x52\x4D\x78\x47\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x4D\x41\x2F\x51\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4E\x41\x42\x45\x41\x41\x41\x45\x52\x4D\x78\x45\x54\x45\x54\x4D\x52\x49\x52\x45\x68\x46\x53\x4D\x52\x41\x54\x55\x7A\x46\x51\x45\x41\x67\x49\x43\x41\x2F\x59\x41\x42\x41\x49\x41\x42\x41\x49\x41\x42\x41\x41\x45\x41\x2F\x77\x44\x2F\x41\x41\x49\x41\x2F\x67\x41\x43\x67\x49\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x41\x41\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x43\x51\x41\x41\x49\x52\x45\x7A\x45\x53\x45\x52\x49\x52\x55\x68\x45\x51\x49\x41\x67\x50\x32\x41\x41\x67\x44\x2B\x67\x41\x49\x41\x2F\x67\x41\x43\x67\x49\x44\x2B\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x41\x41\x41\x77\x41\x41\x2F\x34\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x44\x77\x41\x54\x41\x41\x41\x42\x45\x54\x4D\x52\x41\x52\x45\x7A\x46\x54\x4D\x56\x49\x78\x55\x68\x46\x53\x45\x52\x45\x7A\x55\x68\x46\x51\x49\x41\x67\x50\x32\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x49\x41\x42\x41\x41\x45\x41\x41\x51\x44\x2F\x41\x50\x36\x41\x41\x77\x43\x41\x67\x49\x43\x41\x2F\x77\x41\x43\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x50\x2B\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x63\x41\x45\x77\x41\x41\x47\x51\x45\x7A\x47\x51\x45\x31\x49\x52\x55\x54\x45\x53\x45\x31\x49\x54\x55\x6A\x4E\x54\x4D\x31\x4D\x78\x47\x41\x41\x51\x43\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x41\x45\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x44\x39\x67\x41\x45\x41\x67\x49\x43\x41\x67\x50\x30\x41\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x73\x41\x44\x77\x41\x41\x41\x54\x55\x7A\x46\x51\x45\x52\x4D\x78\x55\x7A\x46\x53\x4D\x52\x45\x7A\x55\x68\x46\x51\x49\x41\x67\x50\x32\x41\x67\x49\x43\x41\x67\x41\x45\x41\x41\x59\x43\x41\x67\x50\x36\x41\x41\x6F\x43\x41\x67\x50\x36\x41\x41\x67\x43\x41\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x78\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x55\x31\x49\x52\x55\x6C\x4E\x54\x4D\x56\x50\x51\x45\x68\x46\x51\x49\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x41\x49\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x59\x41\x44\x67\x41\x41\x44\x41\x41\x38\x41\x41\x43\x45\x31\x4D\x78\x55\x6C\x45\x53\x4D\x31\x4D\x78\x45\x7A\x45\x54\x4D\x56\x49\x78\x45\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x59\x43\x41\x41\x51\x44\x2F\x41\x49\x44\x2B\x67\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x43\x51\x41\x41\x4E\x52\x45\x7A\x45\x52\x55\x31\x49\x52\x45\x7A\x45\x59\x41\x42\x67\x49\x43\x41\x41\x67\x44\x2B\x41\x49\x43\x41\x41\x67\x44\x39\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x68\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x41\x43\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x41\x77\x41\x4E\x41\x41\x41\x31\x45\x54\x4D\x52\x46\x54\x55\x7A\x45\x54\x4D\x52\x4D\x78\x45\x7A\x45\x59\x43\x41\x67\x49\x43\x41\x67\x41\x49\x41\x2F\x67\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x43\x41\x50\x32\x41\x41\x41\x41\x41\x43\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x6A\x41\x41\x41\x78\x4E\x54\x4D\x56\x49\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x57\x41\x41\x59\x43\x41\x2F\x67\x43\x41\x67\x49\x44\x2F\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x4D\x41\x41\x50\x2B\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x63\x41\x44\x77\x41\x41\x46\x54\x55\x68\x46\x51\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x31\x49\x52\x45\x7A\x45\x51\x49\x41\x2F\x67\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x41\x47\x41\x41\x59\x44\x2B\x67\x50\x38\x41\x67\x49\x41\x42\x67\x50\x32\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x6F\x41\x41\x42\x77\x41\x4C\x41\x42\x4D\x41\x41\x44\x45\x31\x4D\x7A\x55\x7A\x46\x53\x45\x56\x41\x54\x55\x7A\x46\x54\x30\x42\x49\x54\x55\x68\x46\x53\x4D\x56\x67\x49\x41\x42\x67\x50\x36\x41\x67\x50\x36\x41\x41\x6F\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x49\x54\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x47\x51\x45\x31\x49\x52\x55\x42\x41\x41\x45\x41\x2F\x6F\x43\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x49\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x41\x44\x45\x52\x4D\x78\x45\x44\x45\x54\x4D\x52\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x49\x41\x41\x59\x44\x2B\x67\x41\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x49\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x78\x4E\x53\x45\x56\x4E\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x55\x6C\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x41\x67\x49\x44\x2F\x41\x49\x44\x2B\x67\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x6F\x41\x44\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x42\x45\x31\x4D\x78\x55\x68\x4E\x53\x45\x56\x4A\x54\x55\x68\x46\x53\x45\x31\x4D\x78\x57\x41\x41\x51\x41\x42\x41\x50\x34\x41\x41\x51\x41\x42\x41\x49\x41\x43\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x41\x67\x41\x4D\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x4D\x52\x45\x7A\x45\x51\x4D\x31\x4D\x78\x57\x41\x67\x49\x41\x43\x41\x50\x34\x41\x41\x6F\x43\x41\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x42\x38\x41\x41\x41\x45\x31\x4D\x78\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x51\x45\x31\x49\x7A\x55\x7A\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x46\x54\x4D\x56\x49\x78\x45\x7A\x46\x53\x4D\x56\x41\x67\x43\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x6F\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x45\x41\x67\x49\x44\x2B\x41\x49\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x2F\x6F\x43\x41\x67\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x41\x4D\x54\x55\x7A\x45\x53\x4D\x31\x4D\x78\x45\x7A\x45\x53\x45\x56\x49\x52\x45\x68\x46\x51\x4D\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x67\x49\x43\x41\x2F\x6F\x41\x42\x41\x49\x41\x42\x41\x49\x41\x42\x41\x50\x38\x41\x67\x50\x38\x41\x67\x41\x4B\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x43\x41\x41\x41\x41\x49\x41\x43\x41\x41\x4D\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x41\x50\x51\x45\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x57\x41\x41\x51\x43\x41\x2F\x6F\x41\x42\x41\x50\x36\x41\x67\x41\x45\x41\x67\x50\x36\x41\x41\x51\x44\x2B\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x42\x38\x41\x49\x77\x41\x41\x49\x54\x55\x6A\x4E\x54\x4D\x31\x49\x7A\x55\x7A\x4E\x54\x4D\x56\x4D\x78\x55\x6A\x46\x54\x4D\x56\x49\x78\x55\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x41\x51\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x43\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x43\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x78\x45\x54\x4D\x52\x41\x78\x45\x7A\x45\x59\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x43\x41\x41\x47\x41\x2F\x6F\x41\x41\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x41\x4D\x54\x55\x68\x46\x54\x30\x42\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x49\x52\x55\x42\x67\x49\x44\x2B\x67\x41\x45\x41\x2F\x6F\x43\x41\x41\x51\x43\x41\x2F\x6F\x41\x42\x41\x50\x36\x41\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x43\x41\x41\x41\x44\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x52\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x51\x45\x41\x67\x41\x45\x41\x41\x77\x43\x41\x67\x49\x43\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x6F\x41\x41\x44\x51\x41\x52\x41\x42\x73\x41\x41\x44\x4D\x31\x49\x78\x45\x7A\x45\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x54\x4D\x56\x4E\x52\x45\x7A\x45\x53\x55\x52\x49\x7A\x55\x68\x46\x53\x4D\x56\x49\x78\x57\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x34\x41\x67\x41\x49\x41\x67\x49\x43\x41\x41\x59\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x42\x41\x41\x41\x43\x41\x41\x47\x41\x41\x34\x41\x41\x43\x51\x41\x41\x45\x54\x55\x7A\x4E\x53\x4D\x31\x49\x52\x55\x7A\x45\x59\x43\x41\x41\x51\x43\x41\x41\x67\x43\x41\x67\x49\x43\x41\x2F\x77\x41\x41\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x6A\x41\x43\x63\x41\x41\x43\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x42\x41\x49\x43\x41\x67\x50\x34\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x6F\x41\x42\x67\x41\x41\x46\x41\x41\x41\x68\x45\x53\x45\x31\x49\x52\x45\x43\x41\x50\x34\x41\x41\x6F\x41\x42\x41\x49\x44\x2B\x67\x41\x41\x41\x41\x51\x41\x41\x41\x67\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x41\x42\x45\x31\x49\x52\x55\x43\x67\x41\x49\x41\x67\x49\x41\x41\x41\x77\x41\x41\x41\x51\x41\x44\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x5A\x41\x41\x41\x42\x4E\x53\x4D\x56\x49\x52\x45\x7A\x45\x52\x55\x31\x4D\x78\x45\x7A\x4E\x53\x45\x31\x49\x52\x55\x6A\x46\x54\x4D\x31\x4D\x78\x45\x6A\x46\x51\x49\x41\x67\x50\x36\x41\x67\x49\x43\x41\x2F\x77\x41\x43\x41\x49\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x50\x36\x41\x67\x41\x41\x42\x41\x41\x41\x44\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x41\x45\x54\x55\x68\x46\x51\x4B\x41\x41\x77\x43\x41\x67\x41\x41\x45\x41\x41\x41\x43\x41\x41\x47\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x41\x45\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x59\x43\x41\x2F\x77\x43\x41\x67\x49\x44\x2F\x41\x49\x41\x43\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x34\x41\x41\x41\x77\x41\x50\x41\x41\x41\x78\x4E\x53\x45\x56\x41\x52\x45\x68\x4E\x53\x45\x52\x49\x52\x45\x68\x46\x53\x45\x52\x41\x77\x44\x2B\x41\x50\x38\x41\x41\x51\x41\x42\x41\x41\x45\x41\x2F\x77\x43\x41\x67\x41\x45\x41\x41\x51\x43\x41\x41\x51\x44\x2F\x41\x49\x44\x2F\x41\x41\x41\x42\x41\x41\x41\x42\x41\x41\x49\x41\x41\x34\x41\x41\x45\x51\x41\x41\x47\x51\x45\x7A\x4E\x54\x4D\x31\x49\x54\x55\x68\x46\x54\x4D\x56\x49\x78\x55\x6A\x46\x53\x45\x56\x67\x49\x44\x2F\x41\x41\x47\x41\x67\x49\x43\x41\x41\x51\x41\x42\x41\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x45\x41\x41\x41\x45\x41\x41\x67\x41\x44\x67\x41\x41\x50\x41\x41\x41\x52\x4E\x53\x45\x31\x49\x7A\x55\x7A\x4E\x53\x45\x31\x49\x52\x55\x7A\x45\x53\x4D\x56\x41\x51\x43\x41\x67\x50\x38\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x6F\x43\x41\x41\x41\x41\x43\x41\x41\x41\x43\x41\x41\x45\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x52\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x59\x43\x41\x41\x67\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x41\x41\x42\x41\x41\x41\x41\x67\x41\x4F\x41\x41\x34\x41\x41\x44\x77\x41\x41\x50\x51\x45\x7A\x45\x53\x45\x52\x49\x52\x45\x68\x45\x53\x4D\x56\x49\x52\x55\x6A\x46\x59\x41\x42\x41\x41\x45\x41\x41\x51\x43\x41\x2F\x6F\x43\x41\x67\x49\x41\x43\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x42\x41\x41\x44\x67\x41\x41\x44\x41\x42\x45\x41\x41\x41\x45\x52\x49\x78\x45\x54\x45\x53\x45\x31\x49\x78\x45\x7A\x4E\x53\x45\x52\x49\x52\x45\x6A\x45\x51\x47\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x41\x34\x44\x2F\x41\x49\x41\x43\x41\x41\x45\x41\x2F\x77\x44\x2B\x41\x41\x47\x41\x67\x41\x45\x41\x67\x50\x79\x41\x41\x77\x44\x39\x41\x41\x41\x41\x41\x51\x41\x41\x41\x51\x41\x42\x41\x41\x47\x41\x41\x41\x4D\x41\x41\x42\x45\x31\x49\x52\x55\x42\x41\x41\x45\x41\x67\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x42\x67\x41\x49\x41\x41\x41\x4D\x41\x42\x77\x41\x4E\x41\x41\x41\x78\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x55\x31\x4D\x7A\x55\x7A\x45\x51\x45\x41\x67\x50\x36\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x38\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x49\x41\x41\x51\x41\x44\x67\x41\x41\x46\x41\x41\x41\x54\x45\x53\x4D\x31\x49\x52\x47\x41\x67\x41\x45\x41\x41\x67\x41\x42\x41\x49\x44\x2B\x67\x41\x41\x41\x42\x41\x41\x41\x41\x67\x41\x42\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x42\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x43\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x6A\x41\x43\x63\x41\x41\x44\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x57\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x67\x43\x41\x67\x49\x44\x2B\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4E\x41\x42\x45\x41\x46\x51\x41\x5A\x41\x42\x30\x41\x41\x44\x45\x31\x4D\x78\x55\x31\x45\x54\x4D\x52\x42\x54\x55\x6A\x45\x53\x45\x52\x41\x54\x55\x7A\x46\x54\x55\x52\x4D\x78\x45\x6C\x45\x54\x4D\x52\x4A\x54\x55\x7A\x46\x59\x43\x41\x41\x51\x43\x41\x41\x51\x44\x2B\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x49\x43\x41\x41\x51\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x49\x41\x42\x41\x50\x38\x41\x67\x49\x43\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4A\x41\x41\x30\x41\x45\x51\x41\x56\x41\x42\x6B\x41\x48\x51\x41\x68\x41\x41\x41\x78\x4E\x54\x4D\x56\x49\x52\x45\x7A\x46\x54\x4D\x56\x4A\x52\x45\x7A\x45\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x53\x55\x52\x4D\x78\x45\x6C\x4E\x54\x4D\x56\x67\x41\x45\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x41\x49\x44\x2B\x67\x49\x43\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x49\x41\x42\x41\x50\x38\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x6B\x41\x44\x51\x41\x62\x41\x42\x38\x41\x41\x44\x45\x31\x4D\x78\x55\x68\x4E\x53\x4D\x52\x49\x52\x45\x42\x45\x54\x4D\x52\x41\x52\x45\x6A\x4E\x54\x4D\x31\x49\x78\x45\x68\x45\x54\x4D\x56\x49\x78\x45\x42\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x41\x45\x41\x2F\x77\x43\x41\x2F\x6F\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2B\x67\x41\x49\x41\x41\x51\x44\x2F\x41\x50\x36\x41\x41\x51\x43\x41\x67\x41\x45\x41\x2F\x6F\x43\x41\x2F\x77\x41\x43\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x59\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x41\x4D\x7A\x55\x68\x46\x54\x30\x42\x4D\x78\x55\x68\x45\x54\x4D\x5A\x41\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x44\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x50\x32\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x41\x51\x43\x41\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x55\x41\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x44\x45\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x49\x78\x45\x68\x47\x51\x45\x31\x49\x52\x55\x42\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x59\x41\x42\x67\x49\x43\x41\x2F\x6F\x41\x42\x67\x50\x38\x41\x67\x50\x38\x41\x67\x41\x4D\x41\x2F\x77\x41\x42\x41\x50\x30\x41\x41\x59\x44\x2B\x67\x41\x4D\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x55\x41\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x44\x45\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x49\x78\x45\x68\x47\x51\x45\x31\x49\x52\x55\x42\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x59\x41\x42\x67\x49\x43\x41\x2F\x6F\x41\x42\x67\x50\x38\x41\x67\x49\x41\x44\x41\x50\x38\x41\x41\x51\x44\x39\x41\x41\x47\x41\x2F\x6F\x41\x44\x41\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x51\x41\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x41\x41\x78\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x53\x4D\x52\x49\x52\x6B\x42\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x49\x44\x2B\x67\x41\x47\x41\x2F\x6F\x43\x41\x67\x49\x44\x2F\x41\x49\x41\x44\x41\x50\x38\x41\x41\x51\x44\x39\x41\x41\x47\x41\x2F\x6F\x41\x44\x41\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x67\x41\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x6A\x45\x53\x45\x5A\x41\x54\x55\x68\x46\x51\x45\x31\x49\x52\x57\x41\x41\x59\x43\x41\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x41\x77\x44\x2F\x41\x41\x45\x41\x2F\x51\x41\x42\x67\x50\x36\x41\x41\x77\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x67\x41\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x78\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x53\x4D\x52\x49\x52\x6B\x42\x4E\x53\x45\x56\x41\x54\x55\x68\x46\x54\x4D\x31\x49\x52\x57\x41\x41\x59\x43\x41\x67\x50\x36\x41\x41\x59\x44\x2B\x41\x41\x45\x41\x67\x41\x45\x41\x41\x77\x44\x2F\x41\x41\x45\x41\x2F\x51\x41\x42\x67\x50\x36\x41\x41\x77\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x67\x41\x41\x4C\x41\x42\x4D\x41\x46\x77\x41\x41\x4D\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x6A\x45\x53\x45\x5A\x41\x6A\x4D\x56\x4D\x7A\x55\x7A\x45\x51\x45\x31\x4D\x78\x57\x41\x41\x59\x43\x41\x67\x50\x36\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x77\x44\x2F\x41\x41\x45\x41\x2F\x51\x41\x42\x67\x50\x36\x41\x41\x77\x41\x42\x41\x49\x43\x41\x2F\x77\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x42\x55\x41\x41\x44\x45\x52\x4D\x78\x55\x7A\x4E\x53\x4D\x31\x49\x52\x55\x68\x46\x54\x4D\x56\x49\x78\x45\x68\x46\x53\x45\x52\x49\x78\x47\x41\x67\x49\x41\x43\x41\x50\x38\x41\x67\x49\x41\x42\x41\x50\x36\x41\x67\x41\x4D\x41\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x6F\x43\x41\x41\x67\x44\x2B\x41\x41\x41\x41\x41\x41\x41\x48\x41\x41\x44\x2F\x41\x41\x4B\x41\x41\x34\x41\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x48\x77\x41\x41\x41\x54\x55\x6A\x4E\x53\x45\x56\x4D\x78\x55\x44\x4E\x54\x4D\x56\x4A\x54\x55\x68\x46\x54\x30\x42\x4D\x78\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x53\x55\x31\x49\x52\x55\x42\x67\x49\x41\x42\x41\x49\x43\x41\x67\x50\x34\x41\x41\x59\x43\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x43\x41\x50\x34\x41\x41\x59\x43\x41\x67\x49\x43\x41\x67\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x51\x41\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x45\x52\x49\x52\x55\x68\x46\x53\x45\x56\x49\x52\x45\x68\x46\x51\x45\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x41\x6F\x44\x2B\x41\x41\x45\x41\x2F\x77\x41\x43\x41\x50\x36\x41\x67\x50\x38\x41\x67\x41\x4F\x41\x67\x49\x43\x41\x2F\x6F\x43\x41\x42\x41\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x51\x41\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x45\x52\x49\x52\x55\x68\x46\x53\x45\x56\x49\x52\x45\x68\x46\x51\x45\x31\x4D\x78\x55\x39\x41\x54\x4D\x56\x41\x6F\x44\x2B\x41\x41\x45\x41\x2F\x77\x41\x43\x41\x50\x36\x41\x67\x49\x41\x44\x67\x49\x43\x41\x67\x50\x36\x41\x67\x41\x51\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x46\x41\x41\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x78\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x49\x52\x55\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x43\x67\x50\x34\x41\x41\x51\x44\x2F\x41\x41\x49\x41\x2F\x67\x43\x41\x67\x49\x44\x2F\x41\x49\x41\x44\x67\x49\x43\x41\x67\x50\x36\x41\x67\x41\x51\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x78\x45\x53\x45\x56\x49\x52\x55\x68\x46\x53\x45\x52\x49\x52\x55\x42\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x51\x4B\x41\x2F\x67\x41\x42\x41\x50\x38\x41\x41\x67\x44\x39\x67\x41\x45\x41\x67\x41\x45\x41\x41\x34\x43\x41\x67\x49\x44\x2B\x67\x49\x41\x45\x41\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x42\x41\x41\x51\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x41\x7A\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x6F\x44\x39\x67\x41\x4D\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x77\x43\x41\x41\x41\x41\x42\x67\x41\x51\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x41\x7A\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x54\x30\x42\x4D\x78\x57\x41\x67\x49\x43\x41\x67\x41\x4B\x41\x2F\x59\x41\x44\x41\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x42\x67\x41\x51\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x44\x4D\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x67\x50\x38\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x6F\x44\x39\x67\x41\x4D\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x42\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x41\x7A\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x57\x41\x67\x50\x38\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4D\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x76\x2B\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x45\x77\x41\x41\x4A\x52\x45\x7A\x45\x51\x55\x52\x49\x7A\x55\x7A\x45\x53\x45\x56\x49\x52\x45\x68\x46\x53\x45\x52\x49\x52\x55\x43\x41\x49\x44\x39\x67\x49\x43\x41\x41\x67\x44\x2B\x67\x41\x45\x41\x2F\x77\x41\x42\x67\x49\x41\x43\x67\x50\x32\x41\x67\x41\x47\x41\x67\x41\x47\x41\x67\x50\x38\x41\x67\x50\x38\x41\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x43\x77\x41\x54\x41\x42\x63\x41\x41\x41\x45\x31\x4D\x78\x55\x42\x45\x54\x4D\x56\x4D\x78\x55\x6A\x45\x53\x45\x52\x49\x7A\x55\x7A\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x41\x67\x50\x36\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x49\x44\x2B\x41\x41\x47\x41\x41\x67\x43\x41\x67\x50\x34\x41\x41\x34\x43\x41\x67\x50\x32\x41\x41\x59\x43\x41\x41\x59\x44\x38\x67\x41\x51\x41\x67\x49\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x55\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x47\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x51\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x55\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x46\x51\x41\x5A\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x41\x7A\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x67\x49\x41\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x41\x43\x67\x50\x32\x41\x41\x6F\x44\x39\x67\x41\x4F\x41\x67\x49\x44\x2F\x41\x49\x41\x42\x41\x50\x36\x41\x41\x59\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x50\x32\x41\x41\x6F\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x41\x47\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x49\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x41\x41\x45\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4B\x41\x2F\x59\x41\x43\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x6B\x41\x41\x41\x43\x41\x41\x6F\x41\x44\x41\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x42\x38\x41\x49\x77\x41\x41\x50\x51\x45\x7A\x46\x53\x45\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x67\x41\x47\x41\x67\x50\x34\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x44\x2B\x41\x49\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x38\x41\x46\x77\x41\x62\x41\x41\x41\x7A\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x51\x45\x52\x4D\x78\x45\x7A\x46\x53\x4D\x56\x49\x52\x45\x6A\x4E\x54\x4D\x31\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x77\x43\x41\x2F\x6F\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x41\x47\x41\x67\x49\x44\x2F\x41\x41\x4B\x41\x2F\x6F\x43\x41\x67\x41\x47\x41\x67\x49\x44\x39\x67\x41\x4B\x41\x67\x49\x41\x41\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x49\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x36\x41\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x4D\x41\x2F\x51\x41\x44\x41\x50\x30\x41\x41\x77\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x51\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x4D\x7A\x55\x68\x46\x53\x55\x52\x4D\x78\x45\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x67\x49\x43\x41\x67\x49\x43\x41\x41\x77\x44\x39\x41\x41\x4D\x41\x2F\x51\x41\x44\x41\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x49\x43\x41\x67\x41\x4D\x41\x2F\x51\x41\x44\x41\x50\x30\x41\x41\x34\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x42\x49\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x32\x41\x41\x51\x43\x41\x41\x51\x43\x41\x67\x49\x41\x44\x41\x50\x30\x41\x41\x77\x44\x39\x41\x41\x4F\x41\x67\x49\x43\x41\x67\x41\x41\x41\x42\x77\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x41\x43\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x36\x41\x67\x49\x41\x43\x67\x50\x32\x41\x41\x6F\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x44\x77\x41\x41\x41\x52\x45\x7A\x45\x51\x45\x52\x4D\x78\x55\x68\x46\x53\x45\x52\x49\x52\x55\x68\x46\x51\x47\x41\x67\x50\x34\x41\x67\x41\x45\x41\x2F\x77\x41\x42\x41\x50\x38\x41\x41\x51\x41\x42\x67\x50\x36\x41\x2F\x77\x41\x44\x67\x49\x43\x41\x2F\x6F\x43\x41\x67\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x46\x41\x41\x6B\x41\x44\x51\x41\x54\x41\x41\x41\x68\x4E\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x51\x45\x52\x49\x52\x55\x68\x45\x51\x45\x41\x41\x51\x43\x41\x2F\x77\x43\x41\x67\x50\x32\x41\x41\x67\x44\x2B\x67\x49\x41\x42\x41\x50\x36\x41\x41\x59\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x2F\x67\x41\x44\x67\x49\x44\x39\x41\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x49\x54\x55\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x67\x41\x49\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x34\x41\x41\x51\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x38\x41\x41\x51\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x39\x41\x54\x4D\x64\x41\x54\x55\x68\x4E\x53\x45\x31\x49\x54\x55\x7A\x45\x51\x45\x31\x49\x52\x55\x44\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4E\x41\x42\x45\x41\x46\x51\x41\x41\x50\x51\x45\x7A\x48\x51\x45\x31\x49\x54\x55\x68\x4E\x53\x45\x31\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x54\x55\x7A\x46\x59\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x38\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x67\x41\x43\x41\x49\x43\x41\x41\x51\x43\x41\x67\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x44\x51\x41\x52\x41\x42\x55\x41\x41\x44\x30\x42\x4D\x78\x30\x42\x4E\x53\x45\x31\x49\x54\x55\x68\x4E\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2B\x41\x41\x49\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x56\x41\x42\x6B\x41\x41\x44\x30\x42\x4D\x78\x30\x42\x4E\x53\x45\x31\x49\x54\x55\x68\x4E\x54\x4D\x52\x41\x54\x55\x68\x46\x51\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x6F\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x34\x41\x41\x67\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x47\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4E\x41\x42\x45\x41\x46\x51\x41\x5A\x41\x42\x30\x41\x41\x44\x30\x42\x4D\x78\x30\x42\x4E\x53\x45\x31\x49\x54\x55\x68\x4E\x54\x4D\x52\x41\x54\x55\x68\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x4A\x54\x55\x68\x46\x59\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x50\x34\x41\x41\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4B\x41\x41\x41\x4D\x41\x46\x51\x41\x5A\x41\x42\x30\x41\x41\x44\x30\x42\x4D\x78\x30\x42\x4E\x54\x4D\x31\x49\x7A\x55\x7A\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x45\x53\x45\x56\x49\x52\x55\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x59\x43\x41\x67\x49\x43\x41\x67\x49\x44\x2F\x41\x41\x45\x41\x2F\x67\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x77\x43\x41\x67\x41\x49\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x67\x41\x41\x50\x38\x41\x41\x6F\x41\x44\x41\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x46\x77\x41\x62\x41\x42\x38\x41\x41\x42\x45\x31\x49\x52\x55\x39\x41\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x55\x31\x49\x52\x55\x39\x41\x54\x4D\x56\x49\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x55\x6C\x4E\x53\x45\x56\x41\x51\x41\x42\x41\x49\x44\x2B\x41\x41\x47\x41\x67\x50\x32\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x46\x53\x45\x31\x4D\x78\x45\x68\x46\x52\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x67\x41\x49\x41\x2F\x59\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x34\x41\x41\x51\x43\x41\x67\x49\x41\x42\x67\x49\x43\x41\x2F\x77\x43\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x44\x51\x41\x52\x41\x42\x55\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x56\x49\x54\x55\x7A\x45\x53\x45\x56\x45\x54\x55\x68\x46\x51\x4D\x31\x49\x52\x57\x41\x41\x67\x44\x39\x67\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x50\x38\x41\x67\x41\x47\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x46\x53\x45\x31\x4D\x78\x45\x68\x46\x52\x45\x31\x49\x52\x55\x42\x4E\x54\x4D\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x38\x41\x67\x49\x43\x41\x67\x41\x47\x41\x67\x49\x44\x2F\x41\x49\x41\x42\x67\x49\x43\x41\x41\x51\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4E\x41\x42\x45\x41\x46\x51\x41\x5A\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x46\x53\x45\x31\x4D\x78\x45\x68\x46\x52\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x4D\x7A\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x41\x41\x45\x41\x67\x41\x45\x41\x67\x49\x43\x41\x41\x59\x43\x41\x67\x50\x38\x41\x67\x41\x47\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x41\x41\x67\x41\x41\x41\x41\x41\x42\x41\x41\x51\x41\x41\x41\x4D\x41\x42\x77\x41\x41\x4D\x78\x45\x7A\x45\x51\x45\x52\x4D\x78\x47\x41\x67\x50\x38\x41\x67\x41\x4B\x41\x2F\x59\x41\x44\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x51\x41\x45\x41\x41\x41\x44\x41\x41\x63\x41\x41\x44\x45\x52\x4D\x78\x6B\x43\x4D\x78\x47\x41\x67\x41\x4B\x41\x2F\x59\x41\x44\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x49\x41\x45\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x41\x4D\x52\x45\x7A\x45\x51\x4D\x31\x4D\x78\x55\x44\x4E\x54\x4D\x56\x67\x49\x43\x41\x67\x49\x41\x43\x67\x50\x32\x41\x41\x77\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x41\x59\x41\x45\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x41\x41\x7A\x45\x54\x4D\x52\x41\x7A\x55\x7A\x46\x51\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x67\x49\x43\x41\x67\x50\x38\x41\x67\x49\x43\x41\x41\x6F\x44\x39\x67\x41\x4D\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x45\x41\x41\x41\x44\x41\x41\x63\x41\x46\x77\x41\x41\x4E\x52\x45\x7A\x47\x51\x45\x31\x4D\x78\x55\x44\x4E\x53\x45\x52\x49\x54\x55\x68\x4E\x53\x45\x31\x4D\x7A\x55\x7A\x46\x54\x4D\x52\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x4D\x41\x67\x49\x44\x38\x67\x49\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x2F\x49\x41\x41\x41\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x51\x41\x4E\x41\x41\x41\x68\x45\x54\x4D\x52\x49\x52\x45\x68\x46\x53\x45\x5A\x41\x54\x55\x68\x46\x51\x49\x41\x67\x50\x32\x41\x41\x67\x44\x2B\x67\x41\x47\x41\x41\x67\x44\x2B\x41\x41\x4B\x41\x67\x50\x34\x41\x41\x77\x43\x41\x67\x41\x41\x46\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x44\x77\x41\x54\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x54\x55\x68\x46\x59\x41\x42\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x34\x41\x41\x59\x44\x2B\x41\x41\x45\x41\x67\x49\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x43\x41\x41\x51\x43\x41\x67\x41\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x44\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x49\x41\x42\x41\x49\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x41\x41\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x50\x51\x45\x7A\x46\x53\x55\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x67\x50\x34\x41\x41\x59\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x55\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x44\x4D\x31\x49\x52\x55\x6C\x45\x54\x4D\x52\x49\x52\x45\x7A\x45\x51\x45\x31\x49\x52\x55\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x2F\x67\x43\x41\x41\x59\x43\x41\x2F\x67\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x67\x49\x41\x42\x67\x50\x36\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x49\x41\x42\x41\x49\x43\x41\x41\x41\x41\x41\x42\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x7A\x4E\x53\x45\x56\x4A\x52\x45\x7A\x45\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x41\x54\x55\x68\x46\x54\x4D\x31\x49\x52\x57\x41\x41\x59\x44\x2B\x41\x49\x41\x42\x67\x49\x44\x2B\x41\x41\x47\x41\x2F\x67\x41\x42\x41\x49\x41\x42\x41\x49\x43\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x50\x36\x41\x41\x59\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4D\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x73\x41\x41\x43\x45\x52\x49\x52\x45\x42\x4E\x53\x45\x56\x41\x52\x45\x68\x45\x51\x45\x41\x41\x51\x44\x2B\x41\x41\x4D\x41\x2F\x67\x41\x42\x41\x41\x45\x41\x2F\x77\x41\x42\x67\x49\x43\x41\x41\x51\x41\x42\x41\x50\x38\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x43\x67\x41\x41\x44\x41\x41\x30\x41\x46\x77\x41\x41\x41\x54\x55\x7A\x46\x51\x45\x31\x49\x78\x45\x7A\x45\x54\x4D\x56\x49\x52\x55\x31\x45\x53\x4D\x31\x49\x54\x55\x68\x46\x54\x4D\x52\x41\x51\x43\x41\x2F\x77\x43\x41\x67\x49\x41\x42\x41\x49\x44\x2F\x41\x41\x47\x41\x67\x41\x45\x41\x67\x49\x44\x2F\x41\x49\x41\x42\x67\x50\x38\x41\x67\x49\x43\x41\x41\x51\x43\x41\x67\x49\x44\x2B\x67\x41\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x51\x41\x4E\x41\x41\x41\x31\x45\x54\x4D\x52\x46\x54\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x68\x46\x59\x41\x42\x67\x49\x44\x39\x67\x41\x45\x41\x67\x41\x49\x41\x2F\x67\x43\x41\x67\x41\x49\x41\x2F\x59\x41\x44\x41\x49\x43\x41\x41\x41\x41\x44\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x4A\x41\x41\x30\x41\x41\x44\x55\x52\x4D\x78\x45\x56\x4E\x53\x45\x52\x4D\x78\x45\x42\x4E\x53\x45\x56\x67\x41\x47\x41\x67\x50\x38\x41\x41\x51\x43\x41\x41\x67\x44\x2B\x41\x49\x43\x41\x41\x67\x44\x39\x67\x41\x4D\x41\x67\x49\x41\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x6B\x41\x44\x51\x41\x41\x4E\x52\x45\x7A\x45\x52\x55\x31\x49\x52\x45\x7A\x45\x51\x45\x31\x4D\x78\x57\x41\x41\x59\x43\x41\x2F\x6F\x43\x41\x67\x41\x49\x41\x2F\x67\x43\x41\x67\x41\x49\x41\x2F\x59\x41\x44\x41\x49\x43\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x51\x41\x4E\x41\x42\x45\x41\x41\x44\x55\x52\x4D\x78\x45\x56\x4E\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x59\x41\x42\x67\x49\x44\x2B\x41\x49\x43\x41\x67\x49\x41\x43\x41\x50\x34\x41\x67\x49\x41\x43\x41\x50\x32\x41\x41\x77\x43\x41\x67\x49\x43\x41\x41\x41\x55\x41\x41\x50\x2B\x41\x41\x6F\x41\x44\x67\x41\x41\x44\x41\x41\x63\x41\x44\x77\x41\x54\x41\x42\x63\x41\x41\x42\x55\x31\x49\x52\x55\x42\x45\x54\x4D\x52\x41\x54\x55\x68\x4E\x53\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x50\x51\x45\x7A\x46\x51\x49\x41\x2F\x67\x43\x41\x41\x59\x44\x2B\x67\x41\x47\x41\x67\x50\x36\x41\x67\x49\x43\x41\x67\x49\x41\x42\x67\x41\x47\x41\x2F\x6F\x44\x2F\x41\x49\x43\x41\x41\x59\x44\x39\x67\x41\x4B\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x43\x41\x41\x44\x2F\x67\x41\x47\x41\x41\x77\x41\x41\x41\x77\x41\x50\x41\x41\x41\x42\x4E\x54\x4D\x56\x41\x52\x45\x7A\x45\x54\x4D\x56\x49\x78\x55\x7A\x46\x53\x4D\x52\x41\x51\x43\x41\x2F\x6F\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x44\x2B\x67\x41\x4F\x41\x2F\x77\x43\x41\x67\x49\x44\x2F\x41\x41\x41\x41\x41\x41\x41\x46\x41\x41\x44\x2F\x67\x41\x4B\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x38\x41\x45\x77\x41\x58\x41\x41\x41\x56\x4E\x53\x45\x56\x41\x52\x45\x7A\x45\x51\x45\x31\x49\x54\x55\x68\x45\x54\x4D\x52\x41\x54\x55\x7A\x46\x54\x4D\x31\x4D\x78\x55\x43\x41\x50\x34\x41\x67\x41\x47\x41\x2F\x6F\x41\x42\x67\x49\x44\x2B\x41\x49\x43\x41\x67\x49\x43\x41\x67\x41\x47\x41\x41\x59\x44\x2B\x67\x50\x38\x41\x67\x49\x41\x42\x67\x50\x32\x41\x41\x77\x43\x41\x67\x49\x43\x41\x41\x41\x41\x41\x42\x77\x41\x41\x41\x41\x41\x43\x67\x41\x53\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x58\x41\x42\x73\x41\x41\x43\x45\x52\x4D\x78\x45\x42\x4E\x54\x4D\x56\x4D\x7A\x55\x7A\x46\x53\x55\x31\x4D\x78\x55\x68\x4E\x54\x4D\x56\x41\x54\x55\x68\x46\x54\x4D\x31\x49\x52\x55\x42\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x50\x34\x41\x67\x41\x47\x41\x67\x50\x32\x41\x41\x51\x43\x41\x41\x51\x41\x43\x67\x50\x32\x41\x41\x6F\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x49\x43\x41\x67\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x4D\x41\x43\x77\x41\x52\x41\x41\x41\x68\x4E\x53\x45\x56\x4E\x52\x45\x6A\x4E\x54\x4D\x52\x4D\x78\x45\x46\x45\x53\x45\x56\x49\x52\x45\x42\x41\x41\x45\x41\x67\x49\x43\x41\x2F\x59\x41\x43\x41\x50\x36\x41\x67\x49\x43\x41\x41\x51\x43\x41\x41\x51\x44\x39\x67\x49\x41\x44\x67\x49\x44\x39\x41\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x42\x67\x41\x4B\x41\x41\x67\x41\x41\x41\x77\x41\x41\x45\x54\x55\x68\x46\x51\x4B\x41\x41\x59\x43\x41\x67\x41\x41\x43\x41\x41\x41\x43\x41\x41\x45\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x52\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x59\x43\x41\x41\x67\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x41\x41\x43\x41\x41\x41\x43\x41\x41\x45\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x52\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x59\x43\x41\x41\x67\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x41\x45\x41\x41\x59\x41\x41\x41\x77\x41\x48\x41\x41\x41\x78\x4E\x54\x4D\x56\x4E\x52\x45\x7A\x45\x59\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x41\x41\x41\x43\x41\x41\x41\x43\x41\x41\x45\x41\x41\x34\x41\x41\x41\x77\x41\x48\x41\x41\x41\x54\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x59\x43\x41\x2F\x77\x43\x41\x41\x67\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x67\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x42\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x47\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x41\x49\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x42\x41\x41\x41\x41\x67\x41\x43\x41\x41\x4F\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x42\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x47\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x41\x49\x41\x67\x49\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x44\x2F\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x43\x41\x41\x47\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x41\x44\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x4A\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x47\x41\x67\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x73\x41\x41\x43\x45\x52\x49\x54\x55\x68\x45\x54\x4D\x52\x49\x52\x55\x68\x45\x51\x45\x41\x2F\x77\x41\x42\x41\x49\x41\x42\x41\x50\x38\x41\x41\x67\x43\x41\x41\x51\x44\x2F\x41\x49\x44\x2B\x41\x41\x41\x41\x41\x51\x41\x41\x41\x51\x41\x42\x67\x41\x4B\x41\x41\x41\x73\x41\x41\x42\x4D\x31\x49\x7A\x55\x7A\x4E\x54\x4D\x56\x4D\x78\x55\x6A\x46\x59\x43\x41\x67\x49\x43\x41\x67\x41\x45\x41\x67\x49\x43\x41\x67\x49\x43\x41\x41\x41\x4D\x41\x41\x41\x41\x41\x41\x6F\x41\x42\x41\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x41\x4D\x52\x45\x7A\x45\x54\x4D\x52\x4D\x78\x45\x7A\x45\x54\x4D\x52\x67\x49\x43\x41\x67\x49\x41\x42\x41\x50\x38\x41\x41\x51\x44\x2F\x41\x41\x45\x41\x2F\x77\x41\x41\x41\x41\x55\x41\x41\x41\x43\x41\x41\x59\x41\x44\x41\x41\x41\x44\x41\x41\x63\x41\x43\x77\x41\x50\x41\x42\x4D\x41\x41\x43\x55\x31\x4D\x78\x55\x6C\x4E\x54\x4D\x56\x4A\x54\x55\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x41\x51\x43\x41\x2F\x77\x43\x41\x2F\x77\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x42\x51\x41\x41\x41\x49\x41\x42\x67\x41\x4D\x41\x41\x41\x4D\x41\x42\x77\x41\x4C\x41\x41\x38\x41\x45\x77\x41\x41\x50\x51\x45\x7A\x46\x54\x30\x42\x4D\x78\x55\x39\x41\x54\x4D\x56\x4A\x54\x55\x7A\x46\x53\x55\x31\x4D\x78\x57\x41\x67\x49\x44\x2F\x41\x49\x44\x2F\x41\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x42\x41\x41\x41\x41\x41\x41\x4B\x41\x41\x34\x41\x41\x46\x77\x41\x41\x49\x54\x55\x6A\x4E\x53\x4D\x52\x4D\x7A\x55\x7A\x4E\x53\x45\x56\x49\x52\x55\x6A\x46\x53\x45\x56\x49\x52\x55\x7A\x46\x53\x45\x56\x41\x51\x43\x41\x67\x49\x43\x41\x41\x59\x44\x2F\x41\x49\x41\x42\x67\x50\x36\x41\x67\x41\x45\x41\x67\x49\x41\x42\x67\x49\x43\x41\x67\x49\x43\x41\x67\x49\x43\x41\x67\x41\x41\x41\x41\x41\x41\x42\x41\x41\x41\x43\x41\x41\x4D\x41\x41\x34\x41\x41\x44\x77\x41\x41\x45\x78\x45\x6A\x4E\x53\x45\x56\x4D\x7A\x55\x7A\x46\x54\x4D\x52\x49\x54\x55\x6A\x46\x59\x43\x41\x41\x59\x43\x41\x67\x49\x44\x2F\x41\x49\x41\x43\x41\x41\x45\x41\x67\x49\x43\x41\x67\x50\x38\x41\x67\x49\x41\x41\x41\x77\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x30\x41\x45\x51\x41\x56\x41\x41\x41\x7A\x45\x53\x4D\x31\x4D\x7A\x55\x7A\x46\x53\x45\x52\x49\x78\x45\x68\x47\x51\x45\x31\x4D\x78\x55\x7A\x4E\x54\x4D\x56\x67\x49\x43\x41\x67\x41\x47\x41\x67\x50\x38\x41\x67\x49\x43\x41\x41\x67\x43\x41\x67\x49\x44\x39\x67\x41\x49\x41\x2F\x67\x41\x44\x41\x49\x43\x41\x67\x49\x41\x41\x41\x41\x41\x41\x41\x67\x41\x41\x41\x41\x41\x43\x67\x41\x4F\x41\x41\x41\x73\x41\x45\x51\x41\x41\x4D\x78\x45\x6A\x4E\x54\x4D\x31\x4D\x78\x55\x7A\x46\x53\x4D\x52\x49\x52\x45\x68\x4E\x53\x45\x52\x67\x49\x43\x41\x67\x49\x43\x41\x41\x51\x44\x2F\x41\x41\x47\x41\x41\x67\x43\x41\x67\x49\x43\x41\x2F\x67\x41\x44\x41\x49\x44\x38\x67\x41\x41\x41\x41\x41\x41\x65\x41\x57\x34\x41\x41\x51\x41\x41\x41\x41\x41\x41\x41\x41\x41\x57\x41\x43\x34\x41\x41\x51\x41\x41\x41\x41\x41\x41\x41\x51\x41\x4C\x41\x46\x30\x41\x41\x51\x41\x41\x41\x41\x41\x41\x41\x67\x41\x48\x41\x48\x6B\x41\x41\x51\x41\x41\x41\x41\x41\x41\x41\x77\x41\x4C\x41\x4A\x6B\x41\x41\x51\x41\x41\x41\x41\x41\x41\x42\x41\x41\x54\x41\x4D\x30\x41\x41\x51\x41\x41\x41\x41\x41\x41\x42\x51\x41\x4C\x41\x50\x6B\x41\x41\x51\x41\x41\x41\x41\x41\x41\x42\x67\x41\x4C\x41\x52\x30\x41\x41\x51\x41\x41\x41\x41\x41\x41\x43\x41\x41\x4D\x41\x55\x4D\x41\x41\x51\x41\x41\x41\x41\x41\x41\x43\x51\x41\x4D\x41\x57\x6F\x41\x41\x51\x41\x41\x41\x41\x41\x41\x43\x67\x41\x42\x41\x58\x73\x41\x41\x51\x41\x41\x41\x41\x41\x41\x43\x77\x41\x61\x41\x62\x4D\x41\x41\x51\x41\x41\x41\x41\x41\x41\x44\x41\x41\x61\x41\x67\x51\x41\x41\x51\x41\x41\x41\x41\x41\x41\x44\x51\x41\x6F\x41\x6E\x45\x41\x41\x51\x41\x41\x41\x41\x41\x41\x44\x67\x41\x75\x41\x76\x67\x41\x41\x51\x41\x41\x41\x41\x41\x41\x45\x77\x41\x70\x41\x33\x73\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x41\x41\x41\x73\x41\x41\x41\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x41\x51\x41\x57\x41\x45\x55\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x41\x67\x41\x4F\x41\x47\x6B\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x41\x77\x41\x57\x41\x49\x45\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x42\x41\x41\x6D\x41\x4B\x55\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x42\x51\x41\x57\x41\x4F\x45\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x42\x67\x41\x57\x41\x51\x55\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x43\x41\x41\x59\x41\x53\x6B\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x43\x51\x41\x59\x41\x56\x41\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x43\x67\x41\x43\x41\x58\x63\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x43\x77\x41\x30\x41\x58\x30\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x44\x41\x41\x30\x41\x63\x34\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x44\x51\x42\x51\x41\x68\x38\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x44\x67\x42\x63\x41\x70\x6F\x41\x41\x77\x41\x42\x42\x41\x6B\x41\x45\x77\x42\x53\x41\x79\x63\x41\x51\x77\x42\x76\x41\x48\x41\x41\x65\x51\x42\x79\x41\x47\x6B\x41\x5A\x77\x42\x6F\x41\x48\x51\x41\x49\x41\x42\x42\x41\x47\x34\x41\x5A\x41\x42\x79\x41\x47\x55\x41\x64\x77\x41\x67\x41\x46\x51\x41\x65\x51\x42\x73\x41\x47\x55\x41\x63\x67\x41\x41\x51\x32\x39\x77\x65\x58\x4A\x70\x5A\x32\x68\x30\x49\x45\x46\x75\x5A\x48\x4A\x6C\x64\x79\x42\x55\x65\x57\x78\x6C\x63\x67\x41\x41\x54\x51\x42\x70\x41\x47\x34\x41\x5A\x51\x42\x6A\x41\x48\x49\x41\x59\x51\x42\x6D\x41\x48\x51\x41\x61\x51\x42\x68\x41\x41\x42\x4E\x61\x57\x35\x6C\x59\x33\x4A\x68\x5A\x6E\x52\x70\x59\x51\x41\x41\x55\x67\x42\x6C\x41\x47\x63\x41\x64\x51\x42\x73\x41\x47\x45\x41\x63\x67\x41\x41\x55\x6D\x56\x6E\x64\x57\x78\x68\x63\x67\x41\x41\x54\x51\x42\x70\x41\x47\x34\x41\x5A\x51\x42\x6A\x41\x48\x49\x41\x59\x51\x42\x6D\x41\x48\x51\x41\x61\x51\x42\x68\x41\x41\x42\x4E\x61\x57\x35\x6C\x59\x33\x4A\x68\x5A\x6E\x52\x70\x59\x51\x41\x41\x54\x51\x42\x70\x41\x47\x34\x41\x5A\x51\x42\x6A\x41\x48\x49\x41\x59\x51\x42\x6D\x41\x48\x51\x41\x61\x51\x42\x68\x41\x43\x41\x41\x55\x67\x42\x6C\x41\x47\x63\x41\x64\x51\x42\x73\x41\x47\x45\x41\x63\x67\x41\x41\x54\x57\x6C\x75\x5A\x57\x4E\x79\x59\x57\x5A\x30\x61\x57\x45\x67\x55\x6D\x56\x6E\x64\x57\x78\x68\x63\x67\x41\x41\x56\x67\x42\x6C\x41\x48\x49\x41\x63\x77\x42\x70\x41\x47\x38\x41\x62\x67\x41\x67\x41\x44\x45\x41\x4C\x67\x41\x77\x41\x41\x42\x57\x5A\x58\x4A\x7A\x61\x57\x39\x75\x49\x44\x45\x75\x4D\x41\x41\x41\x54\x51\x42\x70\x41\x47\x34\x41\x5A\x51\x42\x6A\x41\x48\x49\x41\x59\x51\x42\x6D\x41\x48\x51\x41\x61\x51\x42\x68\x41\x41\x42\x4E\x61\x57\x35\x6C\x59\x33\x4A\x68\x5A\x6E\x52\x70\x59\x51\x41\x41\x51\x51\x42\x75\x41\x47\x51\x41\x63\x67\x42\x6C\x41\x48\x63\x41\x49\x41\x42\x55\x41\x48\x6B\x41\x62\x41\x42\x6C\x41\x48\x49\x41\x41\x45\x46\x75\x5A\x48\x4A\x6C\x64\x79\x42\x55\x65\x57\x78\x6C\x63\x67\x41\x41\x51\x51\x42\x75\x41\x47\x51\x41\x63\x67\x42\x6C\x41\x48\x63\x41\x49\x41\x42\x55\x41\x48\x6B\x41\x62\x41\x42\x6C\x41\x48\x49\x41\x41\x45\x46\x75\x5A\x48\x4A\x6C\x64\x79\x42\x55\x65\x57\x78\x6C\x63\x67\x41\x41\x43\x67\x41\x41\x43\x67\x41\x41\x61\x41\x42\x30\x41\x48\x51\x41\x63\x41\x41\x36\x41\x43\x38\x41\x4C\x77\x42\x33\x41\x48\x63\x41\x64\x77\x41\x75\x41\x47\x45\x41\x62\x67\x42\x6B\x41\x48\x49\x41\x5A\x51\x42\x33\x41\x48\x51\x41\x65\x51\x42\x73\x41\x47\x55\x41\x63\x67\x41\x75\x41\x47\x34\x41\x5A\x51\x42\x30\x41\x41\x42\x6F\x64\x48\x52\x77\x4F\x69\x38\x76\x64\x33\x64\x33\x4C\x6D\x46\x75\x5A\x48\x4A\x6C\x64\x33\x52\x35\x62\x47\x56\x79\x4C\x6D\x35\x6C\x64\x41\x41\x41\x61\x41\x42\x30\x41\x48\x51\x41\x63\x41\x41\x36\x41\x43\x38\x41\x4C\x77\x42\x33\x41\x48\x63\x41\x64\x77\x41\x75\x41\x47\x45\x41\x62\x67\x42\x6B\x41\x48\x49\x41\x5A\x51\x42\x33\x41\x48\x51\x41\x65\x51\x42\x73\x41\x47\x55\x41\x63\x67\x41\x75\x41\x47\x34\x41\x5A\x51\x42\x30\x41\x41\x42\x6F\x64\x48\x52\x77\x4F\x69\x38\x76\x64\x33\x64\x33\x4C\x6D\x46\x75\x5A\x48\x4A\x6C\x64\x33\x52\x35\x62\x47\x56\x79\x4C\x6D\x35\x6C\x64\x41\x41\x41\x51\x77\x42\x79\x41\x47\x55\x41\x59\x51\x42\x30\x41\x47\x6B\x41\x64\x67\x42\x6C\x41\x43\x41\x41\x51\x77\x42\x76\x41\x47\x30\x41\x62\x51\x42\x76\x41\x47\x34\x41\x63\x77\x41\x67\x41\x45\x45\x41\x64\x41\x42\x30\x41\x48\x49\x41\x61\x51\x42\x69\x41\x48\x55\x41\x64\x41\x42\x70\x41\x47\x38\x41\x62\x67\x41\x67\x41\x46\x4D\x41\x61\x41\x42\x68\x41\x48\x49\x41\x5A\x51\x41\x67\x41\x45\x45\x41\x62\x41\x42\x70\x41\x47\x73\x41\x5A\x51\x41\x41\x51\x33\x4A\x6C\x59\x58\x52\x70\x64\x6D\x55\x67\x51\x32\x39\x74\x62\x57\x39\x75\x63\x79\x42\x42\x64\x48\x52\x79\x61\x57\x4A\x31\x64\x47\x6C\x76\x62\x69\x42\x54\x61\x47\x46\x79\x5A\x53\x42\x42\x62\x47\x6C\x72\x5A\x51\x41\x41\x61\x41\x42\x30\x41\x48\x51\x41\x63\x41\x41\x36\x41\x43\x38\x41\x4C\x77\x42\x6A\x41\x48\x49\x41\x5A\x51\x42\x68\x41\x48\x51\x41\x61\x51\x42\x32\x41\x47\x55\x41\x59\x77\x42\x76\x41\x47\x30\x41\x62\x51\x42\x76\x41\x47\x34\x41\x63\x77\x41\x75\x41\x47\x38\x41\x63\x67\x42\x6E\x41\x43\x38\x41\x62\x41\x42\x70\x41\x47\x4D\x41\x5A\x51\x42\x75\x41\x48\x4D\x41\x5A\x51\x42\x7A\x41\x43\x38\x41\x59\x67\x42\x35\x41\x43\x30\x41\x63\x77\x42\x68\x41\x43\x38\x41\x4D\x77\x41\x75\x41\x44\x41\x41\x4C\x77\x41\x41\x61\x48\x52\x30\x63\x44\x6F\x76\x4C\x32\x4E\x79\x5A\x57\x46\x30\x61\x58\x5A\x6C\x59\x32\x39\x74\x62\x57\x39\x75\x63\x79\x35\x76\x63\x6D\x63\x76\x62\x47\x6C\x6A\x5A\x57\x35\x7A\x5A\x58\x4D\x76\x59\x6E\x6B\x74\x63\x32\x45\x76\x4D\x79\x34\x77\x4C\x77\x41\x41\x52\x67\x42\x70\x41\x48\x59\x41\x5A\x51\x41\x67\x41\x47\x49\x41\x61\x51\x42\x6E\x41\x43\x41\x41\x63\x51\x42\x31\x41\x47\x45\x41\x59\x77\x42\x72\x41\x47\x6B\x41\x62\x67\x42\x6E\x41\x43\x41\x41\x65\x67\x42\x6C\x41\x48\x41\x41\x61\x41\x42\x35\x41\x48\x49\x41\x63\x77\x41\x67\x41\x47\x6F\x41\x62\x77\x42\x73\x41\x48\x51\x41\x49\x41\x42\x74\x41\x48\x6B\x41\x49\x41\x42\x33\x41\x47\x45\x41\x65\x41\x41\x67\x41\x47\x49\x41\x5A\x51\x42\x6B\x41\x41\x42\x47\x61\x58\x5A\x6C\x49\x47\x4A\x70\x5A\x79\x42\x78\x64\x57\x46\x6A\x61\x32\x6C\x75\x5A\x79\x42\x36\x5A\x58\x42\x6F\x65\x58\x4A\x7A\x49\x47\x70\x76\x62\x48\x51\x67\x62\x58\x6B\x67\x64\x32\x46\x34\x49\x47\x4A\x6C\x5A\x41\x41\x41\x41\x41\x49\x41\x41\x41\x41\x41\x41\x41\x41\x41\x59\x67\x41\x7A\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x31\x41\x41\x41\x41\x51\x49\x42\x41\x77\x41\x44\x41\x41\x51\x41\x42\x51\x41\x47\x41\x41\x63\x41\x43\x41\x41\x4A\x41\x41\x6F\x41\x43\x77\x41\x4D\x41\x41\x30\x41\x44\x67\x41\x50\x41\x42\x41\x41\x45\x51\x41\x53\x41\x42\x4D\x41\x46\x41\x41\x56\x41\x42\x59\x41\x46\x77\x41\x59\x41\x42\x6B\x41\x47\x67\x41\x62\x41\x42\x77\x41\x48\x51\x41\x65\x41\x42\x38\x41\x49\x41\x41\x68\x41\x43\x49\x41\x49\x77\x41\x6B\x41\x43\x55\x41\x4A\x67\x41\x6E\x41\x43\x67\x41\x4B\x51\x41\x71\x41\x43\x73\x41\x4C\x41\x41\x74\x41\x43\x34\x41\x4C\x77\x41\x77\x41\x44\x45\x41\x4D\x67\x41\x7A\x41\x44\x51\x41\x4E\x51\x41\x32\x41\x44\x63\x41\x4F\x41\x41\x35\x41\x44\x6F\x41\x4F\x77\x41\x38\x41\x44\x30\x41\x50\x67\x41\x2F\x41\x45\x41\x41\x51\x51\x42\x43\x41\x45\x4D\x41\x52\x41\x42\x46\x41\x45\x59\x41\x52\x77\x42\x49\x41\x45\x6B\x41\x53\x67\x42\x4C\x41\x45\x77\x41\x54\x51\x42\x4F\x41\x45\x38\x41\x55\x41\x42\x52\x41\x46\x49\x41\x55\x77\x42\x55\x41\x46\x55\x41\x56\x67\x42\x58\x41\x46\x67\x41\x57\x51\x42\x61\x41\x46\x73\x41\x58\x41\x42\x64\x41\x46\x34\x41\x58\x77\x42\x67\x41\x47\x45\x41\x6F\x77\x43\x45\x41\x49\x55\x41\x76\x51\x43\x57\x41\x4F\x67\x41\x68\x67\x43\x4F\x41\x49\x73\x41\x6E\x51\x43\x70\x41\x4B\x51\x42\x42\x41\x43\x4B\x41\x4E\x6F\x41\x67\x77\x43\x54\x41\x51\x55\x42\x42\x67\x43\x4E\x41\x51\x63\x41\x69\x41\x44\x44\x41\x4E\x34\x42\x43\x41\x43\x65\x41\x4B\x6F\x41\x39\x51\x44\x30\x41\x50\x59\x41\x6F\x67\x43\x74\x41\x4D\x6B\x41\x78\x77\x43\x75\x41\x47\x49\x41\x59\x77\x43\x51\x41\x47\x51\x41\x79\x77\x42\x6C\x41\x4D\x67\x41\x79\x67\x44\x50\x41\x4D\x77\x41\x7A\x51\x44\x4F\x41\x4F\x6B\x41\x5A\x67\x44\x54\x41\x4E\x41\x41\x30\x51\x43\x76\x41\x47\x63\x41\x38\x41\x43\x52\x41\x4E\x59\x41\x31\x41\x44\x56\x41\x47\x67\x41\x36\x77\x44\x74\x41\x49\x6B\x41\x61\x67\x42\x70\x41\x47\x73\x41\x62\x51\x42\x73\x41\x47\x34\x41\x6F\x41\x42\x76\x41\x48\x45\x41\x63\x41\x42\x79\x41\x48\x4D\x41\x64\x51\x42\x30\x41\x48\x59\x41\x64\x77\x44\x71\x41\x48\x67\x41\x65\x67\x42\x35\x41\x48\x73\x41\x66\x51\x42\x38\x41\x4C\x67\x41\x6F\x51\x42\x2F\x41\x48\x34\x41\x67\x41\x43\x42\x41\x4F\x77\x41\x37\x67\x43\x36\x41\x4C\x73\x42\x43\x51\x43\x7A\x41\x4C\x59\x41\x74\x77\x44\x45\x41\x51\x6F\x41\x74\x41\x43\x31\x41\x4D\x55\x41\x67\x67\x43\x48\x41\x4B\x73\x41\x76\x67\x43\x2F\x41\x51\x73\x41\x6A\x41\x45\x4D\x41\x51\x30\x47\x5A\x32\x78\x35\x63\x47\x67\x78\x42\x6D\x64\x73\x65\x58\x42\x6F\x4D\x67\x64\x31\x62\x6D\x6B\x77\x4D\x45\x46\x45\x42\x33\x56\x75\x61\x54\x41\x77\x51\x6A\x49\x48\x64\x57\x35\x70\x4D\x44\x42\x43\x4D\x77\x64\x31\x62\x6D\x6B\x77\x4D\x45\x49\x31\x42\x33\x56\x75\x61\x54\x41\x77\x51\x6A\x6B\x48\x64\x57\x35\x70\x4D\x55\x55\x35\x52\x51\x31\x78\x64\x57\x39\x30\x5A\x58\x4A\x6C\x64\x6D\x56\x79\x63\x32\x56\x6B\x42\x45\x56\x31\x63\x6D\x38\x48\x64\x57\x35\x70\x52\x6B\x49\x77\x4D\x51\x64\x31\x62\x6D\x6C\x47\x51\x6A\x41\x79\x41\x41\x41\x41\x41\x41\x48\x2F\x2F\x77\x41\x43\x41\x41\x45\x41\x41\x41\x41\x4F\x41\x41\x41\x41\x47\x41\x41\x67\x41\x41\x41\x41\x41\x67\x41\x42\x41\x41\x45\x41\x30\x77\x41\x42\x41\x41\x51\x41\x41\x41\x41\x43\x41\x41\x41\x41\x41\x51\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x41\x41\x45\x41\x41\x41\x41\x41\x79\x59\x6C\x76\x4D\x51\x41\x41\x41\x41\x44\x4B\x38\x48\x71\x74\x41\x41\x41\x41\x41\x4D\x74\x50\x46\x71\x6B\x3D\x20", "\x67\x65\x74\x41\x62\x73\x6F\x6C\x75\x74\x65\x50\x61\x74\x68", "\x67\x65\x74\x45\x78\x74\x65\x72\x6E\x61\x6C\x53\x74\x6F\x72\x61\x67\x65\x44\x69\x72\x65\x63\x74\x6F\x72\x79", "\x45\x6E\x76\x69\x72\x6F\x6E\x6D\x65\x6E\x74", "\x6F\x73", "\x2F\x67\x61\x6D\x65\x73\x2F\x63\x6F\x6D\x2E\x6D\x6F\x6A\x61\x6E\x67\x2F\x6D\x69\x6E\x65\x63\x72\x61\x66\x74\x2E\x74\x74\x66", "\x69\x6F", "\x65\x78\x69\x73\x74\x73", "\x63\x72\x65\x61\x74\x65\x4E\x65\x77\x46\x69\x6C\x65", "\x64\x65\x63\x6F\x64\x65", "\x42\x61\x73\x65\x36\x34", "\x75\x74\x69\x6C", "\x77\x72\x69\x74\x65", "\x63\x6C\x6F\x73\x65", "\x63\x72\x65\x61\x74\x65\x46\x72\x6F\x6D\x46\x69\x6C\x65", "\x54\x79\x70\x65\x66\x61\x63\x65", "", "\x6D\x61\x6B\x65\x54\x65\x78\x74", "\x4D\x61\x74\x72\x69\x78\x48\x61\x63\x6B\x3A\x20", "\x3A\x20"]
funcS = {
File: {
InstinctDir: android.os.Environment.getExternalStorageDirectory() + "games/Instinct/",
getTextFromFile: function(file) {
let readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
let data = new java.lang.StringBuilder();
let string;
while ((string = readed.readLine()) != null) data.append(string + "\n");
return data.toString();
},
saveTextToFile: function(file, text) {
if (!file.exists()) file.createNewFile();
let bytes = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, text.length());
for (let i = 0; i < text.length(); i++) bytes[i] = text.charCodeAt(i);
let stream = new java.io.FileOutputStream(file);
try {
stream.write(bytes);
} finally {
stream.close();
}
}
},
Render: {
getFloatBuffer: function(fArray) {
let bBuffer = java.nio.ByteBuffer.allocateDirect(fArray.length * 4);
bBuffer.order(java.nio.ByteOrder.nativeOrder());
let fBuffer = bBuffer.asFloatBuffer();
fBuffer.put(fArray);
fBuffer.position(0);
return fBuffer;
},
getShortBuffer: function(sArray) {
let bBuffer = java.nio.ByteBuffer.allocateDirect(sArray.length * 2);
bBuffer.order(java.nio.ByteOrder.nativeOrder());
let sBuffer = bBuffer.asShortBuffer();
sBuffer.put(sArray);
sBuffer.position(0);
return sBuffer;
},
renderer: null,
glSurface: null,
fov: 90,
color: android.graphics.Color.argb(180,255, 0, 0),/*Player*/
colorC: android.graphics.Color.argb(180,255, 0, 0),/*Custom Block*/
color3: android.graphics.Color.argb(180,0, 255, 229),/*Diamond*/
color4: android.graphics.Color.argb(180,0, 255, 25),/*Emerald*/
color5: android.graphics.Color.argb(180,246, 255, 0),/*Gold*/
color6: android.graphics.Color.argb(180,244, 244, 244),/*Iron*/
color7: android.graphics.Color.argb(180,0, 33, 255),/*Lapis*/
color8: android.graphics.Color.argb(180,58, 58, 58),/*Coal*/
color9: android.graphics.Color.argb(180,255, 91, 91),/*Redstone*/

init: function() {
if (rendering) return;
let options = funcS.File.getTextFromFile(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/", "options.txt"));
options = options.split("\n");
options.forEach(function(entry) {
let suboption = entry.split(":");
if (suboption[0] == "gfx_field_of_view") {
funcS.Render.fov = suboption[1];
}
});
this.renderer = new android.opengl.GLSurfaceView.Renderer({
onSurfaceCreated: function(gl, config) {
let GL10 = javax.microedition.khronos.opengles.GL10;
gl.glClearColor(0, 0, 0, 0);
gl.glShadeModel(GL10.GL_SMOOTH);
gl.glClearDepthf(1.0);
gl.glDisable(GL10.GL_DITHER);
gl.glEnable(GL10.GL_DEPTH_TEST);
gl.glDepthFunc(GL10.GL_LEQUAL);
gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);
},
onSurfaceChanged: function(gl, width, height) {
let GL10 = javax.microedition.khronos.opengles.GL10;
gl.glMatrixMode(GL10.GL_PROJECTION);
gl.glLoadIdentity();
android.opengl.GLU.gluPerspective(gl, funcS.Render.fov, width / height, 0.1, 100);
gl.glMatrixMode(GL10.GL_MODELVIEW);
gl.glLoadIdentity();
},
onDrawFrame: function(gl) {
try{
let GL10 = javax.microedition.khronos.opengles.GL10;
gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
gl.glLoadIdentity();

gl.glDisable(GL10.GL_LIGHTING);
if(confirmScreenSafe()){
let yaw = getYaw() % 360;
let pitch = getPitch() % 360;
let eyeX = getPlayerX();
let eyeY = getPlayerY() + 1;
let eyeZ = getPlayerZ();
let dCenterX = Math.sin(yaw / 180 * Math.PI);
let dCenterZ = Math.cos(yaw / 180 * Math.PI);
let dCenterY = Math.sqrt(dCenterX * dCenterX + dCenterZ * dCenterZ) * Math.tan((pitch - 180) / 180 * Math.PI);
let centerX = eyeX - dCenterX;
let centerZ = eyeZ + dCenterZ;
let centerY = eyeY - dCenterY;
android.opengl.GLU.gluLookAt(gl, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, 0, 1.0, 0);

let players = Server.getAllPlayers();
let entitiest = Entity.getAll();
if(esp){
players.forEach(function(entry) {


if (entry != getPlayerEnt() && Entity.getEntityTypeId(entry) == EntityType.PLAYER) {
if(combatESP){
var px = getPlayerX();
var py = getPlayerY();
var pz = getPlayerZ();
var x = Entity.getX(entry) - px;
var y = Entity.getY(entry) - py;
var z = Entity.getZ(entry) - pz;
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
}
if(strokeesp){
if(combatESP&&dist <= 3.4){
funcS.Render.drawBoxOutlineCLOSE(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
}else{
funcS.Render.drawBoxOutline(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
}
}else{
if(combatESP&&dist <= 3.4){
funcS.Render.drawBoxCLOSE(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
}else{
funcS.Render.drawBox(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
}
}

}
});
entitiest.forEach(function(entry) {
	var x = Entity.getX(entry) - getPlayerX();
	var y = Entity.getY(entry) - getPlayerY();
	var z = Entity.getZ(entry) - getPlayerZ();
	var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (entry != getPlayerEnt()) {
	
if(Entity.getEntityTypeId(entry) == EntityType.ITEM){
funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry)+1, Entity.getZ(entry) - 0.5, .5, .5, .5);
}else
if(Entity.getEntityTypeId(entry) == EntityType.PIG||Entity.getEntityTypeId(entry) == EntityType.COW||Entity.getEntityTypeId(entry) == EntityType.SHEEP||Entity.getEntityTypeId(entry) == EntityType.MUSHROOM_COW||Entity.getEntityTypeId(entry) == EntityType.BOAT){
funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry) + 0.5, Entity.getZ(entry) - 0.5, 1, 1, 1);
}else
if(Entity.getEntityTypeId(entry) == EntityType.CREEPER){
funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry), Entity.getZ(entry) - 0.5, 1, 2, 1);
}else
if(Entity.getEntityTypeId(entry) == EntityType.SPIDER){
funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry)+1, Entity.getZ(entry) - 0.5, 2, 1, 2);
}else
if(Entity.getEntityTypeId(entry) == EntityType.GHAST){
funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry), Entity.getZ(entry) - 0.5, 5, 5, 5);
}else
if(Entity.getEntityTypeId(entry) == EntityType.CHICKEN){
funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry)+1, Entity.getZ(entry) - 0.5, .5, .5, .5);
}
else{funcS.Render.drawBoxOutline(gl, Entity.getX(entry), Entity.getY(entry), Entity.getZ(entry) - 0.5, 1, 2, 1);}
}
});
}
if(waypointtracer){	
for(var i=0;i<objectLength(waypoints_W);i++){
if(!waypoints_W[i].removed){
if(waypoints_W[i].active){
waypointtracer=true;
funcS.Render.drawLine(gl, waypoints_W[i].x-.5, waypoints_W[i].y, waypoints_W[i].z -.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
funcS.Render.drawBox(gl, waypoints_W[i].x-1, waypoints_W[i].y+1, waypoints_W[i].z-1, 1, 400, 1,espRed,espGreen,espBlue,0.6);
funcS.Render.drawBox(gl, waypoints_W[i].x-.75, waypoints_W[i].y, waypoints_W[i].z-.75, .5, 1, .5,1,1,1,0.7);
}
}
}}
if(espt){
players.forEach(function (entry) {
if(Entity.getEntityTypeId(entry) == 63) {
if(entry != getPlayerEnt())funcS.Render.drawLine(gl, Entity.getX(entry) - 0.5, Entity.getY(entry)- 0.5, Entity.getZ(entry) + 0.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
}
});
entitiest.forEach(function (entry) {
	var x = Entity.getX(entry) - getPlayerX();
	var y = Entity.getY(entry) - getPlayerY();
	var z = Entity.getZ(entry) - getPlayerZ();
	var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));	
	
	if(dist<100){
funcS.Render.onRender.drawLine(gl, Entity.getX(entry) - 0.5, Entity.getY(entry)- 0.5, Entity.getZ(entry) + 0.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
}

});
}
if(blockEspTracer) { 
espBlocks.forEach(function (entry2) {
if(blockesptracers){
funcS.Render.drawLine(gl, entry2[0], entry2[1]+.5, entry2[2]+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());}

if(entry2[3]==54){
funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,244/255,66/255,209/255, 0.9);//pink
}if(entry2[3]==56){
funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,66/255, 244/255, 244/255, 0.9);//cyan
}if(entry2[3]==15||entry2[3]==42){
funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,244/255, 255/255, 255/255, 0.9);//white
}if(entry2[3]==16||entry2[3]==173){
funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,0/255, 0/255, 0/255, 0.9);//black
}if(entry2[3]==129||entry2[3]==133){
funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,16/255, 255/255, 0/255, 1);//green
}if(entry2[3]==14||entry2[3]==41){
funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,246/255, 255/255, 0/255, 0.8);//gold
}if(entry2[3]==21||entry2[3]==22){
funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,7/255,94/255,255/255,0.5);//lapis
}if(entry2[3]==73||entry2[3]==152){
funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,255/255,0,0,0.5);//redstone
}else{funcS.Render.drawBox(gl, entry2[0]-.5, entry2[1]+.5, entry2[2]+.5, 1,1,1,255/255,255/255,255/255, 0.5);}//pink}

});
}
if(freecamSon){
funcS.Render.drawLine(gl, freeX, freeY+.5, freeZ+.5, getPlayerX(), getPlayerY()-1, getPlayerZ());
}
}
}catch(e){betToast(e)}
}
});
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
funcS.Render.glSurface = new android.opengl.GLSurfaceView(ctx);
funcS.Render.glSurface.setZOrderOnTop(true);
funcS.Render.glSurface.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
funcS.Render.glSurface.getHolder().setFormat(android.graphics.PixelFormat.TRANSLUCENT);
funcS.Render.glSurface.setRenderer(funcS.Render.renderer);
ctx.getWindow().getDecorView().addView(funcS.Render.glSurface);
funcS.Render.initted = true;
}
}));

},
onRender: {
drawLine: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glEnable(GL10.GL_LINE_SMOOTH);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
if(rgbesp){gl.glColor4f(espRed, espGreen, espBlue, 0.5);}
else{gl.glColor4f(espRed, espGreen, espBlue, 0.5);}
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},

},
drawBox: function(gl, x, y, z, xsize, ysize, zsize,r,g,b,a) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glEnable(GL10.GL_LINE_SMOOTH);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
if(r){
gl.glColor4f(r, g, b, a);
}else{
if(rgbesp){
gl.glColor4f(espRed, espGreen, espBlue, 0.5);
}else{
gl.glColor4f(espRed, espGreen, espBlue, 0.5);
}
}

gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawBoxOutline: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(4);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
if(rgbesp){gl.glColor4f(espRed, espGreen, espBlue, 1);}
else{gl.glColor4f(espRed, espGreen, espBlue, 1);}
gl.glDrawElements(GL10.GL_LINES, lineIndices.length, GL10.GL_UNSIGNED_SHORT, lineBuffer);
gl.glColor4f(espRed, espGreen, espBlue, 0);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawLine: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glEnable(GL10.GL_LINE_SMOOTH);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
if(rgbesp){gl.glColor4f(espRed, espGreen, espBlue, 0.5);}
else{gl.glColor4f(espRed, espGreen, espBlue, 0.5);}
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawLineFreecam: function(gl, x, y, z, x2, y2, z2) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(x2, y2, z2);
let vertices = [0, 0, 0, x2 - x, y2 - y, z2 - z];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let indices = [0, 1];
let indexBuffer = funcS.Render.getShortBuffer(indices);
gl.glTranslatef(x, y, z);
gl.glEnable(GL10.GL_BLEND);
gl.glDepthMask(false);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(6);
gl.glColor4f(1, 0, 0, 0.5);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
gl.glTranslatef(-x, -y, -z);
gl.glDepthMask(true);
gl.glDisable(GL10.GL_LINE_SMOOTH);
},
drawBoxCLOSE: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(7);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(1, 0, 0, 0.5);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
drawBoxOutlineCLOSE: function(gl, x, y, z, xsize, ysize, zsize) {
let GL10 = javax.microedition.khronos.opengles.GL10;
let size = new Array(xsize, ysize, zsize);
let vertices = [0, 0, 0, size[0], 0, 0, 0, 0, size[2], size[0], 0, size[2], 0, size[1], 0, size[0], size[1], 0, 0, size[1], size[2], size[0], size[1], size[2]];
let vertexBuffer = funcS.Render.getFloatBuffer(vertices);
let lineIndices = [0, 1, 0, 2, 0, 4, 3, 1, 3, 2, 3, 7, 5, 4, 5, 7, 5, 1, 6, 4, 6, 7, 6, 2];
let polyIndices = [0, 1, 4, 1, 4, 5, 2, 3, 6, 7, 6, 3, 1, 3, 7, 7, 1, 5, 0, 2, 6, 6, 0, 4, 0, 1, 2, 3, 1, 2, 4, 5, 6, 7, 5, 6];
let lineBuffer = funcS.Render.getShortBuffer(lineIndices);
let polyBuffer = funcS.Render.getShortBuffer(polyIndices);
gl.glTranslatef(x, y, z);
gl.glFrontFace(GL10.GL_CCW);
gl.glEnable(GL10.GL_BLEND);
gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
gl.glLineWidth(4);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glColor4f(1, 0, 0, 1);
gl.glDrawElements(GL10.GL_LINES, lineIndices.length, GL10.GL_UNSIGNED_SHORT, lineBuffer);
gl.glColor4f(1, 0, 0, 0);
gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
gl.glDisable(GL10.GL_LINE_SMOOTH);
gl.glTranslatef(-x, -y, -z);
},
DrawText: function(gl,size,text){
try{
var texture=[0,1,0,0,1,1,1,0];
var mVertices=[
-size,-size,0,
-size, size,0,
size,-size,0,
size, size,0
];
var vbb=java.nio.ByteBuffer.allocateDirect(mVertices.length*4);
vbb.order(java.nio.ByteOrder.nativeOrder());
var mVertexBuffer=vbb.asFloatBuffer();
mVertexBuffer.put(mVertices);
mVertexBuffer.position(0);
vbb=java.nio.ByteBuffer.allocateDirect(texture.length*4);
vbb.order(java.nio.ByteOrder.nativeOrder());
var mTextureBuffer=vbb.asFloatBuffer();
mTextureBuffer.put(texture);
mTextureBuffer.position(0);
gl.glBindTexture(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,textures[0]);
gl.glEnableClientState(javax.microedition.khronos.opengles.GL10.GL_VERTEX_ARRAY);
gl.glEnableClientState(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_COORD_ARRAY);
gl.glFrontFace(javax.microedition.khronos.opengles.GL10.GL_CW);
gl.glVertexPointer(3,javax.microedition.khronos.opengles.GL10.GL_FLOAT,0,mVertexBuffer);
gl.glTexCoordPointer(2,javax.microedition.khronos.opengles.GL10.GL_FLOAT,0,mTextureBuffer);
gl.glDrawArrays(javax.microedition.khronos.opengles.GL10.GL_TRIANGLE_STRIP,0,mVertices.length/3);
gl.glDisableClientState(javax.microedition.khronos.opengles.GL10.GL_VERTEX_ARRAY);
gl.glDisableClientState(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_COORD_ARRAY);

var bitmap=android.graphics.Bitmap.createBitmap(512,512,android.graphics.Bitmap.Config.ARGB_4444);
var canvas=new android.graphics.Canvas(bitmap);
bitmap.eraseColor(0);
var textPaint=new android.graphics.Paint();
textPaint.setTextSize(32);
textPaint.setAntiAlias(true);
textPaint.setColor(android.graphics.Color.WHITE);
canvas.drawText(text,(512-text.length)/2,112,textPaint);
gl.glGenTextures(1,textures,0);
gl.glBindTexture(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,textures[0]);
gl.glTexParameterf(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,javax.microedition.khronos.opengles.GL10.GL_TEXTURE_MIN_FILTER,javax.microedition.khronos.opengles.GL10.GL_NEAREST);
gl.glTexParameterf(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,javax.microedition.khronos.opengles.GL10.GL_TEXTURE_MAG_FILTER,javax.microedition.khronos.opengles.GL10.GL_LINEAR);
android.opengl.GLUtils.texImage2D(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,0,bitmap,0);
bitmap.recycle();
}
catch(err){
print(err);
}
}
},
Block: {
isLiquid: function(id) {
if (id >= 8 && id <= 11) return true;
return false;
},
isLadder: function(id) {
if (id == 65) return true;
return false;
},
isWeb: function(id) {
if (id == 30) return true;
return false;
},
isIce: function(id) {
if (id == 79 && id == 174) return true;
return false;
}
},
onRender: function(gl) {
if (!this.state) return;
var all = funcS.Entity.getAll();
var players = Server.getAllPlayers();
var px = getPlayerX();
var py = getPlayerY();
var pz = getPlayerZ();
all.forEach(function(entry) {
var x = Entity.getX(entry) - px;
var y = Entity.getY(entry) - py;
var z = Entity.getZ(entry) - pz;
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist <= 200 && dist > 0.1) funcS.Render.drawLine(gl, px, py + 0.8, pz, Entity.getX(entry), Entity.getY(entry) + 1, Entity.getZ(entry));
});
players.forEach(function(entry) {
var x = Entity.getX(entry) - px;
var y = Entity.getY(entry) - py;
var z = Entity.getZ(entry) - pz;
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist <= 200 && dist > 0.1) funcS.Render.drawLine(gl, px, py + 0.8, pz, Entity.getX(entry), Entity.getY(entry) + 1, Entity.getZ(entry));
});
},
Velocity: {
calculateSpeed: function() {
return Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
}
},
Player: {
isFall: function() {
var velo = -0.07840000092983246;
if (!funcS.Player.onGround() && Entity.getVelY(Player.getEntity()) < velo) return true;
return false;
},
isAutoEagle: function() {
if (getTile(getPlayerX() + 0.0001, getPlayerY() - 2, getPlayerZ() + 0.0001) == 0 || getTile(getPlayerX() - 0.0001, getPlayerY() - 2, getPlayerZ() - 0.0001) == 0 || getTile(getPlayerX() + 0.0001, getPlayerY() - 2, getPlayerZ() - 0.0001) == 0 || getTile(getPlayerX() - 0.0001, getPlayerY() - 2, getPlayerZ() + 0.0001) == 0) return true;
return false;
},
isInWater: function() {
if (funcS.Block.isLiquid(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 1.65, Entity.getZ(getPlayerEnt())))) {
return true;
} else {
return false;
}
},
isInIce: function() {
if (funcS.Block.isIce(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 0.1, Entity.getZ(getPlayerEnt())))) {
return true;
} else {
return false;
}
},
isOnWeb: function() {
if (funcS.Block.isWeb(getTile(Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()) - 0.1, Entity.getZ(getPlayerEnt())))) {
return true;
} else {
return false;
}
},
Text: {
replaceAll: function(_0x2bf6x23, _0x2bf6x24, messagesent) {
var _0x2bf6x26 = messagesent;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
}
},
isOnLadder: function() {
if (funcS.Block.isLadder(getTile(getPlayerX(), getPlayerY() + 0.1, getPlayerZ()))) return true;
return false;
},
onGround: function() {
var y = getPlayerY();
while (y > 1) y -= 1;
if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
return false;
},
overGround: function() {
var y = getPlayerY();
while (y > 2) y -= 2;
if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) != 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) != 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
return false;
},
inAir: function() {
var y = getPlayerY();
while (y > 2) y -= 2;
if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) == 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) == 0 && !funcS.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
return false;
},
isCollidedHorizontally: function() {
var x = getPlayerX();
var z = getPlayerZ();
var blockX = Math.round(x - 0.5);
var blockZ = Math.round(z - 0.5);
while (x < 1) x += 1;
while (z < 1) z += 1;
while (x > 1) x -= 1;
while (z > 1) z -= 1;
if (Math.round(x * 100) == 31) x -= 0.01;
if (Math.round(z * 100) == 31) z -= 0.01;
if (Math.round(x * 100) == 69) x += 0.01;
if (Math.round(z * 100) == 69) z += 0.01;
if (Math.round(x * 100) == 30) blockX--;
if (Math.round(z * 100) == 30) blockZ--;
if (Math.round(x * 100) == 70) blockX++;
if (Math.round(z * 100) == 70) blockZ++;
if (getTile(blockX, Entity.getY(getPlayerEnt()), blockZ) == 0 && getTile(blockX, Entity.getY(getPlayerEnt()) - 1, blockZ) == 0) return false;
if (Block.getDestroyTime(getTile(blockX, Entity.getY(getPlayerEnt()) - 1, blockZ)) <= 0.1 && Block.getDestroyTime(getTile(blockX, Entity.getY(getPlayerEnt()), blockZ)) <= 0.1) return false;
if (Math.round(x * 100) == 30 || Math.round(x * 100) == 70) return true;
if (Math.round(z * 100) == 30 || Math.round(z * 100) == 70) return true;
return false;
}
},
Vel: {
lastX: 0,
lastY: 0,
lastZ: 0,
calculateSpeed: function() {
return Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
}
},
Text: {
clean: function (text) {
var allColor = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "k", "l", "m", "n", "o", "r"];

if(text != null) {

allColor.forEach(function (entry) {
text = text.replace(new RegExp("\u00A7" + entry, 'g'), "");
});
return text;
} else
return "";
}
}
},
Minecraft = {
ping: function() {
return ping();
},
Url: {
getUrlContents: function(url, result) {
let t = new java.lang.Thread(new java.lang.Runnable({
run: function() {
try {
let u = new java.net.URL(url);
let allCont = new java.lang.StringBuilder();
let con = u.openConnection();
con.setIfModifiedSince(0);
con.setRequestProperty("User-Agent", "Mozilla/5.0");
con.setRequestProperty("Accept-Encoding", "UTF-8");
let reader = new java.io.BufferedReader(new java.io.InputStreamReader(con.getInputStream(), "UTF-8"));
let line = "";
while ((line = reader.readLine()) != null) allCont.append(line + "\n");
reader.close();
result(allCont.toString(), null);
} catch (e) {
betToast(e);
result(null, e);
}
}
}));
t.start();
}
},
Block: {
isLiquid: function(id) {
if (id >= 8 && id <= 11) return true;
return false;
},
isLadder: function(id) {
if (id == 65) return true;
return false;
},
isWeb: function(id) {
if (id == 30) return true;
return false;
},
isIce: function(id) {
if (id == 79 && id == 174) return true;
return false;
},
setDestroyTimeAll: function(destroyTime) {
for (i = 0; i < 256; i++) {
Block.setDestroyTime(i, destroyTime);
}
},
setDestroyTimeDefaultAll: function() {
for (i = 0; i < 256; i++) {
Block.setDestroyTime(i, defaultDestroyTimeAll[i]);
}
}
},
Player: {
isInWater: function() {
if (Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 0.01, getPlayerZ()))) return true;
return false;
},
isOnWater: function() {
if (Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ()))) return true;
return false;
},
isOnLava: function() {
if (getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ())) return true;
return false;
},
isOnIce: function() {
if (Minecraft.Block.isIce(getTile(getPlayerX(), getPlayerY() - 0.1, getPlayerZ()))) return true;
return false;
},
isOnLadder: function() {
if (Minecraft.Block.isLadder(getTile(getPlayerX(), getPlayerY() + 0.1, getPlayerZ()))) return true;
return false;
},
onGround: function() {
var y = getPlayerY();
while (y > 1) y -= 1;
if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
return false;
},
isAtEdge: function() {
if (getTile(getPlayerX() + 0.0001, getPlayerY() - 2, getPlayerZ() + 0.0001) == 0 || getTile(getPlayerX() - 0.0001, getPlayerY() - 2, getPlayerZ() - 0.0001) == 0 || getTile(getPlayerX() + 0.0001, getPlayerY() - 2, getPlayerZ() - 0.0001) == 0 || getTile(getPlayerX() - 0.0001, getPlayerY() - 2, getPlayerZ() + 0.0001) == 0) return true;
return false;
},
overGround: function() {
var a = getPlayerY();
while (a > 2) a -= 2;
if (62 == Math.round(100 * a) && 0 != getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) && !Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
if (12 == Math.round(100 * a) && 0 != getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) && !Minecraft.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
return false;
},
isCollidedHorizontally: function() {
var x = getPlayerX();
var z = getPlayerZ();
var blockX = Math.round(x - 0.5);
var blockZ = Math.round(z - 0.5);
while (x < 1) x += 1;
while (z < 1) z += 1;
while (x > 1) x -= 1;
while (z > 1) z -= 1;
if (Math.round(x * 100) == 31) x -= 0.01;
if (Math.round(z * 100) == 31) z -= 0.01;
if (Math.round(x * 100) == 69) x += 0.01;
if (Math.round(z * 100) == 69) z += 0.01;
if (Math.round(x * 100) == 30) blockX--;
if (Math.round(z * 100) == 30) blockZ--;
if (Math.round(x * 100) == 70) blockX++;
if (Math.round(z * 100) == 70) blockZ++;
if (getTile(blockX, getPlayerY(), blockZ) == 0 && getTile(blockX, getPlayerY() - 1, blockZ) == 0) return false;
if (Block.getDestroyTime(getTile(blockX, getPlayerY() - 1, blockZ)) <= 0.1 && Block.getDestroyTime(getTile(blockX, getPlayerY(), blockZ)) <= 0.1) return false;
if (Math.round(x * 100) == 30 || Math.round(x * 100) == 70) return true;
if (Math.round(z * 100) == 30 || Math.round(z * 100) == 70) return true;
return false;
},
isFalling: function() {
var velocity = gravity;
if (!Minecraft.Player.onGround() && Entity.getVelY(Player.getEntity()) < velocity) return true;
return false;
},
toDirectionalVector: function(vector, yaw, pitch) {
vector[0] = Math.cos(yaw) * Math.cos(pitch);
vector[1] = Math.sin(pitch);
vector[2] = Math.sin(yaw) * Math.cos(pitch);
}
},
getFov: function() {
var file = new File_("/sdcard/games/com.mojang/minecraftpe/options.txt");
var br = new BufferedReader_(new InputStreamReader_(new FileInputStream_(file)));
var read, fov;
while ((read = br.readLine()) != null) {
if (read.split(":")[0] == "gfx_field_of_view") {
fov = read.split(":")[1];
break;
}
}
br.close();
return fov;
},
getPlayerName: function() {
var file = new File_("/sdcard/games/com.mojang/minecraftpe/options.txt");
var br = new BufferedReader_(new InputStreamReader_(new FileInputStream_(file)));
var read, username;
while ((read = br.readLine()) != null) {
if (read.split(":")[0] == "mp_username") {
username = read.split(":")[1];
break;
}
}
br.close();
return username;
},
getRenderDistance: function() {
var file = new File("/sdcard/games/com.mojang/minecraftpe/options.txt");
var br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
var read, username;
while ((read = br.readLine()) != null) {
if (read.split(":")[0] == "gfx_renderdistance_new") {
return Math.round(parseInt(read.split(":")[0], 10) / 16);
}
}
br.close();
return 6;
},
changeClientId: function(clientId) {
var fileOutputStream = new FileOutputStream_(new File_(Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/clientId.txt"));
var outputStreamWriter = new OutputStreamWriter(fileOutputStream);
outputStreamWriter.write(clientId.toString());
outputStreamWriter.close();
fileOutputStream.close();
},
Entity: {
allEntitys: new Array(),
aimAt: function(x, y, z) {
var velocity = 1;
var posX = x - getPlayerX();
var posY = y - getPlayerY();
var posZ = z - getPlayerZ();
var realYaw = (Math.atan2(posZ, posX) * 180 / Math.PI) - 90;
var y2 = Math.sqrt(posX * posX + posZ * posZ);
var g = 0.007;
var tmp = (velocity * velocity * velocity * velocity - g * (g * (y2 * y2) + 2 * posY * (velocity * velocity)));
var pitch = -(180 / Math.PI) * (Math.atan((velocity * velocity - Math.sqrt(tmp)) / (g * y2)));
if (pitch < 89 && pitch > -89) {
oldYaw = newYaw;
newYaw = realYaw;
var dist = Math.sqrt(Math.pow(posX, 2) + Math.pow(posY, 2) + Math.pow(posZ, 2));
yaw = realYaw + (newYaw - oldYaw) * (dist * dist / dist) / (120 / 45);
Entity.setRot(getPlayerEnt(), yaw, pitch);
}
},
aimAtEnt: function(ent) {
if (Entity.getEntityTypeId(ent) == EntityType.PLAYER && Entity.getNameTag(ent) == "") return;
var x = Entity.getX(ent);
var y = Entity.getEntityTypeId(ent) == EntityType.PLAYER ? Entity.getY(ent) : Entity.getY(ent) + 1;
var z = Entity.getZ(ent);
this.aimAt(x, y, z);
},
nextEnt: function() {
var mobs = Entity.getAll();
var players = Server.getAllPlayers();
var small = maximalrange;
var ent = null;
for (var i = 0; i < mobs.length; i++) {
var x = Entity.getX(mobs[i]) - getPlayerX();
var y = Entity.getY(mobs[i]) - getPlayerY();
var z = Entity.getZ(mobs[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
if (aimmobs == true) {
small = dist;
ent = mobs[i]
}
}
}
for (var i = 0; i < players.length; i++) {
var x = Entity.getX(players[i]) - getPlayerX();
var y = Entity.getY(players[i]) - getPlayerY();
var z = Entity.getZ(players[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
if (aimplayer == true) {
small = dist;
ent = players[i];
}
}
}
return ent;
}
}
};

function getNearestPlayer(maxrange) {
try{
var mobs = Entity.getAll();
var players = Server.getAllPlayers();
var small = maxrange;
var ent = null;
for (var i = 0; i < mobs.length; i++) {
var x = Entity.getX(mobs[i]) - getPlayerX();
var y = Entity.getY(mobs[i]) - getPlayerY();
var z = Entity.getZ(mobs[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
small = dist;
ent = mobs[i];
}
}
for (var i = 0; i < players.length; i++) {
var x = Entity.getX(players[i]) - getPlayerX();
var y = Entity.getY(players[i]) - getPlayerY();
var z = Entity.getZ(players[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
small = dist;
ent = players[i];
}
}
return ent;}catch(e){return null;betToast(e);}
};
var indicLo=new android.widget.ImageView(activity);
var comBac=new android.widget.ImageView(activity);
try{
var font = mcfont64,
mcfont, 
file = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraft.ttf");
if (!file.exists()) {
file.createNewFile();
var stream = new java.io.FileOutputStream(file);
stream.write(android.util.Base64.decode(mcfont64, 0));
stream.close();
};
var mcfontpath4 = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "minecraft.ttf");
try{
mcfont = new android.graphics.Typeface.createFromFile(mcfontpath4);
}catch (err) {
mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)
}
}catch(e){mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)}
var enabledScripts = net.zhuoweizhang.mcpelauncher.ScriptManager.getEnabledScripts();
var scriptString = enabledScripts.toString();
var scripttrim = scriptString.slice(1,-1);
//betToast(scripttrim);
/*for (var i = 0; i < enabledScripts.length; i++) {
clientMessage(enabledScripts[i]);
}*/
function updateIn2() {
var ru  = new java.lang.Runnable() {
run: function() {
try {
betToast("Downloading...");

var urls= new java.net.URL("http://instinctmods.com/instinct.js");
var check = urls.openConnection();
check.setRequestMethod("GET");
check.setDoOutput(true);
check.connect();
check.getContentLength();
var script = check.getInputStream();
var typeb = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
var byteCount = 0;
while((byteCount = script.read(typeb)) != -1) { 
updateMod += new java.lang.String(typeb, 0, byteCount);               
}
var modpeFolder = ctx.getDir("modscripts", 0);
var modpeFile = new java.io.File(modpeFolder, "instinct.js");
var update = new java.io.PrintWriter(modpeFile);
update.write(updateMod);
update.flush();
update.close();

try {

//net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(modpeFile, true);
}
catch(err) {
clientMessage(err.lineNumber+" Error: \n" + err);
}
}
catch(err) {
clientMessage(err.lineNumber+" Error: \n" + err);
}
}
}
var threadt = new java.lang.Thread(ru);
threadt.start();
}
function restyle(){
of.setStroke(1, themeStroke); 
of.setColor(android.graphics.Color.BLACK); 
of.setCornerRadius(10);
}
function tohtml(strin,boo,type){
var str = decodeURIComponent(strin.toString());
if(type==null){
if(str.includes("[ON]")){
str = str.replace("[ON]","");
str = str.slice(1);
str = str.slice(1);
}
if(str.includes("[OFF]")){
str = str.replace("[OFF]","");
str = str.slice(1);
str = str.slice(1);
}
if(boo){
var statuss="<font color=#00ff04>[ON]</font>";
}else{
var statuss="<font color=#ff0000>[OFF]</font>";
}
var htmld = Html.fromHtml("<font color="+modTextColor+">&#8203 &#8203"+str+"</font>    <b>"+statuss)
return htmld
}
if(type=="list"){
if(str.includes("[Close ▲]")){
str = str.replace("[Close ▲]","");
str = str.slice(1);
str = str.slice(1);
}
if(str.includes("[Open ▼]")){
str = str.replace("[Open ▼]","");
str = str.slice(1);
str = str.slice(1);
}
if(boo){
var statuss="<font color=#00FFFF>[Close ▲]</font>";
}else{
var statuss="<font color=#00FFFF>[Open ▼]</font>";
}
var htmld = Html.fromHtml("<font color="+modTextColor+">&#8203 &#8203"+str+"</font>    <b>"+statuss)
return htmld
}
}

function restartClient() {
try {
let alarmManager = ctx.getSystemService("alarm"),
intent = ctx.getPackageManager().getLaunchIntentForPackage(ctx.getPackageName());
intent.addFlags(335544320);
alarmManager.set(3, SystemClock.elapsedRealtime() + 500, PendingIntent.getActivity(ctx, 0, intent, 0));
new File(ctx.getFilesDir() + "/running.lock").delete();
new Thread({
run() {
Thread.sleep(500);
System.exit(0);
}
}).start();
} catch (e) {
print("@" + e.lineNumber + ": " + e);
}
};
function replaceAll(_0x2bf6x23, _0x2bf6x24, _0x2bf6x25) {
var _0x2bf6x26 = _0x2bf6x25;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
};
function convertToCode(messagesent) {
function replaceAll(_0x2bf6x23, _0x2bf6x24, messagesent) {
var _0x2bf6x26 = messagesent;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
};
var _0x2bf6x26 = messagesent.toUpperCase();
var _0x2bf6x1b6 = new Array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
var _0x2bf6x1b7 = new Array('4', '8', '(', '|}', '3', '|=', 'G', '|-|', '1', '_|', '|<', '|_', '|^|', 'N', '0', '|)', 'Q', 'R', '5', '7', '|_|', 'V', 'W', 'X', 'Y', 'Z');
for (i = 0; i < _0x2bf6x1b6.length; i++) {
_0x2bf6x26 = replaceAll(_0x2bf6x1b6[i], _0x2bf6x1b7[i], _0x2bf6x26);
};
return _0x2bf6x26
};
/*------------------------------------------------------------*/
function instinctDecode(messagesent) {
function replaceAll(_0x2bf6x23, _0x2bf6x24, messagesent) {
var _0x2bf6x26 = messagesent;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
};
var _0x2bf6x26 = messagesent;
var _0x2bf6x1b7 = new Array(' ','A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
//converts that v to that ^
var _0x2bf6x1b6 = new Array(' ้',' ๊', ' ๋', ' ः', '᠃', '〳', '܄‎', '᛬', '︰', '！', 'ǃ', 'ⵑ', '‼', 'ʔ', 'Ɂ', 'Ꭾ', '૰', '∕', '⁄', 'ᑔ', 'ᑝ', 'ᑟ', 'ᑡ', 'ᑣ', '༌', '՝', '′');
for (i = 0; i < _0x2bf6x1b6.length; i++) {
_0x2bf6x26 = replaceAll(_0x2bf6x1b6[i], _0x2bf6x1b7[i], _0x2bf6x26);
};
return _0x2bf6x26.toLowerCase();
};
/*------------------------------------------------------------*/
function instinctEncode(messagesent) {
function replaceAll(_0x2bf6x23, _0x2bf6x24, messagesent) {
var _0x2bf6x26 = messagesent;
return _0x2bf6x26['replace'](new RegExp(_0x2bf6x23, 'g'), _0x2bf6x24)
};
var _0x2bf6x26 = messagesent.toUpperCase();
var _0x2bf6x1b6 = new Array(' ','A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');
//converts that ^ to that v
var _0x2bf6x1b7 = new Array(' ้',' ๊', ' ๋', ' ः', '᠃', ‎'〳', '܄‎', '᛬', '︰', '！', 'ǃ', 'ⵑ', '‼', 'ʔ', 'Ɂ', 'Ꭾ', '૰', '∕', '⁄', 'ᑔ', 'ᑝ', 'ᑟ', 'ᑡ', 'ᑣ', '༌', '՝', '′');
for (i = 0; i < _0x2bf6x1b6.length; i++) {
_0x2bf6x26 = replaceAll(_0x2bf6x1b6[i], _0x2bf6x1b7[i], _0x2bf6x26);
};
return _0x2bf6x26
};
/*------------------------------------------------------------*/
function chatReceiveHook(str, sender) { 
preTranslatedChat=appendChatTrans(str);
if(chatTranslator&&!str.includes("[IX]")){
if(translateWindowIsOpen){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{

translateWindow.dismiss();
translateWindowIsOpen=false;
openTranslator();
}
catch(err){}}}));
}}
if(str.charAt(0)=='['&&str.charAt(1)=='I'&&str.charAt(2)=='X'){
clientMessage("§b"+sender+": "+instinctDecode(str));
var splitcode=str.split("[IX]");

if(chatTranslator){
preTranslatedChat=appendChatTrans(instinctDecode(splitcode[1]));
if(translateWindowIsOpen){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
translateWindow.dismiss();
translateWindowIsOpen=false;
openTranslator();
}
catch(err){}}}));
}}
}
if(chlog){
saveLog(sender,str)
}
if(antispammer){
if(str==spammsg1){
preventDefault();
}else{spammsg1=str}
}
if(chatlinks&&sender!=Player.getName(getPlayerEnt())){
if(str.charAt(0)=='h'&&str.charAt(1)=='t'&&str.charAt(2)=='t'&&str.charAt(3)=='p'||str.charAt(0)=='w'&&str.charAt(1)=='w'&&str.charAt(2)=='w'){
chatWeb(str);
}}

}

function saveLog(sender,message){
try{
var path_F=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
java.io.File(path_F).mkdirs();
var newFile=new java.io.File(path_F,"Instinct_ChatLog.txt");
var file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/", "Instinct_ChatLog.txt");
if(!file.exists()){newFile.createNewFile();}
var outWrite=new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile,true));

outWrite.append(Calendar.getInstance().getTime()+": <"+sender+"> "+message+"\n");

outWrite.close();
}
catch(err){
clientMessage(err);
}
}

function appendChatTrans(string){
var cleanedch = cleanString(string);
var formattedStr= cleanedch.split(" ").join('#');
return formattedStr;

}

/*
Images
*/

mPlayer = new MediaPlayer();
mPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
function playMusic(url){
if(mPlayer.isPlaying()){
stopMusic();
}
mPlayer = new MediaPlayer();
mPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
mPlayer.setDataSource(url);
mPlayer.prepare();
mPlayer.start();
songCounter++;
musicPlayed.push(url);
}
function pauseMusic(){
mPlayer.pause();
musicTime = mPlayer.getCurrentPosition();
}
function resumeMusic(){
mPlayer.seekTo(musicTime);
mPlayer.start();
}
function toggleMusic(){
if(mPlayer.isPlaying()){
pauseMusic();
}else{
resumeMusic();
}
}
function stopMusic(){
mPlayer.stop();
}
function getMusicTitle(){
return musicTitles[nextSongQ];
}
function getMusicArtist(){
return musicArtists[nextSongQ];
}
function getMusicTime(){
return mPlayer.getCurrentPosition()/1000;//seconds
}
function getMusicDuration(){
return mPlayer.getDuration()/1000;//seconds
}
function musicSeekTo(time){
mPlayer.seekTo(time/1000);//seconds
}
function nextSong(){
if(nextSongQ>=(musicLinks.length-1)){
nextSongQ = 0;
}else{
nextSongQ++;
}
if(!shuffleMusic){
playMusic(musicLinks[nextSongQ]);
}else{

}
}
function previousSong(){
nextSongQ--;
playMusic(musicPlayed[nextSongQ]);
removeFromArray(musicPlayed,musicPlayed[nextSongQ+1]);
}
function toggleShuffleMusic(){
shuffleMusic ? shuffleMusic=false : shuffleMusic=true;
}

var musicLinks = ["https://www.dropbox.com/s/tvbrmnf868sqvk8/Tobu%20-%20Turn%20It%20Up.mp3?dl=1","https://www.dropbox.com/s/dpwps6xpfo2dnxu/Maryn%20feat.%20Shel%20Bee%20-%20Shake%20You%20Off%20%5BNCS%20Release%5D.mp3?dl=1","https://www.dropbox.com/s/lwqfwnfnifzdh27/Star%20Party%20-%20Legends%20%5BNCS%20Release%5D.mp3?dl=1","https://www.dropbox.com/s/6ss4ht26yq3pbu9/NIVIRO%20-%20Flashes.mp3?dl=1"];
var musicTitles = ["Turn It Up","Shake You Off","Legends","Flashes"];
var musicArtists = ["Tobu","Maryn","Star Party","NIVIRO"];
var musicFavorites = [];
var musicPlayed = [];
var songCounter = 0;
var nextSongQ = 0;
/*------------------------------------------------------------*/
// String utils
//
// resources:
//  -- mout, https://github.com/mout/mout/tree/master/src/string

try{
Player.addItemCreativeInv(119, 1); Player.addItemCreativeInv(90, 1); Player.addItemCreativeInv(-161, 1); Player.addItemCreativeInv(137, 1); Player.addItemCreativeInv(188, 1); Player.addItemCreativeInv(189, 1);Player.addItemCreativeInv(209, 1); Player.addItemCreativeInv(246, 1); Player.addItemCreativeInv(247, 1); Player.addItemCreativeInv(252, 1);
}catch(e){}

function removeFromArray(array, value) { var idx = array.indexOf(value); if (idx !== -1) { array.splice(idx, 1); } return array; }

/**
* "Safer" String.toLowerCase()
*/
function lowerCase(str){
return str.toLowerCase();
}

/**
* "Safer" String.toUpperCase()
*/
function upperCase(str){
return str.toUpperCase();
}

/**
* Convert string to camelCase text.
*/
function camelCase(str){
str = replaceAccents(str);
str = removeNonWord(str)
.replace(/\-/g, ' ') //convert all hyphens to spaces
.replace(/\s[a-z]/g, upperCase) //convert first char of each word to UPPERCASE
.replace(/\s+/g, '') //remove spaces
.replace(/^[A-Z]/g, lowerCase); //convert first char to lowercase
return str;
}

/**
* Add space between camelCase text.
*/
function unCamelCase(str){
str = str.replace(/([a-z\xE0-\xFF])([A-Z\xC0\xDF])/g, '$1 $2');
str = str.toLowerCase(); //add space between camelCase text
return str;
}

/**
* UPPERCASE first char of each word.
*/
function properCase(str){
return lowerCase(str).replace(/^\w|\s\w/g, upperCase);
}

/**
* camelCase + UPPERCASE first char
*/
function pascalCase(str){
return camelCase(str).replace(/^[a-z]/, upperCase);
}

function normalizeLineBreaks(str, lineEnd) {
lineEnd = lineEnd || 'n';

return str
.replace(/rn/g, lineEnd) // DOS
.replace(/r/g, lineEnd)   // Mac
.replace(/n/g, lineEnd);  // Unix
}

/**
* UPPERCASE first char of each sentence and lowercase other chars.
*/
function sentenceCase(str){
// Replace first char of each sentence (new line or after '.\s+') to
// UPPERCASE
return lowerCase(str).replace(/(^\w)|\.\s+(\w)/gm, upperCase);
}

/**
* Convert to lower case, remove accents, remove non-word chars and
* replace spaces with the specified delimeter.
* Does not split camelCase text.
*/
function slugify(str, delimeter){
if (delimeter == null) {
delimeter = "-";
}

str = replaceAccents(str);
str = removeNonWord(str);
str = trim(str) //should come after removeNonWord
.replace(/ +/g, delimeter) //replace spaces with delimeter
.toLowerCase();

return str;
}

/**
* Replaces spaces with hyphens, split camelCase text, remove non-word chars, remove accents and convert to lower case.
*/
function hyphenate(str){
str = unCamelCase(str);
return slugify(str, "-");
}

/**
* Replaces hyphens with spaces. (only hyphens between word chars)
*/
function unhyphenate(str){
return str.replace(/(\w)(-)(\w)/g, '$1 $3');
}

/**
* Replaces spaces with underscores, split camelCase text, remove
* non-word chars, remove accents and convert to lower case.
*/
function underscore(str){
str = unCamelCase(str);
return slugify(str, "_");
}

/**
* Remove non-word chars.
*/
function removeNonWord(str){
return str.replace(/[^0-9a-zA-Z\xC0-\xFF \-]/g, '');
}

/**
* Convert line-breaks from DOS/MAC to a single standard (UNIX by default)
*/
function normalizeLineBreaks(str, lineEnd) {
lineEnd = lineEnd || '\n';

return str
.replace(/\r\n/g, lineEnd) // DOS
.replace(/\r/g, lineEnd)   // Mac
.replace(/\n/g, lineEnd);  // Unix
}

/**
* Replaces all accented chars with regular ones
*/
function replaceAccents(str){
// verifies if the String has accents and replace them
if (str.search(/[\xC0-\xFF]/g) > -1) {
str = str
.replace(/[\xC0-\xC5]/g, "A")
.replace(/[\xC6]/g, "AE")
.replace(/[\xC7]/g, "C")
.replace(/[\xC8-\xCB]/g, "E")
.replace(/[\xCC-\xCF]/g, "I")
.replace(/[\xD0]/g, "D")
.replace(/[\xD1]/g, "N")
.replace(/[\xD2-\xD6\xD8]/g, "O")
.replace(/[\xD9-\xDC]/g, "U")
.replace(/[\xDD]/g, "Y")
.replace(/[\xDE]/g, "P")
.replace(/[\xE0-\xE5]/g, "a")
.replace(/[\xE6]/g, "ae")
.replace(/[\xE7]/g, "c")
.replace(/[\xE8-\xEB]/g, "e")
.replace(/[\xEC-\xEF]/g, "i")
.replace(/[\xF1]/g, "n")
.replace(/[\xF2-\xF6\xF8]/g, "o")
.replace(/[\xF9-\xFC]/g, "u")
.replace(/[\xFE]/g, "p")
.replace(/[\xFD\xFF]/g, "y");
}

return str;
}

/**
* Searches for a given substring
*/
function containsstr(str, substring, fromIndex){
return str.indexOf(substring, fromIndex) !== -1;
}

/**
* Truncate string at full words.
*/
function crop(str, maxChars, append) {
return truncate(str, maxChars, append, true);
}

/**
* Escape RegExp string chars.
*/
function escapeRegExp(str) {
var ESCAPE_CHARS = /[\\.+*?\^$\[\](){}\/'#]/g;
return str.replace(ESCAPE_CHARS,'\\$&');
}

/**
* Escapes a string for insertion into HTML.
*/
function escapeHtml(str){
str = str
.replace(/&/g, '&amp;')
.replace(/</g, '&lt;')
.replace(/>/g, '&gt;')
.replace(/'/g, '&#39;')
.replace(/"/g, '&quot;');

return str;
}

/**
* Unescapes HTML special chars
*/
function unescapeHtml(str){
str = str
.replace(/&amp;/g , '&')
.replace(/&lt;/g  , '<')
.replace(/&gt;/g  , '>')
.replace(/&#39;/g , "'")
.replace(/&quot;/g, '"');
return str;
}

/**
* Escape string into unicode sequences
*/
function escapeUnicode(str, shouldEscapePrintable){
return str.replace(/[\s\S]/g, function(ch){
// skip printable ASCII chars if we should not escape them
if (!shouldEscapePrintable && (/[\x20-\x7E]/).test(ch)) {
return ch;
}
// we use "000" and slice(-4) for brevity, need to pad zeros,
// unicode escape always have 4 chars after "\u"
return '\\u'+ ('000'+ ch.charCodeAt(0).toString(16)).slice(-4);
});
}

/**
* Remove HTML tags from string.
*/
function stripHtmlTags(str){
return str.replace(/<[^>]*>/g, '');
}

/**
* Remove non-printable ASCII chars
*/
function removeNonASCII(str){
// Matches non-printable ASCII chars -
// http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
return str.replace(/[^\x20-\x7E]/g, '');
}

/**
* String interpolation
*/
function interpolate(template, replacements, syntax){
var stache = /\{\{(\w+)\}\}/g; //mustache-like

var replaceFn = function(match, prop){
return (prop in replacements) ? replacements[prop] : '';
};

return template.replace(syntax || stache, replaceFn);
}

/**
* Pad string with `char` if its' length is smaller than `minLen`
*/
function rpad(str, minLen, ch) {
ch = ch || ' ';
return (str.length < minLen)? str + repeat(ch, minLen - str.length) : str;
}

/**
* Pad string with `char` if its' length is smaller than `minLen`
*/
function lpad(str, minLen, ch) {
ch = ch || ' ';

return ((str.length < minLen)
? repeat(ch, minLen - str.length) + str : str);
}

/**
* Repeat string n times
*/
function repeat(str, n){
return (new Array(n + 1)).join(str);
}

/**
* Limit number of chars.
*/
function truncate(str, maxChars, append, onlyFullWords){
append = append || '...';
maxChars = onlyFullWords? maxChars + 1 : maxChars;

str = trim(str);
if(str.length <= maxChars){
return str;
}
str = str.substr(0, maxChars - append.length);
//crop at last space or remove trailing whitespace
str = onlyFullWords? str.substr(0, str.lastIndexOf(' ')) : trim(str);
return str + append;
}

var WHITE_SPACES = [
' ', '\n', '\r', '\t', '\f', '\v', '\u00A0', '\u1680', '\u180E',
'\u2000', '\u2001', '\u2002', '\u2003', '\u2004', '\u2005', '\u2006',
'\u2007', '\u2008', '\u2009', '\u200A', '\u2028', '\u2029', '\u202F',
'\u205F', '\u3000'
];

/**
* Remove chars from beginning of string.
*/
function ltrim(str, chars) {
chars = chars || WHITE_SPACES;

var start = 0,
len = str.length,
charLen = chars.length,
found = true,
i, c;

while (found && start < len) {
found = false;
i = -1;
c = str.charAt(start);

while (++i < charLen) {
if (c === chars[i]) {
found = true;
start++;
break;
}
}
}

return (start >= len) ? '' : str.substr(start, len);
}

/**
* Remove chars from end of string.
*/
function rtrim(str, chars) {
chars = chars || WHITE_SPACES;

var end = str.length - 1,
charLen = chars.length,
found = true,
i, c;

while (found && end >= 0) {
found = false;
i = -1;
c = str.charAt(end);

while (++i < charLen) {
if (c === chars[i]) {
found = true;
end--;
break;
}
}
}

return (end >= 0) ? str.substring(0, end + 1) : '';
}

/**
* Remove white-spaces from beginning and end of string.
*/
function trim(str, chars) {
chars = chars || WHITE_SPACES;
return ltrim(rtrim(str, chars), chars);
}

/**
* Capture all capital letters following a word boundary (in case the
* input is in all caps)
*/
function abbreviate(str) {
return str.match(/\b([A-Z])/g).join('');
}

function cleanString(str){
if(str.includes('§')){
str.replace(/§/g,'');
}
return str;
}
/*------------------------------------------------------------*/
function colorMyChat(messagesent) {
var out = [];
var ind;
for (var i = 0; i < messagesent.length; i++) {
ind++;
if(Number.isInteger(i/6)){ind=0}
out.push(colors[ind]);
out.push(messagesent.substring(i, i + 1));
}
return out.join("");
};

function openColorSelect() {
if (colormychatd == false) {
GUIs.dismiss();
}
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setAlpha(themeAlpha);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("MSG Hue");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Black");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§0";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Blue");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#0000ab")));
button.setTextColor(Color.parseColor("#0000ab"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§1";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Green");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#00ad00")));
button.setTextColor(Color.parseColor("#00ad00"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§2";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Aqua");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#00abab")));
button.setTextColor(Color.parseColor("#00abab"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§3";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Red");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#ab0000")));
button.setTextColor(Color.parseColor("#ab0000"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§4";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Purple");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#a802a8")));
button.setTextColor(Color.parseColor("#a802a8"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§5";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Orange");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#ffaa00")));
button.setTextColor(Color.parseColor("#ffaa00"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§6";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Grey");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#a8a8a8")));
button.setTextColor(Color.parseColor("#a8a8a8"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§7";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Dark Grey");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#525252")));
button.setTextColor(Color.parseColor("#525252"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§8";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Indigo");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#5353fc")));
button.setTextColor(Color.parseColor("#5353fc"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§9";
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Green");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#53fc53")));
button.setTextColor(Color.parseColor("#53fc53"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§a";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Aqua");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#53fcfc")));
button.setTextColor(Color.parseColor("#53fcfc"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§b";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Red"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#ff5454")));
button.setTextColor(Color.parseColor("#ff5454"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§c";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Pink");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#fc53fc")));
button.setTextColor(Color.parseColor("#fc53fc"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§d";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Yellow"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#ffff54")));
button.setTextColor(Color.parseColor("#ffff54"));
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§e";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["White"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "§f";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Rainbow"]);
button.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [android.graphics.Color.RED,android.graphics.Color.YELLOW,android.graphics.Color.GREEN,android.graphics.Color.BLUE,android.graphics.Color.MAGENTA]));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTextColor(Color.parseColor("#fc53fc"));

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatcolor = "rainbow";
GUIs.dismiss();
colorPicker = false;
}
}));
menuLayout.addView(button);

var button = new android.widget.Button(ctx);
button.setText("Exit");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIs.dismiss();
colormychatd = false;
colormychatss = false;
chatcolor = "§f";
colorPicker = false;
}
}));
menuLayout.addView(button);
GUIs = new PopupWindow(menuLayout1, tab_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){GUIs.setAnimationStyle(android.R.style.Animation_Toast);}
GUIs.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIs.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +(left_width+list_width), 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function closeColor() {
GUIs.dismiss();
};
function poteditor(potion,amplification,durationer,statvar) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText(potion);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: 999999 is an infinite duration");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var ampEt = new android.widget.EditText(ctx);
var durEt = new android.widget.EditText(ctx);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var durTxt = android.widget.TextView(ctx);
durTxt.setTextSize(12);
durTxt.setText(" Duration:");
var ampTxt = android.widget.TextView(ctx);
ampTxt.setTextSize(12);
ampTxt.setText(" Amplifier:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Finish Tune");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
ampEt.setText(amplification.toString());
durEt.setText(durationer.toString());
ampEt.setHint("amplification");
durEt.setHint("duration");
ampEt.setTextColor(themeText);
ampEt.setTextSize(14);
ampEt.setTypeface(mcfont);
ampEt.setBackground(xbg2);
durEt.setTextColor(themeText);
durEt.setTextSize(14);
durEt.setTypeface(mcfont);
durEt.setBackground(xbg2);
durTxt.setTextColor(themeText);
durTxt.setTextSize(11);
durTxt.setTypeface(mcfont);
durTxt.setBackground(xbg2);
ampTxt.setTextColor(themeText);
ampTxt.setTextSize(11);
ampTxt.setTypeface(mcfont);
ampTxt.setBackground(xbg2);
menuLayout.addView(durTxt);
menuLayout.addView(durEt);
menuLayout.addView(ampTxt);
menuLayout.addView(ampEt);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
var newamp=parseInt(ampEt.getText());
var newdur=parseInt(durEt.getText());
if(newdur>999999){newdur=999999}
if(newamp>255){newamp=255}
if(potion=="Swiftness"){
swifta=newamp;
swiftd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.movementSpeed);
Entity.addEffect(Player.getEntity(), MobEffect.movementSpeed, newdur, newamp, false, false);}
}if(potion=="Slowness"){
slowa=newamp;
slowd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.movementSlowdown);
Entity.addEffect(Player.getEntity(), MobEffect.movementSlowdown, newdur, newamp, false, false);}
}if(potion=="Strength"){
strengta=newamp;
strengthd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.damageBoost);
Entity.addEffect(Player.getEntity(), MobEffect.damageBoost, newdur, newamp, false, false);}
}if(potion=="Resistance"){
resa=newamp;
resd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.damageResistance);
Entity.addEffect(Player.getEntity(), MobEffect.damageResistance, newdur, newamp, false, false);}
}if(potion=="Fire Resistance"){
fresa=newamp;
fresd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.fireResistance);
Entity.addEffect(Player.getEntity(), MobEffect.fireResistance, newdur, newamp, false, false);}
}if(potion=="Water Breathing"){
waterba=newamp;
waterbd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.waterBreathing);
Entity.addEffect(Player.getEntity(), MobEffect.waterBreathing, newdur, newamp, false, false);}
}if(potion=="Hunger"){
hungera=newamp;
hungerd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.hunger);
Entity.addEffect(Player.getEntity(), MobEffect.hunger, newdur, newamp, false, false);}
}if(potion=="Weakness"){
weaka=newamp;
weakd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.weakness);
Entity.addEffect(Player.getEntity(), MobEffect.weakness, newdur, newamp, false, false);}
}if(potion=="Poison"){
poisona=newamp;
poisond=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.poison);
Entity.addEffect(Player.getEntity(), MobEffect.poison, newdur, newamp, false, false);}
}if(potion=="Wither"){
withera=newamp;
witherd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.wither);
Entity.addEffect(Player.getEntity(), MobEffect.wither, newdur, newamp, false, false);}
}if(potion=="Health Boost"){
healboa=newamp;
healbod=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.healthBoost);
Entity.addEffect(Player.getEntity(), MobEffect.healthBoost, newdur, newamp, false, false);}
}if(potion=="Absorption"){
absoa=newamp;
sbsod=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.absorption);
Entity.addEffect(Player.getEntity(), MobEffect.absorption, newdur, newamp, false, false);}
}if(potion=="Invisibility"){
invisa=newamp;
invisd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.invisibility);
Entity.addEffect(Player.getEntity(), MobEffect.invisibility, newdur, newamp, false, false);}
}if(potion=="Blindness"){
blinda=newamp;
blindd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.blindness);
Entity.addEffect(Player.getEntity(), MobEffect.blindness, newdur, newamp, false, false);}
}if(potion=="Nausea"){
nausa=newamp;
nausd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.confusion);
Entity.addEffect(Player.getEntity(), MobEffect.confusion, newdur, newamp, false, false);}
}if(potion=="Jump Boost"){
jumpa=newamp;
jumpd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.jump);
Entity.addEffect(Player.getEntity(), MobEffect.jump, newdur, newamp, false, false);}
}if(potion=="Levitation"){
leva=newamp;
levd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.levitation);
Entity.addEffect(Player.getEntity(), MobEffect.levitation, newdur, newamp, false, false);}
}if(potion=="Mining Fatigue"){
mina=newamp;
mind=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.digSlowdown);
Entity.addEffect(Player.getEntity(), MobEffect.digSlowdown, newdur, newamp, false, false);}
}if(potion=="Haste"){
hasta=newamp;
hastd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.digSpeed);
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, newdur, newamp, false, false);}
}if(potion=="Night Vision"){
niva=newamp;
nivd=newdur;
if(statvar){Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, newdur, newamp, false, false);}
}
etpot.dismiss();

}
});
etpot = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){etpot.setAnimationStyle(android.R.style.Animation_Toast);}
etpot.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
etpot.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function openEnchantSelect() {
function closeEnchant() {
GUIe.dismiss();
};
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
useLegal = false;
useCustom = false;
var titleback = new android.graphics.drawable.GradientDrawable();
titleback.setColor(Color.parseColor("#000000"));
titleback.setStroke(2, themeStroke);
titleback.setCornerRadius(0);
titleback.setAlpha(200);
var bg = new android.graphics.drawable.GradientDrawable(); bg.setColor(themeBackground); bg.setAlpha(themeAlpha);
var xbg2 = new android.graphics.drawable.GradientDrawable(); xbg2.setStroke(1, themeStroke); 
var lvl = "32767"; 
var menuLayout = new android.widget.LinearLayout(ctx); 
var menuScroll = new android.widget.ScrollView(ctx); 
var menuLayout1 = new android.widget.LinearLayout(ctx); 
var hostlayout = new android.widget.LinearLayout(ctx); 
var titlehor = new android.widget.LinearLayout(ctx); 
var neghost = new android.widget.LinearLayout(ctx); 
var vert1 = new android.widget.LinearLayout(ctx); 
var vert2 = new android.widget.LinearLayout(ctx); 
var vert3 = new android.widget.LinearLayout(ctx); 
var verthost = new android.widget.LinearLayout(ctx); 
var m32kscroll = new android.widget.HorizontalScrollView(ctx);
neghost.setOrientation(0); 
vert1.setOrientation(1); 
vert2.setOrientation(1); 
vert3.setOrientation(1); 
hostlayout.setOrientation(1); 
titlehor.setOrientation(0); 
menuLayout.setOrientation(1); 
menuLayout1.setOrientation(1); 
verthost.addView(vert1); 
verthost.addView(vert2); 
verthost.addView(vert3); 
menuScroll.addView(menuLayout); 
menuLayout1.addView(menuScroll); 
hostlayout.addView(titlehor);
hostlayout.addView(menuLayout1); 
menuLayout.setBackground(bg); 
titlehor.setBackground(titleback); 
var enchantment = "oogityboogity"; 
var encL = "32767";
var adjustlvl = new android.widget.LinearLayout(ctx); 
adjustlvl.setOrientation(1); 
var customname = new android.widget.LinearLayout(ctx); 
customname.setOrientation(1);

vert1.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth()/3, LayoutParams.FILL_PARENT));
vert2.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth()/3, LayoutParams.FILL_PARENT));
vert3.setLayoutParams(new LinearLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth()/3, LayoutParams.FILL_PARENT));

var enchanttitle = new android.widget.Button(ctx);
enchanttitle.setText(langMsg[language]["Choose Enchants"]);
enchanttitle.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
enchanttitle.setTextColor(modTextColor);
enchanttitle.setTextSize(titleSize);
enchanttitle.setTypeface(mcfont);
enchanttitle.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
enchanttitle.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth()-(tab_width*3);
var closebtn = new android.widget.Button(ctx);
closebtn.setText(langMsg[language]["Close"]);
closebtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.RED));
closebtn.setTextColor(android.graphics.Color.WHITE);
closebtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
closebtn.setTextSize(titleSize);
closebtn.setTypeface(mcfont);
closebtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
}
}));
titlehor.addView(enchanttitle);
titlehor.addView(closebtn);

function enchantItem(enchantment) {
encL = parseInt(encLet.getText());
if (Player.getSelectedSlotId() != null) {
if(enchantment=="everything"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, encL); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{
Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct's Everything Enchnant");
} 
}

if(fortunelimiter&!useLegal){
if(enchantment=="32axe"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 80); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, encL);
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, encL);
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{
Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Axe");} 
}
if(enchantment=="32pickaxe"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 80); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, encL);
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, encL);
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{
Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Pickaxe");}
}
}else if(!fortunelimiter&!useLegal){
if(enchantment=="32axe"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, encL);
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, encL);
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{
Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Axe");} 
}
if(enchantment=="32pickaxe"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{
Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Pickaxe");}
}
}else if(useLegal){
if(enchantment=="32axe"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, 5); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 3); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 3); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}
}
if(enchantment=="32pickaxe"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, 5); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 3); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 3); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}
}
}


if(enchantment=="32sword"&!useLegal){
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, encL);
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, encL);
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Sword");}
}else if(enchantment=="32sword"&useLegal){
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, 2); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, 2); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, 3); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, 5); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 3); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, 5);
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, 5);
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}
}
if(enchantment=="32bow"&!useLegal){
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, encL);
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Bow");}
}else if(enchantment=="32bow"&useLegal){
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, 5);
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, 1); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, 2); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, 1); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 3); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}
}
if(enchantment=="32armor"&!useLegal){
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, encL); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}else{Player.setItemCustomName(Player.getSelectedSlotId(), "Instinct 32k Armor");} 
}else if(enchantment=="32armor"&useLegal){
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, 4); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, 3); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 3); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, 4); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, 1); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, 3); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, 4); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, 3); 
if(useCustom){
Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);
}
}

if (!useLegal) {
if (enchantment == "fireprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "prot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "featherfall") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "blastprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "projectileprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "thorns") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "respiration") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "aquaaffinity") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "depthstrider") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "sharpness") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "smite") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "baneanthro") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "knockback") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "fireaspect") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "looting") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "efficiency") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "silktouch") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "unbreaking") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "fortune") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "power") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "punch") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "flame") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "infinity") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "luckofthesea") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Rod");}
}
if (enchantment == "lure") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, encL);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Rod");}
}
}
if (useLegal) {
if (enchantment == "fireprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "prot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "featherfall") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "blastprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "projectileprot") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, 4);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "thorns") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "respiration") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "aquaaffinity") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, 1);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "depthstrider") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Armor");}
}
if (enchantment == "sharpness") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "smite") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "baneanthro") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "knockback") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, 2);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "fireaspect") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, 2);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "looting") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Weapon");}
}
if (enchantment == "efficiency") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "silktouch") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, 1);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "unbreaking") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Tool");}
}
if (enchantment == "fortune") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Pickaxe");}
}
if (enchantment == "power") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, 5);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "punch") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, 2);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "flame") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, 1);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "infinity") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, 1);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Bow");}
}
if (enchantment == "luckofthesea") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Rod");}
}
if (enchantment == "lure") {
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, 3);
if(useCustom){Player.setItemCustomName(Player.getSelectedSlotId(), customItemname);}else{Player.setItemCustomName(Player.getSelectedSlotId(), Player['getName'](Player['getEntity']()) + "'s Instinct Rod");}
}
}
}
};

var button = new android.widget.Button(ctx);
button.setText("Tip: Put item in your hand, choose enchantment, then put the item in the inventory crafting section.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var k32txt = new android.widget.Button(ctx);
k32txt.setText(encL.toString()+" Level Enchantment Presets");
k32txt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
k32txt.setTextColor(modTextColor);
k32txt.getBackground().setAlpha(130);
k32txt.setTextSize(btntextsize*2);
k32txt.setTypeface(mcfont);
menuLayout.addView(k32txt);
var layouthorizontal = new android.widget.LinearLayout(ctx); 
layouthorizontal.setOrientation(0); 

layoutParams3rw=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams3rw.gravity=Gravity.CENTER_HORIZONTAL;
layouthorizontal.setLayoutParams(layoutParams3rw);

layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
var k32sword = new android.widget.Button(ctx);
k32sword.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(handDiamond, 0), 0, android.util.Base64.decode(handDiamond, 0).length)));
k32sword.setTextColor(modTextColor);
k32sword.setLayoutParams(layoutParams);
k32sword.getLayoutParams().width = icon_dimensions*4;
k32sword.getLayoutParams().height = icon_dimensions*4;
k32sword.setTextSize(btntextsize);
k32sword.setTypeface(mcfont);
k32sword.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
enchantItem("32sword");
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
}
}));
layouthorizontal.addView(k32sword);

var k32pick = new android.widget.Button(ctx);
k32pick.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondpick, 0), 0, android.util.Base64.decode(diamondpick, 0).length)));
k32pick.setTextColor(modTextColor);
k32pick.setLayoutParams(layoutParams);
k32pick.getLayoutParams().width = icon_dimensions*4;
k32pick.getLayoutParams().height = icon_dimensions*4;
k32pick.setTextSize(btntextsize);
k32pick.setTypeface(mcfont);
k32pick.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantItem("32pickaxe");
enchantPicker = false;
}
}));
layouthorizontal.addView(k32pick);

var k32axe = new android.widget.Button(ctx);
k32axe.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondaxe, 0), 0, android.util.Base64.decode(diamondaxe, 0).length)));
k32axe.setTextColor(modTextColor);
k32axe.setLayoutParams(layoutParams);
k32axe.getLayoutParams().width = icon_dimensions*4;
k32axe.getLayoutParams().height = icon_dimensions*4;
k32axe.setTextSize(btntextsize);
k32axe.setTypeface(mcfont);
k32axe.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("32axe");
}
}));
layouthorizontal.addView(k32axe);

var k32bow = new android.widget.Button(ctx);
k32bow.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondbow, 0), 0, android.util.Base64.decode(diamondbow, 0).length)));
k32bow.setTextColor(modTextColor);
k32bow.setLayoutParams(layoutParams);
k32bow.getLayoutParams().width = icon_dimensions*4;
k32bow.getLayoutParams().height = icon_dimensions*4;
k32bow.setTextSize(btntextsize);
k32bow.setTypeface(mcfont);
k32bow.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("32bow");
}
}));
layouthorizontal.addView(k32bow);

var k32armor = new android.widget.Button(ctx);
k32armor.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chestDiamond, 0), 0, android.util.Base64.decode(chestDiamond, 0).length)));
k32armor.setTextColor(modTextColor);
k32armor.setLayoutParams(layoutParams);
k32armor.getLayoutParams().width = icon_dimensions*4;
k32armor.getLayoutParams().height = icon_dimensions*4;
k32armor.setTextSize(btntextsize);
k32armor.setTypeface(mcfont);
k32armor.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("32armor");
}
}));
layouthorizontal.addView(k32armor);
m32kscroll.addView(layouthorizontal);
menuLayout.addView(m32kscroll);

var button = new android.widget.Button(ctx);
button.setText("Experimental All Enchant");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
procCmd("eType all "+encL);
}
}));
menuLayout.addView(button);

var encLet = new android.widget.EditText(ctx);
encLet.setText(encL);
//encLet.setInputType(numbers);
var nameedit = new android.widget.EditText(ctx);
nameedit.setText(customItemname);
adjustlvl.addView(encLet);
var enchantseek = new android.widget.SeekBar(ctx);
enchantseek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
enchantseek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
enchantseek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
enchantseek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
enchantseek.getBackground().setAlpha(255);
if(negativelvls){
enchantseek.setMax(65534);
enchantseek.setProgress(65534);
}
if(!negativelvls){
enchantseek.setMax(32767);
enchantseek.setProgress(32767);
}
enchantseek.setBackground(xbgGS);
if(negativelvls){
if(enchantseek.getProgress()<32767){
encL = ((65534-enchantseek.getProgress())-32767)*-1;
}
if(enchantseek.getProgress()>32767){
encL = 32767-(65534-enchantseek.getProgress());
}
}
enchantseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
if(negativelvls){
if(enchantseek.getProgress()<32767){
encL = ((65534-enchantseek.getProgress())-32767)*-1;
}
if(enchantseek.getProgress()>32767){
encL = 32767-(65534-enchantseek.getProgress());
}
}else{
encL = enchantseek.getProgress();
}
encLet.setText(encL.toString());
k32txt.setText(encL.toString()+" Level Enchantment Presets");
indiTxt.setText(encL.toString()+" Level Individual Enchants");
}
});
adjustlvl.addView(enchantseek);
menuLayout.addView(adjustlvl);


var button = new CheckBox(ctx);
button.setText(langMsg[language]["Use Legal Enchant Lvls"]);
button.setChecked(useLegal);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!useLegal) {
useLegal = true;
neghost.removeView(negswi);
adjustlvl.removeView(encLet);
adjustlvl.removeView(enchantseek);
k32txt.setText("Legal Enchant Level Presets");
indiTxt.setText("Legal Level Individual Enchants");
k32txt.setTextColor(android.graphics.Color.YELLOW);
} else {
useLegal = false;
adjustlvl.addView(encLet);
adjustlvl.addView(enchantseek);
neghost.addView(negswi);
k32txt.setText(encL.toString()+" Level Enchantment Presets");
indiTxt.setText(encL.toString()+" Level Individual Enchants");
k32txt.setTextColor(modTextColor);
}
}
}));
menuLayout.addView(button);

var button = new CheckBox(ctx);
button.setText("32k Fortune Limiter (Recommended On to have lvl 80 Fortune)");
button.setChecked(fortunelimiter);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!fortunelimiter) {
fortunelimiter = true;
} else {
fortunelimiter = false;
}
}
}));
menuLayout.addView(button);

var negswi = new CheckBox(ctx);
negswi.setText("Negative Levels Seekbar Toggle");
negswi.setChecked(negativelvls);
negswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
negswi.setTextColor(modTextColor);
negswi.getBackground().setAlpha(130);
negswi.setTextSize(btntextsize);
negswi.setTypeface(mcfont);
negswi.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!negativelvls) {
negativelvls = true;
} else {
negativelvls = false;
}
if(negativelvls){
enchantseek.setMax(65534);
enchantseek.setProgress(65534);
}
if(!negativelvls){
enchantseek.setMax(32767);
enchantseek.setProgress(32767);
}
if(negativelvls){
if(enchantseek.getProgress()<32767){
encL = ((65534-enchantseek.getProgress())-32767)*-1;
}
if(enchantseek.getProgress()>32767){
encL = 32767-(65534-enchantseek.getProgress());
}
}

}
}));
neghost.addView(negswi);
menuLayout.addView(neghost);


var button = new CheckBox(ctx);
button.setText(langMsg[language]["Use Custom Name"]);
button.setChecked(useCustom);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!useCustom) {
useCustom = true;
customname.addView(nameedit);
} else {
useCustom = false;
customname.removeView(nameedit);
}
}
}));
menuLayout.addView(button);
menuLayout.addView(customname);

var indiTxt = new android.widget.Button(ctx);
indiTxt.setText(encL.toString()+" Level Individual Enchants");
indiTxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
indiTxt.setTextColor(modTextColor);
indiTxt.getBackground().setAlpha(130);
indiTxt.setTextSize(btntextsize*2);
indiTxt.setTypeface(mcfont);
menuLayout.addView(indiTxt);

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Protection"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("prot");
}
}));
vert1.addView(button);

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Fire Protection"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("fireprot");
}
}));
vert1.addView(button);

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Feather Falling"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("featherfall");
}
}));
vert1.addView(button);

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Blast Protection"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("blastprot");
}
}));
vert1.addView(button);

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Projectile Protection"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("projectileprot");
}
}));
vert1.addView(button);

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Thorns"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("throns");
}
}));
vert1.addView(button);

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Respiration"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("Respiration");
}
}));
vert1.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Aqua Affinity"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("aquaaffinity");
}
}));
vert1.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Depth Strider"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("depthstrider");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Sharpness"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("sharpness");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Smite"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("smite");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Bane of Anthropods"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("baneanthro");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Knockback"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("knockback");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Fire Aspect"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("fireaspect");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Looting"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("looting");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Efficiency"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("efficiency");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Silk Touch"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("silktouch");
}
}));
vert3.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Unbreaking"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("unbreaking");
}
}));
vert3.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Fortune"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("fortune");
}
}));
vert3.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Power"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("Power");
}
}));
vert2.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Punch"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("Punch");
}
}));
vert3.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Flame"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("flame");
}
}));
vert3.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Infinity"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("infinity");
}
}));
vert3.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Luck of the Sea"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("luckofthesea");
}
}));
vert3.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Lure"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setTypeface(mcfont);

button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
customItemname = nameedit.getText();
GUIe.dismiss();
enchantPicker = false;
enchantItem("lure");
}
}));
vert3.addView(button);
menuLayout.addView(verthost); 
GUIe = new PopupWindow(hostlayout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight(),true);
if(animations){GUIe.setAnimationStyle(android.R.style.Animation_Toast);}
GUIe.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIe.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.BOTTOM, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function teleportation() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("TP Menu");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Put desired coordinates in boxes.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var etX = new android.widget.EditText(ctx);
var etY = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" X:");
var txtY = android.widget.TextView(ctx);
txtY.setTextSize(12);
txtY.setText(" Y:");
var txtZ = android.widget.TextView(ctx);
txtZ.setTextSize(12);
txtZ.setText(" Z:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Teleport");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setInputType(number);
etY.setInputType(number);
etZ.setInputType(number);
etX.setText("0");
etY.setText("0");
etZ.setText("0");
etX.setHint("X");
etY.setHint("Y");
etZ.setHint("Z");
etX.setTextColor(themeText);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
etY.setTextColor(themeText);
etY.setTextSize(14);
etY.setTypeface(mcfont);
etY.setBackground(xbg2);
etZ.setTextColor(themeText);
etZ.setTextSize(14);
etZ.setTypeface(mcfont);
etZ.setBackground(xbg2);
txtX.setTextColor(themeText);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
txtY.setTextColor(themeText);
txtY.setTextSize(11);
txtY.setTypeface(mcfont);
txtY.setBackground(xbg2);
txtZ.setTextColor(themeText);
txtZ.setTextSize(11);
txtZ.setTypeface(mcfont);
txtZ.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(txtY);
menuLayout.addView(etY);
menuLayout.addView(txtZ);
menuLayout.addView(etZ);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
var tx = parseInt(etX.getText());
var tyEt = parseInt(etY.getText());
var ty = tyEt+2;
var tz = parseInt(etZ.getText());
Entity.setPosition(getPlayerEnt(), tx, ty, tz);
tpDialog.dismiss();

}
});
tpDialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){tpDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tpDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tpDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function offhandPopup() {
loadidlist();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var button = new android.widget.Button(ctx);
button.setText("Offhand");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(15);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);


var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText(langMsg[language]["Cancel"]);
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var scrollTMIlay = new android.widget.ScrollView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);





var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setTextColor(themeText);
txtId.setText(langMsg[language][" ID:"]);
var txtAmount = android.widget.TextView(ctx);
txtAmount.setTextSize(12);
txtAmount.setTextColor(themeText);
txtAmount.setText(langMsg[language][" Amount:"]);
var txtDamage = android.widget.TextView(ctx);
txtDamage.setTextSize(12);
txtDamage.setTextColor(themeText);
txtDamage.setText(langMsg[language][" Damage/Meta:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Add");
addBtn.setBackground(telebtn);
addBtn.setTypeface(mcfont);
addBtn.setTextColor(android.graphics.Color.GREEN);

var deviceWarn = new android.widget.TextView(ctx);
deviceWarn.setGravity(Gravity.CENTER);
deviceWarn.setBackground(xbg2);
deviceWarn.setTextSize(8);
deviceWarn.setText("Tip: If this interface is too\nlaggy on your device,\nenable 'Old TMI GUI' in the\nSettings menu");
deviceWarn.setTextColor(android.graphics.Color.WHITE);
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("0");
etAmount.setText("0");
etDamage.setText("0");
etId.setHint("ID");
etAmount.setHint("Amount");
etDamage.setHint("Damage/Meta");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
etId.setTextSize(14);
etId.setTypeface(mcfont);
etId.setBackground(xbg2);
etId.setTextColor(themeText);
etAmount.setTextSize(14);
etAmount.setTypeface(mcfont);
etAmount.setBackground(xbg2);
etAmount.setTextColor(themeText);
etDamage.setTextSize(14);
etDamage.setTypeface(mcfont);
etDamage.setBackground(xbg2);
etDamage.setTextColor(themeText);
tmiLayout.addView(button);

tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(txtDamage);
tmiLayout.addView(etDamage);
tmiLayout.addView(txtAmount);
tmiLayout.addView(etAmount);

tmiLayout.addView(addBtn);/*
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/idlogger/idlist.html");
webView.setBackgroundColor(Color.TRANSPARENT);
webView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
webView.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 5;
webView.setFocusable(false);*/

//tmiLayout.addView(webView);
tmiLayout.addView(deviceWarn);
menuScroll.addView(webidli);
//menuScroll.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
//menuScroll.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18;
scrollTMIlay.addView(tmiLayout);
tmiMainHor.addView(scrollTMIlay);
tmiMainHor.addView(menuScroll);
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {

if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
tmiRepeat = false;
if(etId.getText().toString().includes(':')){
tmiId = etId.getText().toString().split(':')[0];
tmiDamage = etId.getText().toString().split(':')[1];
}else{
tmiId = parseInt(etId.getText());
tmiDamage = parseInt(etDamage.getText());
}
if (etAmount.getText() != "repeat") {
tmiAmount = parseInt(etAmount.getText())
}
if (etAmount.getText() == "repeat") {
tmiRepeat = true
}


tmiDialog.dismiss();
saveid(tmiId.toString(),tmiDamage.toString());
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Alert: Adding this item *might* crash Minecraft");
alert.setPositiveButton("Add",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){

if (!tmiRepeat && tmiAmount <= 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, 64, tmiDamage);
}
}});
alert.setNegativeButton("Don't Add",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){tmiId=1;tmiAmount=64;tmiDamage=0;}
});

if(etId.getText()=="397"||etId.getText()=="230"||etId.getText()=="242"){
alert.show();
}else{
if (!tmiRepeat && tmiAmount <= 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, 64, tmiDamage);
}

}
tmiDialog.dismiss();
if(tmiAmount>64){tmiAmount=64}
}
});
tmiDialog = new PopupWindow(tmiMainHor, ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT/1.4,true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function tmiPopup() {
loadidlist();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var button = new android.widget.Button(ctx);
button.setText("TMI");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(15);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);


var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText(langMsg[language]["Cancel"]);
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var scrollTMIlay = new android.widget.ScrollView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setTextColor(themeText);
txtId.setText(langMsg[language][" ID:"]);
var txtAmount = android.widget.TextView(ctx);
txtAmount.setTextSize(12);
txtAmount.setTextColor(themeText);
txtAmount.setText(langMsg[language][" Amount:"]);
var txtDamage = android.widget.TextView(ctx);
txtDamage.setTextSize(12);
txtDamage.setTextColor(themeText);
txtDamage.setText(langMsg[language][" Damage/Meta:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Add");
addBtn.setBackground(telebtn);
addBtn.setTypeface(mcfont);
addBtn.setTextColor(android.graphics.Color.GREEN);

var deviceWarn = new android.widget.TextView(ctx);
deviceWarn.setGravity(Gravity.CENTER);
deviceWarn.setBackground(xbg2);
deviceWarn.setTextSize(8);
deviceWarn.setText("Tip: If this interface is too\nlaggy on your device,\nenable 'Old TMI GUI' in the\nSettings menu");
deviceWarn.setTextColor(android.graphics.Color.WHITE);
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("0");
etAmount.setText("0");
etDamage.setText("0");
etId.setHint("ID");
etAmount.setHint("Amount");
etDamage.setHint("Damage/Meta");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
etId.setTextSize(14);
etId.setTypeface(mcfont);
etId.setBackground(xbg2);
etId.setTextColor(themeText);
etAmount.setTextSize(14);
etAmount.setTypeface(mcfont);
etAmount.setBackground(xbg2);
etAmount.setTextColor(themeText);
etDamage.setTextSize(14);
etDamage.setTypeface(mcfont);
etDamage.setBackground(xbg2);
etDamage.setTextColor(themeText);
tmiLayout.addView(button);

tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(txtDamage);
tmiLayout.addView(etDamage);
tmiLayout.addView(txtAmount);
tmiLayout.addView(etAmount);

tmiLayout.addView(addBtn);
/*
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/idlogger/idlist.html");
webView.setBackgroundColor(Color.TRANSPARENT);
webView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
webView.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 5;
webView.setFocusable(false);
tmiLayout.addView(webView);
*/
tmiLayout.addView(deviceWarn);
menuScroll.addView(webidli);
//menuScroll.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
//menuScroll.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18;
scrollTMIlay.addView(tmiLayout);
tmiMainHor.addView(scrollTMIlay);
tmiMainHor.addView(menuScroll);
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
tmiRepeat = false;
if(etId.getText().toString().includes(':')){
tmiId = etId.getText().toString().split(':')[0];
tmiDamage = etId.getText().toString().split(':')[1];
}else{
tmiId = parseInt(etId.getText());
tmiDamage = parseInt(etDamage.getText());
}
if (etAmount.getText() != "repeat") {
tmiAmount = parseInt(etAmount.getText())
}
if (etAmount.getText() == "repeat") {
tmiRepeat = true
}

tmiDialog.dismiss();
saveid(tmiId.toString(),tmiDamage.toString());
if (!tmiRepeat && tmiAmount <= 64) {
Player.addItemInventory(tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Player.addItemInventory(tmiId, 64, tmiDamage);
}
tmiDialog.dismiss();
}
});
tmiDialog = new PopupWindow(tmiMainHor, ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18, ctx.getWindowManager().getDefaultDisplay().getHeight(),true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function oldoffhandPopup() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var spinner = new android.widget.Spinner(ctx);
var infoBox = new android.widget.TextView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
infoBox.setText(tmiList);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setText(langMsg[language][" ID:"]);
var txtAmount = android.widget.TextView(ctx);
txtAmount.setTextSize(12);
txtAmount.setText(langMsg[language][" Amount:"]);
var txtDamage = android.widget.TextView(ctx);
txtDamage.setTextSize(12);
txtDamage.setText(langMsg[language][" Damage/Meta:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Add");
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("0");
etAmount.setText("0");
etDamage.setText("0");
etId.setHint("ID");
etAmount.setHint("Amount");
etDamage.setHint("Damage/Meta");
var tmiDialog = new android.app.Dialog(ctx);
tmiDialog.setContentView(tmiMainHor);
tmiDialog.setTitle("Offhand");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(txtDamage);
tmiLayout.addView(etDamage);
tmiLayout.addView(txtAmount);
tmiLayout.addView(etAmount);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
tmiDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
tmiRepeat = false;
tmiId = parseInt(etId.getText());
if (etAmount.getText() != "repeat") {
tmiAmount = parseInt(etAmount.getText())
}
if (etAmount.getText() == "repeat") {
tmiRepeat = true
}
tmiDamage = parseInt(etDamage.getText());
tmiDialog.dismiss();
if (!tmiRepeat && tmiAmount <= 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, 64, tmiDamage);
}
tmiDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
tmiDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
function oldtmiPopup() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var spinner = new android.widget.Spinner(ctx);
var infoBox = new android.widget.TextView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
infoBox.setText(tmiList);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setText(langMsg[language][" ID:"]);
var txtAmount = android.widget.TextView(ctx);
txtAmount.setTextSize(12);
txtAmount.setText(langMsg[language][" Amount:"]);
var txtDamage = android.widget.TextView(ctx);
txtDamage.setTextSize(12);
txtDamage.setText(langMsg[language][" Damage/Meta:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Add");
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("0");
etAmount.setText("0");
etDamage.setText("0");
etId.setHint("ID");
etAmount.setHint("Amount");
etDamage.setHint("Damage/Meta");
var tmiDialog = new android.app.Dialog(ctx);
tmiDialog.setContentView(tmiMainHor);
tmiDialog.setTitle("TMI");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(txtDamage);
tmiLayout.addView(etDamage);
tmiLayout.addView(txtAmount);
tmiLayout.addView(etAmount);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
tmiDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
tmiRepeat = false;
tmiId = parseInt(etId.getText());
if (etAmount.getText() != "repeat") {
tmiAmount = parseInt(etAmount.getText())
}
if (etAmount.getText() == "repeat") {
tmiRepeat = true
}
tmiDamage = parseInt(etDamage.getText());
tmiDialog.dismiss();
if (!tmiRepeat && tmiAmount <= 64) {
Player.addItemInventory(tmiId, tmiAmount, tmiDamage);
} else if (!tmiRepeat && tmiAmount > 64) {
Player.addItemInventory(tmiId, tmiAmount, tmiDamage);
}
tmiDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
tmiDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};

function chatroomPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var tmiLayout = new android.widget.LinearLayout(ctx);
var verticallay = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
infoBox = new android.webkit.WebView(ctx);
infoBox.getSettings().setJavaScriptEnabled(true);
infoBox.setWebChromeClient(new android.webkit.WebChromeClient());
infoBox.setWebViewClient(new android.webkit.WebViewClient());
infoBox.loadUrl("http://instinctmods.com/chat/#"+Player.getName(getPlayerEnt()));
infoBox.getSettings().setUseWideViewPort(true);
infoBox.clearCache(true)
infoBox.getSettings().setAppCacheEnabled(false);
var menuScroll = new android.widget.ScrollView(ctx);

menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
verticallay.addView(tmiMainHor);
tmiDialog = new PopupWindow(verticallay, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight(),true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function chatPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Chat Menu");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Enter any message in the box below.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var etX = new android.widget.EditText(ctx);
var etY = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Message:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Send");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText("Hello World");
etX.setTextColor(themeText);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
txtX.setTextColor(themeText);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Server.sendChat(etX.getText());
chatdialog.dismiss();

}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function oldIdPopup() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var tmiLayout = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
var infoBox = new android.widget.TextView(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
infoBox.setText(tmiList);
var tmiDialog = new android.app.Dialog(ctx);
tmiDialog.setTitle("Item ID's");
tmiDialog.setContentView(tmiMainHor);
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
tmiDialog.show();} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
function clearingInv(item, index){
Player.clearInventorySlot(index);
}
var emptyslots = [];
function checkAir(item, index){
if(Player.getInventorySlotData(index)==0){
emptyslots.push(index);
betToast("Empty1: "+emptyslots)
}
}

function arr_diff (a1, a2) {

var a = [], diff = [];

for (var i = 0; i < a1.length; i++) {
a[a1[i]] = true;
}

for (var i = 0; i < a2.length; i++) {
if (a[a2[i]]) {
delete a[a2[i]];
} else {
a[a2[i]] = true;
}
}

for (var k in a) {
diff.push(k);
}

return diff;
}


var filledSlot;
var emptyslots2 = [];
function checkAirAfter(item, index){
if(Player.getInventorySlotData(index)==0){
emptyslots2.push(index);
betToast("Empty2: "+emptyslots2)
}
if(emptyslots2.length==emptyslots.length-1){
betToast(arr_diff(emptyslots, emptyslots2))
}
}
function chatWeb(websiteurl) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

chatweb = new android.webkit.WebView(ctx);
chatweb.getSettings().setJavaScriptEnabled(true);
chatweb.setWebChromeClient(new android.webkit.WebChromeClient());
chatweb.setWebViewClient(new android.webkit.WebViewClient());
chatweb.loadUrl(websiteurl);
chatdia = new PopupWindow(chatweb, ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT/1.4,true);
if(animations){chatdia.setAnimationStyle(android.R.style.Animation_Toast);}
chatdia.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdia.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function uploadWeb(websiteurl) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

chatweb = new android.webkit.WebView(ctx);
chatweb.getSettings().setJavaScriptEnabled(true);
chatweb.setWebChromeClient(new android.webkit.WebChromeClient());
chatweb.setWebViewClient(new android.webkit.WebViewClient());
//chatweb.postUrl(url,EncodingUtils.getBytes(postData, "BASE64"));
chatweb.loadUrl(websiteurl);
chatdia = new PopupWindow(chatweb, ctx.getWindowManager().getDefaultDisplay().getWidth() / 1.18, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT/1.4,true);
if(animations){chatdia.setAnimationStyle(android.R.style.Animation_Toast);}
chatdia.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdia.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function openUpdateSelect() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
if(!muteUpdate){
try {
if(!updateNotifier){updateNotifier = true;
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, android.graphics.Color.RED);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var menuLayoutText = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuLayout1.addView(menuLayout);
menuLayout.setBackground(bg);
menuLayout.getBackground().setAlpha(130);
var menuScrollChng = new android.widget.ScrollView(ctx);
var button = new android.widget.Button(ctx);
button.setText("Update Available");
if(publicVer=="OFFLINE"){button.setText("OFFLINE");}
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.YELLOW);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
menuLayout.addView(button);
menuLayoutText.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
menuLayoutText.getLayoutParams().height = ctx.getWindowManager().getDefaultDisplay().getHeight()/2.3;
var infoBox = new android.widget.TextView(ctx);
infoBox.setGravity(Gravity.CENTER);
infoBox.setBackground(xbg2);
infoBox.setText(chnglog);
if(publicVer=="OFFLINE"){infoBox.setText("Could not connect to GitHub. To fix, do the following:\n- Check that the device is connected to Wi-FI\n- Enable Mobile Data\n- Disable Airplane mode.");}
infoBox.setTextColor(android.graphics.Color.WHITE);
infoBox.getBackground().setAlpha(130);
menuScrollChng.addView(infoBox);
menuLayoutText.addView(menuScrollChng);
menuLayout.addView(menuLayoutText);
var menuLayoutBtns = new android.widget.LinearLayout(ctx);
menuLayoutBtns.setOrientation(0);
var button = new android.widget.Button(ctx);
button.setText("Ignore");
if(publicVer=="OFFLINE"){button.setText("Dismiss");}
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.RED)
button.setTextSize(14);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width =ctx.getWindowManager().getDefaultDisplay().getWidth() / 8;
if(publicVer=="OFFLINE"){button.getLayoutParams().width =ctx.getWindowManager().getDefaultDisplay().getWidth() / 4;}
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIup.dismiss();updateNotifier = false;
muteUpdate=true;
}
}));
menuLayoutBtns.addView(button);
var buttonu = new android.widget.Button(ctx);
buttonu.setText("Update");
buttonu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonu.setTextColor(android.graphics.Color.GREEN);
buttonu.setTextSize(14);
buttonu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonu.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 8;
buttonu.setTypeface(mcfont);
buttonu.setBackground(xbg2);
buttonu.getBackground().setAlpha(130);
buttonu.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
GUIup.dismiss();
updateNotifier = false;
updatemeths();
}
}));
if(publicVer!="OFFLINE"){menuLayoutBtns.addView(buttonu);}
menuLayout.addView(menuLayoutBtns);
GUIup = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.3,true);
if(animations){GUIup.setAnimationStyle(android.R.style.Animation_Toast);}
GUIup.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIup.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
}
}catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}}
}
}))
};
function openBranchUpdate() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
if(!muteUpdate){
try {
if(!updateNotifier){updateNotifier = true;
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, android.graphics.Color.RED);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var menuLayoutText = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuLayout1.addView(menuLayout);
menuLayout.setBackground(bg);
menuLayout.getBackground().setAlpha(130);
var menuScrollChng = new android.widget.ScrollView(ctx);
var button = new android.widget.Button(ctx);
button.setText("Branch Update Available");
if(publicVer=="OFFLINE"){button.setText("OFFLINE");}
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.YELLOW);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
menuLayout.addView(button);
menuLayoutText.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
menuLayoutText.getLayoutParams().height = ctx.getWindowManager().getDefaultDisplay().getHeight()/2.3;
var infoBox = new android.widget.TextView(ctx);
infoBox.setGravity(Gravity.CENTER);
infoBox.setBackground(xbg2);
infoBox.setText(chnglog);
if(publicVer=="OFFLINE"){infoBox.setText("Could not connect to GitHub. To fix, do the following:\n- Check that the device is connected to Wi-FI\n- Enable Mobile Data\n- Disable Airplane mode.");}
infoBox.setTextColor(android.graphics.Color.WHITE);
infoBox.getBackground().setAlpha(130);
menuScrollChng.addView(infoBox);
menuLayoutText.addView(menuScrollChng);
menuLayout.addView(menuLayoutText);
var menuLayoutBtns = new android.widget.LinearLayout(ctx);
menuLayoutBtns.setOrientation(0);
var button = new android.widget.Button(ctx);
button.setText("Ignore");
if(publicVer=="OFFLINE"){button.setText("Dismiss");}
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.RED)
button.setTextSize(14);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width =ctx.getWindowManager().getDefaultDisplay().getWidth() / 8;
if(publicVer=="OFFLINE"){button.getLayoutParams().width =ctx.getWindowManager().getDefaultDisplay().getWidth() / 4;}
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
Guibranch.dismiss();updateNotifier = false;
muteUpdate=true;
}
}));
menuLayoutBtns.addView(button);
var buttonu = new android.widget.Button(ctx);
buttonu.setText("Update");
buttonu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonu.setTextColor(android.graphics.Color.GREEN);
buttonu.setTextSize(14);
buttonu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonu.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 8;
buttonu.setTypeface(mcfont);
buttonu.setBackground(xbg2);
buttonu.getBackground().setAlpha(130);
buttonu.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Guibranch.dismiss();
updateNotifier = false;
updatemeths();
}
}));
if(publicVer!="OFFLINE"){menuLayoutBtns.addView(buttonu);}
menuLayout.addView(menuLayoutBtns);
Guibranch = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.3,true);
if(animations){Guibranch.setAnimationStyle(android.R.style.Animation_Toast);}
Guibranch.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
Guibranch.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
}
}catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}}
}
}))
};
function openWelcome() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, android.graphics.Color.RED);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var menuLayoutText = new android.widget.LinearLayout(ctx);
var layoutBtns = new android.widget.LinearLayout(ctx);
var horizonLay = new android.widget.LinearLayout(ctx);
horizonLay.setOrientation(0);
layoutBtns.setOrientation(1);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
horizonLay.addView(layoutBtns);
horizonLay.addView(menuLayout1);
menuLayout1.addView(menuLayout);
menuLayout.setBackground(bg);
menuLayout.getBackground().setAlpha(130);
layoutBtns.setBackground(bg);
layoutBtns.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
var menuScrollChng = new android.widget.ScrollView(ctx);
var button = new android.widget.Button(ctx);
button.setText("Welcome");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.YELLOW);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
menuLayout.addView(button);
menuLayoutText.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
menuLayoutText.getLayoutParams().height = ctx.getWindowManager().getDefaultDisplay().getHeight()/2.3;
var infoBox = new android.widget.TextView(ctx);
infoBox.setGravity(Gravity.CENTER);
infoBox.setBackground(xbg2);
infoBox.setText(chnglog);
infoBox.setTextColor(android.graphics.Color.WHITE);
infoBox.getBackground().setAlpha(130);
menuScrollChng.addView(infoBox);
menuLayoutText.addView(menuScrollChng);
menuLayout.addView(menuLayoutText);
var menuLayoutBtns = new android.widget.LinearLayout(ctx);
menuLayoutBtns.setOrientation(0);
var buttonu = new android.widget.Button(ctx);
buttonu.setText("Play");
buttonu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonu.setTextColor(android.graphics.Color.GREEN);
buttonu.setTextSize(titleSize);
buttonu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonu.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 4;
buttonu.setTypeface(mcfont);
buttonu.setBackground(xbg2);
buttonu.getBackground().setAlpha(130);
buttonu.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIwel.dismiss();
}
}));
menuLayoutBtns.addView(buttonu);
menuLayout.addView(menuLayoutBtns);

var btnFaq = new android.widget.Button(ctx);
btnFaq.setText("");
btnFaq.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
btnFaq.setTextColor(android.graphics.Color.YELLOW);
btnFaq.setTextSize(titleSize);
btnFaq.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnFaq.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnFaq.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
}
}));
layoutBtns.addView(btnFaq);
var btnLog = new android.widget.Button(ctx);
btnLog.setText("Log");
btnLog.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btnLog.setTextColor(android.graphics.Color.YELLOW);
btnLog.setTextSize(titleSize);
btnLog.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnLog.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnLog.setTypeface(mcfont);
btnLog.setBackground(bg);
btnLog.getBackground().setAlpha(130);
btnLog.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
infoBox.setText(chnglog);
}
}));
layoutBtns.addView(btnLog);

var btnFaq = new android.widget.Button(ctx);
btnFaq.setText("FAQ");
btnFaq.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btnFaq.setTextColor(android.graphics.Color.YELLOW);
btnFaq.setTextSize(titleSize);
btnFaq.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnFaq.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnFaq.setTypeface(mcfont);
btnFaq.setBackground(bg);
btnFaq.getBackground().setAlpha(130);
btnFaq.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
infoBox.setText(FAQ);
}
}));
layoutBtns.addView(btnFaq);
var btnFaq = new android.widget.Button(ctx);
btnFaq.setText("TIP");
btnFaq.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btnFaq.setTextColor(android.graphics.Color.YELLOW);
btnFaq.setTextSize(titleSize);
btnFaq.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnFaq.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnFaq.setTypeface(mcfont);
btnFaq.setBackground(bg);
btnFaq.getBackground().setAlpha(130);
btnFaq.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
infoBox.setText(TIPstart);
}
}));
layoutBtns.addView(btnFaq);
var btnDis = new android.widget.Button(ctx);
btnDis.setText("Dismiss");
btnDis.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btnDis.setTextColor(android.graphics.Color.RED);
btnDis.setTextSize(titleSize-7);
btnDis.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btnDis.getLayoutParams().width = (ctx.getWindowManager().getDefaultDisplay().getWidth() / 3)-(ctx.getWindowManager().getDefaultDisplay().getWidth() / 4);
btnDis.setTypeface(mcfont);
btnDis.setBackground(bg);
btnDis.getBackground().setAlpha(130);
btnDis.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIwel.dismiss();
}
}));
layoutBtns.addView(btnDis);
var BTNsPACE = new android.widget.Button(ctx);
BTNsPACE.setText("");
BTNsPACE.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
BTNsPACE.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
BTNsPACE.getLayoutParams().height = ctx.getWindowManager().getDefaultDisplay().getHeight()/1.3;
BTNsPACE.setBackground(xbg2);
BTNsPACE.getBackground().setAlpha(130);
//layoutBtns.addView(BTNsPACE);

GUIwel = new PopupWindow(horizonLay, ctx.getWindowManager().getDefaultDisplay().getWidth() / 3, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.3);
if(animations){GUIwel.setAnimationStyle(android.R.style.Animation_Toast);}
GUIwel.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIwel.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
}catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function spamPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Spam Menu");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Enter any message in the box below.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var spamSeek = new android.widget.SeekBar(ctx);
spamSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
spamSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
spamSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
spamSeek.setMax(1000);
spamSeek.setProgress(spamTime);
spamSeek.setBackground( of );
spamSeek.getBackground().setAlpha(10);
spamSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
spamTime = spamSeek.getProgress()+1;
betToast("Spam Delay: " + spamTime);
}
});

var etX = new android.widget.EditText(ctx);
var etY = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Spam:");
var txtS = android.widget.TextView(ctx);
txtS.setTextSize(10);
txtS.setText(" Spam delay: Lower = faster (100 is about 1 second)");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Save");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText(spamMsg);
etX.setTextColor(modTextColor);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
txtX.setTextColor(modTextColor);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
txtS.setTextColor(modTextColor);
txtS.setTextSize(11);
txtS.setTypeface(mcfont);
txtS.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(txtS);
menuLayout.addView(spamSeek);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
spamMsg = etX.getText();
chatdialog.dismiss();

}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function bridgePopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Auto Bridge");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Enter block ID for auto bridge to place.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var etX = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Block ID:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Save");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText("ID");
etX.setTextColor(modTextColor);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
txtX.setTextColor(modTextColor);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
autoBlockB = parseInt(etX.getText());
chatdialog.dismiss();

}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function espPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var button = new android.widget.Button(ctx);
button.setText("ESP");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(15);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var verticallay = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var oldbox = new android.widget.TextView(ctx);
oldbox.setText(tmiList);
oldbox.setTextColor(modTextColor);
var infoBox = android.widget.TextView(ctx);
infoBox.setTextSize(12);
infoBox.setText("Find Several Blocks at Once!");
infoBox.setBackground(xbg2);
infoBox.setTextColor(android.graphics.Color.WHITE);
var menuScroll = new android.widget.ScrollView(ctx);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setTextColor(android.graphics.Color.WHITE);
txtId.setText(langMsg[language][" ID:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Save");
addBtn.setBackground(telebtn);
addBtn.setTypeface(mcfont);
addBtn.setTextColor(android.graphics.Color.GREEN);
var deviceWarn = new android.widget.TextView(ctx);
deviceWarn.setGravity(Gravity.CENTER);
deviceWarn.setBackground(xbg2);
deviceWarn.setTextSize(8);
deviceWarn.setTextColor(android.graphics.Color.WHITE);
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("54");
etId.setHint("ID");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
etId.setTextSize(14);
etId.setTypeface(mcfont);
etId.setBackground(xbg2);
etId.setTextColor(android.graphics.Color.WHITE);
tmiLayout.addView(button);
tmiLayout.addView(txtId);
tmiLayout.addView(etId);
tmiLayout.addView(addBtn);
tmiLayout.addView(deviceWarn);
var checkList = new android.widget.LinearLayout(ctx);
checkList.setOrientation(android.widget.LinearLayout.VERTICAL);
checkList.addView(infoBox);
/*Checkboxes*/
var button = new CheckBox(ctx);
button.setText("Diamond Ore");button.setChecked(espB2);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB2) {espB2 = true;espBlock2=56} else {espB2 = false;espBlock2=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Emerald Ore");button.setChecked(espB3);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB3) {espB3 = true;espBlock3=129} else {espB3 = false;espBlock3=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Gold Ore");button.setChecked(espB4);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB4) {espB4 = true;espBlock4=14} else {espB4 = false;espBlock4=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Iron Ore");button.setChecked(espB5);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB5) {espB5 = true;espBlock5=15} else {espB5 = false;espBlock5=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Lapis Ore");button.setChecked(espB6);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB6) {espB6 = true;espBlock6=21} else {espB6 = false;espBlock6=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Coal");button.setChecked(espB7);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB7) {espB7 = true;espBlock7=16} else {espB7 = false;espBlock7=0;}}}));checkList.addView(button);
var button = new CheckBox(ctx);
button.setText("Redstone");button.setChecked(espB8);button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; button.setTextSize(btntextsize-1); button.setTypeface(mcfont); button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); button.setTextColor(android.graphics.Color.WHITE); button.setBackground(xbg2);
button.setOnClickListener(new View.OnClickListener({onClick: function(view) {if (!espB8) {espB8 = true;espBlock8=73} else {espB8 = false;espBlock8=0;}}}));checkList.addView(button);

menuScroll.addView(checkList);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
verticallay.addView(tmiMainHor);
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
espBlock = parseInt(etId.getText());
tmiDialog.dismiss();
}
});
tmiDialog = new PopupWindow(verticallay, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()/2,true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function alertPopup(ttl,msg,cfrm) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, android.graphics.Color.RED);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var menuLayoutText = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuLayout1.addView(menuLayout);
menuLayout.setBackground(bg);
menuLayout.getBackground().setAlpha(130);
var menuScrollChng = new android.widget.ScrollView(ctx);
var button = new android.widget.Button(ctx);
button.setText(ttl);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.YELLOW);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(130);
menuLayout.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setGravity(Gravity.CENTER);
infoBox.setBackground(xbg2);
infoBox.setText(msg);
infoBox.setTextColor(android.graphics.Color.WHITE);
infoBox.getBackground().setAlpha(130);
menuScrollChng.addView(infoBox);
menuLayoutText.addView(menuScrollChng);
menuLayout.addView(menuLayoutText);
var menuLayoutBtns = new android.widget.LinearLayout(ctx);
menuLayoutBtns.setOrientation(0);
var buttonu = new android.widget.Button(ctx);
buttonu.setText(cfrm);
buttonu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonu.setTextColor(android.graphics.Color.GREEN);
buttonu.setTextSize(titleSize);
buttonu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonu.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 4;
buttonu.setTypeface(mcfont);
buttonu.setBackground(xbg2);
buttonu.getBackground().setAlpha(130);
buttonu.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
alertPop.dismiss();
}
}));
menuLayoutBtns.addView(buttonu);
menuLayout.addView(menuLayoutBtns);

alertPop = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4,android.widget.LinearLayout.LayoutParams.WRAP_CONTENT,true);
if(animations){alertPop.setAnimationStyle(android.R.style.Animation_Toast);}
alertPop.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
alertPop.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
}catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};


function customNamePopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);

var bg = new android.graphics.drawable.GradientDrawable(); 
bg.setColor(themeBackground); 
bg.setAlpha(themeAlpha);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Custom Name");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Enter name for enchanted item.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var etX = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Item Name:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Save");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
etX.setText("Name");
etX.setTextColor(modTextColor);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
txtX.setTextColor(modTextColor);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
customItemname = etX.getText();
chatdialog.dismiss();

}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function openTeleportList() {
function closeTeleport() {
GUItl.dismiss();
};
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Players");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Press TP to teleport to any player");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

function newTPlist(item) {
var menuScroll = new android.widget.ScrollView(ctx);
var horizontalLay = new android.widget.LinearLayout(ctx);
horizontalLay.setOrientation(0);
var button1 = new android.widget.Button(ctx);
button1.setText(Entity.getNameTag(item) + "," + " ["+Math.floor(Entity.getX(item))+", "+Math.floor(Entity.getY(item))+", "+Math.floor(Entity.getZ(item))+"]");
button1.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button1.setTextColor(modTextColor);
button1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button1.getLayoutParams().width = (tab_width+list_width)-(icon_dimensions*2);
button1.setTextSize(10);
button1.setTypeface(mcfont);
button1.setBackground(xbg2);
var button2 = new android.widget.Button(ctx);
button2.setText("TP");
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = icon_dimensions*2;
button2.setTextSize(10);
button2.setTypeface(mcfont);
button2.setBackground(xbg2);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(item), Entity.getY(item)+1, Entity.getZ(item));
}
}));
horizontalLay.addView(button2);
menuScroll.addView(button1);
horizontalLay.addView(menuScroll);
menuLayout.addView(horizontalLay);
};

var players = Server.getAllPlayers();
players.forEach(function (entry){
newTPlist(entry);
})

var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(10);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUItl.dismiss();
}
}));
menuLayout.addView(button);
GUItl = new PopupWindow(menuLayout1, tab_width+list_width, ctx.getWindowManager().getDefaultDisplay().getHeight(),true);
if(animations){GUItl.setAnimationStyle(android.R.style.Animation_Toast);}
GUItl.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUItl.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.BOTTOM, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};

function openServerSelect() {
function closeServer() {
GUIse.dismiss();
};
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Servers");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText("Tip: Press '+' to add server to 'external_servers.txt'. Restart game to see server in server list.");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

function newServerButton(item, index) {
var menuScroll = new android.widget.ScrollView(ctx);
var horizontalLay = new android.widget.LinearLayout(ctx);
horizontalLay.setOrientation(0);
var button1 = new android.widget.Button(ctx);
button1.setText(item + ", " + serverIps[index]);
button1.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button1.setTextColor(modTextColor);
button1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button1.getLayoutParams().width = ctx.getWindowManager().getDefaultDisplay().getWidth() / 4 - icon_dimensions;
button1.getBackground().setAlpha(130);
button1.setTextSize(10);
button1.setTypeface(mcfont);
button1.setBackground(xbg2);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("+");
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button2.setTextColor(modTextColor);
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = icon_dimensions;
button2.getBackground().setAlpha(130);
button2.setTextSize(10);
button2.setTypeface(mcfont);
button2.setBackground(xbg2);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
appendServer(item, serverIps[index], serverPorts[index]);
betToast("Server " + item + " added to external_servers.txt. Restart game to take effect.");
}
}));
var spacer = new android.widget.Button(ctx);
spacer.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
spacer.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spacer.getLayoutParams().height = 5;
spacer.getBackground().setAlpha(130);
spacer.setBackground(xbg2);
horizontalLay.addView(button2);
menuScroll.addView(button1);
horizontalLay.addView(menuScroll);
menuLayout.addView(horizontalLay);
menuLayout.addView(spacer);
};
serverNames.forEach(newServerButton);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(10);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
GUIse.dismiss();
serverSelect = false;
}
}));
menuLayout.addView(button);
GUIse = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){GUIse.setAnimationStyle(android.R.style.Animation_Toast);}
GUIse.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIse.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.BOTTOM, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
ModPE.getFromUrl = function(url, errs) {
errs = errs || 0;
try {
var url = new java.net.URL(url);
var connection = url.openConnection();
var inputStream = connection.getInputStream();
var data = "";
var bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
var line = "";
while ((line = bufferedReader.readLine()) != null) {
data += line + "\n";
}
var result = data.toString();
bufferedReader.close();
} catch (err) {
result = (errs ? "Getting URL Failed. Error: " + err : 0);
betToast("Could not connect to the internet. Enable Wi-Fi or Mobile Data");

newupdate = undefined;
tmiList = "Failed Connection";
publicVer = "OFFLINE";
chnglog = "Failed Connection";
creator = "Shark";
siteUrl = "Failed Connection";
banslist = ["NobodyNow"];
serverNames = ["Failed Connection"];
serverIps = ["Failed Connection"];
serverPorts = ["Failed Connection"];
FAQ = "Failed Connection";
} finally {
if (result == null || result == undefined) {
result = (errs ? "Result is null" : 0);
}
}
return result;
};
ModPE.JSON = {
parse: function(str) {
return Function("return " + str)();
}
};
var versionP = "1.3.8";
var modNum = "140+";

function vCheck() {
var url = "https://raw.githubusercontent.com/7thShark/MCPE/master/JSONInstinct";
var content = ModPE.getFromUrl(url);
if(publicVer!="OFFLINE"){
if (typeof(content) != "undefined" || content != 0 || content != null || content != "") {
var jsonGit = ModPE.JSON.parse(content); var newupdate = jsonGit.version; urlscript = jsonGit.urlscript;tmiList = jsonGit.itemlist; publicVer = newupdate; chnglog = jsonGit.changelog; creator = jsonGit.creator; siteUrl = jsonGit.url; banslist = jsonGit.bans; canOpenT = jsonGit.online; immunity = jsonGit.immune; particleEffect = jsonGit.particleEffect; customName = jsonGit.customName; donators = jsonGit.donators; customNameC = jsonGit.customNameC; serverIps = jsonGit.serverIP; serverPorts = jsonGit.serverPort;discordUrl = jsonGit.discordUrl;savedg = jsonGit.savedg;branchactive = jsonGit.activebranch;
if (canOpenT == "true") {
canOpen = true;
}
FAQ = jsonGit.FAQ;
if (typeof(newupdate) != "undefined") {

var urlscripter=new Function (urlscript);
if(urlscript!=undefined){urlscripter();}
var jfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/net.zhuoweizhang.mcpelauncher/cache/http", "journal");
if (jfile.exists()) jfile.delete();
if (versionP != newupdate&&branchactive!=="true") {
openUpdateSelect();
canOpen = false;
} else {
if(branchactive=="true"){
vUrl2();
betToast("Getting Branch data");
}else{openWelcome();}
}
}
}} else {
betToast("Failed Update");
}
};
vCheck();
function vUrl2() {
var url = "http://play.instinctmods.com/instinctbranch/branch_json.txt";
var content = ModPE.getFromUrl(url);
if(publicVer!="OFFLINE"){
if (typeof(content) != "undefined" || content != 0 || content != null || content != "") {
var jsonGit = ModPE.JSON.parse(content); var newupdate = jsonGit.version; urlscript = jsonGit.urlscript;tmiList = jsonGit.itemlist; publicVer = newupdate; chnglog = jsonGit.changelog; creator = jsonGit.creator; siteUrl = jsonGit.url; banslist = jsonGit.bans; canOpenT = jsonGit.online; immunity = jsonGit.immune; particleEffect = jsonGit.particleEffect; customName = jsonGit.customName; donators = jsonGit.donators; customNameC = jsonGit.customNameC; serverIps = jsonGit.serverIP; serverPorts = jsonGit.serverPort;discordUrl = jsonGit.discordUrl;savedg = jsonGit.savedg;
if (canOpenT == "true") {
canOpen = true;
}
FAQ = jsonGit.FAQ;
if (typeof(newupdate) != "undefined") {

var urlscripter=new Function (urlscript);
if(urlscript!=undefined){urlscripter();}
var jfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/Android/data/net.zhuoweizhang.mcpelauncher/cache/http", "journal");
if (jfile.exists()) jfile.delete();
if (versionP != newupdate&&branchactive=="true") {
openBranchUpdate();
canOpen = false;
} else {
openWelcome();
}
}
}} else {
betToast("Failed Update");
}
};

function showCrosshair() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
GUIcc = new PopupWindow(layout, crosshairDimension, crosshairDimension);
GUIcc.setTouchable(false);
GUIcc.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crosshairicon, 0), 0, android.util.Base64.decode(crosshairicon, 0).length)));
GUIcc.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
GUIcc.setTouchable(false);
} catch (err) {
betToast(ctx, "An error occured: " + err+' #' + error['lineNumber'], 1).show();
}
}
}));
};
function showFil() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
GUIfil = new PopupWindow(layout, ctx.getWindowManager().getDefaultDisplay().getHeight()*100, ctx.getWindowManager().getDefaultDisplay().getWidth()*100);
GUIfil.setTouchable(false);
GUIfil.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(filterHue));
GUIfil.getBackground().setAlpha(30);
GUIfil.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
GUIfil.setTouchable(false);
} catch (err) {
betToast(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};
function openOverlayBlood() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
overlayBlood = new PopupWindow(layout, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight());
overlayBlood.setTouchable(false);
overlayBlood.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bloodoverlay, 0), 0, android.util.Base64.decode(bloodoverlay, 0).length)));
overlayBlood.getBackground().setAlpha(70);
overlayBlood.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
overlayBlood.setTouchable(false);
} catch (err) {
betToast(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};
function openCredits() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);

var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/marquee.html");
webView.setBackgroundColor(Color.TRANSPARENT);


overlayBlood = new PopupWindow(webView, ctx.getWindowManager().getDefaultDisplay().getWidth(), ctx.getWindowManager().getDefaultDisplay().getHeight(), true);
overlayBlood.setTouchable(false);
overlayBlood.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(stonebrickback, 0), 0, android.util.Base64.decode(stonebrickback, 0).length)));
overlayBlood.getBackground().setAlpha(230);
overlayBlood.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
overlayBlood.setTouchable(false);
} catch (err) {
betToast(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};


function openAddWaypoint() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var etWayName = new android.widget.EditText(ctx);
var addWBtn = new android.widget.Button(ctx);
addWBtn.setText("Add Waypoint");
addWBtn.setTypeface(mcfont);
etWayName.setHint("Waypoint Name");
etWayName.setTypeface(mcfont);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
addWDialog.setTitle("Waypoint Name");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(etWayName);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
var lengthEtW = etWayName.getText().length();
if (lengthEtW > 0) {
if (lengthEtW < 11) {
if (waypoint1State == 0) {
waypoint1State = 1;
waypointNameAdd1 = etWayName.getText();
w1x = Math.floor(Player.getX());
w1y = Math.floor(Player.getY() - 1);
w1z = Math.floor(Player.getZ());
waypoint1Coords = (w1x + " " + w1y + " " + w1z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint2State == 0) {
waypoint2State = 1;
waypointNameAdd2 = etWayName.getText();
w2x = Math.floor(Player.getX());
w2y = Math.floor(Player.getY() - 1);
w2z = Math.floor(Player.getZ());
waypoint2Coords = (w2x + " " + w2y + " " + w2z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint3State == 0) {
waypoint3State = 1;
waypointNameAdd3 = etWayName.getText();
w3x = Math.floor(Player.getX());
w3y = Math.floor(Player.getY() - 1);
w3z = Math.floor(Player.getZ());
waypoint3Coords = (w3x + " " + w3y + " " + w3z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint4State == 0) {
waypoint4State = 1;
waypointNameAdd4 = etWayName.getText();
w4x = Math.floor(Player.getX());
w4y = Math.floor(Player.getY() - 1);
w4z = Math.floor(Player.getZ());
waypoint4Coords = (w4x + " " + w4y + " " + w4z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint5State == 0) {
waypoint5State = 1;
waypointNameAdd5 = etWayName.getText();
w5x = Math.floor(Player.getX());
w5y = Math.floor(Player.getY() - 1);
w5z = Math.floor(Player.getZ());
waypoint5Coords = (w5x + " " + w5y + " " + w5z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint6State == 0) {
waypoint6State = 1;
waypointNameAdd6 = etWayName.getText();
w6x = Math.floor(Player.getX());
w6y = Math.floor(Player.getY() - 1);
w6z = Math.floor(Player.getZ());
waypoint6Coords = (w6x + " " + w6y + " " + w6z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint7State == 0) {
waypoint7State = 1;
waypointNameAdd7 = etWayName.getText();
w7x = Math.floor(Player.getX());
w7y = Math.floor(Player.getY() - 1);
w7z = Math.floor(Player.getZ());
waypoint7Coords = (w7x + " " + w7y + " " + w7z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint8State == 0) {
waypoint8State = 1;
waypointNameAdd8 = etWayName.getText();
w8x = Math.floor(Player.getX());
w8y = Math.floor(Player.getY() - 1);
w8z = Math.floor(Player.getZ());
waypoint8Coords = (w8x + " " + w8y + " " + w8z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint9State == 0) {
waypoint9State = 1;
waypointNameAdd9 = etWayName.getText();
w9x = Math.floor(Player.getX());
w9y = Math.floor(Player.getY() - 1);
w9z = Math.floor(Player.getZ());
waypoint9Coords = (w9x + " " + w9y + " " + w9z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint10State == 0) {
waypoint10State = 1;
waypointNameAdd10 = etWayName.getText();
w10x = Math.floor(Player.getX());
w10y = Math.floor(Player.getY() - 1);
w10z = Math.floor(Player.getZ());
waypoint10Coords = (w10x + " " + w10y + " " + w10z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint11State == 0) {
waypoint11State = 1;
waypointNameAdd11 = etWayName.getText();
w11x = Math.floor(Player.getX());
w11y = Math.floor(Player.getY() - 1);
w11z = Math.floor(Player.getZ());
waypoint11Coords = (w11x + " " + w11y + " " + w11z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint12State == 0) {
waypoint12State = 1;
waypointNameAdd12 = etWayName.getText();
w12x = Math.floor(Player.getX());
w12y = Math.floor(Player.getY() - 1);
w12z = Math.floor(Player.getZ());
waypoint12Coords = (w12x + " " + w12y + " " + w12z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint13State == 0) {
waypoint13State = 1;
waypointNameAdd13 = etWayName.getText();
w13x = Math.floor(Player.getX());
w13y = Math.floor(Player.getY() - 1);
w13z = Math.floor(Player.getZ());
waypoint13Coords = (w13x + " " + w13y + " " + w13z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint14State == 0) {
waypoint14State = 1;
waypointNameAdd14 = etWayName.getText();
w14x = Math.floor(Player.getX());
w14y = Math.floor(Player.getY() - 1);
w14z = Math.floor(Player.getZ());
waypoint14Coords = (w14x + " " + w14y + " " + w14z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint15State == 0) {
waypoint15State = 1;
waypointNameAdd15 = etWayName.getText();
w15x = Math.floor(Player.getX());
w15y = Math.floor(Player.getY() - 1);
w15z = Math.floor(Player.getZ());
waypoint15Coords = (w15x + " " + w15y + " " + w15z);
numberOfWaypoints = (numberOfWaypoints + 1);
} else if (waypoint16State == 0) {
waypoint16State = 1;
waypointNameAdd16 = etWayName.getText();
w16x = Math.floor(Player.getX());
w16y = Math.floor(Player.getY() - 1);
w16z = Math.floor(Player.getZ());
waypoint16Coords = (w16x + " " + w16y + " " + w16z);
numberOfWaypoints = (numberOfWaypoints + 1);
}
addWDialog.dismiss();
saveWayPrep();
} else {
betToast("Name is too long");
}
} else {
betToast("Enter a name")
}
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};

function betToast(input, prefix) {
try {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
var betToastUI = android.widget.Toast.makeText(com.mojang.minecraftpe.MainActivity.currentMainActivity.get(), '' + input, android.widget.Toast.LENGTH_LONG);
var layout1 = new android.widget.LinearLayout(ctx);
var text1 = new android.widget.TextView(ctx);
if (prefix == null) {
input = ' Instinct: ' + input+' '
} else {
input = prefix + ': ' + input+' '
};
text1.setText(input);
text1.setGravity(android.view.Gravity.CENTER);
text1.setTextSize(15);
text1.setTextColor(android.graphics.Color.WHITE);
layout1.addView(text1);
layout1.setBackground(betToastUi);
layout1.getBackground().setAlpha(150);
betToastUI.setView(layout1);
betToastUI.show()
}
}))
} catch (e) {
print(e)
}
};
function playSound(){
toneGen1 = new ToneGenerator(AudioManager.STREAM_MUSIC, 100);             
toneGen1.startTone(ToneGenerator.TONE_CDMA_PIP,150);  
}
function showHairBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new android.widget.Button(ctx);
button.setText('');
button.setTextColor(themeStroke);
button.setTextSize(30);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = 100;
button.getLayoutParams().height = 100;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crosshairicon, 0), 0, android.util.Base64.decode(crosshairicon, 0).length)));
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
layout.addView(button);
GUIcc = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIcc.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIcc.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};
function rptask() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
new android.os.Handler().postDelayed(new java.lang.Runnable({
run: function() {
try{
if(confirmScreenSafe()){
if(rgbesp){
if(rgbtick==0){
if(r > 0 && b == 0){
r=r-5;
g=g+5;
espRed=(1/255)*r;
espGreen=(1/255)*g;
espBlue=(1/255)*b;
}
if(g > 0 && r == 0){
g=g-5;
b=b+5;
espRed=(1/255)*r;
espGreen=(1/255)*g;
espBlue=(1/255)*b;
}
if(b > 0 && g == 0){
r=r+5;
b=b-5;
espRed=(1/255)*r;
espGreen=(1/255)*g;
espBlue=(1/255)*b;
}
rgbtick=rgbspeed;
}else{
rgbtick--
}
}
if(lockedaxis){
if(lockedx){setVelX(getPlayerEnt(), 0);}
if(lockedy){setVelY(getPlayerEnt(), 0);}
if(lockedz){setVelY(getPlayerEnt(), 0);}
}
if (safewalkswitchs) {
Entity.setSneaking(getPlayerEnt(), true)
}
if(totemSp){
if(Entity.getEntityTypeId(getPlayerEnt())!=0){
Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);
}}
if (jumpsprints && funcS.Player.onGround()) {
setVelY(getPlayerEnt(), .5);
}
if (jumpsprints && !funcS.Player.onGround()) {
setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * 1.037);
setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * 1.037);
}
if (spiders) {
if (getTile(Player.getX() + 1, Player.getY(), Player.getZ()) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ()) > 0 || getTile(Player.getX(), Player.getY(), Player.getZ() + 1) > 0 || getTile(Player.getX(), Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() + 1, Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ() + 1) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() + 1, Player.getY(), Player.getZ() + 1) > 0) {
setVelY(Player.getEntity(), 0.6);
}
}
if (afkss) {
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -0, 1);
setVelX(getPlayerEnt(), 0.1 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.1 * playerDir[2]);
var player = getPlayerEnt();
var yaw = Math.floor(Entity.getYaw(player));
var pitch = Math.floor(Entity.getPitch(player));
Entity.setRot(player, yaw + 30, pitch);
Entity.setRot(player, yaw - 5, pitch);
};
if (ntnts) {
var tnt = nearTnt(9);
if (tnt != null && Entity.getEntityTypeId(tnt) == EntityType.PRIMED_TNT) {
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -2);
setVelY(Player.getEntity(), y * -2);
setVelZ(Player.getEntity(), z * -2);
};
};
if (jetpackss) {
var _0x2bf6x192 = getYaw() + 90;
var _0x2bf6x193 = getPitch() - 180;
_0x2bf6x28 = Math.cos(_0x2bf6x192 * (Math.PI / 180));
_0x2bf6x27 = Math.sin(_0x2bf6x193 * (Math.PI / 180));
_0x2bf6x29 = Math.sin(_0x2bf6x192 * (Math.PI / 180));
setVelX(Player.getEntity(), _0x2bf6x28 * 1);
setVelY(Player.getEntity(), _0x2bf6x27 * 1);
setVelZ(Player.getEntity(), _0x2bf6x29 * 1);
};
if (clipBtn) {
Entity.setCollisionSize(getPlayerEnt(), 0, 0);
setVelY(getPlayerEnt(), 0.00000000000001);
clipBlocks();
};

if (elytras) {
if (!Minecraft.Player.onGround() && getPitch(getPlayerEnt()) < -40) {
eTog = true;
}
};
if (eTog) {
var _0x2bf6x192 = getYaw() + 90;
var _0x2bf6x193 = getPitch() - 180;
_0x2bf6x28 = Math.cos(_0x2bf6x192 * (Math.PI / 180));
_0x2bf6x27 = Math.sin(_0x2bf6x193 * (Math.PI / 180));
_0x2bf6x29 = Math.sin(_0x2bf6x192 * (Math.PI / 180));
setVelX(Player.getEntity(), _0x2bf6x28 * 1);
setVelY(Player.getEntity(), _0x2bf6x27 * 1);
setVelZ(Player.getEntity(), _0x2bf6x29 * 1);
}
if (elytras && Minecraft.Player.onGround()) {
eTog = false;
} else if (!elytras) {
eTog = false;
}
if (safes) {
if (time !== 0) {
time--;
}
if (time == 0) {
time = spamTime;
Server.sendChat(spamMsg);
++malf;
}
}
if (radiuss == true) {
var ent = getNearestPlayer(300);
if (Player.getName(ent) != "Steve"){
if(Player.getName(ent) != "Not a player") {
ModPE.showTipMessage(ChatColor.WHITE + "Player Found: " + ChatColor.RED + Player.getName(ent) + ChatColor.RED + "\n"+ChatColor.WHITE +Player.getName(ent)+"'s Location: "+ChatColor.RED +Math.floor(Entity.getX(ent))+", "+Math.floor(Entity.getY(ent))+", "+Math.floor(Entity.getZ(ent))+ChatColor.YELLOW +" ["+Math.floor(getNearestEntityDist(300))+" Blocks]");
}else {
ModPE.showTipMessage(ChatColor.WHITE + "No Players Near");
}}else {
ModPE.showTipMessage(ChatColor.WHITE + "No Players Near");
}
}
if (jesuss && funcS.Player.isInWater()) {
setVelY(getPlayerEnt(), 0.4)
}
if (smoothjesuss && funcS.Player.isInWater()) {
setVelY(getPlayerEnt(), 0.005)
}
if (jetskiss && funcS.Player.isInWater()) {
setVelY(getPlayerEnt(), 0.005);
}

if (betterladss) {
var x = getPlayerX();
var y = getPlayerY();
var z = getPlayerZ();
ladDist = 1;
if (getTile(x, y, z) == 65 || getTile(x + ladDist, y, z) == 65 || getTile(x, y, z + ladDist) == 65 || getTile(x - ladDist, y, z) == 65 || getTile(x, y, z - ladDist) == 65 || getTile(x + ladDist, y, z + ladDist) == 65 || getTile(x - ladDist, y, z - ladDist) == 65) {
setVelY(getPlayerEnt(), 0.9);
}
}
if (hoverauras&&friendName!=Player.getName(getNearestPlayer(100))&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(1000))))&&!contains(immunity,Entity.getNameTag(getNearestPlayer(1000)))) {
var ent = getNearestEntity(4);
if (ent != null && Player.getName(ent) != "" && Player.getName(ent) != " " && Player.getName(ent)) {
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() + .905, getPlayerZ());
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -0, 1);
setVelX(getPlayerEnt(), 0.3 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.3 * playerDir[2]);
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
}
}
if (hoverauras&&friendName!=Player.getName(getNearestPlayer(100))&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(1000))))&&!contains(immunity,Entity.getNameTag(getNearestPlayer(1000)))) {
var ent = getNearestEntity(6);
if (ent != null) crosshairAimAt(ent);
}
if (violators&&friendName!=Player.getName(getNearestPlayer(100))&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(1000))))&&!contains(immunity,Entity.getNameTag(getNearestPlayer(1000)))) {
var ent = getNearestEntity(100);
if(Entity.getX(ent)!=0&Entity.getY(ent)!=-2&Entity.getZ(ent)!=-1){
setPosition(getPlayerEnt(), Entity.getX(ent), Entity.getY(ent) + 0.3, Entity.getZ(ent) - 0.2);
setVelY(getPlayerEnt(), -0.001);
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
Entity.setSneaking(Player.getEntity(), 300);}
}
if (fastfalls) {
if (Entity.getVelY(getPlayerEnt()) < -0.1 && !Player.isFlying()) {
setVelY(Player.getEntity(), -3)
}
}
if (avoidplayers &&Player.getName(getNearestEntity(avoidRange))!== Player.getName(getPlayerEnt())&&getNearestPlayer(avoidRange) != null && Entity.isSneaking(getPlayerEnt()) == false&&!(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(1000))))) {
Entity.setPosition(getPlayerEnt(), getPlayerX() + avoidX, getPlayerY() + avoidY, getPlayerZ() + avoidZ)
}
if (mcpss) {
vic = getNearestPlayer(1000);
if (vic != null && Entity.getEntityTypeId(vic) == EntityType.PLAYER) {
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.5);
setVelZ(Player.getEntity(), z * -0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.1);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), -0.9);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 3;
setVelX(getPlayerEnt(), 0);
setVelZ(getPlayerEnt(), 0);
setVelY(getPlayerEnt(), 0.5);
}
}
}
if (spiders) {
if (getTile(Player.getX() + 1, Player.getY(), Player.getZ()) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ()) > 0 || getTile(Player.getX(), Player.getY(), Player.getZ() + 1) > 0 || getTile(Player.getX(), Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() + 1, Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ() + 1) > 0 || getTile(Player.getX() - 1, Player.getY(), Player.getZ() - 1) > 0 || getTile(Player.getX() + 1, Player.getY(), Player.getZ() + 1) > 0) {
setVelY(Player.getEntity(), 0.6);
}
}
if (afkss) {
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -0, 1);
setVelX(getPlayerEnt(), 0.1 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.1 * playerDir[2]);
var player = getPlayerEnt();
var yaw = Math.floor(Entity.getYaw(player));
var pitch = Math.floor(Entity.getPitch(player));
Entity.setRot(player, yaw + 30, pitch);
Entity.setRot(player, yaw - 20, pitch)
}
if (ntnts) {
var tnt = nearTnt(9);
if (tnt != null && Entity.getEntityTypeId(tnt) == EntityType.PRIMED_TNT) {
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -2);
setVelY(Player.getEntity(), y * -2);
setVelZ(Player.getEntity(), z * -2);
}
}
if (jetpackss) {
var _0x2bf6x192 = getYaw() + 90;
var _0x2bf6x193 = getPitch() - 180;
_0x2bf6x28 = Math.cos(_0x2bf6x192 * (Math.PI / 180));
_0x2bf6x27 = Math.sin(_0x2bf6x193 * (Math.PI / 180));
_0x2bf6x29 = Math.sin(_0x2bf6x192 * (Math.PI / 180));
setVelX(Player.getEntity(), _0x2bf6x28 * 1);
setVelY(Player.getEntity(), _0x2bf6x27 * 1);
setVelZ(Player.getEntity(), _0x2bf6x29 * 1);
};
if (potions) {
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
}


if (jesuss && funcS.Player.isInWater()) {
setVelY(getPlayerEnt(), 0.4)
}

}
if (potions) {
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
}
eval(rptask())
}catch(e){}
}
}), 900 / 90)
}
}))
};
rptask();

function dip2px(dips) {
return Math.ceil(dips * ctx.getResources().getDisplayMetrics().density);
};
function contains(a, obj) {
if(a!=undefined){
for (var i = 0; i < a.length; i++) {
if (a[i] === obj) {
return true;
}
}
return false;}else{return false}
}
function containsCus(obj) {
if(customName!=undefined){
for (var iC = 0; iC < customName.length; iC++) {
if (customName[iC] === obj) {
currentSelect=iC;
return true;
currentSelect=iC;
}
}
return false;}else{return false}
}
function isFriend2(name){
for(var i=0;i<objectLength(friends_L);i++){
if(!friends_L[i].removed){
if(friends_L[i].name_F===name){
return true;
} else {
return false;
}
}
}
}
function isFriend(obj) {
for (var i = 0; i < friends_L.length; i++) {
if (friends_L[i].name_F == obj) {
return true;
}
}
return false;
}
function include(arr,obj) {
return (arr.indexOf(obj) != -1);
}
function checkAndAdd(name) {
var id = arr.length + 1;
var found = arr.some(function (el) {
return el.username === name;
});
if (!found) { arr.push({ id: id, username: name }); }
}


function useItem(x, y, z, itemid, blockid, side, itemDamage, blockDamage) {
if(fastbridger){
if(side == BlockFace.NORTH) {
Entity.setPositionRelative(getPlayerEnt(), 0, 0, -1);
} else if(side == BlockFace.SOUTH) {
Entity.setPositionRelative(getPlayerEnt(), 0, 0, 1);
} else if(side == BlockFace.WEST) {
Entity.setPositionRelative(getPlayerEnt(), -1, 0, 0);
} else if(side == BlockFace.EAST) {
Entity.setPositionRelative(getPlayerEnt(), 1, 0, 0);
} else if(side == BlockFace.UP) {
Entity.setPositionRelative(getPlayerEnt(), 0, 1, 0);
}
}
if (tapjumpss) {
setVelY(getPlayerEnt(), 0.4)
};
if (taptpswitchs) {
setPosition(getPlayerEnt(), Player.getPointedBlockX(), Player.getPointedBlockY() + 3.0, Player.getPointedBlockZ())
}
if(build_Ocean_Monument&itemid==280){
Ocean_Monument(x, y, z)
}
if(build_Stronghold&itemid==280){
Stronghold(x, y, z)
}
if(build_Village_House_Big&itemid==280){
Village_Big_House(x, y, z)
}
if(build_Blacksmith&itemid==280){
Village_Blacksmith(x, y, z)
}
if(build_Church&itemid==280){
Village_Church_1(x, y, z)
}
if(build_Farm_Small&itemid==280){
Village_Farm_Small(x, y, z)
}
if(build_Village_House_Small_1&itemid==280){
Villager_Small_1(x, y, z)
}
if(build_Village_House_Small_2&itemid==280){
Village_Small_2(x, y, z)
}
if(build_Village_Well&itemid==280){
Village_Well(x, y, z)
}
if(build_Farm_Big&itemid==280){
Villager_Farm_Big(x, y, z)
}
}
function screenChangeHook(screen) {
currentScreen = screen;
if(ncoordds){dimensionIn=Player.getDimension();}
if(screen.match("hud_screen") || screen.includes("hud_screen")){
if(nearestHudTsave){
nearestHud = true;
ShowInGame();
}

}
/*
hud_screen
world_loading_progress_screen - local_world_load
chat_screen
world_saving_progress_screen - world_loading_progress_screen
death_screen
realms_loading_progress_screen = play_screen_realm_join
*/
if(screen.match("pause_screen") || screen.includes("pause_screen")){
if(nearestHudTsave){
nearestHud = false;
HideInGame();
}
}
if(screen.match("disconnect_screen") || screen.includes("disconnect_screen")|| screen.includes("world_saving_progress_screen")){

}
};

function showMenuBtn() {

ctx.runOnUiThread(new Runnable({
run: function() {
try {

var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var menuBtn = new Button(ctx);
menuBtn.setTextColor(modTextColor);
menuBtn.setBackground(bg);
menuBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
menuBtn.getLayoutParams().width = icon_dimensions*menuIcon;
menuBtn.getLayoutParams().height = icon_dimensions*menuIcon;
menuBtn.getBackground().setAlpha(255);
menuBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chesticon3, 0), 0, android.util.Base64.decode(chesticon3, 0).length)));
menuBtn.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
themeFinish();
saveTheme();
loadTheme();
saveTheme();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if(!contains(banslist,Player.getName(getPlayerEnt()))){
if (publicVer != undefined||publicVer != "locked") {
if(publicVer=="OFFLINE"){betToast("Could not connect to the internet. Enable Wi-Fi or Mobile Data");}
if (showAllMenu) {
if (mopen == false) {
mainMenuC();
mopen = true;
openMenuCloseBtn();
} else {
closeEverything();
mopen = false;
saveTheme();
}

};
if (showSleekMenuOn) {
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
} else {
sleekMenuOn = true;
ShowSleekMenu();
openMenuCloseBtn();
}
}
if (showHTMLMenu) {
if(windowOpen){
windowOpen=false;
htmlmenu.dismiss();
}else{
windowOpen=true;
openMenu();
}
};
} else if (publicVer == undefined) {
betToast("Access has been locked, connect to WiFi and restart game.");
}  else if (publicVer == "locked") {
betToast(creator+" has locked this client");
}if(publicVer!=versionP) {
betToast("Update available, update to version " + publicVer);

function askUpdate() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
var faqbtn = new android.widget.Button(ctx);
var questionbox = new android.widget.TextView(ctx);
infoBox.setText("Update to the latest version, " + publicVer + "\n\nCurrent Version Installed: " + versionP);
addWBtn.setText("Update");
questionbox.setText("\nQuestions? Check in the FAQ's");
faqbtn.setText("FAQ");
infoBox.setGravity(Gravity.CENTER);
addWBtn.setTypeface(mcfont);
questionbox.setGravity(Gravity.CENTER);
faqbtn.setTypeface(mcfont);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
addWDialog.setTitle("Do You Want to Update?");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWLayout.addView(questionbox);
addWLayout.addView(faqbtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
downloadUpdate();
betToast("Downloading...");
}
})
faqbtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setTitle("Instinct FAQ/Help");
alert.setMessage(FAQ);
var dialog = alert.create();
dialog.show();
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
openUpdateSelect();
}
}else{betToast("Your account is banned from using this client, request access on Discord at v7thSharkv#0101")}
rgbmenu=true;
}
}));
menuBtn.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
menuBtn.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUI.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}
}));
layout.addView(menuBtn);
themeFinish();
GUI = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUI.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+list_width, mPosY);
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}));
};
showMenuBtn();
function showNoclip() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (clipsBls == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("clip");
button.setTextSize(btntextsize);
button.setTextColor(modTextColor);
button.setTextColor(android.graphics.Color.RED);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (clipBtn == false) {
button.setTextColor(android.graphics.Color.GREEN);
clipBtn = true
} else {
clipBtn = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIclip.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIclip = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIclip.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIclip.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showJP() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Jet");
button.setTextSize(btntextsize);
button.setTextColor(modTextColor);
button.setTextColor(android.graphics.Color.RED);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (jetpackss == false) {
button.setTextColor(android.graphics.Color.GREEN);
jetpackss = true
} else {
jetpackss = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIjp.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIjp = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIjp.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIjp.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showIndi(){
indiSta=true;
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
if(indiW!=null){ 
indiW.dismiss();
indiW=null;
}
indiW=new android.widget.PopupWindow();
indiW.setFocusable(false);
indiW.setTouchable(false);
var layout=new android.widget.LinearLayout(activity);
layout.setOrientation(android.widget.LinearLayout.VERTICAL);
if(indicLo.getParent()!=null)
indicLo.getParent().removeView(indicLo);
indicLo.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(compasshand, 0), 0, android.util.Base64.decode(compasshand, 0).length)));;
layout.addView(indicLo);
indiW.setContentView(layout);
indiW.setWidth(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
indiW.setHeight(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
indiW.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
indiW.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP,0,0);
}
catch(err){
clientMessage(err);
}
}
}));
}
function hideIndi(){
indiSta=false;
activity.runOnUiThread(new java.lang.Runnable({ 
run: function(){
if(indiW!=null){ 
indiW.dismiss();
indiW=null;
}
}
}));
}
function showAimbotBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (aimed == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Aim");
button.setTextSize(btntextsize);
button.setTextColor(android.graphics.Color.GREEN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (aimbot == false) {
button.setTextColor(android.graphics.Color.GREEN);
aimbot = true
} else {
aimbot = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIaim.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIaim = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIaim.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIaim.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function fshowAimbotBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (faimed == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Aim");
button.setTextSize(btntextsize);
button.setTextColor(android.graphics.Color.GREEN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (faimbot == false) {
button.setTextColor(android.graphics.Color.GREEN);
faimbot = true
} else {
faimbot = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIfaim.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIfaim = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIfaim.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIfaim.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showScafBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (autoBridged == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Build");
button.setTextSize(btntextsize);
button.setTextColor(android.graphics.Color.GREEN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (autoBridgess == false) {
button.setTextColor(android.graphics.Color.GREEN);
autoBridgess = true
} else {
autoBridgess = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIscaf.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIscaf = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIscaf.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIscaf.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showBoost() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Boost");
button.setTextSize(btntextsize);
button.setTextColor(Color.parseColor("#42f4e2"));
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
toDirectionalVector(playerDir, (getYaw()+90) * Math['PI'] / 180, getPitch() * Math['PI'] / 180 * -1);
setVelX(getPlayerEnt(), 12 * playerDir[0]);
setVelZ(getPlayerEnt(), 12 * playerDir[2])
setVelY(getPlayerEnt(), 1 * playerDir[1])
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIboost.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIboost = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIboost.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIboost.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showOffhandKB() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Item");
button.setTextSize(btntextsize);
button.setTextColor(Color.parseColor("#42f4e2"));
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIoffhand.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIoffhand = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIoffhand.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIoffhand.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showGunKB() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("TNT");
button.setTextSize(btntextsize);
button.setTextColor(Color.parseColor("#42f4e2"));
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if(b.getAction()==android.view.MotionEvent.ACTION_DOWN){
tntcanOn=true;
}else if (b.getAction() == android.view.MotionEvent.ACTION_UP) {
tntcanOn=false;
}
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIgun.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIgun = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIgun.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIgun.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showLangList(){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Languages");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(language);
menuLayout1.addView(txtX);


function langButton(languagePre) {
var button1 = new android.widget.Button(ctx);
button1.setText(languagePre);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
language=languagePre;
txtX.setText(languagePre);
}
}));
menuLayout1.addView(button1);
};
langButton("English");
//langButton("TEST");
langButton("Spanish");
langButton("Indonesian");

menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
alert.setView(menuLayout);
alert.setPositiveButton("Ok",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
}
});

alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
function showElev() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Up");
button.setTextSize(btntextsize);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPositionRelative(getPlayerEnt(), 0, +1, 0);
setVelY(Player.getEntity(), 0.00000)
setVelY(Player.getEntity(), 0.00000)
setVelY(Player.getEntity(), 0.00000)
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIele.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
var button = new Button(ctx);
button.setText("Down");
button.setTextSize(btntextsize);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPositionRelative(getPlayerEnt(), 0, -1, 0);
setVelY(Player.getEntity(), 0.00000)
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIele.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIele = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIele.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIele.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showSurf() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Up");
button.setTextSize(btntextsize);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
toSurface();
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIsur.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
var button = new Button(ctx);
button.setText("Down");
button.setTextSize(btntextsize);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
toCave();
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIsur.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIsur = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIsur.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIsur.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showMGCBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (magiccarpetParent == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Magic");
button.setTextSize(btntextsize);
button.setTextColor(android.graphics.Color.GREEN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (magiccarpets == false) {
button.setTextColor(android.graphics.Color.GREEN);
magiccarpets = true
} else {
magiccarpets = false;
button.setTextColor(android.graphics.Color.RED);
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUImgc.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUImgc = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUImgc.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUImgc.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showJumpBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Jump");
button.setTextSize(btntextsize);
button.setTextColor(android.graphics.Color.CYAN);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(2);}
setVelY(getPlayerEnt(), 0.50);
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIjump.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUIjump = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIjump.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIjump.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX+1700, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
function showForward() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new android.widget.TextView(ctx);
button.setText("FreeCam Speed");
button.setTextSize(btntextsize);
button.setTextColor(modTextColor);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
toSurface();
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUImove.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
var freeSeek = new android.widget.SeekBar(ctx);
freeSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
freeSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
freeSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
freeSeek.setMax(14);
freeSeek.setProgress(freeSpeed);
freeSeek.setBackground( of );
freeSeek.getBackground().setAlpha(10);
freeSeek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
freeSeek.getLayoutParams().width = icon_dimensions*2;
freeSeek.setPadding(0,0,0,0);
freeSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
if(freeSeek.getProgress()==0){freeSeek.setProgress(1);}
freeSpeed = freeSeek.getProgress();
if (fovsbp) {
ModPE.setFov(freeSpeed);
}
betToast(langMsg[language]["Free Cam Speed: "] + freeSpeed);
}
});
layout.addView(freeSeek);
var button = new Button(ctx);
button.setTextSize(30);
button.setTextColor(modTextColor);
button.setBackground( of );
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(dup, 0), 0, android.util.Base64.decode(dup, 0).length)));
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getLayoutParams().height = tab_width;
button.getBackground().setAlpha(200);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(1);
toFront();
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUImove.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
var button = new Button(ctx);
button.setText("Disable Cam");
button.setTextSize(btntextsize);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
disableCam();
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUImove.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}}));
layout.addView(button);
GUImove = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUImove.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUImove.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};

function newLevel() {
canPreset = true;
};
function deviceInfo(view) {
if(view=="popup"){
	var deviceData = ""+Build.VERSION.SDK_INT+"\n"+Build.BOARD+"\n"+Build.BOOTLOADER+"\n"+Build.BRAND+"\n"+Build.CPU_ABI+"\n"+Build.CPU_ABI2+"\n"+Build.DEVICE+"\n"+Build.DISPLAY+"\n"+Build.HARDWARE+"\n"+Build.HOST+"\n"+Build.ID+"\n"+Build.IS_DEBUGGABLE+"\n"+Build.MANUFACTURER+"\n"+Build.MODEL+"\n"+Build.PRODUCT;
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + deviceData + "  ");
addWDialog.setTitle("Device");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWDialog.show();

} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
}else{
	var deviceData = Build.BRAND+", "+Build.MANUFACTURER+", "+Build.MODEL+", "+Build.VERSION.SDK_INT;
	return deviceData
}
};

function mainMenuC() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var sideMenuStroke = new android.graphics.drawable.GradientDrawable();
sideMenuStroke.setStroke(1, themeStroke);
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setColor(themeForeground);
sideMenuStrokeSpace.setStroke(1, themeStroke);
sideMenuStrokeSpace.setAlpha(themeAlpha);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);
if(swapForeground){
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setColor(themeStroke);
sideMenuStrokeSpace.setStroke(themeForeground);
sideMenuStrokeSpace.setAlpha(themeAlpha);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
if(compactView){
menuLayout.setOrientation(0);
menuLayout1.setOrientation(0);
var menuScroll = new android.widget.HorizontalScrollView(ctx);
}
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackgroundDrawable(new ColorDrawable(themeBackground));
menuLayout.getBackground().setAlpha(themeAlpha);




function showaimbot() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (ctrlzoomed == false) {
GUIy.dismiss();
}
if (ctrlzoomed == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("+");
button.setTextSize(12);
button.setTextColor(modTextColor);
button.setBackground( of );
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (ctrlzoomtoggle == false) {
ModPE.setFov(20);
button.setText("-");
ctrlzoomtoggle = true
} else {
ctrlzoomtoggle = false;
ModPE.resetFov();
button.setText("+");
}
}
}));
layout.addView(button);
GUIy = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIy.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIy.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, 0, 300);
}
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
var buttonSurvival = new android.widget.TextView(ctx);
buttonSurvival.setText(langMsg[language]["Survival"]);
buttonSurvival.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonSurvival.setTextColor(modTextColor);
buttonSurvival.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonSurvival.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonSurvival.getLayoutParams().width = tab_width;}
if(!survivaltab){buttonSurvival.getLayoutParams().width = 0;buttonSurvival.getLayoutParams().height = 0;}
buttonSurvival.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonSurvival.getBackground().setAlpha(255);
buttonSurvival.setTypeface(mcfont);
buttonSurvival.setMaxLines(1);
buttonSurvival.setTextSize(switchfontsize);
buttonSurvival.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(themeBtnNotClicked);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == false&&!menuFailed1) {
openMenu1();
openMenu1Status = true;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonSurvival);
var buttonPVP = new android.widget.TextView(ctx);
buttonPVP.setText(langMsg[language]["PVP"]);
buttonPVP.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonPVP.setTextColor(modTextColor);
buttonPVP.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonPVP.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonPVP.getLayoutParams().width = tab_width;}
if(!pvptab){buttonPVP.getLayoutParams().width = 0;buttonPVP.getLayoutParams().height = 0;}
buttonPVP.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonPVP.setTypeface(mcfont);
buttonPVP.setMaxLines(1);
buttonPVP.setTextSize(switchfontsize);
buttonPVP.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(themeBtnNotClicked);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == false&&!menuFailed2) {
openMenu2();
openMenu2Status = true;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonPVP);
var buttonWaypoints = new android.widget.TextView(ctx);
buttonWaypoints.setText(langMsg[language]["Waypoints"]);
buttonWaypoints.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonWaypoints.setTextColor(modTextColor);
buttonWaypoints.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonWaypoints.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonWaypoints.getLayoutParams().width = tab_width;}
if(!waypointtab){buttonWaypoints.getLayoutParams().width = 0;buttonWaypoints.getLayoutParams().height = 0;}
buttonWaypoints.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setTypeface(mcfont);
buttonWaypoints.setMaxLines(1);
buttonWaypoints.setTextSize(switchfontsize);
buttonWaypoints.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(themeBtnNotClicked);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == false&&!menuFailed3) {
openMenu3();
openMenu3Status = true;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonWaypoints);
var buttonFriends = new android.widget.TextView(ctx);
buttonFriends.setText(langMsg[language]["Friends"]);
buttonFriends.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonFriends.setTextColor(modTextColor);
buttonFriends.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonFriends.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonFriends.getLayoutParams().width = tab_width;}
if(!friendtab){buttonFriends.getLayoutParams().width = 0;buttonFriends.getLayoutParams().height = 0;}
buttonFriends.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonFriends.setTypeface(mcfont);
buttonFriends.setMaxLines(1);
buttonFriends.setTextSize(switchfontsize);
buttonFriends.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);
buttonPresets.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(themeBtnNotClicked);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu10Status == false&&!menuFailed10) {
openMenu10();
openMenu10Status = true;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonFriends);
var buttonPotions = new android.widget.TextView(ctx);
buttonPotions.setText(langMsg[language]["Potions"]);
buttonPotions.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonPotions.setTextColor(modTextColor);
buttonPotions.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonPotions.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonPotions.getLayoutParams().width = tab_width;}
if(!potiontab){buttonPotions.getLayoutParams().width = 0;buttonPotions.getLayoutParams().height = 0;}
buttonPotions.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonPotions.setTypeface(mcfont);
buttonPotions.setMaxLines(1);
buttonPotions.setTextSize(switchfontsize);
buttonPotions.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(themeBtnNotClicked);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu4Status == false&&!menuFailed4) {
openMenu4();
openMenu4Status = true;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonPotions);
var buttonMovement = new android.widget.TextView(ctx);
buttonMovement.setText(langMsg[language]["Movement"]);
buttonMovement.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonMovement.setTextColor(modTextColor);
buttonMovement.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonMovement.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonMovement.getLayoutParams().width = tab_width;}
if(!movementtab){buttonMovement.getLayoutParams().width = 0;buttonMovement.getLayoutParams().height = 0;}
buttonMovement.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMovement.setTypeface(mcfont);
buttonMovement.setMaxLines(1);
buttonMovement.setTextSize(switchfontsize);
buttonMovement.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(themeBtnNotClicked);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == false&&!menuFailed5) {
openMenu5();
openMenu5Status = true;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonMovement);
var buttonDis = new android.widget.TextView(ctx);
buttonDis.setText(langMsg[language]["Discord"]);
buttonDis.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonDis.setTextColor(modTextColor);
buttonDis.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonDis.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonDis.getLayoutParams().width = tab_width;}
if(!discordtab){buttonDis.getLayoutParams().width = 0;buttonDis.getLayoutParams().height = 0;}
buttonDis.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonDis.setTypeface(mcfont);
buttonDis.setMaxLines(1);
buttonDis.setTextSize(switchfontsize);
buttonDis.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(themeBtnNotClicked);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == false&&!menuFailed11) {
openMenu11();
openMenu11Status = true;
}
}
}));
menuLayout.addView(buttonDis);

var buttonMisc = new android.widget.TextView(ctx);
buttonMisc.setText(langMsg[language]["Misc."]);
buttonMisc.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonMisc.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonMisc.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonMisc.getLayoutParams().width = tab_width;}
if(!misctab){buttonMisc.getLayoutParams().width = 0;buttonMisc.getLayoutParams().height = 0;}
buttonMisc.setTextColor(modTextColor);
buttonMisc.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonMisc.setTypeface(mcfont);
buttonMisc.setMaxLines(1);
buttonMisc.setTextSize(switchfontsize);
buttonMisc.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(themeBtnNotClicked);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);buttonPresets.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == false&&!menuFailed6) {
openMenu6();
openMenu6Status = true;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonMisc);

var buttonSettings = new android.widget.TextView(ctx);
buttonSettings.setText(langMsg[language]["Settings"]);
buttonSettings.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonSettings.setTextColor(modTextColor);
buttonSettings.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonSettings.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonSettings.getLayoutParams().width = tab_width;}
if(!settingtab){buttonSettings.getLayoutParams().width = 0;buttonSettings.getLayoutParams().height = 0;}
buttonSettings.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonSettings.setBackground(sideMenuStrokeSpace);
buttonSettings.setTypeface(mcfont);
buttonSettings.setMaxLines(1);
buttonSettings.setTextSize(switchfontsize);
buttonSettings.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
//buttonOpen.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(themeBtnNotClicked);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonPresets.setBackground(sideMenuStrokeSpace);
buttonFriends.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == false&&!menuFailed8) {
openMenu8();
openMenu8Status = true;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));

var buttonPresets = new android.widget.TextView(ctx);
buttonPresets.setText(langMsg[language]["Presets"]);
buttonPresets.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonPresets.setTextColor(modTextColor);
buttonPresets.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonPresets.getLayoutParams().height = icon_dimensions*tab_height;
if(compactView){buttonPresets.getLayoutParams().width = tab_width;}
if(!presettab){buttonPresets.getLayoutParams().width = 0;buttonPresets.getLayoutParams().height = 0;}
buttonPresets.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
buttonPresets.setBackground(sideMenuStrokeSpace);
buttonPresets.setTypeface(mcfont);
buttonPresets.setMaxLines(1);
buttonPresets.setTextSize(switchfontsize);
buttonPresets.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
buttonSurvival.setBackground(sideMenuStrokeSpace);
buttonPVP.setBackground(sideMenuStrokeSpace);
buttonWaypoints.setBackground(sideMenuStrokeSpace);
buttonPotions.setBackground(sideMenuStrokeSpace);
buttonMovement.setBackground(sideMenuStrokeSpace);
buttonMisc.setBackground(sideMenuStrokeSpace);
buttonSettings.setBackground(sideMenuStrokeSpace);
buttonDis.setBackground(sideMenuStrokeSpace);
buttonPresets.setBackground(themeBtnNotClicked);
buttonFriends.setBackground(sideMenuStrokeSpace);
if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == false&&!menuFailed9) {
openMenu9();
openMenu9Status = true;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
}
}));
menuLayout.addView(buttonPresets);
menuLayout.addView(buttonSettings);




if(compactView){menuC = new PopupWindow(menuLayout1, list_width, icon_dimensions*tab_height);}else{
menuC = new PopupWindow(menuLayout1, tab_width, ctx.getWindowManager().getDefaultDisplay().getHeight());}
if(animations){menuC.setAnimationStyle(android.R.style.Animation_Toast);}
menuC.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
menuC.getBackground().setAlpha(themeAlpha);
if(allRight){menuC.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.RIGHT, 0, 0);}
if(compactView){menuC.showAtLocation(ctx.getWindow().getDecorView(), Gravity.BOTTOM | Gravity.CENTER, 0, 0);}
if(!compactView&!allRight){menuC.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.LEFT, 0, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}));
};
function enchantThis(enchants,level){
if(level==null||level==0){level=32767}
if(enchants=="all"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, level); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, level); 
}
if(enchants=="knockback"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, level); }
if(enchants=="prot"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, level); }
if(enchants=="fireprot"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, level); }
if(enchants=="featherfall"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, level); }
if(enchants=="blastprot"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, level); }
if(enchants=="projectileprot"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, level); }
if(enchants=="thorns"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, level); }
if(enchants=="respiration"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, level); }
if(enchants=="aquaaffinity"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, level); }
if(enchants=="depthstrider"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, level); }
if(enchants=="sharpness"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, level); }
if(enchants=="smite"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, level); }
if(enchants=="baneofanthropods"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, level); }
if(enchants=="fireaspect"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, level); }
if(enchants=="looting"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, level); }
if(enchants=="efficiency"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, level); }
if(enchants=="unbreaking"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, level); }
if(enchants=="fortune"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, level); }
if(enchants=="power"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, level); }
if(enchants=="punch"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, level); }
if(enchants=="flame"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, level); }
if(enchants=="infinity"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, level); }
if(enchants=="luck"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, level); }
if(enchants=="lure"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, level); }
if(enchants=="silk"){
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, level); }
}
function ShowSleekMenu() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {

var sleekUI = new android.graphics.drawable.GradientDrawable();
sleekUI.setColor(Color.parseColor("#000000"));
sleekUI.setStroke(0, themeStroke);
sleekUI.setCornerRadius(3);

var modEnabled = new android.graphics.drawable.GradientDrawable();
modEnabled.setColor(themeStroke);
modEnabled.setAlpha(100);


if (themeBtn == "xmas") {
modTextColor=Color.parseColor("#ff2d2d")
}

var modDisabled = new android.graphics.drawable.GradientDrawable();
modDisabled.setColor(android.graphics.Color.TRANSPARENT);
modDisabled.setAlpha(255);

if (themeBtn == "white") {
modTextColor=Color.parseColor("#ffffff")
}


var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
var horizontallayout = new android.widget.LinearLayout(ctx);
var leftStroke = new android.widget.Button(ctx);
leftStroke.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(themeStroke));
leftStroke.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
leftStroke.getLayoutParams().width = 2*density;
var rightStroke = new android.widget.Button(ctx);
rightStroke.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(themeStroke));
rightStroke.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
rightStroke.getLayoutParams().width = 2*density;
menuLayout.setOrientation(1);
horizontallayout.setOrientation(0);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
horizontallayout.addView(leftStroke);
horizontallayout.addView(menuLayout1);
//horizontallayout.addView(rightStroke);
menuLayout.setBackground(sleekUI);
menuLayout.getBackground().setAlpha(120);

var scrollText = new android.widget.TextView(ctx);
scrollText.setText("Client made by " + creator + " - Client Version " + versionP + " - " + modNum + " Modules");
scrollText.setTextSize(btntextsize);
scrollText.setTextColor(android.graphics.Color.YELLOW);
scrollText.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
scrollText.setMarqueeRepeatLimit(-1);
scrollText.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(themeStroke));
scrollText.setSingleLine();
scrollText.setHorizontallyScrolling(true);
scrollText.setSelected(true);
menuLayout.addView(scrollText);



var banI = new android.widget.ImageView(ctx);
banI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(themeStroke));
banI.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
banI.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bannericon, 0), 0, android.util.Base64.decode(bannericon, 0).length));
menuLayout.addView(banI);
banI.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));

var espBtn = new android.widget.TextView(ctx);
espBtn.setText("  ESP");
espBtn.setTextColor(modTextColor);
espBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espBtn.setTextSize(btntextsize+2);
espBtn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
espBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!espd){espBtn.setBackground(modDisabled);
}else{espBtn.setBackground(modEnabled);}
if (!espd) {
esp = true;
espd = true;
espOnsave=true;
if(!rendering){funcS.Render.init();rendering=true}
} else {
esp = false;
espd = false;
espOnsave=false;
}
if(!espd){espBtn.setBackground(modDisabled);
}else{espBtn.setBackground(modEnabled);}
}
}));
menuLayout.addView(espBtn);
if(!espd){espBtn.setBackground(modDisabled);
}else{espBtn.setBackground(modEnabled);}

var esptbtn = new android.widget.TextView(ctx);
esptbtn.setText("  Tracers");
esptbtn.setTextColor(modTextColor);
esptbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
esptbtn.setTextSize(btntextsize+2);
esptbtn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
esptbtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!espt){esptbtn.setBackground(modDisabled);
}else{esptbtn.setBackground(modEnabled);}
if (!espt) {
espt = true;
espOnTsave=true;
if(!rendering){funcS.Render.init();rendering=true}
if(!esp){esp=true;espd = true;esp=false;espd = false;}
esptbtn.setBackground(modEnabled);
} else {
espt = false;
espOnTsave=false;
esptbtn.setBackground(modDisabled);
}
if(!espt){esptbtn.setBackground(modDisabled);
}else{esptbtn.setBackground(modEnabled);}
}
}));
menuLayout.addView(esptbtn);
if(!espt){esptbtn.setBackground(modDisabled);
}else{esptbtn.setBackground(modEnabled);}

var totembtn = new android.widget.TextView(ctx);
totembtn.setText("  Auto Totem");
totembtn.setTextColor(modTextColor);
totembtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
totembtn.setTextSize(btntextsize+2);
totembtn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
totembtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!atotemd){totembtn.setBackground(modDisabled);
}else{totembtn.setBackground(modEnabled);}
if (!atotemd) {
atotemd = true;
atotems=true;
totemSp = true;
Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);
totembtn.setBackground(modEnabled);
} else {
atotemd = false;
atotems=false;
totemSp = false;
totembtn.setBackground(modDisabled);
}
if(!atotemd){totembtn.setBackground(modDisabled);
}else{totembtn.setBackground(modEnabled);}
}
}));
menuLayout.addView(totembtn);
if(!atotemd){totembtn.setBackground(modDisabled);
}else{totembtn.setBackground(modEnabled);}

var fasteatbtn = new android.widget.TextView(ctx);
fasteatbtn.setText("  Fast Eat");
fasteatbtn.setTextColor(modTextColor);
fasteatbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fasteatbtn.setTextSize(btntextsize+2);
fasteatbtn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
fasteatbtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!fasteatd){fasteatbtn.setBackground(modDisabled);
}else{fasteatbtn.setBackground(modEnabled);}
if (!fasteatd) {
fasteats = true;
fasteatd=true;
enableEat();
fasteatbtn.setBackground(modEnabled);
} else {
fasteats = false;
fasteatd=false;
disableEat();
fasteatbtn.setBackground(modDisabled);
}
if(!fasteatd){fasteatbtn.setBackground(modDisabled);
}else{fasteatbtn.setBackground(modEnabled);}
}
}));
menuLayout.addView(fasteatbtn);
if(!fasteatd){fasteatbtn.setBackground(modDisabled);
}else{fasteatbtn.setBackground(modEnabled);}

var aimbuttonnn = new android.widget.TextView(ctx);
aimbuttonnn.setText("  Aimbot");
aimbuttonnn.setTextColor(modTextColor);
aimbuttonnn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aimbuttonnn.setTextSize(btntextsize+2);
aimbuttonnn.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
aimbuttonnn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!faimed){
if(!aimed){aimbuttonnn.setBackground(modDisabled);
}else{aimbuttonnn.setBackground(modEnabled);}
if (!aimed) {
aimbot = true;
aimbotBtn=true;
aimed = true;
showAimbotBtn();
aimbuttonnn.setBackground(modEnabled);
} else {
aimbot = false;
aimbotBtn = false;
aimed = false;
GUIaim.dismiss();
aimbuttonnn.setBackground(modDisabled);
}
if(!aimed){aimbuttonnn.setBackground(modDisabled);
}else{aimbuttonnn.setBackground(modEnabled);}
}else{betToast("Disable Body Aimbot first!")}}
}));
menuLayout.addView(aimbuttonnn);
if(!aimed){aimbuttonnn.setBackground(modDisabled);
}else{aimbuttonnn.setBackground(modEnabled);}

var feAims = new android.widget.TextView(ctx);
feAims.setText("  Body Aimbot");
feAims.setTextColor(modTextColor);
feAims.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
feAims.setTextSize(btntextsize+2);
feAims.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
feAims.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!aimed){
if(!faimed){feAims.setBackground(modDisabled);
}else{feAims.setBackground(modEnabled);}
if (!faimed) {
faimbot = true;
faimbotBtn = true;
faimed = true;
fshowAimbotBtn();
feAims.setBackground(modEnabled);
} else {
faimbot = false;
faimbotBtn = false;
faimed = false;
GUIfaim.dismiss();
feAims.setBackground(modDisabled);
}
if(!faimed){feAims.setBackground(modDisabled);
}else{feAims.setBackground(modEnabled);}
}else{betToast("Disable Regular Aimbot first!")}}
}));
menuLayout.addView(feAims);
if(!faimed){feAims.setBackground(modDisabled);
}else{feAims.setBackground(modEnabled);}

var autoReach = new android.widget.TextView(ctx);
autoReach.setText("  Auto Reach");
autoReach.setTextColor(modTextColor);
autoReach.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
autoReach.setTextSize(btntextsize+2);
autoReach.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
autoReach.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!autoReachd){autoReach.setBackground(modDisabled);
}else{autoReach.setBackground(modEnabled);}
if (!autoReachd) {
autoReachs = true;
autoReachd = true;
autoReach.setBackground(modEnabled);
} else {
autoReachs = false;
autoReachd = false;
resetBoxes();
autoReach.setBackground(modDisabled);
}
if(!autoReachd){autoReach.setBackground(modDisabled);
}else{autoReach.setBackground(modEnabled);}}
}));
menuLayout.addView(autoReach);
if(!autoReachd){autoReach.setBackground(modDisabled);
}else{autoReach.setBackground(modEnabled);}

var blastaurS = new android.widget.TextView(ctx);
blastaurS.setText("  Blast Aura");
blastaurS.setTextColor(modTextColor);
blastaurS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
blastaurS.setTextSize(btntextsize+2);
blastaurS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
blastaurS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!blastau){blastaurS.setBackground(modDisabled);
}else{blastaurS.setBackground(modEnabled);}
if (!blastau) {
blastau = true;
blastaurS.setBackground(modEnabled);
} else {
blastau = false;
blastaurS.setBackground(modDisabled);
}
if(!blastau){blastaurS.setBackground(modDisabled);
}else{blastaurS.setBackground(modEnabled);}}
}));
menuLayout.addView(blastaurS);
if(!blastau){blastaurS.setBackground(modDisabled);
}else{blastaurS.setBackground(modEnabled);}

var aos = new android.widget.TextView(ctx);
aos.setText("  No Knockback");
aos.setTextColor(modTextColor);
aos.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aos.setTextSize(btntextsize+2);
aos.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
aos.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(!aoed){aos.setBackground(modDisabled);
}else{aos.setBackground(modEnabled);}
if (!aoed) {
aoss = true;
aoed = true;
aos.setBackground(modEnabled);
} else {
aoss = false;
aoed = false;
aos.setBackground(modDisabled);
}
if(!aoed){aos.setBackground(modDisabled);
}else{aos.setBackground(modEnabled);}}
}));
menuLayout.addView(aos);
if(!aoed){aos.setBackground(modDisabled);
}else{aos.setBackground(modEnabled);}

var armorS = new android.widget.TextView(ctx);
armorS.setText("  Armor Stats");
armorS.setTextColor(modTextColor);
armorS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
armorS.setTextSize(btntextsize+2);
armorS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
armorS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!armorB) {
armorB = true;
showArmorgui();
armorS.setBackground(modEnabled);
} else {
armorB = false;
armorWin.dismiss();
armorS.setBackground(modDisabled);
}}
}));
menuLayout.addView(armorS);
if(!armorB){armorS.setBackground(modDisabled);
}else{armorS.setBackground(modEnabled);}

var armoreS = new android.widget.TextView(ctx);
armoreS.setText("  Enemy Stats");
armoreS.setTextColor(modTextColor);
armoreS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
armoreS.setTextSize(btntextsize+2);
armoreS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
armoreS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!armorE) {
armorE = true;
showEArmorgui();
armoreS.setBackground(modEnabled);
} else {
armorE = false;
armorEm.dismiss();
armoreS.setBackground(modDisabled);
}}
}));
menuLayout.addView(armoreS);
if(!armorE){armoreS.setBackground(modDisabled);
}else{armoreS.setBackground(modEnabled);}

var nameThealth = new android.widget.TextView(ctx);
nameThealth.setText("  Health HUD");
nameThealth.setTextColor(modTextColor);
nameThealth.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nameThealth.setTextSize(btntextsize+2);
nameThealth.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
nameThealth.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!nearestHud) {
nearestHud = true;
nearestHudTsave=true;
ShowInGame();
nameThealth.setBackground(modEnabled);
} else {
nearestHud = false;
nearestHudTsave=false;
HideInGame();
nameThealth.setBackground(modDisabled);
}}
}));
menuLayout.addView(nameThealth);
if(!nearestHud){nameThealth.setBackground(modDisabled);
}else{nameThealth.setBackground(modEnabled);}

var sfd = new android.widget.TextView(ctx);
sfd.setText("  Fly");
sfd.setTextColor(modTextColor);
sfd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
sfd.setTextSize(btntextsize+2);
sfd.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
sfd.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!sfs) {
Player.setCanFly(1);
Player.isFlying(1);
sf = true;
sfs = true;
betToast(langMsg[language]["Double Tap jump"]);
sfd.setBackground(modEnabled);
} else {
Player.setCanFly(0);
sf = false;
sfs = false;
sfd.setBackground(modDisabled);
}}
}));
menuLayout.addView(sfd);
if(!sfs){sfd.setBackground(modDisabled);
}else{sfd.setBackground(modEnabled);}

var freecamS = new android.widget.TextView(ctx);
freecamS.setText("  Free Cam");
freecamS.setTextColor(modTextColor);
freecamS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
freecamS.setTextSize(btntextsize+2);
freecamS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
freecamS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!freecamSon) {
freecamSon = true;
enableCam();
freeX=Player.getX();
freeY=Player.getY();
freeZ=Player.getZ();
betToast("Tap the arrow to move");
freecamS.setBackground(modEnabled);
} else {
freecamSon = false;
disableCam();
freecamS.setBackground(modDisabled);
}}
}));
menuLayout.addView(freecamS);
if(!freecamSon){freecamS.setBackground(modDisabled);
}else{freecamS.setBackground(modEnabled);}

var booKbS = new android.widget.TextView(ctx);
booKbS.setText("  Boost");
booKbS.setTextColor(modTextColor);
booKbS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
booKbS.setTextSize(btntextsize+2);
booKbS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
booKbS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!boostKBBo) {
boostKBBo=true;
showBoost();
booKbS.setBackground(modEnabled);
} else {
boostKBBo = false;
GUIboost.dismiss();
booKbS.setBackground(modDisabled);
}}
}));
menuLayout.addView(booKbS);
if(!boostKBBo){booKbS.setBackground(modDisabled);
}else{booKbS.setBackground(modEnabled);}

var mgcS = new android.widget.TextView(ctx);
mgcS.setText("  Magic Carpet");
mgcS.setTextColor(modTextColor);
mgcS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
mgcS.setTextSize(btntextsize+2);
mgcS.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
mgcS.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!magiccarpetParent) {
magiccarpetParent = true;
magiccarpets=true;
showMGCBtn();
mgcS.setBackground(modEnabled);
} else {
magiccarpetParent = false;
GUImgc.dismiss();magiccarpets=false;
mgcS.setBackground(modDisabled);
}}
}));
menuLayout.addView(mgcS);
if(!magiccarpetParent){mgcS.setBackground(modDisabled);
}else{mgcS.setBackground(modEnabled);}

var fastbridgesw = new android.widget.TextView(ctx);
fastbridgesw.setText("  Bridge Assist");
fastbridgesw.setTextColor(modTextColor);
fastbridgesw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fastbridgesw.setTextSize(btntextsize+2);
fastbridgesw.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
fastbridgesw.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!fastbridger) {
fastbridger = true;
fastbridgesw.setBackground(modEnabled);
} else {
fastbridger = false;
fastbridgesw.setBackground(modDisabled);
}}
}));
menuLayout.addView(fastbridgesw);
if(!fastbridger){fastbridgesw.setBackground(modDisabled);
}else{fastbridgesw.setBackground(modEnabled);}

var phaseBlock = new android.widget.TextView(ctx);
phaseBlock.setText("  Phase");
phaseBlock.setTextColor(modTextColor);
phaseBlock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
phaseBlock.setTextSize(btntextsize+2);
phaseBlock.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
phaseBlock.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!phaseBlocksd) {
phaseBlockss = true;
phaseBlocksd = true;
phaseBlock.setBackground(modEnabled);
} else {
phaseBlockss = false;
phaseBlocksd = false;
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
phaseBlock.setBackground(modDisabled);
}}
}));
menuLayout.addView(phaseBlock);
if(!phaseBlocksd){phaseBlock.setBackground(modDisabled);
}else{phaseBlock.setBackground(modEnabled);}

var mmapswitch = new android.widget.TextView(ctx);
mmapswitch.setText("  Minimap");
mmapswitch.setTextColor(modTextColor);
mmapswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
mmapswitch.setTextSize(btntextsize+2);
mmapswitch.setPadding(0,icon_dimensions*.2,0,icon_dimensions*.2);
mmapswitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!zcrampss) {
zcrampss = true;
zcramped = true;
mmapswitch.setBackground(modEnabled);
} else {
try {
mapWindow['hide']();
if (map_state) {
changeMapState()
};
poolm['shutdownNow']();
startMapControl = true;
X = undefined;
entities = [];
chests = []
} catch (e) {
betToast('leaveGame, ' + e + ' (' + e['fileName'] + ' #' + e['lineNumber'] + ')')
};
if(map_state){changeMapState()}
zcrampss = false;
zcramped = false
mmapswitch.setBackground(modDisabled);
}}
}));
menuLayout.addView(mmapswitch);
if(!zcrampss){mmapswitch.setBackground(modDisabled);
}else{mmapswitch.setBackground(modEnabled);}


GUIsleek = new PopupWindow(horizontallayout,ctx.getWindowManager().getDefaultDisplay().getWidth()/6, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){GUIsleek.setAnimationStyle(android.R.style.Animation_Toast);}
GUIsleek.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
if(sleekLeft){
GUIsleek.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width*2, 0);
}else{
GUIsleek.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width*2, 0);
}

} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}));
};
var playerDir = [0, 0, 0];

function showCgui(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
coordTxt=new android.widget.TextView(ctx);
coordTxt.setTextColor(android.graphics.Color.WHITE);
coordTxt.setBackground(ofLong);
coordTxt.getBackground().setAlpha(180);
coordTxt.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
coordTxt.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
windowDis.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}
}));
windowDis=new android.widget.PopupWindow(coordTxt,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
windowDis.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.TOP|android.view.Gravity.LEFT,0,0);
}catch(err){}}}));
}
function showArmorgui(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
var mainLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var armorsLayout = new android.widget.LinearLayout(ctx);
var headLayout = new android.widget.LinearLayout(ctx);
var chestLayout = new android.widget.LinearLayout(ctx);
var legLayout = new android.widget.LinearLayout(ctx);
var bootLayout = new android.widget.LinearLayout(ctx);
var itemLayout = new android.widget.LinearLayout(ctx);
headLayout.setOrientation(0);
chestLayout.setOrientation(0);
legLayout.setOrientation(0);
bootLayout.setOrientation(0);
itemLayout.setOrientation(0);
mainLayout.setOrientation(1);
armorsLayout.setOrientation(1);

headLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
headLayout.getLayoutParams().width = switch_width;
chestLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
chestLayout.getLayoutParams().width = switch_width;
legLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
legLayout.getLayoutParams().width = switch_width;
bootLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
bootLayout.getLayoutParams().width = switch_width;
itemLayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
itemLayout.getLayoutParams().width = switch_width;

var head = Player.getArmorSlot(0);
var chest = Player.getArmorSlot(1);
var legs = Player.getArmorSlot(2);
var feet = Player.getArmorSlot(3);
var hand = Player.getCarriedItem();

var head_damage = Player.getArmorSlotDamage(0);
var chest_damage = Player.getArmorSlotDamage(1);
var legs_damage = Player.getArmorSlotDamage(2);
var feet_damage = Player.getArmorSlotDamage(3);
var hand_damage = Player.getCarriedItemData();

var max_dura_head = Item.getMaxDamage(head);
var max_dura_chest = Item.getMaxDamage(chest);
var max_dura_legs = Item.getMaxDamage(legs);
var max_dura_feet = Item.getMaxDamage(feet);
var max_dura_hand = Item.getMaxDamage(hand);

var headIcon = new android.widget.Button(ctx);
headIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
headIcon.getLayoutParams().width = help_width/1.6;
headIcon.getLayoutParams().height = help_width/1.6;
headIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(helmetDiamond, 0), 0, android.util.Base64.decode(helmetDiamond, 0).length)));
headData=new android.widget.TextView(ctx);
headData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
headData.setTextColor(android.graphics.Color.WHITE);
headData.setTextSize(btntextsize-2);
headData.setText(max_dura_head-head_damage+"/"+max_dura_head);
headLayout.addView(headIcon);
headLayout.addView(headData);

var chestIcon = new android.widget.Button(ctx);
chestIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
chestIcon.getLayoutParams().width = help_width/1.6;
chestIcon.getLayoutParams().height = help_width/1.6;
chestIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chestDiamond, 0), 0, android.util.Base64.decode(chestDiamond, 0).length)));
chestData=new android.widget.TextView(ctx);
chestData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chestData.setTextColor(android.graphics.Color.WHITE);
chestData.setTextSize(btntextsize-2);
chestData.setText(max_dura_chest-chest_damage+"/"+max_dura_chest);
chestLayout.addView(chestIcon);
chestLayout.addView(chestData);

var legIcon = new android.widget.Button(ctx);
legIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
legIcon.getLayoutParams().width = help_width/1.6;
legIcon.getLayoutParams().height = help_width/1.6;
legIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(legsDiamond, 0), 0, android.util.Base64.decode(legsDiamond, 0).length)));
legData=new android.widget.TextView(ctx);
legData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
legData.setTextColor(android.graphics.Color.WHITE);
legData.setTextSize(btntextsize-2);
legData.setText(max_dura_legs-legs_damage+"/"+max_dura_legs);
legLayout.addView(legIcon);
legLayout.addView(legData);

var feetIcon = new android.widget.Button(ctx);
feetIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
feetIcon.getLayoutParams().width = help_width/1.6;
feetIcon.getLayoutParams().height = help_width/1.6;
feetIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bootsDiamond, 0), 0, android.util.Base64.decode(bootsDiamond, 0).length)));
feetData=new android.widget.TextView(ctx);
feetData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
feetData.setTextColor(android.graphics.Color.WHITE);
feetData.setTextSize(btntextsize-2);
feetData.setText(max_dura_feet-feet_damage+"/"+max_dura_feet);
bootLayout.addView(feetIcon);
bootLayout.addView(feetData);

var handIcon = new android.widget.Button(ctx);
handIcon.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
handIcon.getLayoutParams().width = help_width/1.6;
handIcon.getLayoutParams().height = help_width/1.6;
handIcon.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(handDiamond, 0), 0, android.util.Base64.decode(handDiamond, 0).length)));
handData=new android.widget.TextView(ctx);
handData.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
handData.setTextColor(android.graphics.Color.WHITE);
handData.setTextSize(btntextsize-2);
handData.setText(max_dura_hand-hand_damage+"/"+max_dura_hand);
itemLayout.addView(handIcon);
itemLayout.addView(handData);


armorsLayout.addView(headLayout);
armorsLayout.addView(chestLayout);
armorsLayout.addView(legLayout);
armorsLayout.addView(bootLayout);
armorsLayout.addView(itemLayout);
menuScroll.addView(armorsLayout);
mainLayout.addView(menuScroll);
armorWin=new android.widget.PopupWindow(mainLayout,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
armorWin.setTouchable(false);
armorWin.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.TOP|android.view.Gravity.LEFT,0,+icon_dimensions);
armorWin.setTouchable(false);
}catch(err){}}}));
}
function showEArmorgui(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
var mainLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var armorsLayoutEnemy = new android.widget.LinearLayout(ctx);
var nameLayoutEnemy = new android.widget.LinearLayout(ctx);
var healthLayoutEnemy = new android.widget.LinearLayout(ctx);
var headLayoutEnemy = new android.widget.LinearLayout(ctx);
var chestLayoutEnemy = new android.widget.LinearLayout(ctx);
var legLayoutEnemy = new android.widget.LinearLayout(ctx);
var bootLayoutEnemy = new android.widget.LinearLayout(ctx);
var itemLayoutEnemy = new android.widget.LinearLayout(ctx);
nameLayoutEnemy.setOrientation(0);
healthLayoutEnemy.setOrientation(0);
headLayoutEnemy.setOrientation(0);
chestLayoutEnemy.setOrientation(0);
legLayoutEnemy.setOrientation(0);
bootLayoutEnemy.setOrientation(0);
itemLayoutEnemy.setOrientation(0);
mainLayout.setOrientation(1);
armorsLayoutEnemy.setOrientation(1);

headLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
headLayoutEnemy.getLayoutParams().width = switch_width;
chestLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
chestLayoutEnemy.getLayoutParams().width = switch_width;
legLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
legLayoutEnemy.getLayoutParams().width = switch_width;
bootLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
bootLayoutEnemy.getLayoutParams().width = switch_width;
itemLayoutEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
itemLayoutEnemy.getLayoutParams().width = switch_width;

var nameEnemy = Entity.getNameTag(getNearestEntity(160));
var healthEnemy = Entity.getHealth(getNearestEntity(160));
var max_healthEnemy = Entity.getMaxHealth(getNearestEntity(160));
var headEnemy = Entity.getArmor(getNearestEntity(160), 0) ;
var chestEnemy = Entity.getArmor(getNearestEntity(160), 1);
var legsEnemy = Entity.getArmor(getNearestEntity(160), 2);
var feetEnemy = Entity.getArmor(getNearestEntity(160), 3);
var handEnemy = Entity.getCarriedItem(getNearestEntity(160));

var head_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 0);
var chest_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 1);
var legs_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 2);
var feet_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 3);
var hand_damageEnemy = Entity.getCarriedItemData(getNearestEntity(160));

var max_dura_headEnemy = Item.getMaxDamage(headEnemy);
var max_dura_chestEnemy = Item.getMaxDamage(chestEnemy);
var max_dura_legsEnemy = Item.getMaxDamage(legsEnemy);
var max_dura_feetEnemy = Item.getMaxDamage(feetEnemy);
var max_dura_handEnemy = Item.getMaxDamage(handEnemy);

var nameIconEnemy = new android.widget.Button(ctx);
nameIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
nameIconEnemy.getLayoutParams().width = help_width/1.6;
nameIconEnemy.getLayoutParams().height = help_width/1.6;
nameIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(helmetDiamond, 0), 0, android.util.Base64.decode(helmetDiamond, 0).length)));
nameIconEnemy.getBackground().setAlpha(130);
nameDataEnemy=new android.widget.TextView(ctx);
nameDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nameDataEnemy.setTextColor(android.graphics.Color.WHITE);
nameDataEnemy.setTextSize(btntextsize-2);
nameDataEnemy.setText(healthEnemy+"/"+max_healthEnemy);
//nameLayout.addView(nameIcon);
nameLayoutEnemy.addView(nameDataEnemy);

var healthIconEnemy = new android.widget.Button(ctx);
healthIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
healthIconEnemy.getLayoutParams().width = help_width/1.6;
healthIconEnemy.getLayoutParams().height = help_width/1.6;
healthIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(heartIcon, 0), 0, android.util.Base64.decode(heartIcon, 0).length)));
healthIconEnemy.getBackground().setAlpha(130);
healthDataEnemy=new android.widget.TextView(ctx);
healthDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
healthDataEnemy.setTextColor(android.graphics.Color.WHITE);
healthDataEnemy.setTextSize(btntextsize-2);
healthDataEnemy.setText(healthEnemy+"/"+max_healthEnemy);
healthLayoutEnemy.addView(healthIconEnemy);
healthLayoutEnemy.addView(healthDataEnemy);

var headIconEnemy = new android.widget.Button(ctx);
headIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
headIconEnemy.getLayoutParams().width = help_width/1.6;
headIconEnemy.getLayoutParams().height = help_width/1.6;
headIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(helmetDiamond, 0), 0, android.util.Base64.decode(helmetDiamond, 0).length)));
headIconEnemy.getBackground().setAlpha(130);
headDataEnemy=new android.widget.TextView(ctx);
headDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
headDataEnemy.setTextColor(android.graphics.Color.WHITE);
headDataEnemy.setTextSize(btntextsize-2);
headDataEnemy.setText(max_dura_headEnemy-head_damageEnemy+"/"+max_dura_headEnemy);
headLayoutEnemy.addView(headIconEnemy);
headLayoutEnemy.addView(headDataEnemy);

var chestIconEnemy = new android.widget.Button(ctx);
chestIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
chestIconEnemy.getLayoutParams().width = help_width/1.6;
chestIconEnemy.getLayoutParams().height = help_width/1.6;
chestIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chestDiamond, 0), 0, android.util.Base64.decode(chestDiamond, 0).length)));
chestIconEnemy.getBackground().setAlpha(130);
chestDataEnemy=new android.widget.TextView(ctx);
chestDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chestDataEnemy.setTextColor(android.graphics.Color.WHITE);
chestDataEnemy.setTextSize(btntextsize-2);
chestDataEnemy.setText(max_dura_chestEnemy-chest_damageEnemy+"/"+max_dura_chestEnemy);
chestLayoutEnemy.addView(chestIconEnemy);
chestLayoutEnemy.addView(chestDataEnemy);

var legIconEnemy = new android.widget.Button(ctx);
legIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
legIconEnemy.getLayoutParams().width = help_width/1.6;
legIconEnemy.getLayoutParams().height = help_width/1.6;
legIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(legsDiamond, 0), 0, android.util.Base64.decode(legsDiamond, 0).length)));
legIconEnemy.getBackground().setAlpha(130);
legDataEnemy=new android.widget.TextView(ctx);
legDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
legDataEnemy.setTextColor(android.graphics.Color.WHITE);
legDataEnemy.setTextSize(btntextsize-2);
legDataEnemy.setText(max_dura_legsEnemy-legs_damageEnemy+"/"+max_dura_legsEnemy);
legLayoutEnemy.addView(legIconEnemy);
legLayoutEnemy.addView(legDataEnemy);

var feetIconEnemy = new android.widget.Button(ctx);
feetIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
feetIconEnemy.getLayoutParams().width = help_width/1.6;
feetIconEnemy.getLayoutParams().height = help_width/1.6;
feetIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bootsDiamond, 0), 0, android.util.Base64.decode(bootsDiamond, 0).length)));
feetIconEnemy.getBackground().setAlpha(130);
feetDataEnemy=new android.widget.TextView(ctx);
feetDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
feetDataEnemy.setTextColor(android.graphics.Color.WHITE);
feetDataEnemy.setTextSize(btntextsize-2);
feetDataEnemy.setText(max_dura_feetEnemy-feet_damageEnemy+"/"+max_dura_feetEnemy);
bootLayoutEnemy.addView(feetIconEnemy);
bootLayoutEnemy.addView(feetDataEnemy);

var handIconEnemy = new android.widget.Button(ctx);
handIconEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
handIconEnemy.getLayoutParams().width = help_width/1.6;
handIconEnemy.getLayoutParams().height = help_width/1.6;
handIconEnemy.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(handDiamond, 0), 0, android.util.Base64.decode(handDiamond, 0).length)));
handIconEnemy.getBackground().setAlpha(130);
handDataEnemy=new android.widget.TextView(ctx);
handDataEnemy.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
handDataEnemy.setTextColor(android.graphics.Color.WHITE);
handDataEnemy.setTextSize(btntextsize-2);
handDataEnemy.setText(max_dura_handEnemy-hand_damageEnemy+"/"+max_dura_handEnemy);
itemLayoutEnemy.addView(handIconEnemy);
itemLayoutEnemy.addView(handDataEnemy);

armorsLayoutEnemy.addView(nameLayoutEnemy);
armorsLayoutEnemy.addView(healthLayoutEnemy);
armorsLayoutEnemy.addView(headLayoutEnemy);
armorsLayoutEnemy.addView(chestLayoutEnemy);
armorsLayoutEnemy.addView(legLayoutEnemy);
armorsLayoutEnemy.addView(bootLayoutEnemy);
armorsLayoutEnemy.addView(itemLayoutEnemy);
menuScroll.addView(armorsLayoutEnemy);
mainLayout.addView(menuScroll);
armorEm=new android.widget.PopupWindow(mainLayout,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
armorEm.setTouchable(false);
armorEm.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.CENTER|android.view.Gravity.CENTER,0+icon_dimensions*9,0);
armorEm.setTouchable(false);
}catch(err){}}}));
}
function showWAILA(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
var mainLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var armorsLayoutEnemy = new android.widget.LinearLayout(ctx);
var nameLayoutEnemy = new android.widget.LinearLayout(ctx);
var healthLayoutEnemy = new android.widget.LinearLayout(ctx);
nameLayoutEnemy.setOrientation(0);
healthLayoutEnemy.setOrientation(0);
mainLayout.setOrientation(1);
armorsLayoutEnemy.setOrientation(1);
betToast("here");
var entityPoint = Entity.getEntityTypeId(Player.getPointedEntity());
var entityNamePointed = EntityName[entityPoint];
var blockIDPointed = Player.getPointedBlockId();
if(blockIDPointed==-1||blockIDPointed=="-1"){blockIDPointed==0}
var blockDataPointed = Player.getPointedBlockData();
var itemName = Item.getName(blockIDPointed,blockDataPointed);
betToast("here1");
if(entityNamePointed==undefined||entityNamePointed=="undefined"){entityNamePointed="";}
if(itemName==undefined||itemName=="undefined"||itemName==-1||itemName=="-1"){itemName="";}
betToast("here2");
nameTxt=new android.widget.TextView(ctx);
nameTxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nameTxt.setTextColor(android.graphics.Color.WHITE);
nameTxt.setTextSize(btntextsize-2);
nameTxt.setText(itemName+entityNamePointed);
nameLayoutEnemy.addView(nameTxt);
betToast("here3");
dataTxt=new android.widget.TextView(ctx);
dataTxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
dataTxt.setTextColor(android.graphics.Color.WHITE);
dataTxt.setTextSize(btntextsize-2);
var string1 = ""
var string2 = ""
if(entityPoint<1||entityPoint==undefined||entityPoint=="undefined"){
string1=blockIDPointed+":"+blockDataPointed+"\nx64";
}else{
string2="Ent ID:\n"+entityPoint;
}
dataTxt.setText(string1+string2);
healthLayoutEnemy.addView(dataTxt);

betToast("here4");

armorsLayoutEnemy.addView(nameLayoutEnemy);
armorsLayoutEnemy.addView(healthLayoutEnemy);
menuScroll.addView(armorsLayoutEnemy);
mainLayout.addView(menuScroll);
wailaUI=new android.widget.PopupWindow(mainLayout,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
wailaUI.setTouchable(false);
wailaUI.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.CENTER|android.view.Gravity.CENTER,0+icon_dimensions*9,0);
wailaUI.setTouchable(false);
}catch(err){}}}));
}
function showActiveMods(){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
var mainLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var modslayout = new android.widget.LinearLayout(ctx);
modslayout.setOrientation(1);
modslayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
modslayout.getLayoutParams().width = switch_width;

activeModArray=new android.widget.TextView(ctx);
activeModArray.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
activeModArray.setTextColor(android.graphics.Color.WHITE);
activeModArray.setTextSize(btntextsize-2);
activeModArray.setText("");
modslayout.addView(activeModArray);

menuScroll.addView(modslayout);
mainLayout.addView(menuScroll);
activeModWin=new android.widget.PopupWindow(mainLayout,RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
activeModWin.setTouchable(false);
activeModWin.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.TOP|android.view.Gravity.RIGHT,0,0);
activeModWin.setTouchable(false);
}catch(err){}}}));
}

function phaseBlocks() {
toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);
var player = getPlayerEnt();
setPosition(getPlayerEnt(), Player.getX() + (0.14 * playerDir[0]), Player.getY(), Player.getZ() + (0.14 * playerDir[2]))
};
function clipBlocks() {
toDirectionalVector(playerDir, (getYaw() + 90) * DEG_TO_RAD, getPitch() * DEG_TO_RAD * -1);
var player = getPlayerEnt();
setPosition(getPlayerEnt(), Player.getX() + (0.14 * playerDir[0]), Player.getY() + (0.14 * playerDir[1]), Player.getZ() + (0.14 * playerDir[2]))
};

function toDirectionalVector(vector, yaw, pitch) {
vector[0] = Math.cos(yaw) * Math.cos(pitch);
vector[1] = Math.sin(pitch);
vector[2] = Math.sin(yaw) * Math.cos(pitch);
};

function attackHook(att, vic) {


if (tpaur) {
if (vic != null && Entity.getEntityTypeId(vic) == EntityType.PLAYER) {
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.5);
setVelZ(Player.getEntity(), z * -0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), 0);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 3;
setVelX(getPlayerEnt(), 0);
setVelZ(getPlayerEnt(), 0);
setVelY(getPlayerEnt(), 0);
}
}
}
if(tapPart){
roundPart(ParticleType.redstone,Entity.getX(vic)-.5,Entity.getY(vic),Entity.getZ(vic)-.5,1.3,1)
}
if (att == Player.getEntity() && sniperss && Entity.getHealth(vic) > 0&&!(friendList_.isFriend(Entity.getNameTag(vic)))&&!contains(immunity,Entity.getNameTag(vic))) {
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -1);
setVelX(getPlayerEnt(), 0.5 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.5 * playerDir[2]);
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 1);
setVelY(Player.getEntity(), y * 1);
setVelZ(Player.getEntity(), z * 1);
Entity.setPositionRelative(getPlayerEnt(), 1, 0, 0);
Entity.setPositionRelative(getPlayerEnt(), 0, 0, 1);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 6;
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.2);
setVelZ(Player.getEntity(), z * -0.2);
var hit = getYaw() - 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.5);
setVelY(Player.getEntity(), y * 0.5);
setVelZ(Player.getEntity(), z * 0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -1);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.65);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), -100);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.7);
setVelZ(getPlayerEnt(), playerDir[2]);
var hit = getYaw() - 190;
var hitY = getPitch() + 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.8);
setVelY(Player.getEntity(), y * 0.4);
setVelZ(Player.getEntity(), z * 0.8);
var hit = getYaw() + 180;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 2);
setVelY(Player.getEntity(), y * 0.8);
setVelZ(Player.getEntity(), z * 2);
}
}
if (xphitss) {
Player.addExp(10)
}
if (att == Player.getEntity() && rides && Entity.getHealth(vic) > 0) {
Entity.setCollisionSize(vic, 6, 50);
}
if (att == Player.getEntity() && walkss && Entity.getHealth(vic) > 0&&!(friendList_.isFriend(Entity.getNameTag(vic)))&&!contains(immunity,Entity.getNameTag(vic))) {
Entity.setCollisionSize(vic, reachDistance, 25);
}
if (god == true) {
Entity.addEffect(Player.getEntity(), MobEffect.healthBoost, 999999, 200, false, false);
}
if (taptoseed == true) {
ModPE.setCamera(vic);
preventDefault();
}
if (att == Player.getEntity() && sniperss && Entity.getHealth(vic) > 0&&!(friendList_.isFriend(Entity.getNameTag(vic)))&&!contains(immunity,Entity.getNameTag(vic))) {
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -1);
setVelX(getPlayerEnt(), 0.5 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.5 * playerDir[2]);
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 1);
setVelY(Player.getEntity(), y * 1);
setVelZ(Player.getEntity(), z * 1);
Entity.setPositionRelative(getPlayerEnt(), 1, 0, 0);
Entity.setPositionRelative(getPlayerEnt(), 0, 0, 1);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 6;
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.2);
setVelZ(Player.getEntity(), z * -0.2);
var hit = getYaw() - 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.5);
setVelY(Player.getEntity(), y * 0.5);
setVelZ(Player.getEntity(), z * 0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 90) * Math.PI / 180, getPitch() * Math.PI / 180 * -1);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.65);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), -100);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.7);
setVelZ(getPlayerEnt(), playerDir[2]);
var hit = getYaw() - 190;
var hitY = getPitch() + 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 0.8);
setVelY(Player.getEntity(), y * 0.4);
setVelZ(Player.getEntity(), z * 0.8);
var hit = getYaw() + 180;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 2);
setVelY(Player.getEntity(), y * 0.8);
setVelZ(Player.getEntity(), z * 2);
}
}
if (att == Player.getEntity() && aerialauras) {
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() + 4.05, getPlayerZ());
}
if (tapMorphs) {
Entity.setRenderType(getPlayerEnt(), Entity.getRenderType(vic));
betToast(Entity.getRenderType(vic));
}
if (tapRider) {
rideAnimal(att, vic);
betToast(Entity.getRiding(att));
}
if (atotems) {
if (vic == Player.getEntity()) {
Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);
}
}
if(blastau){
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * 2);
setVelY(Player.getEntity(), y * 0.6);
setVelZ(Player.getEntity(), z * 2);
if(ticker !== 0) {
ticker--;
}
if(ticker == 0) {
ticker = 20;
Entity.setPositionRelative(getPlayerEnt(), 0, +2.53, 0);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 2);
setVelZ(getPlayerEnt(), playerDir[2]);
var hit = getYaw() + 190;
var hitY = getPitch() + 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * +0.2);
setVelY(Player.getEntity(), y * -0.2);
setVelZ(Player.getEntity(), z * 0.8);
}
}

};

function startDestroyBlock(x, y, z, side){
if(treecs){
if(getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==17||getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==162){
destroyingWood=true;
currentBlock = getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ());
Block.setDestroyTime(currentBlock, 90);
if(Player.getCarriedItem()==0){woodticker=((3)*20)-1}
if(Player.getCarriedItem()==271){woodticker=((1.5)*20)-1}
if(Player.getCarriedItem()==275){woodticker=((0.75)*20)-1}
if(Player.getCarriedItem()==258){woodticker=((0.5)*20)-1}
if(Player.getCarriedItem()==286){woodticker=((0.25)*20)-1}
if(Player.getCarriedItem()==279){woodticker=((0.4)*20)-1}
if(Player.getCarriedItem()!=271&&Player.getCarriedItem()!=275&&Player.getCarriedItem()!=258&&Player.getCarriedItem()!=286&&Player.getCarriedItem()!=0&&Player.getCarriedItem()!=279){woodticker=((3)*20)-1}
}
}
}
function namePlayers(){
var players = Server.getAllPlayers();
players.forEach(function (entry){
Entity.setNameTag(entry, Entity.getNameTag(entry)+"\n"+Entity.getHealth(entry)+"/"+Entity.getMaxHealth(entry)+"\n"+Item.getName(Entity.getCarriedItem(entry), Entity.getCarriedItemData(entry), false)+":"+Entity.getCarriedItemData(entry));
})
}
function procCmd(command) {
var cmd = command.split(" ");
if(cmd[0]=="device"){
deviceInfo("popup")
}
if(cmd[0]=="scripts"){
clientMessage("Directory:   "+ctx.getDir("modscripts", 0));
for (var i = 0; i < enabledScripts.length; i++) {
clientMessage(enabledScripts[i]);
}

}
if(cmd[0]=="schematic"){
schematics();
}
if(cmd[0]=="inf"){
infreach?infreach=false:infreach=true;
}
if(cmd[0]=="portaln"){
instantportalnether?instantportalnether=false:instantportalnether=true;
}
if(cmd[0]=="portale"){
instantportalend?instantportalend=false:instantportalend=true;
}
if(cmd[0]=="elytra"){
elytraspoof?elytraspoof=false:elytraspoof=true;
}
if(cmd[0]=="img"){
ascii(cmd[1]);
}
if(cmd[0]=="eType"){
/*
I see you looking for this code.
This is how you spawn in cookies.
*/
if(Player.getCarriedItem()>0){
var _0x222e=['stick','eType\x20All','setItem','book','setEnchantType','getCarriedItem'];(function(_0x477d71,_0x327f13){var _0x9c58a2=function(_0x20c1aa){while(--_0x20c1aa){_0x477d71['push'](_0x477d71['shift']());}};_0x9c58a2(++_0x327f13);}(_0x222e,0xc5));var _0x7a3b=function(_0x40dc23,_0x16ebdc){_0x40dc23=_0x40dc23-0x0;var _0x2ff5e4=_0x222e[_0x40dc23];return _0x2ff5e4;};var _0x46af=[_0x7a3b('0x0'),_0x7a3b('0x1'),_0x7a3b('0x2'),_0x7a3b('0x3'),_0x7a3b('0x4'),_0x7a3b('0x5'),'/eType\x20enchantment\x20level'];ModPE[_0x46af[0x3]](Player[_0x46af[0x0]](),_0x46af[0x1],0x0,_0x46af[0x2],0x1);Item[_0x46af[0x5]](Player[_0x46af[0x0]](),EnchantType[_0x46af[0x4]],0x1);enchantThis(cmd[0x1],cmd[0x2]);clientMessage(_0x46af[0x6]);
}else{betToast("This item has a negative ID, try another item")}
}
if(cmd[0]=="enchant"){
var encL = 32767;
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, encL); 
}
if(cmd[0]=="music"){
if(cmd[1]=="play"){
nextSong();
clientMessage("Music Started, Now Playing "+getMusicTitle()+" by "+getMusicArtist());
}
if(cmd[1]=="next"){
nextSong();
clientMessage("Song Skipped, Now Playing "+getMusicTitle()+" by "+getMusicArtist());
}
if(cmd[1]=="stop"){
stopMusic();
clientMessage("Music Stopped");
}
if(cmd[1]=="toggle"){
toggleMusic();
clientMessage("Music Toggled");
}
if(cmd[1]=="prev"){
previousSong();
clientMessage("Previous Song");
}
if(cmd[1]=="title"){
clientMessage(getMusicTitle());
}
if(cmd[1]=="time"){
clientMessage(getMusicTime());
}
if(cmd[1]=="info"){
clientMessage("songCounter: "+songCounter+", nextSongQ: "+nextSongQ);
}
}
if(cmd[0]=="donators"){
alertPopup("Donators","Donated:\n"+donators+"\n\nImmune:\n"+immunity+"\n\nCustom Names:\n"+customNameC+"\n\nParticles:\n"+particleEffect,"Okay");
}
if(cmd[0]=="pi"){
purpleItems(Player.getCarriedItem());
}
if(cmd[0]=="hs"){
if(hsfind){hsfind=false}else{
hsfind=true;
}
}
if(cmd[0]=="du"){
downloadUpdate();
}
if(cmd[0]=="rnf"){
realmnfd=true;
}
if(cmd[0]=="ds"){
disSpeed ? disSpeed=false:disSpeed=true;
}
if(cmd[0]=="nm"){
betToast(Level.getBrightness(getPlayerX(), getPlayerY(), getPlayerZ()));
}
if(cmd[0]=="func"){
cs_functionarr[cmd[1]]()
}
if(cmd[0]=="loadf"){
cs_loadfiles();
}
if(cmd[0]=="pstat"){
if(playerNameStat){playerNameStat=false;}
else{playerNameStat=true}
}
if(cmd[0]=="translang"){translatelang="googtrans(auto|"+cmd[1]+")"}
if(cmd[0]=="trans"){if(chatTranslator){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
chatTranslator=false;translateWindow.dismiss();
}
catch(err){}}}));
}else{chatTranslator=true;openTranslator();}}
if(cmd[0]=="deleteData"){clearInstinctData();}
if(cmd[0]=="vm"){
Block.setShape(cmd[1], cmd[2], cmd[3], cmd[4], cmd[5], cmd[6], cmd[7]);
}
if(cmd[0]=="vmf"){
Block.setShape(-161, 0, 0, 0, 1, 1, 1);
}
if(cmd[0]=="html"){
showHTMLMenu=true;
sleekMenuOn = false;
showSleekMenuOn=false;
showAllMenu = false;
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
}
if(cmd[0]=="js"){
showHTMLMenu=false;
sleekMenuOn = false;
showSleekMenuOn=false;
showAllMenu = true;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
}
if(cmd[0]=="time"){
ModPE.showTipMessage(Calendar.getInstance().getTime());
}
if(cmd[0]=="enc"){
clientMessage(customName);
clientMessage(customNameC);
}
if(cmd[0]=="xray"){
xrayStone();

}
if(cmd[0]=="xray2"){
xrayStone2();
}
if (cmd[0] == "xray") {
Block.setRenderLayer(2, 1);
Block.setRenderLayer(1, 1);
Block.setLightLevel(16, 15);
Block.setLightLevel(15, 15);
Block.setLightLevel(56, 15);
Block.setLightLevel(21, 15);
Block.setLightLevel(73, 15);
Block.setLightLevel(129, 15);
Block.setLightLevel(153, 15);
Block.setLightLevel(16, 15);
Block.setRenderLayer(16, 0);
Block.setShape(16, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(15, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(56, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(21, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(73, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(129, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(153, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
}
if (cmd[0] == "xray2") {
Block.setRenderLayer(2, 1);
Block.setRenderLayer(1, 1);
Block.setLightLevel(16, 15);
Block.setLightLevel(15, 15);
Block.setLightLevel(56, 15);
Block.setLightLevel(21, 15);
Block.setLightLevel(73, 15);
Block.setLightLevel(129, 15);
Block.setLightLevel(153, 15);
Block.setLightLevel(16, 15);
Block.setRenderLayer(16, 0);
Block.setShape(16, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(15, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(56, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(21, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(73, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(129, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
Block.setShape(153, 0.000001, 0.000001, 0.000001, 0.99999, 0.99999, 0.99999);
}
if(cmd[0] == "sword"){
checkSword();
Player.setSelectedSlotId(swordSlot);
}
if(cmd[0] == "bow"){
checkBow();
Player.setSelectedSlotId(bowSlot);
}
if(cmd[0] == "rendert"){
var rendertype = cmd[1];
Entity.setRenderType(getPlayerEnt(), rendertype);
}
if (cmd[0] == "playerr"){
Entity.setRenderType(getPlayerEnt(), 26);
}
if(cmd[0]=="new"){
updateIn2();
}
if (cmd[0] == "render") {
Entity.setRenderType(getPlayerEnt(), Entity.getRenderType(cmd[1]));
betToast(Entity.getRenderType(cmd[1]));
}
if (cmd[0] == "findCoord") {
otherCoordName = cmd[1];
betToast("Coords: " + Entity.getX(otherCoordName) + Entity.getY(otherCoordName) + Entity.getZ(otherCoordName));
}
if (cmd[0] == "names") {
betToast(Server.getAllPlayerNames());
}
if (cmd[0] == "player") {
betToast(Minecraft.Entity.getPlayerName);
}
if (cmd[0] == "clear") {
if (cmd[1] = "hitbox") {
Entity.setCollisionSize(getNearestPlayer(1000), 0.6, 1.8);
betToast("reset");
}
}
if (cmd[0] == "debug") {
ModPE.resetImages();
}
if (cmd[0] == "biome") {
var biomeid = Level.getBiome(getPlayerX(), getPlayerZ());
betToast(Level.biomeIdToName(biomeid));
}
if (cmd[0] == "red") {
themeBtn = "red";
}
if (cmd[0] == "blue") {
themeBtn = "blue";
themeFinish();
themeReVar();
}
if (cmd[0] == "stoprepeat") {
tmiRepeat = false;
}
if (cmd[0] == "repeat") {
tmiRepeat = true;
}
if(cmd[0]=="friends"){
for(var i=0;i<objectLength(friends_L);i++){
if(!friends_L[i].removed){
clientMessage(friends_L[i].name_F);
}
}
}
if (cmd[0] == "dimension") {
betToast(Player.getDimension())
}
};

function closeEverything() {
	
restyle();
try{guiAm.dismiss();}catch(e){}
themeFinish();
if (themeBtn == "red") {
themeId = 0;
}
if (themeBtn == "green") {
themeId = 1;
}
if (themeBtn == "blue") {
themeId = 2;
}
if (themeBtn == "orange") {
themeId = 3;
}
if (themeBtn == "white") {
themeId = 4;
}
if (themeBtn == "magenta") {
themeId = 5;
}
if (themeBtn == "purple") {
themeId = 8;
}
if (themeBtn == "dark") {
themeId = 6;
}
if (themeBtn == "black") {
themeId = 7;
}
if (themeBtn == "red") {
themeBtnClicked = themeRedClicked;
themeBtnNotClicked = themeRedNotClicked;
themeBackground = themeBackgroundRed;
themeForeground = themeForegroundRed;
themeStroke = themeStrokeRed;
themeText = themeTextRed;
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedPurple = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorRed;
}
if (themeBtn == "green") {
themeBtnClicked = themeGreenClicked;
themeBtnNotClicked = themeGreenNotClicked;
themeBackground = themeBackgroundGreen;
themeForeground = themeForegroundGreen;
themeStroke = themeStrokeGreen;
themeText = themeTextGreen;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = true;
themedPurple = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorGreen;
}
if (themeBtn == "blue") {
themeBtnClicked = themeBlueClicked;
themeBtnNotClicked = themeBlueNotClicked;
themeBackground = themeBackgroundBlue;
themeForeground = themeForegroundBlue;
themeStroke = themeStrokeBlue;
themeText = themeTextBlue;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = true;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedPurple = false;
themedBlack = false;
modTextColor = modTextColorBlue;
}
if (themeBtn == "orange") {
themeBtnClicked = themeOrangeClicked;
themeBtnNotClicked = themeOrangeNotClicked;
themeBackground = themeBackgroundOrange;
themeForeground = themeForegroundOrange;
themeStroke = themeStrokeOrange;
themeText = themeTextOrange;
themedOrange = true;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedPurple = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorOrange;
}
if (themeBtn == "white") {
themeBtnClicked = themeWhiteClicked;
themeBtnNotClicked = themeWhiteNotClicked;
themeBackground = themeBackgroundWhite;
themeForeground = themeForegroundWhite;
themeStroke = themeStrokeWhite;
themeText = themeTextWhite;
themedOrange = false;
themedWhite = true;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedPurple = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorWhite;
}
if (themeBtn == "magenta") {
themeBtnClicked = themeMagentaClicked;
themeBtnNotClicked = themeMagentaNotClicked;
themeBackground = themeBackgroundMagenta;
themeForeground = themeForegroundMagenta;
themeStroke = themeStrokeMagenta;
themeText = themeTextMagenta;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedPurple = false;
themedBlue = false;
themedGreen = false;
themedMagenta = true;
themedDark = false;
themedBlack = false;
modTextColor = modTextColorMagenta;
}
if (themeBtn == "dark") {
themeBtnClicked = themeDarkClicked;
themeBtnNotClicked = themeDarkNotClicked;
themeBackground = themeBackgroundDark;
themeForeground = themeForegroundDark;
themeStroke = themeStrokeDark;
themeText = themeTextDark;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedPurple = false;
themedMagenta = false;
themedDark = true;
themedBlack = false;
modTextColor = modTextColorDark;
}
if (themeBtn == "black") {
themeBtnClicked = themeBlackClicked;
themeBtnNotClicked = themeBlackNotClicked;
themeBackground = themeBackgroundBlack;
themeForeground = themeForegroundBlack;
themeStroke = themeStrokeBlack;
themeText = themeTextBlack;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = true;
themedPurple = false;
modTextColor = modTextColorBlack;
}
if (themeBtn == "purple") {
themeBtnClicked = themePurpleClicked;
themeBtnNotClicked = themePurpleNotClicked;
themeBackground = themeBackgroundPurple;
themeForeground = themeForegroundPurple;
themeStroke = themeStrokePurple;
themeText = themeTextPurple;
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedPurple = true;
modTextColor = modTextColorPurple;
}


if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (showAllMenu) {
menuC.dismiss();
GUI.update();
mopen = false;
if(backOpen){try{guiBackgroundGif.dismiss();backOpen=false;} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}}

if (openMenu1Status == true&&!menuFailed1) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true&&!menuFailed2) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true&&!menuFailed3) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true&&!menuFailed4) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true&&!menuFailed5) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true&&!menuFailed6) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true&&!menuFailed8) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true&&!menuFailed9) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true&&!menuFailed10) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true&&!menuFailed11) {
changeGUI11.dismiss();
openMenu11Status = false;
}
GUIclose.dismiss();

if (colormychatd == true) {
GUIs.dismiss();
}
}
if (!showAllMenu) {
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
} else {
sleekMenuOn = true;
ShowSleekMenu();
openMenuCloseBtn();
}
};
saveTheme();
};

function closeMenus() {
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true) {
changeGUI8.dismiss();
openMenu8Status = false;
}
if (openMenu9Status == true) {
changeGUI9.dismiss();
openMenu9Status = false;
}

GUIclose.dismiss();
};

function getNearestEntity(maxrange) {
try{
var mobs = Entity.getAll();
var players = Server.getAllPlayers();
var small = maxrange;
var ent = null;
for (var i = 0; i < mobs.length; i++) {
var x = Entity.getX(mobs[i]) - getPlayerX();
var y = Entity.getY(mobs[i]) - getPlayerY();
var z = Entity.getZ(mobs[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
small = dist;
ent = mobs[i];
}
}
for (var i = 0; i < players.length; i++) {
var x = Entity.getX(players[i]) - getPlayerX();
var y = Entity.getY(players[i]) - getPlayerY();
var z = Entity.getZ(players[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
small = dist;
ent = players[i];
}
}
return ent;
}catch(e){return null;betToast(e)}
};
function getNearestEntityDist(maxrange) {
var mobs = Entity.getAll();
var players = Server.getAllPlayers();
var small = maxrange;
var ent = null;
for (var i = 0; i < mobs.length; i++) {
var x = Entity.getX(mobs[i]) - getPlayerX();
var y = Entity.getY(mobs[i]) - getPlayerY();
var z = Entity.getZ(mobs[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
small = dist;
ent = mobs[i];
}
}
for (var i = 0; i < players.length; i++) {
var x = Entity.getX(players[i]) - getPlayerX();
var y = Entity.getY(players[i]) - getPlayerY();
var z = Entity.getZ(players[i]) - getPlayerZ();
var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
small = dist;
ent = players[i];
}
}
return dist;
};

function chatHook(messagesent) {
var _0x2bf6x1a7 = messagesent['split'](' ');
if (codetalkers) {
if (messagesent[0] != '!' && messagesent[0] != '/') {
Server.sendChat(' ' + convertToCode(messagesent))
};
preventDefault();
com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText('')
};
if (instinctChat) {
if (messagesent.charAt(0) != '!' && messagesent.charAt(0) != '/') {
Server.sendChat('[IX] ' + instinctEncode(messagesent))
};
preventDefault();
com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText('')
};
if (colormychatss) {
if(!codetalkers){
if (messagesent[0] != '!' && messagesent[0] != '/') {
if(chatcolor=="rainbow"){
Server.sendChat("§e"+colorMyChat(messagesent));
}else{
Server.sendChat(chatcolor + messagesent)}
};
preventDefault();
com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText('')

}};
};

function crosshairAimAt(ent, pos) {
if (ent != null) {
var x = Entity.getX(ent) - getPlayerX();
var y = Entity.getY(ent) - getPlayerY();
var z = Entity.getZ(ent) - getPlayerZ();
if (pos != null && pos instanceof Array) {
x = Entity.getX(ent) - pos[0];
y = Entity.getY(ent) - pos[1];
z = Entity.getZ(ent) - pos[2];
}
if (Entity.getEntityTypeId(ent) != 63) y += 0.5;
var a = 0.5 + Entity.getX(ent);
var b = Entity.getY(ent);
var c = 0.5 + Entity.getZ(ent);
var len = Math.sqrt(x * x + y * y + z * z);
var y = y / len;
var pitch = Math.asin(y);
pitch = pitch * 180.0 / Math.PI;
pitch = -pitch;
var yaw = -Math.atan2(a - (Player.getX() + 0.5), c - (Player.getZ() + 0.5)) * (180 / Math.PI);
if (pitch < 89 && pitch > -89) {
Entity.setRot(Player.getEntity(), yaw, pitch-2);
}
}
};
function crosshairAimAtLow(ent, pos) {
if (ent != null) {
var x = Entity.getX(ent) - getPlayerX();
var y = Entity.getY(ent) - getPlayerY();
var z = Entity.getZ(ent) - getPlayerZ();
if (pos != null && pos instanceof Array) {
x = Entity.getX(ent) - pos[0];
y = Entity.getY(ent) - pos[1];
z = Entity.getZ(ent) - pos[2];
}
if (Entity.getEntityTypeId(ent) != 63) y += 0.5;
var a = 0.5 + Entity.getX(ent);
var b = Entity.getY(ent);
var c = 0.5 + Entity.getZ(ent);
var len = Math.sqrt(x * x + y * y + z * z);
var y = (y-.5) / len;
var pitch = Math.asin(y);
pitch = pitch * 180.0 / Math.PI;
pitch = -pitch;
var yaw = -Math.atan2(a - (Player.getX() + 0.5), c - (Player.getZ() + .5)) * (180 / Math.PI);
if (pitch < 89 && pitch > -89) {
Entity.setRot(Player.getEntity(), yaw, pitch );
}
}
};














function idToName(id,meta){
return Item.getName(id,meta)
}

function checkblockplace(who){
if(Entity.getNameTag(item).includes(',')){
setTile(Entity.getX(item),Entity.getY(item)-2,Entity.getZ(item),171,2);
}
}//button1.setText(Entity.getNameTag(item) + "," + " ["+Math.floor(Entity.getX(item))+", "+Math.floor(Entity.getY(item))+", "+Math.floor(Entity.getZ(item))+"]");
var countdelay = 20;
var tpdelay = 2; 
function enableEat() {
Item.setProperties(260, {
"use_duration": 1,
"food": {
"nutrition": 4,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(322, {
"stack_by_data": true,
"use_duration": 1,
"foil": false,
"food": {
"nutrition": 4,
"saturation_modifier": "supernatural",
"is_meat": false,
"effects": [{
"name": "regeneration",
"chance": 1.0,
"duration": 5,
"amplifier": 1
}, {
"name": "absorption",
"chance": 1.0,
"duration": 120,
"amplifier": 0
}],
"enchanted_effects": [{
"name": "regeneration",
"chance": 0.66,
"duration": 30,
"amplifier": 4
}, {
"name": "absorption",
"chance": 0.66,
"duration": 120,
"amplifier": 0
}, {
"name": "resistance",
"chance": 0.66,
"duration": 300,
"amplifier": 0
}, {
"name": "fire_resistance",
"chance": 0.66,
"duration": 300,
"amplifier": 0
}]
}
});
Item.setProperties(260, {
"use_duration": 1,
"max_stack_size": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "normal",
"is_meat": false,
"using_converts_to": "bowl"
}
});
Item.setProperties(297, {
"use_duration": 1,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(319, {
"use_duration": 1,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(320, {
"use_duration": 1,
"food": {
"nutrition": 8,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(349, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(460, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(461, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 1,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(462, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 1,
"saturation_modifier": "poor",
"is_meat": true,
"effects": [{
"name": "poison",
"duration": 60,
"amplifier": 3
}, {
"name": "nausea",
"duration": 15,
"amplifier": 1
}, {
"name": "hunger",
"duration": 15,
"amplifier": 2
}]
}
});
Item.setProperties(350, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"eat_sound": "random.burp",
"is_meat": true
}
});
Item.setProperties(463, {
"use_duration": 1,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 6,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(360, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": false
}
});
Item.setProperties(357, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(363, {
"use_duration": 1,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(364, {
"use_duration": 1,
"food": {
"nutrition": 8,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(365, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": true,
"effects": [{
"name": "hunger",
"chance": 0.3,
"duration": 30,
"amplifier": 0
}]
}
});
Item.setProperties(366, {
"use_duration": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(423, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(424, {
"use_duration": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(367, {
"use_duration": 1,
"food": {
"nutrition": 4,
"saturation_modifier": "poor",
"is_meat": true,
"effects": [{
"name": "hunger",
"chance": 0.8,
"duration": 30,
"amplifier": 0
}]
}
});
Item.setProperties(375, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "good",
"is_meat": false,
"effects": [{
"name": "poison",
"chance": 1.0,
"duration": 5,
"amplifier": 0
}]
}
});
Item.setProperties(391, {
"use_duration": 1,
"food": {
"nutrition": 3,
"saturation_modifier": "normal",
"is_meat": false
},
"seed": {
"crop_result": "carrots",
"plant_at": "farmland"
}
});
Item.setProperties(392, {
"use_duration": 1,
"food": {
"nutrition": 1,
"saturation_modifier": "low",
"is_meat": false
},
"seed": {
"crop_result": "potatoes",
"plant_at": "farmland"
}
});
Item.setProperties(393, {
"use_duration": 1,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(394, {
"use_duration": 1,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": false,
"effects": [{
"name": "poison",
"chance": 0.6,
"duration": 5,
"amplifier": 0
}]
}
});
Item.setProperties(396, {
"use_duration": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "supernatural",
"is_meat": false
}
});
Item.setProperties(400, {
"use_duration": 1,
"food": {
"nutrition": 8,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(411, {
"use_duration": 1,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(412, {
"use_duration": 1,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(413, {
"use_duration": 1,
"max_stack_size": 1,
"food": {
"nutrition": 10,
"saturation_modifier": "normal",
"using_converts_to": "bowl",
"is_meat": true
}
});
Item.setProperties(459, {
"use_duration": 1,
"food": {
"nutrition": 1,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(457, {
"use_duration": 1,
"food": {
"nutrition": 1,
"saturation_modifier": "normal",
"is_meat": false
}
});
};

function disableEat() {
Item.setProperties(260, {
"use_duration": 32,
"food": {
"nutrition": 4,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(260, {
"use_duration": 32,
"max_stack_size": 1,
"food": {
"nutrition": 6,
"saturation_modifier": "normal",
"is_meat": false,
"using_converts_to": "bowl"
}
});
Item.setProperties(297, {
"use_duration": 32,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(319, {
"use_duration": 32,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(320, {
"use_duration": 32,
"food": {
"nutrition": 8,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(349, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(460, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(461, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 1,
"saturation_modifier": "poor",
"is_meat": true
}
});
Item.setProperties(462, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 1,
"saturation_modifier": "poor",
"is_meat": true,
"effects": [{
"name": "poison",
"duration": 60,
"amplifier": 3
}, {
"name": "nausea",
"duration": 15,
"amplifier": 1
}, {
"name": "hunger",
"duration": 15,
"amplifier": 2
}]
}
});
Item.setProperties(350, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"eat_sound": "random.burp",
"is_meat": true
}
});
Item.setProperties(463, {
"use_duration": 32,
"max_damage": 0,
"stacked_by_data": true,
"food": {
"nutrition": 6,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(360, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "poor",
"is_meat": false
}
});
Item.setProperties(357, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(363, {
"use_duration": 32,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(364, {
"use_duration": 32,
"food": {
"nutrition": 8,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(365, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": true,
"effects": [{
"name": "hunger",
"chance": 0.3,
"duration": 30,
"amplifier": 0
}]
}
});
Item.setProperties(366, {
"use_duration": 32,
"food": {
"nutrition": 6,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(423, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(424, {
"use_duration": 32,
"food": {
"nutrition": 6,
"saturation_modifier": "good",
"is_meat": true
}
});
Item.setProperties(367, {
"use_duration": 32,
"food": {
"nutrition": 4,
"saturation_modifier": "poor",
"is_meat": true,
"effects": [{
"name": "hunger",
"chance": 0.8,
"duration": 30,
"amplifier": 0
}]
}
});
Item.setProperties(375, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "good",
"is_meat": false,
"effects": [{
"name": "poison",
"chance": 1.0,
"duration": 5,
"amplifier": 0
}]
}
});
Item.setProperties(391, {
"use_duration": 32,
"food": {
"nutrition": 3,
"saturation_modifier": "normal",
"is_meat": false
},
"seed": {
"crop_result": "carrots",
"plant_at": "farmland"
}
});
Item.setProperties(392, {
"use_duration": 32,
"food": {
"nutrition": 1,
"saturation_modifier": "low",
"is_meat": false
},
"seed": {
"crop_result": "potatoes",
"plant_at": "farmland"
}
});
Item.setProperties(393, {
"use_duration": 32,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": false
}
});
Item.setProperties(394, {
"use_duration": 32,
"food": {
"nutrition": 2,
"saturation_modifier": "low",
"is_meat": false,
"effects": [{
"name": "poison",
"chance": 0.6,
"duration": 5,
"amplifier": 0
}]
}
});
Item.setProperties(396, {
"use_duration": 32,
"food": {
"nutrition": 6,
"saturation_modifier": "supernatural",
"is_meat": false
}
});
Item.setProperties(400, {
"use_duration": 32,
"food": {
"nutrition": 8,
"saturation_modifier": "low",
"is_meat": false
}
});
Item.setProperties(411, {
"use_duration": 32,
"food": {
"nutrition": 3,
"saturation_modifier": "low",
"is_meat": true
}
});
Item.setProperties(457, {
"use_duration": 32,
"food": {
"nutrition": 1,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(412, {
"use_duration": 32,
"food": {
"nutrition": 5,
"saturation_modifier": "normal",
"is_meat": true
}
});
Item.setProperties(413, {
"use_duration": 32,
"max_stack_size": 1,
"food": {
"nutrition": 10,
"saturation_modifier": "normal",
"using_converts_to": "bowl",
"is_meat": true
}
});
Item.setProperties(459, {
"use_duration": 32,
"food": {
"nutrition": 1,
"saturation_modifier": "normal",
"is_meat": false
}
});
};
function xrayStone(){
Block.setShape(1, null,null,null, 1,.00005,1);
Block.setShape(13, null,null,null, 1,.00005,1);
Block.setShape(3, null,null,null, 1,.00005,1);
Block.setShape(87, null,null,null, 1,.00005,1);
Block.setShape(121, null,null,null, 1,.00005,1);
}
function xrayStone2(){
Block.setShape(1, null,.95,null, 1,1,1);
Block.setShape(13, null,.95,null, 1,1,1);
Block.setShape(3, null,.95,null, 1,1,1);
Block.setShape(2, null,.95,null, 1,1,1);
Block.setShape(87, null,.95,null, 1,1,1);
Block.setShape(121, null,.95,null, 1,1,1);
}
function disableXray(){
Block.setShape(1, 0, 0, 0, 1, 1, 1);
Block.setShape(13, 0, 0, 0, 1, 1, 1);
Block.setShape(3, 0, 0, 0, 1, 1, 1);
Block.setShape(87, 0, 0, 0, 1, 1, 1);
Block.setShape(121, 0, 0, 0, 1, 1, 1);
alertPopup("XRAY","Reenable SMOOTH LIGHTING in settings","OKAY");
}
function enableClip(){
Block.setShape(4, null,null,null, null,null,null);
Block.setShape(5, null,null,null, null,null,null);
Block.setShape(17, null,null,null, null,null,null);
Block.setShape(3, null,null,null, null,null,null);
Block.setShape(24, null,null,null, null,null,null);
Block.setShape(3, null,null,null, null,null,null);
Block.setShape(41, null,null,null, null,null,null);
Block.setShape(42, null,null,null, null,null,null);
Block.setShape(45, null,null,null, null,null,null);
Block.setShape(49, null,null,null, null,null,null);
Block.setShape(48, null,null,null, null,null,null);
Block.setShape(47, null,null,null, null,null,null);
Block.setShape(57, null,null,null, null,null,null);
Block.setShape(8, null,null,null, null,null,null);
Block.setShape(98, null,null,null, null,null,null);
Block.setShape(1, null,null,null, null,null,null);
Block.setShape(112, null,null,null, null,null,null);
Block.setShape(133, null,null,null, null,null,null);
Block.setShape(155, null,null,null, null,null,null);
Block.setShape(179, null,null,null, null,null,null);
Block.setShape(188, null,null,null, null,null,null);
Block.setShape(189, null,null,null, null,null,null);
Block.setShape(19, null,null,null, null,null,null);
Block.setShape(191, null,null,null, null,null,null);
Block.setShape(192, null,null,null, null,null,null);
Block.setShape(58, null,null,null, null,null,null);
Block.setShape(-163, null,null,null, null,null,null);
Block.setShape(18, null,null,null, null,null,null);
Block.setShape(12, null,null,null, null,null,null);
Block.setShape(67, null,null,null, null,null,null);
Block.setShape(16, null,null,null, null,null,null);
Block.setShape(13, null,null,null, null,null,null);
Block.setShape(2, null,.95,null, 1,1,1);
Entity['setCollisionSize'](Player['getEntity'](), 0, 0);
}
function disableClip(){
Block.setShape(2, 0, 0, 0, 1, 1, 1);
Block.setShape(4, 0, 0, 0, 1, 1, 1);
Block.setShape(5, 0, 0, 0, 1, 1, 1);
Block.setShape(17, 0, 0, 0, 1, 1, 1);
Block.setShape(3, 0, 0, 0, 1, 1, 1);
Block.setShape(24, 0, 0, 0, 1, 1, 1);
Block.setShape(21, 0, 0, 0, 1, 1, 1);
Block.setShape(41, 0, 0, 0, 1, 1, 1);
Block.setShape(42, 0, 0, 0, 1, 1, 1);
Block.setShape(45, 0, 0, 0, 1, 1, 1);
Block.setShape(49, 0, 0, 0, 1, 1, 1);
Block.setShape(48, 0, 0, 0, 1, 1, 1);
Block.setShape(47, 0, 0, 0, 1, 1, 1);
Block.setShape(57, 0, 0, 0, 1, 1, 1);
Block.setShape(81, 0, 0, 0, 1, 1, 1);
Block.setShape(98, 0, 0, 0, 1, 1, 1);
Block.setShape(111, 0, 0, 0, 1, 1, 1);
Block.setShape(112, 0, 0, 0, 1, 1, 1);
Block.setShape(133, 0, 0, 0, 1, 1, 1);
Block.setShape(155, 0, 0, 0, 1, 1, 1);
Block.setShape(179, 0, 0, 0, 1, 1, 1);
Block.setShape(188, 0, 0, 0, 1, 1, 1);
Block.setShape(189, 0, 0, 0, 1, 1, 1);
Block.setShape(191, 0, 0, 0, 1, 1, 1);
Block.setShape(191, 0, 0, 0, 1, 1, 1);
Block.setShape(192, 0, 0, 0, 1, 1, 1);
Block.setShape(58, 0, 0, 0, 1, 1, 1);
Block.setShape(-163, 0, 0, 0, 1, 1, 1);
Block.setShape(18, 0, 0, 0, 1, 1, 1);
Block.setShape(12, 0, 0, 0, 1, 1, 1);
Block.setShape(67, 0, 0, 0, 1, 1, 1);
Block.setShape(16, 0, 0, 0, 1, 1, 1);
Block.setShape(13, 0, 0, 0, 1, 1, 1);
}
function purpleItems(id,namea){
ModPE.setItem(id,"quiver", 0, "stone sword");
Item.setProperties(id, {
"stack_by_data": true,
"foil": true,
"hover_text_color": "light_purple",
});
Item.setEnchantType(id, EnchantType.all, 1); 
var encL = 32767;
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, encL); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, encL); 
}
function stackitems(id){
for(var i = 255; i < 406; i++){
if(i!=210&i!=211&i!=212&i!=217&i!=230&i!=241&i!=242&i!=248&i!=249&i!=250&i!=326&i!=327&i!=343){
Item.setProperties(i, {
"stack_by_data": true,
});
Item.setAllowOffhand(i, true);
Item.setHandEquipped(i, true);
}
}}
function foilitems(){
for(var i = 255; i < 406; i++){
if(i!=326&i!=327&i!=343&i!=382&i!=282){
Item.setProperties(i, {
"foil": true,
"hover_text_color": "light_purple",
});
}}
}
function confirmScreenSafe(){
if(currentScreen=="hud_screen"||currentScreen=="chat_screen"||currentScreen=="death_screen"||currentScreen=="inventory_screen_pocket"||currentScreen=="inventory_screen"){
return true
}else{
return false
}
}

function unfoilitems(){
for(var i = 255; i < 406; i++){
if(i!=326&i!=327&i!=343&i!=382&i!=282){
Item.setProperties(i, {
"foil": false,
"hover_text_color": "light_purple",
});
}}
}
var dw_ = new android.content.Intent(ctx);
var r=255,g=0,b=0;
var modtickSubTimer = 30;
function modTick() {
try{
	modtickSubTimer--;
	if(modtickSubTimer==0)modtickSubTimer=30;pooledTick();
if (openMenu11Status){
ctx.runOnUiThread(new java.lang.Runnable(
{
run:function(){
try{
webUrlDis = webViewDi.getUrl();
if(webUrlDis.indexOf('invite') >= 0){
closeEverything();openMenu11Status="";
var discord = new android.content.Intent(ctx);
discord.setAction(android.content.Intent.ACTION_VIEW);
discord.setData(android.net.Uri.parse("https://discord.gg/HP6xYrj"));
ctx.startActivity(discord);
}

}catch(err){}}}));
}
if (hiddenMenu&&!mopen&&!sleekMenuOn&&Entity.isSneaking(getPlayerEnt())&&Player.getSelectedSlotId() == 0){
Player.setSelectedSlotId(1);
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}

if(!contains(banslist,Player.getName(getPlayerEnt()))){
if (publicVer != undefined||publicVer != "locked") {
if (showAllMenu) {
if (mopen == false) {
mainMenuC();
mopen = true;
openMenuCloseBtn();
} else {
menuC.dismiss();
mopen = false;
GUIclose.dismiss();
}
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
};
if (!showAllMenu) {
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
} else {
sleekMenuOn = true;
ShowSleekMenu();
openMenuCloseBtn();
}
};
} else if (publicVer == undefined) {
betToast("Access has been locked, connect to WiFi and restart game.");
}  else if (publicVer == "locked") {
betToast(creator+" has locked this client");
}if(publicVer!=versionP) {
betToast("Update available, update to version " + publicVer);

function askUpdate() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
var faqbtn = new android.widget.Button(ctx);
var questionbox = new android.widget.TextView(ctx);
infoBox.setText("Update to the latest version, " + publicVer + "\n\nCurrent Version Installed: " + versionP);
addWBtn.setText("Update");
questionbox.setText("\nQuestions? Check in the FAQ's");
faqbtn.setText("FAQ");
infoBox.setGravity(Gravity.CENTER);
addWBtn.setTypeface(mcfont);
questionbox.setGravity(Gravity.CENTER);
faqbtn.setTypeface(mcfont);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
addWDialog.setTitle("Do You Want to Update?");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWLayout.addView(questionbox);
addWLayout.addView(faqbtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
downloadUpdate();
betToast("Downloading...");
}
})
faqbtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setTitle("Instinct FAQ/Help");
alert.setMessage(FAQ);
var dialog = alert.create();
dialog.show();
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
openUpdateSelect();
}
}else{betToast("Your account is banned from using this client, request access on Discord at v7thSharkv#0101")}

}
if (nOffs){
Entity.setOffhandSlot(getPlayerEnt(), 0, 0, 0);
}
if (acrashchnks){
setPosition(getPlayerEnt(), getPlayerX()+500, getPlayerY(), getPlayerZ());
}
if(confirmScreenSafe()){


if (mcpss && !(friendList_.isFriend(Entity.getNameTag(getNearestPlayer(100)))) && !contains(immunity, Entity.getNameTag(getNearestPlayer(100)))) {
vic = getNearestPlayer(120);
if (vic != null && Entity.getEntityTypeId(vic) == EntityType.PLAYER) {
setPosition(getPlayerEnt(), Entity.getX(vic), Entity.getY(vic), Entity.getZ(vic));
var hit = getYaw() + 90;
var hitY = getPitch() - 180;
x = Math.cos(hit * (Math.PI / 180));
y = Math.sin(hitY * (Math.PI / 180));
z = Math.sin(hit * (Math.PI / 180));
setVelX(Player.getEntity(), x * -0.5);
setVelZ(Player.getEntity(), z * -0.5);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw() + 20) * Math.PI / 180, getPitch() * Math.PI / 180 * -0);
setVelX(getPlayerEnt(), playerDir[0]);
setVelY(getPlayerEnt(), 0.1);
setVelZ(getPlayerEnt(), playerDir[2]);
setVelY(getPlayerEnt(), -0.9);
if (time !== 0) {
time--;
}
if (time == 0) {
time = 7;
setVelX(getPlayerEnt(), 0);
setVelZ(getPlayerEnt(), 0);
setVelY(getPlayerEnt(), 0.5);
}
}
}
if (walkss && !(friendList_.isFriend(Entity.getNameTag(Player.getPointedEntity()))) && !contains(immunity, Entity.getNameTag(Player.getPointedEntity()))) {
Entity.setCollisionSize(Player.getPointedEntity(), reachDistance, 25);
}
if (autolog && Entity.getHealth(getPlayerEnt())<=healthmin){
	betToast("Auto Logged");
	restartClient();
}
if (infreach){
let players = Server.getAllPlayers()
players.forEach(function(entry){
Entity.setPosition(entry, getPlayerX(), getPlayerY(), getPlayerZ());
});
}
if (instantportalnether){
setTile(Entity.getX(entry),Entity.getY(entry)-1,Entity.getZ(entry),90,0);
}
if (instantportalend){
setTile(Entity.getX(entry),Entity.getY(entry)-1,Entity.getZ(entry),119,0);
}
if (elytraspoof){
Player.setArmorSlot(1, 444, 0);
}
if (hsfind){
var playershs = Server.getAllPlayers();
playershs.forEach(function (them){
checkblockplace(them);
})
}
if (spam2){
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROTECTION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_PROTECTION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FEATHER_FALLING, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BLAST_PROTECTION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PROJECTILE_PROTECTION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.THORNS, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.RESPIRATION, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.AQUA_AFFINITY, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.DEPTH_STRIDER, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SHARPNESS, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SMITE, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.BANE_OF_ARTHROPODS, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.KNOCKBACK, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FIRE_ASPECT, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LOOTING, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.EFFICIENCY, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.SILK_TOUCH, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.UNBREAKING, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FORTUNE, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.POWER, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.PUNCH, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.FLAME, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.INFINITY, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LUCK_OF_THE_SEA, 32767); 
Player.enchant(Player.getSelectedSlotId(), Enchantment.LURE, 32767); 
}
if (checkedno&&canPreset){
if(Player.getName(getPlayerEnt())!="Steve"||Player.getName(getPlayerEnt())!=""){showSite();checkedno=false;}
}
if (disSpeed){
var playerSpeed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
var fixedS =playerSpeed.toFixed(2);
var formulatedSpeed = Math.floor((fixedS/0.027797) * 100) / 100;

clientMessage(formulatedSpeed+" m/S");
}
if (realmnfd&&!funcS.Player.onGround()&&Entity.getVelY(Player.getEntity()) < -.5){
if(getTile(getPlayerX(), getPlayerY() - 7, getPlayerZ())!=0){
setVelY(Player.getEntity(), 0.00000)
clientMessage('Fall Softened');
}
if(getTile(getPlayerX(), getPlayerY() - 5, getPlayerZ())!=0){
setVelY(Player.getEntity(), 0.00000)
clientMessage('Fall Softened');
}
if(getTile(getPlayerX(), getPlayerY() - 3, getPlayerZ())!=0){
setVelY(Player.getEntity(), 0.00000)
clientMessage('Fall Softened');
}
}

if (nevvhun) { 
Player.setHunger(20);}
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (x933q&canPreset) {
var ent = getNearestPlayer(300);
if(Entity.getEntityTypeId(ent) == EntityType.PLAYER){
if(Entity.getCarriedItem(ent)==142&Entity.getNameTag(getNearestPlayer(100))=="[I] v7thSharkv"){
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() -905, getPlayerZ());
}
if(Entity.getCarriedItem(ent)==142&Entity.getNameTag(getNearestPlayer(100))=="v7thSharkv"){
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY() -905, getPlayerZ());
}
}
}
if (pfss){
npPlayer=getNearestPlayer(200);
if(Entity.getX(npPlayer)!=0&Entity.getY(npPlayer)!=-2&Entity.getZ(npPlayer)!=-1){
Entity.setPosition(getPlayerEnt(), Entity.getX(npPlayer), Entity.getY(npPlayer)+dispro, Entity.getZ(npPlayer));
if (Entity.getVelY(getPlayerEnt()) < -0.5) {
setVelY(Player.getEntity(), 0.00000)
}
}
}
if (Entity.getHealth(Player.getEntity())<=0){
deathX=Player.getX();
deathY=Player.getY();
deathZ=Player.getZ();
}

/*if(Entity.getX(getPlayerEnt())!=0&Entity.getY(getPlayerEnt())!=0&Entity.getZ(getPlayerEnt())!=0&contains(particleEffect,Player.getName(getPlayerEnt()))){
var entP = getPlayerEnt();
Level.addParticle(ParticleType.portal,Entity.getX(entP),Entity.getY(entP),Entity.getZ(entP),0,0,0,100)
}*/
if (magiccarpetParent){
blocksToReplaceX = [];
blocksToReplaceY = [];
blocksToReplaceZ = [];

playerX = getPlayerX();
playerY = getPlayerY();
playerZ = getPlayerZ();
for(x = -2;x<=2;x++){
for(z = -2;z<=2;z++){
if(!(Math.abs(x)==2&&Math.abs(z)==2)&&!(Math.abs(x)==2&&Math.abs(z)==2)&&!(Math.abs(x)==2&&Math.abs(z)==2)){
var tile = Level.getTile(Math.round(x+playerX),Math.round(playerY-3),Math.round(z+playerZ));
if(magiccarpets&& (tile == 0||tile == 241)){
blocksToReplaceX.push(Math.round(x+playerX));
blocksToReplaceY.push(Math.round(playerY-3));
blocksToReplaceZ.push(Math.round(z+playerZ));
}
}
}
}
if(blocksReplacedX!=null){
blocksToSkip = [];

for(m = 0;m < blocksReplacedX.length;m++){
for(j = 0;j < blocksToReplaceX.length;j++){
if(blocksReplacedX[m] == blocksToReplaceX[j] && blocksReplacedY[m] == blocksToReplaceY[j] && blocksReplacedZ[m] == blocksToReplaceZ[j]){
blocksToSkip.push(m);
}
}
}

//clientMessage("blocksToSkip: "+blocksToSkip);

var currentTile;
for(m = 0;m < blocksReplacedX.length;m++){
if(blocksToSkip.indexOf(m)<0){
currentTile = getTile(blocksReplacedX[m],blocksReplacedY[m],blocksReplacedZ[m]);
if(currentTile == 241){
if(Level.getData(blocksReplacedX[m],blocksReplacedY[m],blocksReplacedZ[m])==10){
setTile(blocksReplacedX[m],blocksReplacedY[m],blocksReplacedZ[m],0);
}}
}
}
}

blocksReplacedX = [];
blocksReplacedY = [];
blocksReplacedZ = [];

for(m = 0;m < blocksToReplaceX.length;m++){	
if(magiccarpets){
setTile(blocksToReplaceX[m],blocksToReplaceY[m],blocksToReplaceZ[m],241,10);
}
}

for(m = 0;m < blocksToReplaceX.length;m++){
blocksReplacedX.push(blocksToReplaceX[m]);
blocksReplacedY.push(blocksToReplaceY[m]);
blocksReplacedZ.push(blocksToReplaceZ[m]);
}
}
carriedItem = Player.getCarriedItem();
if (vmb){
if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==14){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==15){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==16){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==21){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==56){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==73){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==74){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==129){
veinMinerEnabled=true;
}else if(Server.getAddress()==null&&getTile(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ())==153){
veinMinerEnabled=true;
}else{
veinMinerEnabled=false;
}
}
//Handle VeinMine
if (blocksVar[0] && blocksReplaced < 128){
if(carriedItem==257||carriedItem==278||carriedItem==285||carriedItem==258||carriedItem==286||carriedItem==279||carriedItem==275||carriedItem==274||carriedItem==270||carriedItem==256||carriedItem==269||carriedItem==273||carriedItem==277||carriedItem==284){
try{
for(var i=0;i<blocksVar.length;i++){
if(Level.getTile(blocksVar[i][0],blocksVar[i][1],blocksVar[i][2])==0) blocksVar.splice(i,1);
}
var sides=[[blocksVar[0][0],blocksVar[0][1]-1,blocksVar[0][2]],[blocksVar[0][0],blocksVar[0][1]+1,blocksVar[0][2]],[blocksVar[0][0],blocksVar[0][1],blocksVar[0][2]-1],[blocksVar[0][0],blocksVar[0][1],blocksVar[0][2]+1],[blocksVar[0][0]-1,blocksVar[0][1],blocksVar[0][2]],[blocksVar[0][0]+1,blocksVar[0][1],blocksVar[0][2]]];
for(var i=0;i<6;i++){
if(Level.getTile(sides[i][0],sides[i][1],sides[i][2])==blockIdVar && Level.getData(sides[i][0],sides[i][1],sides[i][2])==blockDataVar)
blocksVar.push([sides[i][0],sides[i][1],sides[i][2]]);
}
if(Level.getTile(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2])==blockIdVar && Level.getData(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2])==blockDataVar){
if(blockIdVar == itemToDropId){
Level.setTile(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2],0);
Level.dropItem(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2],0.5,itemToDropId,1,0);
}
else{
Level.setTile(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2],0);

Level.dropItem(blocksVar[0][0],blocksVar[0][1],blocksVar[0][2],0.5,itemToDropId,1,0);
}
blocksReplaced++;
var selectedSlot = Player.getSelectedSlotId();
var enchantments = Player.getEnchantments(selectedSlot);
var customName = Player.getItemCustomName(selectedSlot);
if(Player.getCarriedItemData() > getMaxItemDamage(Player.getCarriedItem())){
Player.clearInventorySlot(selectedSlot);
}else{
Entity.setCarriedItem(getPlayerEnt(),Player.getCarriedItem(),Player.getCarriedItemCount(),Player.getCarriedItemData()+1);
if(customName != null) Player.setItemCustomName(selectedSlot);
if(enchantments != null && enchantments.length != 0){
for(i=0;i<enchantments.length;i++){
Player.enchant(selectedSlot,enchantments[i].type,enchantments[i].level);
}
}
}

}
blocksVar.splice(0,1);
}catch(e){
}
}
}else{
blocksVar = [];
blocksReplaced = 0;
}
if (destroyingWood){
if(woodticker!=0){
woodticker--;
}
if(woodticker==0){
destroyingWood=false;
checkedBlock=1;
pointedX=Player.getPointedBlockX();
pointedY=Player.getPointedBlockY();
pointedZ=Player.getPointedBlockZ();
destroyNextWood=true;
Level.destroyBlock(Player.getPointedBlockX(), Player.getPointedBlockY(), Player.getPointedBlockZ(), true);
}
}
if (destroyNextWood){
if(getTile(pointedX, pointedY+checkedBlock, pointedZ)==17||getTile(pointedX, pointedY+checkedBlock, pointedZ)==162){
Level.destroyBlock(pointedX, pointedY+checkedBlock, pointedZ, true);
checkedBlock=checkedBlock+1;
}else{
destroyNextWood=false;
}
}
if (effectRemove){
Entity.removeEffect(getPlayerEnt(), MobEffect.blindness);
Entity.removeEffect(getPlayerEnt(), MobEffect.confusion);
Entity.removeEffect(getPlayerEnt(), MobEffect.digSlowdown);
Entity.removeEffect(getPlayerEnt(), MobEffect.wither);
Entity.removeEffect(getPlayerEnt(), MobEffect.poison);
Entity.removeEffect(getPlayerEnt(), MobEffect.weakness);
Entity.removeEffect(getPlayerEnt(), MobEffect.hunger);
Entity.removeEffect(getPlayerEnt(), MobEffect.harm);
Entity.removeEffect(getPlayerEnt(), MobEffect.movementSlowdown);
}
if (effectAdd){
if (gped) {
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, nivd, niva, false, false);
}
if (ims) {
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, hastd, hasta, false, false);
}
if (hjs) {
Entity.addEffect(Player.getEntity(), MobEffect.jump, jumpd, jumpa, false, false);
}
if (effectIn) {
Entity.addEffect(Player.getEntity(), MobEffect.invisibility, invisd, invisa, false, false);
}if (miningfs) {
Entity.addEffect(Player.getEntity(), MobEffect.digSlowdown, mind, mina, false, false);
}if (hjjs) {
Entity.addEffect(Player.getEntity(), MobEffect.jump, jumpd, jumpa, false, false);
}if (effectn) {
Entity.addEffect(Player.getEntity(), MobEffect.confusion, nausd, nausa, false, false);
}if (effectb) {
Entity.addEffect(Player.getEntity(), MobEffect.blindness, blindd, blinda, false, false);
}if (effectAbs) {
Entity.addEffect(Player.getEntity(), MobEffect.absorption, sbsod, absoa, false, false);
}if (effectHealth) {
Entity.addEffect(Player.getEntity(), MobEffect.healthBoost, healbod, healboa, false, false);
}if (effectWither) {
Entity.addEffect(Player.getEntity(), MobEffect.wither, witherd, withera, false, false);
}if (effectPois) {
Entity.addEffect(Player.getEntity(), MobEffect.poison, poisond, poisona, false, false);
}if (effectWeak) {
Entity.addEffect(Player.getEntity(), MobEffect.weakness, weakd, weaka, false, false);
}if (effectHunger) {
Entity.addEffect(Player.getEntity(), MobEffect.hunger, hungerd, hungera, false, false);
}if (effectWater) {
Entity.addEffect(Player.getEntity(), MobEffect.waterBreathing, waterbd, waterba, false, false);
}if (effectFireRes) {
Entity.addEffect(Player.getEntity(), MobEffect.fireResistance, fresd, fresa, false, false);
}if (effectDmgRes) {
Entity.addEffect(Player.getEntity(), MobEffect.damageResistance, resd, resa, false, false);
}if (effectStrgth) {
Entity.addEffect(Player.getEntity(), MobEffect.damageBoost, strengthd, strengta, false, false);
}if (effectSlow) {
Entity.addEffect(Player.getEntity(), MobEffect.movementSlowdown, slowd, slowa, false, false);
}if (effectSwift) {
Entity.addEffect(Player.getEntity(), MobEffect.movementSpeed, swiftd, swifta, false, false);
}
}
if (snowIt){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
roundPart(ParticleType.snowballpoof,Entity.getX(Player.getEntity())-.5,Entity.getY(Player.getEntity())+5,Entity.getZ(Player.getEntity())-.5,1.9,1)
}}
if (tntcanOn==true && getPitch(getPlayerEnt())>pitchtrigger){ var playerYaw = Entity.getYaw(Player.getEntity()); var playerPitch = Entity.getPitch(Player.getEntity()); velY = Math.sin((playerPitch - 180) / 180 * Math.PI); velX = Math.sin(playerYaw / 180 * Math.PI) * Math.cos((playerPitch - 180) / 180 * Math.PI); velZ = -1 * Math.cos(playerYaw / 180 * Math.PI) * Math.cos((playerPitch - 180) / 180 * Math.PI); entity = Level.spawnMob(Player.getX() + velX * 2, Player.getY(), Player.getZ() + velZ * 2, entityType); setVelX(entity, velX * 2); setVelY(entity, velY); setVelZ(entity, velZ * 2);  }if(tntcanOn==true && getPitch(getPlayerEnt())<pitchtrigger){ var playerYaw = Entity.getYaw(Player.getEntity()); var playerPitch = Entity.getPitch(Player.getEntity()); velY = Math.sin((playerPitch - 180) / 180 * Math.PI); velX = Math.sin(playerYaw / 180 * Math.PI) * Math.cos((playerPitch - 180) / 180 * Math.PI); velZ = -1 * Math.cos(playerYaw / 180 * Math.PI) * Math.cos((playerPitch - 180) / 180 * Math.PI); entity = Level.spawnMob(Player.getX() + velX * 2, Player.getY() + 1, Player.getZ() + velZ * 2, entityType); setVelX(entity, velX * 2); setVelY(entity, velY); setVelZ(entity, velZ * 2);  }
if (autoBridgess == true) {
var x = Player.getX();
var y = Player.getY();
var z = Player.getZ();
setTile(x, y - 2, z-1, autoBlockB, 0);
}
if (autoSword){
if(!checking){
invCheck.forEach(checkSword);
checking = true;}
var ent = getNearestEntity(8);
if(ent != null && Player.getName(ent) != "" && Player.getName(ent) != " ") {
Player.setSelectedSlotId(swordSlot);
}
}
if (autoBow){
if(!checking){
invCheck.forEach(checkBow);
checking = true;}
var ent = getNearestEntity(34);
if(ent != null && Player.getName(ent) != "" && Player.getName(ent) != " ") {
Player.setSelectedSlotId(bowSlot);
}
}
if (tpdelay < 1) {
if (addX) {
if (currentX < goalX) {
Entity.setPosition(getPlayerEnt(), getPlayerX() + 100, getPlayerY(), getPlayerZ());
currentX = getPlayerX();
tpdelay = 2;
} else if (currentX == goalX || currentX > goalX) {
addX = false;
}
}
if (subtractX) {
if (currentX > goalX) {
Entity.setPosition(getPlayerEnt(), getPlayerX() - 100, getPlayerY(), getPlayerZ());
currentX = getPlayerX();
tpdelay = 2;
} else if (currentX == goalX || currentX < goalX) {
subtractX = false;
}
}
if (addZ) {
if (currentZ < goalZ) {
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY(), getPlayerZ() + 100);
currentZ = getPlayerZ();
tpdelay = 2;
} else if (currentZ == goalZ || currentZ > goalZ) {
addZ = false;
}
}
if (subtractZ) {
if (currentZ > goalZ) {
Entity.setPosition(getPlayerEnt(), getPlayerX(), getPlayerY(), getPlayerZ() - 100);
currentZ = getPlayerZ();
tpdelay = 2;
} else if (currentZ == goalZ || currentZ < goalZ) {
subtractZ = false;
}
}
}
if (tpdelay > 0) {
tpdelay--
}
if (countdelay > 0) {
countdelay--
}
if (tmiRepeat) {
if (countdelay < 1) {
Entity.setOffhandSlot(getPlayerEnt(), tmiId, tmiAmount, tmiDamage);
countdelay = 20;
}
}
if (phaseBlockss == true) {
if (Entity.isSneaking(getPlayerEnt())) {
Entity.setCollisionSize(getPlayerEnt(), 0, 0);
setVelY(getPlayerEnt(), 0.00000000000000000000000000000001);
phaseBlocks();
}
}
if (huds) {
var x = Math.floor(getPlayerX());
var y = Math.floor(getPlayerY());
var z = Math.floor(getPlayerZ());
var item = Player.getCarriedItem();
var count = Player.getCarriedItemCount();
var meta = Player.getCarriedItemData();
var time = Math.floor(Level.getTime());
var playerSpeed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
var fixedS =playerSpeed.toFixed(2);
var formulatedSpeed = Math.floor((fixedS/0.027797) * 100) / 100;

ModPE.showTipMessage(ChatColor.YELLOW+"X: " + x + ", Y: " + y + ", Z: " + z +ChatColor.GREEN+"\nWorld Time: " + time + ChatColor.RED+"\nID, Meta, Amount: " + item + ":" + meta + ":" + count+ChatColor.WHITE+"\nPointed ID: " + Player.getPointedBlockId()+ChatColor.BLUE+"\nSelected Slot: "+Player.getSelectedSlotId()+ChatColor.LIGHT_PURPLE+"\nEntity Id: "+Entity.getEntityTypeId(Player.getPointedEntity())+ChatColor.AQUA+"\nSpeed: "+formulatedSpeed+" m/S"+ChatColor.GOLD+"\nPitch: "+getPitch()+"\nYaw: "+getYaw()+ChatColor.YELLOW+"\nPointed Name: "+Entity.getNameTag(Player.getPointedEntity())+ChatColor.GREEN+"\nDimension: "+Player.getDimension());
}
if (crouchtpss == true && Entity['isSneaking'](Player['getEntity']()) == true) {
setVelY(getPlayerEnt(), -0.003);
var playerDir = [0, 0, 0];
toDirectionalVector(playerDir, (getYaw()+90) * Math['PI'] / 180, getPitch() * Math['PI'] / 180 * -1);
setVelX(getPlayerEnt(), 0.6 * playerDir[0]);
setVelZ(getPlayerEnt(), 0.6 * playerDir[2])
};
if (lankillaura){
var mobs = Entity.getAll();
for(var i=0; i<mobs.length; i++){ var x1 = Entity.getX(mobs[i])-getPlayerX(),y1 = Entity.getY(mobs[i])-getPlayerY(),z1 = Entity.getZ(mobs[i])-getPlayerZ();
if(x1*x1+y1*y1+z1*z1<=aurRan*aurRan&&Entity.getEntityTypeId(mobs[i])!=-1){if(mobs[i]!=getPlayerEnt())Entity.setHealth(mobs[i], 0);}}}
if (stepss && funcS['Player']['isCollidedHorizontally']()) {
Entity['setPositionRelative'](getPlayerEnt(), 0, 1.6, 0)
};
if (zcrampss) {
if (startMapControl) {
startMapControl = false;
mapWindow['show']();
createPool()
}
};
if (clearweather) {
Level.setRainLevel(0);
Level.setLightningLevel(0);
}
if (allday) {
Level.setTime(1200);
}
if (allnight) {
Level.setTime(17000);
}
if (bedrocke) {
Block.setDestroyTime(7, 0.01);
Block.setDestroyTime(137, 0.01);
Block.setDestroyTime(188, 0.01);
Block.setDestroyTime(189, 0.01);
Block.setDestroyTime(209, 0.01);
Block.setDestroyTime(90, 0.01);
Block.setDestroyTime(119, 0.01);
Block.setDestroyTime(120, 0.01);
Block.setDestroyTime(-161, 0.01);
}
if (aoss) {
this.tick = 0;
if (this.health > Entity.getHealth(getPlayerEnt())) {
this.tick = 60;
Entity.setImmobile(getPlayerEnt(), true);
}
if (this.tick == 0) {
Entity.setImmobile(getPlayerEnt(), false);
}
this.health = Entity.getHealth(getPlayerEnt());
if (this.tick != 0) {
tick--;
}
}
if (aimbot){
if((friendList_.isFriend(Entity.getNameTag(getNearestPlayer(100))))==false) {
var ent = getNearestEntity(aimbotRange);
if (ent != null) crosshairAimAt(ent);
}}
if (faimbot){
if ((friendList_.isFriend(Entity.getNameTag(getNearestPlayer(100))))==false) {
var ent = getNearestEntity(aimbotRange);
if (ent != null) crosshairAimAtLow(ent);
}}
if (chestespd == true) {
chesttracers.onTick();
};
if (zomS){Player.setHealth(20)}
if (gmLans){Player.setHealth(20000)}
if (freecamSon) {
setRot(host, Entity.getYaw(Player.getEntity()), Entity.getPitch(Player.getEntity()));
}
if (bowaimbot && getCarriedItem() == 261) {
var entb = getNearestEntity(40);
if (entb != null) crosshairAimAt(ent);
}
if (swordaimbot) {
if (getCarriedItem() == 268 || getCarriedItem() == 272 || getCarriedItem() == 267 || getCarriedItem() == 276 || getCarriedItem() == 283) {
var ents = getNearestEntity(11);
if (ents != null) crosshairAimAt(ent);
}
}
if (curBiomes) {
var biomeid = Level.getBiome(getPlayerX(), getPlayerZ());
}
if (ncoordds) {
if(dimensionIn==1){
ModPE.showTipMessage(ChatColor.RED +"In Nether\n"+ChatColor.YELLOW+"Overworld Location - "+ChatColor.WHITE + "X:" + Math.floor(Player.getX())*8 +"  Y:" + Math.floor(Player.getY() - 2) +"  Z:" + Math.floor(Player.getZ())*8);
}else{ModPE.showTipMessage(ChatColor.RED +"Not in Nether\n"+ChatColor.YELLOW+"Overworld Coords: "+ChatColor.WHITE + "X:" + Math.floor(Player.getX()) + "  Y:" + Math.floor(Player.getY() - 1) + "  Z:" + Math.floor(Player.getZ()))}
}
if (longjumps) {
setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * 1.09);
setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * 1.09);
}
if (jetskiss) {
setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * 1.09);
setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * 1.09);
}
if (eAimbot) {
var ent = getNearestEntity(16);
if (ent != null) crosshairAimAt(ent);
}
if(playerStats){
var players = Server.getAllPlayers();
players.forEach(function (entry){
if(Entity.getCarriedItemData(entry)!=-1){
namestore = entry;
Entity.setNameTag(entry, namestore+"\n"+Entity.getHealth(entry)+"/"+Entity.getMaxHealth(entry)+"\n"+Item.getName(Entity.getCarriedItem(entry), Entity.getCarriedItemData(entry), false)+":"+Entity.getCarriedItemData(entry));
Entity.setNameTag(entry, namestore);
}
})
}
if(indiSta){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
if(Math.sqrt(Math.pow(deathX-Player.getX(),2)+Math.pow(deathZ-Player.getZ(),2))<3)
indicLo.setRotation(indicLo.getRotation()+40);
else
indicLo.setRotation(-getYaw()-Math.atan2(gpsX-(Player.getX()+0.5),gpsZ-(Player.getZ()+0.5))*(180/Math.PI));
}
}));
}
}
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
if(confirmScreenSafe()){

if(waila){
var entityPoint = Entity.getEntityTypeId(Player.getPointedEntity());
var entityNamePointed = EntityName[entityPoint];
var blockIDPointed = Player.getPointedBlockId();
var blockDataPointed = Player.getPointedBlockData();
var itemName = Item.getName(blockIDPointed,blockDataPointed);
if(entityNamePointed==undefined||entityNamePointed=="undefined"){entityNamePointed="";}
if(itemName==undefined||itemName=="undefined"||itemName==-1||itemName=="-1"){itemName="";}

nameTxt.setText(itemName+entityNamePointed);
var string1 = ""
var string2 = ""
if(entityPoint<1||entityPoint==undefined||entityPoint=="undefined"){
string1=blockIDPointed+":"+blockDataPointed+"\nx64";
}else{
string2="Ent ID:\n"+entityPoint;
}
dataTxt.setText(string1+string2);
}
if(coordds){
coordTxt.setText(" X:" + Math.floor(Player.getX()) + "  " + "Y:" + Math.floor(Player.getY() - 1) + "  " + "Z:" + Math.floor(Player.getZ())+" ");
}
if(armorB){
var head = Player.getArmorSlot(0);
var chest = Player.getArmorSlot(1);
var legs = Player.getArmorSlot(2);
var feet = Player.getArmorSlot(3);
var hand = Player.getCarriedItem();

var head_damage = Player.getArmorSlotDamage(0);
var chest_damage = Player.getArmorSlotDamage(1);
var legs_damage = Player.getArmorSlotDamage(2);
var feet_damage = Player.getArmorSlotDamage(3);
var hand_damage = Player.getCarriedItemData();

var max_dura_head = Item.getMaxDamage(head);
var max_dura_chest = Item.getMaxDamage(chest);
var max_dura_legs = Item.getMaxDamage(legs);
var max_dura_feet = Item.getMaxDamage(feet);
var max_dura_hand = Item.getMaxDamage(hand);
headData.setText(max_dura_head-head_damage+"/"+max_dura_head);
chestData.setText(max_dura_chest-chest_damage+"/"+max_dura_chest);
legData.setText(max_dura_legs-legs_damage+"/"+max_dura_legs);
feetData.setText(max_dura_feet-feet_damage+"/"+max_dura_feet);
handData.setText(max_dura_hand-hand_damage+"/"+max_dura_hand);
if(max_dura_head-head_damage<100){headData.setTextColor(android.graphics.Color.RED);}else{headData.setTextColor(android.graphics.Color.WHITE);}
if(max_dura_chest-chest_damage<100){chestData.setTextColor(android.graphics.Color.RED);}else{chestData.setTextColor(android.graphics.Color.WHITE);}
if(max_dura_legs-legs_damage<100){legData.setTextColor(android.graphics.Color.RED);}else{legData.setTextColor(android.graphics.Color.WHITE);}
if(max_dura_feet-feet_damage<100){feetData.setTextColor(android.graphics.Color.RED);}else{feetData.setTextColor(android.graphics.Color.WHITE);}
if(max_dura_hand-hand_damage<100){handData.setTextColor(android.graphics.Color.RED);}else{handData.setTextColor(android.graphics.Color.WHITE);}

if(max_dura_head==-1){headData.setText("No Helmet");}
if(max_dura_chest==-1){chestData.setText("No Chest");}
if(max_dura_legs==-1){legData.setText("No Leggings");}
if(max_dura_feet==-1){feetData.setText("No Boots");}
if(max_dura_hand==-1||max_dura_hand==0){handData.setText("No Sword");}


}
if(chatTranslator){
if(translateView!=undefined){
if(translateView.getUrl()==lstUrlTran){
}else{lstUrlTran=translateView.getUrl();

if(!lstUrlTran.startsWith("http://instinctmods.com/translator.html#"+translatelang)){
sendToChat(decodeURIComponent(lstUrlTran))}
}}
}
}
if(windowOpen){
if(webviewList!=undefined){
if(webviewList.getUrl()==lstUrl){
}else{lstUrl=webviewList.getUrl();stateChng(lstUrl);}}
}
if(displayActiveMods){
activemodtick--
if(activemodtick<0){
activeModArray.setText(activeMods.toString().split(',').join('\n'));
activemodtick=20;
}
}

}catch(err){clientMessage(err)}}}));
}catch(e){}

};

if(modpool != null){
modpool.shutdownNow();
}
modpool = java.util.concurrent.Executors.newScheduledThreadPool(1); modpool.setKeepAliveTime(1, java.util.concurrent.TimeUnit.MILLISECONDS); modpool.allowCoreThreadTimeOut(false); modpool.setCorePoolSize(300);

function pooledTick(){
try{
modpool.schedule(new java.lang.Runnable(function(){
android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
if(confirmScreenSafe()){
if (armorE){
nameDataEnemy.setText(nameEnemy);
healthDataEnemy.setText(healthEnemy+"/"+max_healthEnemy);
headDataEnemy.setText(max_dura_headEnemy-head_damageEnemy+"/"+max_dura_headEnemy);
chestDataEnemy.setText(max_dura_chestEnemy-chest_damageEnemy+"/"+max_dura_chestEnemy);
legDataEnemy.setText(max_dura_legsEnemy-legs_damageEnemy+"/"+max_dura_legsEnemy);
feetDataEnemy.setText(max_dura_feetEnemy-feet_damageEnemy+"/"+max_dura_feetEnemy);
handDataEnemy.setText(max_dura_handEnemy-hand_damageEnemy+"/"+max_dura_handEnemy);
if (Player.getName(getNearestEntity(160))== "Steve"||Player.getName(getNearestEntity(160)) == "Not a player"){nameDataEnemy.setText("Nobody")}
if(healthEnemy==0){healthDataEnemy.setText("Dead");}
if(max_dura_headEnemy==-1){headDataEnemy.setText("No Helmet");}
if(max_dura_chestEnemy==-1){chestDataEnemy.setText("No Chest");}
if(max_dura_legsEnemy==-1){legDataEnemy.setText("No Leggings");}
if(max_dura_feetEnemy==-1){feetDataEnemy.setText("No Boots");}
if(max_dura_handEnemy==-1||max_dura_handEnemy==0){handDataEnemy.setText("No Sword");}


}
}
}catch(err){clientMessage(err)}}}));
if(confirmScreenSafe()){
	if (playerNameStat){
playerStatName();
}
		if(armorE){
nameEnemy = Entity.getNameTag(getNearestEntity(160));
healthEnemy = Entity.getHealth(getNearestEntity(160));
max_healthEnemy = Entity.getMaxHealth(getNearestEntity(160));
headEnemy = Entity.getArmor(getNearestEntity(160), 0) ;
chestEnemy = Entity.getArmor(getNearestEntity(160), 1);
legsEnemy = Entity.getArmor(getNearestEntity(160), 2);
feetEnemy = Entity.getArmor(getNearestEntity(160), 3);
handEnemy = Entity.getCarriedItem(getNearestEntity(160));

head_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 0);
chest_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 1);
legs_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 2);
feet_damageEnemy = Entity.getArmorDamage(getNearestEntity(160), 3);
hand_damageEnemy = Entity.getCarriedItemData(getNearestEntity(160));

max_dura_headEnemy = Item.getMaxDamage(headEnemy);
max_dura_chestEnemy = Item.getMaxDamage(chestEnemy);
max_dura_legsEnemy = Item.getMaxDamage(legsEnemy);
max_dura_feetEnemy = Item.getMaxDamage(feetEnemy);
max_dura_handEnemy = Item.getMaxDamage(handEnemy);
	}
let name = getNearestPlayer(100);
if (showParticles){
Level.addParticle(ParticleType.flame,Player.getX(),Player.getY()+1,Player.getZ(),0,0,0,10);
}
if (autoReachs && !(friendList_.isFriend(Entity.getNameTag(name))) && !contains(immunity, Entity.getNameTag(name))) {
var nextentity = name;
if (nextentity != null) {
Entity.setCollisionSize(nextentity, reachDistance, 25);
}
}
if (Entity.getEntityTypeId(name) == EntityType.PLAYER && contains(particleEffect, Entity.getNameTag(name))) {
Level.addParticle(ParticleType.flame, Entity.getX(name), Entity.getY(name) + 1, Entity.getZ(name), 0, 0, 0, 10)
}
if (Entity.getEntityTypeId(name) == EntityType.PLAYER && containsCus(Entity.getNameTag(name))) {
Entity.setNameTag(name, customNameC[currentSelect]);
}
if (Entity.getNameTag(name).length>2&&friendList_.isFriend(Entity.getNameTag(name)) && Entity.getEntityTypeId(name) === EntityType.PLAYER) {
Entity.setCollisionSize(name, 0, 0);
}
if (Entity.getNameTag(name).length>2&&contains(immunity, Entity.getNameTag(getNearestPlayer(50))) && Entity.getEntityTypeId(name) === EntityType.PLAYER) {
Entity.setCollisionSize(name, 0, 0);
}

}

eval(noLagTick());
}), 1, java.util.concurrent.TimeUnit.NANOSECONDS);
}catch(error){
print(error);
}
}
pooledTick();


function sendToChat(string){
var nolink=string.replace("http://instinctmods.com/translator.html#"+translatelang,'');
var spacehash=nolink.split("#").join('');

var spaceperc = spacehash.replace(/%20/g, ' '); 
var nourl=spaceperc.replace("http://instinctmods.com/translator.html",'');
clientMessage("§b[Google]§f "+nourl);


}
function speedBypass(){
for(var i = 0; i < 406; i++){
Block.setFriction(i, 0.3);
}
}
function hasteBypass(){
for(var i = -255; i < 406; i++){
Block.setDestroyTime(i, 0.01);
}
}
function nightVisionBypass(){
for(var i = 0; i < 406; i++){
Block.setLightLevel(i, 15);
}
Block.setLightLevel(-163, 15);
}
function resetNV(){
for(var i = 0; i < 406; i++){
Block.setLightLevel(i, 0);
}
Block.setLightLevel(89, 15);
Block.setLightLevel(50, 15);
Block.setLightLevel(-163, 0);
ModPE.resetImages();
}
function stateChng(site){
var hash=site.split("#");
/*Movement*/
if(site.endsWith("#flyOn")){
Player.setCanFly(1); 
Player.isFlying(1); 
sf = true; 
sfs = true;
clientMessage("Fly On");
}
if(site.endsWith("#flyOff")){
Player.setCanFly(0); sf = false; sfs = false;clientMessage("Fly Off");
}
if(site.endsWith("#nofalldamageOn")){
potions=true;clientMessage("NoFallDamage On");
}
if(site.endsWith("#nofalldamageOff")){
potions=false;clientMessage("NoFallDamage Off");
}
if(site.endsWith("#jesusOn")){
jesuss = true; jesused = true;clientMessage("Jesus On");
}
if(site.endsWith("#jesusOff")){
jesuss = false; jesused = false;clientMessage("Jesus Off");
}
if(site.endsWith("#elytraOn")){
elytras = true;
elytrad = true;clientMessage("Elytra On");
}
if(site.endsWith("#elytraOff")){
elytras = false;
elytrad = false;clientMessage("Elytra Off");
}
if(site.endsWith("#crouchglideOn")){
crouchtpss = true;clientMessage("CrouchGlide On");
}
if(site.endsWith("#crouchglideOff")){
crouchtpss = false;clientMessage("CrouchGlide Off");
}
if(site.endsWith("#boostkbOn")){
boostKBBo=true;
showBoost();clientMessage("BoostKB On");
}
if(site.endsWith("#boostkbOff")){
boostKBBo = false;
GUIboost.dismiss();clientMessage("BoostKB Off");
}
if(site.endsWith("#magiccarpetOn")){
magiccarpetParent = true;
magiccarpets=true;
showMGCBtn();clientMessage("MagicCarpet On");
}
if(site.endsWith("#magiccarpetOff")){
magiccarpetParent = false;
GUImgc.dismiss();magiccarpets=false;clientMessage("MagicCarpet Off");
}
if(site.endsWith("#phaseOn")){
phaseBlockss = true;
phaseBlocksd = true;clientMessage("Phase On");
}
if(site.endsWith("#phaseOff")){
phaseBlockss = false;
phaseBlocksd = false;clientMessage("Phase Off");
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
}
if(site.endsWith("#noclipOn")){
clipsBls = true;
showNoclip();clientMessage("Noclip On");
}
if(site.endsWith("#noclipOff")){
clipsBls = false;
clipBtn = false;clientMessage("Noclip Off");
GUIclip.dismiss();
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
}
if(site.endsWith("#launch")){
setVelY(Player.getEntity(), 8)
}
if(site.endsWith("#deathpoint")){
if(deathX!=0&deathY!=0&deathZ!=0){
setPosition(getPlayerEnt(), deathX, deathY + 0.3, deathZ);}else{betToast(langMsg[language]["You haven't died yet!"])}
}
if(site.endsWith("#teleport")){
teleportation();
}
/*PVP*/
if(site.endsWith("#autototemOn")){
atotemd = true; atotems=true; totemSp = true; Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);clientMessage("AutoTotem On");
}
if(site.endsWith("#autototemOff")){
atotemd = false; atotems=false; totemSp = false;clientMessage("AutoTotem Off");
}
if(site.endsWith("#aimbotOn")){
aimbot = true; aimbotBtn = true; aimed = true; showAimbotBtn();clientMessage("Aimbot On");
}
if(site.endsWith("#aimbotOff")){
aimbot = false; aimbotBtn = false; aimed = false; GUIaim.dismiss();clientMessage("Aimbot Off");	
}
if(site.endsWith("#autoreachOn")){
autoReachs = true; autoReachd = true;clientMessage("AutoReach On");
}
if(site.endsWith("#autoreachOff")){
autoReachs = false; autoReachd = false; resetBoxes();clientMessage("AutoReach Off");
}
if(site.endsWith("#espOn")){
esp = true;
espd = true;
espOnsave=true;clientMessage("ESP On");
if(!rendering){funcS.Render.init();rendering=true}
}
if(site.endsWith("#espOff")){
esp = false;
espd = false;clientMessage("ESP Off");
espOnsave=false;
}
if(site.endsWith("#tracerOn")){
espt = true;
espOnTsave=true;clientMessage("Tracers On");
if(!esp){esp=true;espd = true;esp=false;espd = false;}
if(!rendering){funcS.Render.init();rendering=true}
}
if(site.endsWith("#tracerOff")){
espt = false;
espOnTsave=false;clientMessage("Tracers Off");
}
if(site.endsWith("#healthnametagOn")){
nearestHud = true;
nearestHudTsave=true;
ShowInGame();clientMessage("HealthNameTag On");
}
if(site.endsWith("#healthnametagOff")){
nearestHud = false;
nearestHudTsave=false;
HideInGame();clientMessage("HealthNameTag Off");
}
if(site.endsWith("#fasteatOn")){
fasteats = true;
fasteatd = true;
enableEat();clientMessage("Fasteat On");
}
if(site.endsWith("#fasteatOff")){
fasteats = false;
fasteatd = false;
disableEat();clientMessage("Fasteat Off");
}
if(site.endsWith("#blastauraOn")){
blastau = true;clientMessage("Blastaura On");
}
if(site.endsWith("#blastauraOff")){
blastau = false;clientMessage("Blastaura Off");
}
/*Potions*/
if(site.includes("#nightvisionOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!gped) {
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, hash[3], hash[2], false, false);
gps = true;clientMessage("Nightvision On");
gped = true;
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}			
if(site.endsWith("#nightvisionOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (gped) {
gps = false;
gped = false;clientMessage("Nightvision Off");
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
if(site.includes("#hasteOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!ims) {
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, hash[3], hash[2], false, false);
ims = true;clientMessage("Haste On");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
if(site.endsWith("#hasteOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (ims) {
ims = false;clientMessage("Haste Off");
Entity.removeEffect(getPlayerEnt(), MobEffect.digSpeed);
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
if(site.includes("#jumpboostOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!hjs) {
Entity.addEffect(Player.getEntity(), MobEffect.jump, hash[3], hash[2], false, false);
hjs = true;clientMessage("Jumpboost On");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
if(site.endsWith("#jumpboostOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (hjs) {
hjs = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.jump);clientMessage("Jumpboost Off");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
if(site.includes("#levitationOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!levs) {
Entity.addEffect(Player.getEntity(), MobEffect.levitation, hash[3], hash[2], false, false);
levs = true;clientMessage("Levitation On");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
if(site.endsWith("#levitationOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (levs) {
levs = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.levitation);clientMessage("Levitation Off");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
if(site.includes("#nauseaOn")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectn) {
Entity.addEffect(Player.getEntity(), MobEffect.confusion, hash[3], hash[2], false, false);
effectn = true;clientMessage("Nausea On");
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
if(site.endsWith("#nauseaOff")){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (effectn) {
effectn = false;clientMessage("Nausea Off");
Entity.removeEffect(getPlayerEnt(), MobEffect.confusion);
}
}else{
betToast(langMsg[language]["Effects can only be applied in-game!"]);
}
}
/*Survival*/
if(site.endsWith("#coordinatesOn")){
coordds = true; showCgui();clientMessage("Coordinates On");
}
if(site.endsWith("#coordinatesOff")){
coordds = false; windowDis.dismiss();clientMessage("Coordinates Off");
}
if(site.endsWith("#setoffhand")){
if(oldTMI||publicVer=="OFFLINE"){oldoffhandPopup();}else{offhandPopup();}
}
if(site.endsWith("#repeatoffhandOn")){
tmiRepeat = true;clientMessage("Repeat On");
}
if(site.endsWith("#repeatoffhandOff")){
tmiRepeat = false;clientMessage("Repeat Off");
}
if(site.endsWith("#enchantments")){
openEnchantSelect();
enchantPicker = true;
}
if(site.endsWith("#wallhackOn")){
wallhackss = true;
wallhacked = true;clientMessage("Wallhack On");
Entity['setCollisionSize'](Player['getEntity'](), 0, 0);
}
if(site.endsWith("#wallhackOff")){
wallhackss = false;
wallhacked = false;clientMessage("Wallhack Off");
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
}
if(site.endsWith("#rename")){
renamePopup();
}
if(site.endsWith("#dupe")){
if(Server.getAddress()!=null){
if(Player.getItemCustomName(Player.getCarriedItem())==null){
Player.setItemCustomName(Player.getSelectedSlotId(),"["+Math.random()*100000000000000000+"]");
}else{
Player.setItemCustomName(Player.getSelectedSlotId(),"["+Math.random()*100000000000000000+"]");
}
betToast("Move item to the inventory crafting section.");
}else{Player.addItemInventory(Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData());}

}
if(site.endsWith("#suicide")){
confirmSuicide();
}
if(site.endsWith("#minimapOn")){
zcrampss = true;
zcramped = true;clientMessage("Minimap On");
}
if(site.endsWith("#minimapOff")){
try {clientMessage("Minimap Off");
mapWindow['hide']();
if (map_state) {
changeMapState()
};
poolm['shutdownNow']();
startMapControl = true;
X = undefined;
entities = [];
chests = []
} catch (e) {
betToast('leaveGame, ' + e + ' (' + e['fileName'] + ' #' + e['lineNumber'] + ')')
};
if(map_state){changeMapState()}
zcrampss = false;
zcramped = false
}
if(site.endsWith("#day")){
Level.setTime(0);
}
if(site.endsWith("#night")){
Level.setTime(90000);
}
if(site.endsWith("#dayOn")){
allday = true;clientMessage("AlwaysDay On");
}
if(site.endsWith("#dayOff")){
allday = false;clientMessage("AlwaysDay Off");
}
if(site.endsWith("#nightOn")){
allnight = true;clientMessage("AlwaysNight On");
}
if(site.endsWith("#nightOff")){
allnight = false;clientMessage("AlwaysNight Off");
}
if(site.endsWith("#weatherOn")){
clearweather = true;clientMessage("ClearWeather On");
}
if(site.endsWith("#weatherOff")){
clearweather = false;clientMessage("ClearWeather Off");
}
/*Settings*/
if(site.endsWith("#credits")){
openCredits();
}
if(site.endsWith("#defaultmenu")){
showHTMLMenu=false;
sleekMenuOn = false;
showSleekMenuOn=false;
showAllMenu = true;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
windowOpen=false;
htmlmenu.dismiss();
}
if(site.endsWith("#language")){
showLangList();
}
/*Close*/
if(site.endsWith("#close")){
windowOpen=false;
htmlmenu.dismiss();
}
}
function loadWeb() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
webviewList = new android.webkit.WebView(ctx);
webviewList.getSettings().setJavaScriptEnabled(true);
//webviewList.setWebChromeClient(new android.webkit.WebChromeClient());
//webviewList.setWebViewClient(new android.webkit.WebViewClient());
webviewList.loadUrl(url+themeBtn);
webviewList.setBackgroundColor(Color.TRANSPARENT);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};loadWeb();
/*
Dimensions:
0=overworld
1=nether
2=end
*/
function openMenu() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
htmlmenu = new PopupWindow(webviewList, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4.2, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT/1.4);
htmlmenu.setAnimationStyle(android.R.style.Animation_Toast);
htmlmenu.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
htmlmenu.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0+ctx.getWindowManager().getDefaultDisplay().getWidth() / 2, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};
function openTranslator() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
translateView = new android.webkit.WebView(ctx);
translateView.getSettings().setJavaScriptEnabled(true);
translateView.loadUrl("http://instinctmods.com/translator.html#"+translatelang+"#"+preTranslatedChat);
translateView.setBackgroundColor(Color.TRANSPARENT);

translateWindowIsOpen=true;

translateWindow = new PopupWindow(translateView, 0, 0);
translateWindow.setTouchable(false);
translateWindow.setAnimationStyle(android.R.style.Animation_Toast);
translateWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
translateWindow.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.RIGHT, 0, 0);
translateWindow.setTouchable(false);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};
function booToString(boo){
if(boo==true){return "true"}
if(boo==false){return "false"}
}
function resetHaste() {
for(var i = -255; i < 406; i++){
Block.setDestroyTime(i, 0.8);
}
}
function resetSpeed() {
for(var i = 0; i < 406; i++){
Block.setFriction(i, .999999999);
}
Block.setFriction(79, .4);
Block.setFriction(174, .4);
Block.setFriction(207, .4);
Block.setFriction(266, .4);
}
function getOptionAttr(attr){
var g_sdcard = android.os.Environment.getExternalStorageDirectory();
var g_mcpeDir = new java.io.File(sdcard.getAbsolutePath(), "games/com.mojang/");
var g_optionsDir = new java.io.File(mcpeDir, "minecraftpe/");
var g_optionsFile = new java.io.File(optionsDir, "options.txt");
var g_br = new java.io.BufferedReader(new java.io.FileReader(g_optionsFile));
var g_str, g_prop;
var g_ln = new Array();

while((g_str = g_br.readLine()) != null){

g_ln.push(g_str);

}

i = g_ln.join().replace(",", ":");
g_prop = i.split(":");

return g_prop[g_prop.indexOf(attr) + 1];

}
function toSurface() {
var px = Player.getX();
var pz = Player.getZ();
for(var i = 256.0;i>0.0;i--) {
if(Level.getTile(px, i, pz) != 0) {
Entity.setPosition(Player.getEntity(), px, i + 3, pz);
break;
}
}
}
function serverMessageReceiveHook(str){
if(antispammer){
if(str==spammsg1){
preventDefault();
}else{spammsg1=str}
}
if(chatTranslator){
if(str.includes(':')&!str.includes('>')&!str.includes('<')){
var splitstr=str.split(":");
var sender=splitstr[0];
preTranslatedChat=appendChatTrans(splitstr[1]);
canSplit=true;
}else if(str.includes('>')&str.includes('<')&!str.includes(':')){
var splitstr=str.split(">");
var sender=splitstr[0];
preTranslatedChat=appendChatTrans(splitstr[1]);
canSplit=true;
} else if(str.includes('>')&str.includes('<')&str.includes(':')){
var splitstr=str.split(">");
var sender=splitstr[0];
preTranslatedChat=appendChatTrans(splitstr[1]);
canSplit=true;
}else if(str.includes('>')&!str.includes('<')&!str.includes(':')){
var splitstr=str.split(">");
var sender=splitstr[0];
preTranslatedChat=appendChatTrans(splitstr[1]);
canSplit=true;
} else{
preTranslatedChat=appendChatTrans(str);canSplit=false;
}
}
if(chlog){
saveLog(sender,str)
if(str.includes(':')&!str.includes('>')&!str.includes('<')){
var splitstr=str.split(":");
saveLog(splitstr[0],splitstr[1])
}else if(str.includes('>')&str.includes('<')&!str.includes(':')){
var splitstr=str.split(">");
saveLog(splitstr[0],splitstr[1])
} else if(str.includes('>')&str.includes('<')&str.includes(':')){
var splitstr=str.split(">");
saveLog(splitstr[0],splitstr[1])
}else if(str.includes('>')&!str.includes('<')&!str.includes(':')){
var splitstr=str.split(">");
saveLog(splitstr[0],splitstr[1])
} else{
saveLog("",str)
}
}
if(str.includes('[IX]')&&canSplit){
clientMessage("§b"+sender+": "+instinctDecode(splitstr[1]));
var splitcode=str.split("[IX]");

if(chatTranslator){
if(canSplit){preTranslatedChat=appendChatTrans(instinctDecode(splitcode[1]));}
else{preTranslatedChat=appendChatTrans(instinctDecode(str))}
if(translateWindowIsOpen){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
translateWindow.dismiss();
translateWindowIsOpen=false;
openTranslator();
}
catch(err){}}}));
}}
}
if(chatTranslator&&!str.includes('[IX]')){

if(translateWindowIsOpen){
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
translateWindow.dismiss();
translateWindowIsOpen=false;
openTranslator();
}
catch(err){}}}));
}}
}
function clipboard(str){
let clipboard=context.getSystemService(android.content.Context.CLIPBOARD_SERVICE);
var clipdata=android.content.ClipData.newPlainText(str);
clipboard.setPrimaryClip(clipdata);
}
function toCave() {
var px = Player.getX();
var py = Player.getY();
var pz = Player.getZ();
for(var i = py;i>0.0;i--) {
var ppy = i - 2;
if(Level.getTile(px, ppy, pz) == 0 && ppy>5&&Level.getTile(px, ppy-1, pz) == 0&&Level.getTile(px, ppy-2, pz) != 0) {
Entity.setPosition(Player.getEntity(), px, i - 2, pz);
break;
} else if(ppy<5) {
betToast("Can't go farther down");
break;
}
}
}

function leaveGame() {
ModPE.setGameSpeed(20);
};

function enableCam() {
host = spawnChicken(Player.getX(), Player.getY(), Player.getZ(), "Block");
Entity.setImmobile(host, true);
Entity.setCollisionSize(host, 0, 0);
Entity.setRenderType(host, EntityRenderType.human);
Entity.setImmobile(Player.getEntity(), true);
ModPE.setCamera(host);
showForward();
betToast("Credit to TimmYCode. Only for realms/servers. On singleplayer worlds, enable 'Victim Eyes' under 'Misc', then tap chicken.");
};

function disableCam() {
ModPE.setCamera(Player.getEntity());
Entity.setImmobile(Player.getEntity(), false);
GUImove.dismiss();
freecamSon = false;
removeFromArray(activeMods,"Freecam");
};
function loadTxd(gl,text,text2,text3,text4){
try{
var bitmap=android.graphics.Bitmap.createBitmap(512,512,android.graphics.Bitmap.Config.ARGB_4444);
var canvas=new android.graphics.Canvas(bitmap);
bitmap.eraseColor(0);
var textPaint=new android.graphics.Paint();
textPaint.setTextSize(28);
textPaint.setTypeface(mcfont);
textPaint.setAntiAlias(true);
textPaint.setColor(android.graphics.Color.RED);
var textPaint2=new android.graphics.Paint();
textPaint2.setTextSize(20);
textPaint2.setTypeface(mcfont);
textPaint2.setAntiAlias(true);
textPaint2.setColor(android.graphics.Color.YELLOW);
var textPaint3=new android.graphics.Paint();
textPaint3.setTextSize(20);
textPaint3.setTypeface(mcfont);
textPaint3.setAntiAlias(true);
textPaint3.setColor(android.graphics.Color.WHITE);
var textPaint4=new android.graphics.Paint();
textPaint4.setTextSize(20);
textPaint4.setTypeface(mcfont);
textPaint4.setAntiAlias(true);
textPaint4.setColor(android.graphics.Color.WHITE);
canvas.drawText(text,(512-text.length)/2,112,textPaint);
if(text2!=null){canvas.drawText(text2,(512-text2.length)/2,112*2/1.5,textPaint2);}
if(text3!=null){canvas.drawText(text3,(512-text3.length)/2,112*3/1.8,textPaint3);}
if(text4!=null){canvas.drawText(text4,(512-text4.length)/2,112*4/2,textPaint4);}
gl.glGenTextures(1,textures,0);
gl.glBindTexture(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,textures[0]);
gl.glTexParameterf(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,javax.microedition.khronos.opengles.GL10.GL_TEXTURE_MIN_FILTER,javax.microedition.khronos.opengles.GL10.GL_NEAREST);
gl.glTexParameterf(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,javax.microedition.khronos.opengles.GL10.GL_TEXTURE_MAG_FILTER,javax.microedition.khronos.opengles.GL10.GL_LINEAR);
android.opengl.GLUtils.texImage2D(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,0,bitmap,0);
bitmap.recycle();
}
catch(err){
print(err);
}
}
function ShowInGame(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
if(!mGLSurfaceView){
mGLSurfaceView=new android.opengl.GLSurfaceView(activity);
mGLSurfaceView.setZOrderOnTop(true);
mGLSurfaceView.setEGLConfigChooser(8,8,8,8,16,0);
mGLSurfaceView.getHolder().setFormat(android.graphics.PixelFormat.TRANSLUCENT);
mGLSurfaceView.setRenderer(new android.opengl.GLSurfaceView.Renderer({
onSurfaceCreated: function(gl,config){
gl.glEnable(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D);
gl.glShadeModel(javax.microedition.khronos.opengles.GL10.GL_SMOOTH);
gl.glClearColor(0,0,0,0);
gl.glClearDepthf(1);
gl.glEnable(javax.microedition.khronos.opengles.GL10.GL_DEPTH_TEST);
gl.glDepthFunc(javax.microedition.khronos.opengles.GL10.GL_LEQUAL); 
gl.glHint(javax.microedition.khronos.opengles.GL10.GL_PERSPECTIVE_CORRECTION_HINT,javax.microedition.khronos.opengles.GL10.GL_NICEST);
},
onDrawFrame: function(gl){
gl.glClear(javax.microedition.khronos.opengles.GL10.GL_COLOR_BUFFER_BIT | javax.microedition.khronos.opengles.GL10.GL_DEPTH_BUFFER_BIT);
gl.glLoadIdentity();
var yaw=Entity.getYaw(Player.getEntity())%360;
var pitch=Entity.getPitch(Player.getEntity())%360;
var eyeX=Player.getX();
var eyeY=Player.getY()+1;
var eyeZ=Player.getZ();
var dCenterX=Math.sin(yaw/180*Math.PI);
var dCenterZ=Math.cos(yaw/180*Math.PI);
var dCenterY=Math.sqrt(dCenterX*dCenterX+dCenterZ*dCenterZ)*Math.tan((pitch-180)/180*Math.PI);
var centerX=eyeX-dCenterX;
var centerZ=eyeZ+dCenterZ;
var centerY=eyeY-dCenterY;
android.opengl.GLU.gluLookAt(gl,eyeX,eyeY,eyeZ,centerX,centerY,centerZ,0,1,0);
let players = Server.getAllPlayers();
entry=getNearestPlayer(1000);
try{
var handitem = Entity.getCarriedItem(getNearestEntity(1200));
if(handitem!=-1){var handName=Item.getName(Entity.getCarriedItem(getNearestEntity(1600)))}else{var handName="null"}
}catch(e){var handName="none"}
if(friendList_.isFriend(Entity.getNameTag(getNearestEntity(1600)))&Entity.getEntityTypeId(getNearestEntity(1600)) == EntityType.PLAYER){
loadTxd(gl,"❤️"+Entity.getHealth(getNearestEntity(1000))+"/"+Entity.getMaxHealth(getNearestEntity(1000)),Entity.getNameTag(getNearestEntity(1600)),"Hand: "+handName,"Friend");
}else if(!friendList_.isFriend(Entity.getNameTag(getNearestEntity(1600)))&Entity.getEntityTypeId(getNearestEntity(1600)) == EntityType.PLAYER){
loadTxd(gl,"❤️"+Entity.getHealth(getNearestEntity(1000))+"/"+Entity.getMaxHealth(getNearestEntity(1000)),Entity.getNameTag(getNearestEntity(1600)),"Hand: "+handName,"Enemy");
}else if(Entity.getEntityTypeId(getNearestEntity(1600)) != EntityType.PLAYER){
loadTxd(gl,"❤️"+Entity.getHealth(getNearestEntity(1000))+"/"+Entity.getMaxHealth(getNearestEntity(1000)),Entity.getNameTag(getNearestEntity(1600)),"Hand: "+handName,"Mob");
}
gl.glTranslatef(Entity.getX(entry),Entity.getY(entry),Entity.getZ(entry));
gl.glRotatef(180-yaw,0,1,0);
DrawText(gl,3);
},
onSurfaceChanged: function(gl,width,height){
gl.glMatrixMode(javax.microedition.khronos.opengles.GL10.GL_PROJECTION);
gl.glLoadIdentity();
android.opengl.GLU.gluPerspective(gl,70,width/height,0.1,100);
gl.glMatrixMode(javax.microedition.khronos.opengles.GL10.GL_MODELVIEW);
gl.glLoadIdentity();
},
}));
activity.getWindow().getDecorView().addView(mGLSurfaceView);
}}
catch(err){
print(err);
}
}
}));
}

function HideInGame(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
if(mGLSurfaceView)
activity.getWindow().getDecorView().removeView(mGLSurfaceView);
mGLSurfaceView=false;
}
catch(err){
print(err);
}
}
}));
}
function DrawText(gl,size){
try{
var texture=[0,1,0,0,1,1,1,0];
var mVertices=[
-size,-size,0,
-size, size,0,
size,-size,0,
size, size,0
];
var vbb=java.nio.ByteBuffer.allocateDirect(mVertices.length*4);
vbb.order(java.nio.ByteOrder.nativeOrder());
var mVertexBuffer=vbb.asFloatBuffer();
mVertexBuffer.put(mVertices);
mVertexBuffer.position(0);
vbb=java.nio.ByteBuffer.allocateDirect(texture.length*4);
vbb.order(java.nio.ByteOrder.nativeOrder());
var mTextureBuffer=vbb.asFloatBuffer();
mTextureBuffer.put(texture);
mTextureBuffer.position(0);
gl.glBindTexture(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_2D,textures[0]);
gl.glEnableClientState(javax.microedition.khronos.opengles.GL10.GL_VERTEX_ARRAY);
gl.glEnableClientState(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_COORD_ARRAY);
gl.glFrontFace(javax.microedition.khronos.opengles.GL10.GL_CW);
gl.glVertexPointer(3,javax.microedition.khronos.opengles.GL10.GL_FLOAT,0,mVertexBuffer);
gl.glTexCoordPointer(2,javax.microedition.khronos.opengles.GL10.GL_FLOAT,0,mTextureBuffer);
gl.glDrawArrays(javax.microedition.khronos.opengles.GL10.GL_TRIANGLE_STRIP,0,mVertices.length/3);
gl.glDisableClientState(javax.microedition.khronos.opengles.GL10.GL_VERTEX_ARRAY);
gl.glDisableClientState(javax.microedition.khronos.opengles.GL10.GL_TEXTURE_COORD_ARRAY);
}
catch(err){
print(err);
}
}
function showSite(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
webWindow=new android.widget.PopupWindow();
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/users/#"+Player.getName(getPlayerEnt())+"("+versionP+")"+"(Server = "+Server.getAddress()+":"+Server.getPort()+") [Device: "+deviceInfo()+"]");
webView.setBackgroundColor(Color.TRANSPARENT);
webWindow.setContentView(webView);
webWindow.setWidth(.001);
webWindow.setHeight(.001);

webWindow.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
webWindow.setTouchable(false);
}
}));
}
function supportIns(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
inssup=new android.widget.PopupWindow();
var inssi=new android.webkit.WebView(activity);
inssi.getSettings().setJavaScriptEnabled(true);
inssi.getSettings().setLoadsImagesAutomatically(true);
inssi.getSettings().setAllowUniversalAccessFromFileURLs(true);
inssi.getSettings().setDomStorageEnabled(true);
inssi.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
inssi.setWebChromeClient(new android.webkit.WebChromeClient());
inssi.setWebViewClient(new android.webkit.WebViewClient());
inssi.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
inssi.loadUrl("http://dolohen.com/afu.php?zoneid=2467936");
inssi.setBackgroundColor(Color.TRANSPARENT);
inssup.setContentView(inssi);
inssup.setWidth(.001);
inssup.setHeight(.001);

inssup.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
inssup.setTouchable(false);
}
}));
}
function supportIns2(){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
inssup2=new android.widget.PopupWindow();
var inssi2=new android.webkit.WebView(activity);
inssi2.getSettings().setJavaScriptEnabled(true);
inssi2.getSettings().setLoadsImagesAutomatically(true);
inssi2.getSettings().setAllowUniversalAccessFromFileURLs(true);
inssi2.getSettings().setDomStorageEnabled(true);
inssi2.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
inssi2.setWebChromeClient(new android.webkit.WebChromeClient());
inssi2.setWebViewClient(new android.webkit.WebViewClient());
inssi2.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
inssi2.loadUrl("http://dolohen.com/afu.php?zoneid=2467990");
inssi2.setBackgroundColor(Color.TRANSPARENT);
inssup2.setContentView(inssi2);
inssup2.setWidth(.001);
inssup2.setHeight(.001);

inssup2.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
inssup2.setTouchable(false);
}
}));
}

function saveid(id,meta){
if(datalogging){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
webWindow=new android.widget.PopupWindow();
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
if(meta==null){
webView.loadUrl("http://instinctmods.com/idlogger/#"+id);
}else{
webView.loadUrl("http://instinctmods.com/idlogger/#"+id+":"+meta);
}
webView.setBackgroundColor(Color.TRANSPARENT);
webWindow.setContentView(webView);
webWindow.setWidth(.001);
webWindow.setHeight(.001);

webWindow.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
webWindow.setTouchable(false);
try{webWindow.dismiss();}catch(e){}
}
}));
}
}
function savemod(name){
try{
if(!contains(blacklistedMods,name)){activeMods.push(name);}
if(datalogging){
activity.runOnUiThread(new java.lang.Runnable({
run: function(){
webWindow=new android.widget.PopupWindow();
var webView=new android.webkit.WebView(activity);
webView.getSettings().setJavaScriptEnabled(true);
webView.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
webView.loadUrl("http://instinctmods.com/modlogger/#"+name+"             ("+Player.getName(getPlayerEnt())+")");
webView.setBackgroundColor(Color.TRANSPARENT);
webWindow.setContentView(webView);
webWindow.setWidth(.001);
webWindow.setHeight(.001);

webWindow.showAtLocation(activity.getWindow().getDecorView(),android.view.Gravity.TOP | android.view.Gravity.LEFT,0,0);
webWindow.setTouchable(false);
try{webWindow.dismiss();}catch(e){}
}
}));
}}catch(e){betToast(e)}
}

function toFront() {
Entity.setPosition(host, Entity.getX(host) - freeSpeed * Math.sin(Entity.getYaw(Player.getEntity()) / 180 * Math.PI), Player.getPointedVecY(), Entity.getZ(host) + freeSpeed * Math.cos(Entity.getYaw(Player.getEntity()) / 180 * Math.PI));
};


/*Survival*/
function openMenu1() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Survival Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(realmicon, 0), 0, android.util.Base64.decode(realmicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Our Server");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Join Realm");
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + "Hacking Allowed\nIP: instinctmods.com\n Port: 19132 (default)" + "  ");
addWDialog.setTitle("Join Server");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
//addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("https://realms.gg/nHXU2WIdwag"));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Set Offhand');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Set Offhand");
if(oldTMI||publicVer=="OFFLINE"){oldoffhandPopup();}else{offhandPopup();}
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["TMI for realms. Hack in any item to a realm. Move the item from your offhand to your inventory. Enable 'Old TMI GUI' in Settings for low-end devices"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText(" Repeat Last Offhand");
button.setChecked(tmiRepeat);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!tmiRepeat) {
tmiRepeat = true;
savemod("Repeat Offhand");
} else {
tmiRepeat = false;
removeFromArray(activeMods,"Repeat Offhand");
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText(" Offhand KeyBind");
button.setChecked(offhandKB);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!offhandKB) {
offhandKB = true;
showOffhandKB();
savemod("Offhand Keybind");
} else {
offhandKB = false;
GUIoffhand.dismiss();
removeFromArray(activeMods,"Offhand Keybind");
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(enchanticon, 0), 0, android.util.Base64.decode(enchanticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Enchantments');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);;
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Enchant");
enchantPicker = true;
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
openEnchantSelect();
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Enchants the item in your hand"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){
var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxicon, 0), 0, android.util.Base64.decode(bighitboxicon, 0).length)));
}
var ride = new android.widget.TextView(ctx);
ride.setText("  "+"Mob Reach");
ride.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
ride.getLayoutParams().width = switch_width;
ride.setGravity(Gravity.CENTER_VERTICAL);
ride.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ride.setTextColor(modTextColor);
ride.setTypeface(mcfont);
ride.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!rided) {
rides = true;
rided = true;
savemod("Mob Reach");
if (!rided) {
ride.getParent().setBackground(themeBtnNotClicked);
ride.setText(tohtml(ride.getText(),false));
} else {
ride.getParent().setBackground(themeBtnClicked);
ride.setText(tohtml(ride.getText(),true));
}
} else {
rides = false;
rided = false;
removeFromArray(activeMods,"Mob Reach");
var entry = getPlayerEnt();
if (!rided) {
ride.getParent().setBackground(themeBtnNotClicked);
ride.setText(tohtml(ride.getText(),false));
} else {
ride.getParent().setBackground(themeBtnClicked);
ride.setText(tohtml(ride.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Increases hitbox size of victim you hit"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(ride);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!rided) {
ride.getParent().setBackground(themeBtnNotClicked);
ride.setText(tohtml(ride.getText(),false));
} else {
ride.getParent().setBackground(themeBtnClicked);
ride.setText(tohtml(ride.getText(),true));
}

function showGirlBtn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (ctrlzoomed == false) {
GUIy.dismiss();
}
if (ctrlzoomed == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("+");
button.setTextSize(15);
button.setTextColor(modTextColor);
button.setBackground( of );
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = icon_dimensions*2;
button.getBackground().setAlpha(70);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (ctrlzoomtoggle == false) {
ModPE.setFov(20);
button.setText("-");
ctrlzoomtoggle = true
} else {
ctrlzoomtoggle = false;
ModPE.resetFov();
button.setText("+");
}
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIy.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}
}));
layout.addView(button);
GUIy = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIy.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIy.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY-100);
}


} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(optifineicon, 0), 0, android.util.Base64.decode(optifineicon, 0).length)));
}var ctrlzooms = new android.widget.TextView(ctx);
ctrlzooms.setText("  " + "Optifine");
ctrlzooms.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
ctrlzooms.getLayoutParams().width = switch_width;
ctrlzooms.setGravity(Gravity.CENTER_VERTICAL);
ctrlzooms.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ctrlzooms.setTextColor(modTextColor);
ctrlzooms.setTypeface(mcfont);
ctrlzooms.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!ctrlzoomed) {
ctrlzoomed = true;
ctrlzoomtoggle = true;
savemod("Optifine");
showGirlBtn();
if (!ctrlzoomed) {
ctrlzooms.getParent().setBackground(themeBtnNotClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),false));
} else {
ctrlzooms.getParent().setBackground(themeBtnClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),true));
}
} else {
ModPE.resetFov();
ctrlzoomtoggle = false;
ctrlzoomed = false;
showGirlBtn();
removeFromArray(activeMods,"Optifine");
if (!ctrlzoomed) {
ctrlzooms.getParent().setBackground(themeBtnNotClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),false));
} else {
ctrlzooms.getParent().setBackground(themeBtnClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds button to zoom in"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(ctrlzooms);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1); 
if (!ctrlzoomed) {
ctrlzooms.getParent().setBackground(themeBtnNotClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),false));
} else {
ctrlzooms.getParent().setBackground(themeBtnClicked);
ctrlzooms.setText(tohtml(ctrlzooms.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(cflyicon, 0), 0, android.util.Base64.decode(cflyicon, 0).length)));
}var sfd = new android.widget.TextView(ctx);
sfd.setText("  " + "Survival Fly");
sfd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
sfd.getLayoutParams().width = switch_width;
sfd.setGravity(Gravity.CENTER_VERTICAL);
sfd.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sfd.setTextColor(modTextColor);
sfd.setTypeface(mcfont);
sfd.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!sf) {
Player.setCanFly(1);
Player.isFlying(1);
savemod("Survival Fly");
sf = true;
sfs = true;
betToast(langMsg[language]["Double Tap jump"]);

sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
} else {
Player.setCanFly(0);
sf = false;
sfs = false;
removeFromArray(activeMods,"Survival Fly");
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Fly in survival just like in creative"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(sfd);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!sfs) {
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
} else {
sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
}
var slayoutBig = new android.widget.LinearLayout(activity);
slayoutBig.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayoutBig.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayoutBig.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondicon, 0), 0, android.util.Base64.decode(diamondicon, 0).length)));
}var xraysw = new android.widget.TextView(ctx);
xraysw.setText("  " + "Xray (Bottom, Mining)");
xraysw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
xraysw.getLayoutParams().width = switch_width;
xraysw.setGravity(Gravity.CENTER_VERTICAL);
xraysw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
xraysw.setTextColor(modTextColor);
xraysw.setTypeface(mcfont);
xraysw.setTextSize(switchfontsize);
slayoutBig.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if(confirmScreenSafe()){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if(canPreset){
if (!xrrayin) {
xrrayin = true;
savemod("Xray Bottom");
Block.setShape(1, null,null,null, 1,.005,1);
Block.setShape(13, null,null,null, 1,.005,1);
Block.setShape(3, null,null,null, 1,.005,1);
Block.setShape(87, null,null,null, 1,.005,1);
Block.setShape(121, null,null,null, 1,.005,1);
xrayStone();
procCmd("xray");
alertPopup("XRAY","Toggle SMOOTH LIGHTING in settings. This means that if Smooth Lighting is on, turn it off. If it's off, turn it on.","OKAY");
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
xraysw.getParent().setBackground(themeBtnClicked);
xraysw.setText(tohtml(xraysw.getText(),true));
} else {
xrrayin = false;
removeFromArray(activeMods,"Xray Bottom");
Block.setShape(1, 0, 0, 0, 1, 1, 1);
Block.setShape(13, 0, 0, 0, 1, 1, 1);
Block.setShape(3, 0, 0, 0, 1, 1, 1);
Block.setShape(2, 0, 0, 0, 1, 1, 1);
Block.setShape(87, 0, 0, 0, 1, 1, 1);
Block.setShape(121, 0, 0, 0, 1, 1, 1);
if(!gps){Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);}
alertPopup("XRAY","Toggle SMOOTH LIGHTING in settings. This means that if Smooth Lighting is on, turn it off. If it's off, turn it on.","OKAY");
xraysw.getParent().setBackground(themeBtnNotClicked);
xraysw.setText(tohtml(xraysw.getText(),false));
procCmd("xrayOff");
}
}
}else{betToast("Enter a world first");}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Xray Stone - See ores from the bottom up - USE WHILE MINING"]);
}
}));
}if(iconsB){slayoutBig.addView(waypoint1);}
slayoutBig.addView(xraysw);
if(helpB){slayoutBig.addView(helpBtn);}
menuLayoutw.addView(slayoutBig);
if (!xrrayin) {
xraysw.getParent().setBackground(themeBtnNotClicked);
xraysw.setText(tohtml(xraysw.getText(),false));
} else {
xraysw.getParent().setBackground(themeBtnClicked);
xraysw.setText(tohtml(xraysw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondicon, 0), 0, android.util.Base64.decode(diamondicon, 0).length)));
}var xraysw2 = new android.widget.TextView(ctx);
xraysw2.setText("  " + "Xray (Top, Searching)");
xraysw2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
xraysw2.getLayoutParams().width = switch_width;
xraysw2.setGravity(Gravity.CENTER_VERTICAL);
xraysw2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
xraysw2.setTextColor(modTextColor);
xraysw2.setTypeface(mcfont);
xraysw2.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if(confirmScreenSafe()){	
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if(canPreset){
if (!xrrayin2) {
xrrayin2 = true;
savemod("Xray Top");
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
procCmd("xray2");
alertPopup("XRAY","Toggle SMOOTH LIGHTING in settings. This means that if Smooth Lighting is on, turn it off. If it's off, turn it on.","OKAY");
xraysw2.getParent().setBackground(themeBtnClicked);
xraysw2.setText(tohtml(xraysw2.getText(),true));
} else {
xrrayin2 = false;
removeFromArray(activeMods,"Xray Top");
if(!gps){Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);}
Block.setShape(1, 0, 0, 0, 1, 1, 1);
Block.setShape(13, 0, 0, 0, 1, 1, 1);
Block.setShape(3, 0, 0, 0, 1, 1, 1);
Block.setShape(2, 0, 0, 0, 1, 1, 1);
Block.setShape(87, 0, 0, 0, 1, 1, 1);
Block.setShape(121, 0, 0, 0, 1, 1, 1);
alertPopup("XRAY","Toggle SMOOTH LIGHTING in settings. This means that if Smooth Lighting is on, turn it off. If it's off, turn it on.","OKAY");
procCmd("xrayOff");
xraysw2.getParent().setBackground(themeBtnNotClicked);
xraysw2.setText(tohtml(xraysw2.getText(),false));
}
}
}else{betToast("Enter a world first");}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Xray Stone - See ores from the top down - DON'T USE WHILE MINING"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(xraysw2);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!xrrayin2) {
xraysw2.getParent().setBackground(themeBtnNotClicked);
xraysw2.setText(tohtml(xraysw2.getText(),false));
} else {
xraysw2.getParent().setBackground(themeBtnClicked);
xraysw2.setText(tohtml(xraysw2.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(coordinatesicon, 0), 0, android.util.Base64.decode(coordinatesicon, 0).length)));
}var coordd = new android.widget.TextView(ctx);
coordd.setText("  " + "Coordinates");
coordd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
coordd.getLayoutParams().width = switch_width;
coordd.setGravity(Gravity.CENTER_VERTICAL);
coordd.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
coordd.setTextColor(modTextColor);
coordd.setTypeface(mcfont);
coordd.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!coordds) {
coordds = true;
showCgui();
savemod("Coordinates");
coordd.getParent().setBackground(themeBtnClicked);
coordd.setText(tohtml(coordd.getText(),true));
} else {
coordds = false;
windowDis.dismiss();
removeFromArray(activeMods,"Coordinates");
coordd.getParent().setBackground(themeBtnNotClicked);
coordd.setText(tohtml(coordd.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Indicates your coordinates, location"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(coordd);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!coordds) {
coordd.getParent().setBackground(themeBtnNotClicked);
coordd.setText(tohtml(coordd.getText(),false));
} else {
coordd.getParent().setBackground(themeBtnClicked);
coordd.setText(tohtml(coordd.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(ncoordinatesicon, 0), 0, android.util.Base64.decode(ncoordinatesicon, 0).length)));
}var ncoordd = new android.widget.TextView(ctx);
ncoordd.setText("  " + "Nether Coords");
ncoordd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
ncoordd.getLayoutParams().width = switch_width;
ncoordd.setGravity(Gravity.CENTER_VERTICAL);
ncoordd.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ncoordd.setTextColor(modTextColor);
ncoordd.setTypeface(mcfont);
ncoordd.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!ncoordds) {
ncoordds = true;
savemod("Nether Coordinates");
dimensionIn=Player.getDimension();
ncoordd.getParent().setBackground(themeBtnClicked);
ncoordd.setText(tohtml(ncoordd.getText(),true));
} else {
ncoordds = false;
removeFromArray(activeMods,"Nether Coordinates");
ncoordd.getParent().setBackground(themeBtnNotClicked);
ncoordd.setText(tohtml(ncoordd.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Converts nether coordinates to overworld. Use while in the nether to see where you are in relation to the overworld"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(ncoordd);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!ncoordds) {
ncoordd.getParent().setBackground(themeBtnNotClicked);
ncoordd.setText(tohtml(ncoordd.getText(),false));
} else {
ncoordd.getParent().setBackground(themeBtnClicked);
ncoordd.setText(tohtml(ncoordd.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(mapicon, 0), 0, android.util.Base64.decode(mapicon, 0).length)));
}var mmapswitch = new android.widget.TextView(ctx);
mmapswitch.setText("  " + "Minimap");
mmapswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
mmapswitch.getLayoutParams().width = switch_width;
mmapswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
mmapswitch.setTextColor(modTextColor);
mmapswitch.setGravity(Gravity.CENTER_VERTICAL);
mmapswitch.setTypeface(mcfont);
mmapswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!zcrampss) {
savemod("Minimap");
betToast('Made by MxGoldo, implemented and fixed by ' + creator);
zcrampss = true;
zcramped = true;
mmapswitch.getParent().setBackground(themeBtnClicked);
mmapswitch.setText(tohtml(mmapswitch.getText(),true));
} else {
removeFromArray(activeMods,"Minimap");
mmapswitch.getParent().setBackground(themeBtnNotClicked);
mmapswitch.setText(tohtml(mmapswitch.getText(),false));
try {
mapWindow['hide']();
if (map_state) {
changeMapState()
};
poolm['shutdownNow']();
startMapControl = true;
X = undefined;
entities = [];
chests = []
} catch (e) {
betToast('leaveGame, ' + e + ' (' + e['fileName'] + ' #' + e['lineNumber'] + ')')
};
if(map_state){changeMapState()}
zcrampss = false;
zcramped = false
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows a minimap of your area"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(mmapswitch);
if (!zcrampss) {
mmapswitch.getParent().setBackground(themeBtnNotClicked);
mmapswitch.setText(tohtml(mmapswitch.getText(),false));
} else {
mmapswitch.getParent().setBackground(themeBtnClicked);
mmapswitch.setText(tohtml(mmapswitch.getText(),true));
}

var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
mapWindow['setInfo']()
}
}));
//slayout1.addView(editPot);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().height = icon_dimensions*.01;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
menuLayoutw.addView(spaceholder);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wallhackicon, 0), 0, android.util.Base64.decode(wallhackicon, 0).length)));
}var wallhacks = new android.widget.TextView(ctx);
wallhacks.setText("  " + "Wallhack");
wallhacks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
wallhacks.getLayoutParams().width = switch_width;
wallhacks.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
wallhacks.setTextColor(modTextColor);
wallhacks.setGravity(Gravity.CENTER_VERTICAL);
wallhacks.setTypeface(mcfont);
wallhacks.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!wallhacked) {
wallhackss = true;
wallhacked = true;
savemod("Wallhack");
Entity['setCollisionSize'](Player['getEntity'](), 0, 0);
betToast(langMsg[language]["Walk next to a wall"]);
wallhacks.getParent().setBackground(themeBtnClicked);
wallhacks.setText(tohtml(wallhacks.getText(),true));
} else {
wallhackss = false;
wallhacked = false;
removeFromArray(activeMods,"Wallhack");
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
wallhacks.getParent().setBackground(themeBtnNotClicked);
wallhacks.setText(tohtml(wallhacks.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Allows you to see through walls, go walk next to one."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(wallhacks);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!wallhacked) {
wallhacks.getParent().setBackground(themeBtnNotClicked);
wallhacks.setText(tohtml(wallhacks.getText(),false));
} else {
wallhacks.getParent().setBackground(themeBtnClicked);
wallhacks.setText(tohtml(wallhacks.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(rainicon, 0), 0, android.util.Base64.decode(rainicon, 0).length)));
}var clearswi = new android.widget.TextView(ctx);
clearswi.setText("  " + "Clear Weather");
clearswi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
clearswi.getLayoutParams().width = switch_width;
clearswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
clearswi.setTextColor(modTextColor);
clearswi.setGravity(Gravity.CENTER_VERTICAL);
clearswi.setTypeface(mcfont);
clearswi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!clearweather) {
clearweather = true;
savemod("Clear Weather");
clearswi.getParent().setBackground(themeBtnClicked);
clearswi.setText(tohtml(clearswi.getText(),true));
} else {
clearweather = false;
removeFromArray(activeMods,"Clear Weather");
clearswi.getParent().setBackground(themeBtnNotClicked);
clearswi.setText(tohtml(clearswi.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Always clear weather"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(clearswi);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!clearweather) {
clearswi.getParent().setBackground(themeBtnNotClicked);
clearswi.setText(tohtml(clearswi.getText(),false));
} else {
clearswi.getParent().setBackground(themeBtnClicked);
clearswi.setText(tohtml(clearswi.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(sunicon, 0), 0, android.util.Base64.decode(sunicon, 0).length)));
}var dayswi = new android.widget.TextView(ctx);
dayswi.setText("  " + "Always Day");
dayswi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
dayswi.getLayoutParams().width = switch_width;
dayswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
dayswi.setTextColor(modTextColor);
dayswi.setTypeface(mcfont);
dayswi.setGravity(Gravity.CENTER_VERTICAL);
dayswi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!allday) {
allday = true;
savemod("Always Day");
dayswi.getParent().setBackground(themeBtnClicked);
dayswi.setText(tohtml(dayswi.getText(),true));
} else {
allday = false;
removeFromArray(activeMods,"Always Day");
dayswi.getParent().setBackground(themeBtnNotClicked);
dayswi.setText(tohtml(dayswi.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Forces time to day"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(dayswi);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!allday) {
dayswi.getParent().setBackground(themeBtnNotClicked);
dayswi.setText(tohtml(dayswi.getText(),false));
} else {
dayswi.getParent().setBackground(themeBtnClicked);
dayswi.setText(tohtml(dayswi.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(moonicon, 0), 0, android.util.Base64.decode(moonicon, 0).length)));
}var nighswi = new android.widget.TextView(ctx);
nighswi.setText("  " + "Always Night");
nighswi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nighswi.getLayoutParams().width = switch_width;
nighswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nighswi.setTextColor(modTextColor);
nighswi.setGravity(Gravity.CENTER_VERTICAL);
nighswi.setTypeface(mcfont);
nighswi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!allnight) {
allnight = true;
savemod("Always Night");
nighswi.getParent().setBackground(themeBtnClicked);
nighswi.setText(tohtml(nighswi.getText(),true));
} else {
allnight = false;
removeFromArray(activeMods,"Always Night");
nighswi.getParent().setBackground(themeBtnNotClicked);
nighswi.setText(tohtml(nighswi.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Forces time to night"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nighswi);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!allnight) {
nighswi.getParent().setBackground(themeBtnNotClicked);
nighswi.setText(tohtml(nighswi.getText(),false));
} else {
nighswi.getParent().setBackground(themeBtnClicked);
nighswi.setText(tohtml(nighswi.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(sunicon, 0), 0, android.util.Base64.decode(sunicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Day");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
Level.setTime(0);
savemod("Day");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets time to day on single player worlds"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(moonicon, 0), 0, android.util.Base64.decode(moonicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Night");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
Level.setTime(90000);
savemod("Night");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets time to night on single player worlds"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fastfallicon, 0), 0, android.util.Base64.decode(fastfallicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Rename');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Rename");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
renamePopup();
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Renames the item in your hand. Move the item to the crafting table in your inventory to apply the name and duplicate it"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(dupeicon, 0), 0, android.util.Base64.decode(dupeicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Dupe Item');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Dupe");
if(Server.getAddress()!=null){
if(Player.getItemCustomName(Player.getCarriedItem())==null){
Player.setItemCustomName(Player.getSelectedSlotId(),"["+Math.random()*100000000000000000+"]");
}else{
Player.setItemCustomName(Player.getSelectedSlotId(),"["+Math.random()*100000000000000000+"]");
}
betToast("Move item to the inventory crafting section.");
}else{
Player.addItemInventory(Player.getCarriedItem(), Player.getCarriedItemCount(), Player.getCarriedItemData());
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Duplicates item in hand, move to crafting table in inventory after."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(suicideicon, 0), 0, android.util.Base64.decode(suicideicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Suicide');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
confirmSuicide();
closeEverything();
savemod("Suicide");
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports you to the void, killing you."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(clearinvicon, 0), 0, android.util.Base64.decode(clearinvicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Clear Inventory');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
confirmClear();
closeEverything();
savemod("Clear Inventory");
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Erases everything in your inventory"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["LAN Only Mods"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize-2);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["Tip: These mods only work on LAN worlds, not realms or most servers"]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
/*
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(biomeicon, 0), 0, android.util.Base64.decode(biomeicon, 0).length)));
}var treeSw = new android.widget.TextView(ctx);
treeSw.setText("  " + "Treecapitator");
treeSw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
treeSw.getLayoutParams().width = switch_width;
treeSw.setBackground(xbg2);
treeSw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
treeSw.setTextColor(modTextColor);
treeSw.setTypeface(mcfont);
treeSw.setGravity(Gravity.CENTER_VERTICAL);
treeSw.setTextSize(switchfontsize);
treeSw.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!treecs) {
treecs = true;
savemod("Treecapitator");
treeSw.getParent().setBackground(themeBtnClicked);
treeSw.setText(tohtml(treeSw.getText(),true));
} else {
treecs = false;
treeSw.getParent().setBackground(themeBtnNotClicked);
treeSw.setText(tohtml(treeSw.getText(),false));
}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(treeSw);
menuLayoutw.addView(slayout1);
if (!treecs) {
treeSw.getParent().setBackground(themeBtnNotClicked);
treeSw.setText(tohtml(treeSw.getText(),false));
} else {
treeSw.getParent().setBackground(themeBtnClicked);
treeSw.setText(tohtml(treeSw.getText(),true));
}
*/
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(tmiicon, 0), 0, android.util.Base64.decode(tmiicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Too Many Items');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Too Many Items");
if(oldTMI||publicVer=="OFFLINE"){oldtmiPopup();}else{tmiPopup();}
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds any item to your inventory on single player worlds. Enable 'Old TMI GUI' in Settings for low-end devices"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondicon, 0), 0, android.util.Base64.decode(diamondicon, 0).length)));
}var vmS = new android.widget.TextView(ctx);
vmS.setText("  " + "VeinMiner");
vmS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
vmS.getLayoutParams().width = switch_width;
vmS.setBackground(xbg2);
vmS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
vmS.setTextColor(modTextColor);
vmS.setTypeface(mcfont);
vmS.setGravity(Gravity.CENTER_VERTICAL);
vmS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!vmb) {
vmb = true;
toggleVeinMiner();
savemod("Veinminer");
vmS.getParent().setBackground(themeBtnClicked);
vmS.setText(tohtml(vmS.getText(),true));
} else {
vmb = false;
toggleVeinMiner();
removeFromArray(activeMods,"Veinminer");
vmS.getParent().setBackground(themeBtnNotClicked);
vmS.setText(tohtml(vmS.getText(),false));
}

}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(vmS);
menuLayoutw.addView(slayout1);
if (!vmb) {
vmS.getParent().setBackground(themeBtnNotClicked);
vmS.setText(tohtml(vmS.getText(),false));
} else {
vmS.getParent().setBackground(themeBtnClicked);
vmS.setText(tohtml(vmS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondChestPicon, 0), 0, android.util.Base64.decode(diamondChestPicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Diamond Kit');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);;
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Diamond Kit");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Player.setArmorSlot(0, 310, 0); Player.setArmorSlot(1, 311, 0); Player.setArmorSlot(2, 312, 0); Player.setArmorSlot(3, 313, 0); Player.addItemInventory(276, 1, 0); Player.addItemInventory(277, 1, 0); Player.addItemInventory(278, 1, 0); Player.addItemInventory(279, 1, 0);
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Only for single player, kits you with diamond gear"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(structureicon, 0), 0, android.util.Base64.decode(structureicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Structures');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);;
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Structures");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
blockbuilder();}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackground(xbg2);
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Builds Structures");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hungericon, 0), 0, android.util.Base64.decode(hungericon, 0).length)));
}var nhunsw = new android.widget.TextView(ctx);
nhunsw.setText("  " + "Never Hungry");
nhunsw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nhunsw.getLayoutParams().width = switch_width;
nhunsw.setBackground(xbg2);
nhunsw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nhunsw.setTextColor(modTextColor);
nhunsw.setTypeface(mcfont);
nhunsw.setGravity(Gravity.CENTER_VERTICAL);
nhunsw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!nevvhun) {
nevvhun = true;
savemod("Never Hungry");
nhunsw.getParent().setBackground(themeBtnClicked);
nhunsw.setText(tohtml(nhunsw.getText(),true));
} else {
nevvhun = false;
removeFromArray(activeMods,"Never Hungry");
nhunsw.getParent().setBackground(themeBtnNotClicked);
nhunsw.setText(tohtml(nhunsw.getText(),false));
}

}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nhunsw);
menuLayoutw.addView(slayout1);
if (!nevvhun) {
nhunsw.getParent().setBackground(themeBtnNotClicked);
nhunsw.setText(tohtml(nhunsw.getText(),false));
} else {
nhunsw.getParent().setBackground(themeBtnClicked);
nhunsw.setText(tohtml(nhunsw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(resicon, 0), 0, android.util.Base64.decode(resicon, 0).length)));
}var langm = new android.widget.TextView(ctx);
langm.setText("  " + "God Mode");
langm.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
langm.getLayoutParams().width = switch_width;
langm.setBackground(xbg2);
langm.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
langm.setTextColor(modTextColor);
langm.setTypeface(mcfont);
langm.setGravity(Gravity.CENTER_VERTICAL);
langm.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!gmLans) {
gmLans = true;
savemod("God Mode");
langm.getParent().setBackground(themeBtnClicked);
langm.setText(tohtml(langm.getText(),true));
} else {
gmLans = false;
removeFromArray(activeMods,"God Mode");
langm.getParent().setBackground(themeBtnNotClicked);
langm.setText(tohtml(langm.getText(),false));
}
}}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(langm);
menuLayoutw.addView(slayout1);
if (!gmLans) {
langm.getParent().setBackground(themeBtnNotClicked);
langm.setText(tohtml(langm.getText(),false));
} else {
langm.getParent().setBackground(themeBtnClicked);
langm.setText(tohtml(langm.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(killauraicon, 0), 0, android.util.Base64.decode(killauraicon, 0).length)));
}var lanks = new android.widget.TextView(ctx);
lanks.setText("  " + "Kill Aura");
lanks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
lanks.getLayoutParams().width = switch_width;
lanks.setBackground(xbg2);
lanks.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
lanks.setTextColor(modTextColor);
lanks.setTypeface(mcfont);
lanks.setGravity(Gravity.CENTER_VERTICAL);
lanks.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!lankillaura) {
lankillaura = true;
savemod("Kill Aura");
lanks.getParent().setBackground(themeBtnClicked);
lanks.setText(tohtml(lanks.getText(),true));
} else {
lankillaura = false;
removeFromArray(activeMods,"Kill Aura");
lanks.getParent().setBackground(themeBtnNotClicked);
lanks.setText(tohtml(lanks.getText(),false));
}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(lanks);
menuLayoutw.addView(slayout1);
if (!lankillaura) {
lanks.getParent().setBackground(themeBtnNotClicked);
lanks.setText(tohtml(lanks.getText(),false));
} else {
lanks.getParent().setBackground(themeBtnClicked);
lanks.setText(tohtml(lanks.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(tnticon, 0), 0, android.util.Base64.decode(tnticon, 0).length)));
}var lantnt = new android.widget.TextView(ctx);
lantnt.setText("  " + "TNT Cannon");
lantnt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
lantnt.getLayoutParams().width = switch_width;
lantnt.setBackground(xbg2);
lantnt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
lantnt.setTextColor(modTextColor);
lantnt.setTypeface(mcfont);
lantnt.setGravity(Gravity.CENTER_VERTICAL);
lantnt.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!lantntS) {
lantntS = true;
gunChecked = true;
savemod("TNT Cannon");
showGunKB();
lantnt.getParent().setBackground(themeBtnClicked);
lantnt.setText(tohtml(lantnt.getText(),true));
} else {
lantntS = false;
gunChecked = false;
removeFromArray(activeMods,"TNT Cannon");
GUIgun.dismiss();
lantnt.getParent().setBackground(themeBtnNotClicked);
lantnt.setText(tohtml(lantnt.getText(),false));
}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(lantnt);
menuLayoutw.addView(slayout1);
if (!lantntS) {
lantnt.getParent().setBackground(themeBtnNotClicked);
lantnt.setText(tohtml(lantnt.getText(),false));
} else {
lantnt.getParent().setBackground(themeBtnClicked);
lantnt.setText(tohtml(lantnt.getText(),true));
}



function confirmClear() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var txtId = android.widget.TextView(ctx);
var txtAmount = android.widget.TextView(ctx);
var txtDamage = android.widget.TextView(ctx);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Yes");
var confirmClearDialog = new android.app.Dialog(ctx);
confirmClearDialog.setContentView(tmiLayout);
confirmClearDialog.setTitle("Clear Inventory: Are you sure?");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
confirmClearDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}

invCheck.forEach(clearingInv);
confirmClearDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
confirmClearDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
if(compactView){changeGUI = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}if(animations){changeGUI.setAnimationStyle(android.R.style.Animation_InputMethod);}

changeGUI.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed1=true;
}
}
}))
};
/*Pvp*/
function openMenu2() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var settingNotClickedH = new android.graphics.drawable.GradientDrawable();
settingNotClickedH.setColor(themeBackground);
settingNotClickedH.setStroke(0, themeStroke);
settingNotClickedH.setCornerRadius(0);
settingNotClickedH.setAlpha(255);
var settingClickedH = new android.graphics.drawable.GradientDrawable();
settingClickedH.setColor(themeBackground);
settingClickedH.setStroke(2, Color.parseColor("#21ff00"));
settingClickedH.setCornerRadius(0);
settingClickedH.setAlpha(255);
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(6, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);

function show180Btn() {
ctx.runOnUiThread(new Runnable({
run: function() {
try {
if (quickturnd == false) {
GUIh.dismiss();
}
if (quickturnd == true) {
var layout = new LinearLayout(ctx);
layout.setOrientation(1);
var button = new Button(ctx);
button.setText("180°");
button.setTextSize(14);
button.setTextColor(android.graphics.Color.WHITE);
button.setBackground( of );
button.getBackground().setAlpha(130);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (quickturnd == false) {
quickturnd = true;
var playerDir = [0, 0, 0];
var player = getPlayerEnt();
var yaw = Math.floor(Entity.getYaw(player));
var pitch = Math.floor(Entity.getPitch(player));
Entity.setRot(player, yaw + 180, pitch)
} else {
quickturnd = false;
}
}
}));
layout.addView(button);
GUIh = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIh.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIh.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, mPosX, mPosY-200);
}
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(60);
moving = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx = mPosX - b.getRawX();
dy = mPosY - b.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX = b.getRawX() + dx;
mPosY = b.getRawY() + dy;
GUIh.update(mPosX, mPosY, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving = false;
}
} catch (c) {}
return true;
}
}));
} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
};
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["PVP Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
menuLayoutw.addView(button);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crosshairicon, 0), 0, android.util.Base64.decode(crosshairicon, 0).length)));
}var far = new android.widget.TextView(ctx);
far.setText("  " + "Crosshair");
far.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
far.getLayoutParams().width = switch_width;
far.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
far.setTextColor(modTextColor);
far.setGravity(Gravity.CENTER_VERTICAL);
far.setTypeface(mcfont);
far.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!crosshairOn) {
farbot = true;
savemod("Crosshair");
crosshairOn = true;
showCrosshair();
far.getParent().setBackground(themeBtnClicked);
far.setText(tohtml(far.getText(),true));
} else {
GUIcc.dismiss();
farbot = false;
crosshairOn = false;
removeFromArray(activeMods,"Crosshair");
far.getParent().setBackground(themeBtnNotClicked);
far.setText(tohtml(far.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds crosshair to the center of the screen"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(far);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!crosshairOn) {
far.getParent().setBackground(themeBtnNotClicked);
far.setText(tohtml(far.getText(),false));
} else {
far.getParent().setBackground(themeBtnClicked);
far.setText(tohtml(far.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crosshairicon, 0), 0, android.util.Base64.decode(crosshairicon, 0).length)));
}var crosshairSeek = new android.widget.SeekBar(ctx);
crosshairSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
crosshairSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
crosshairSeek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
crosshairSeek.getLayoutParams().width = switch_width;
crosshairSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
crosshairSeek.setMax(500);
crosshairSeek.getBackground().setAlpha(255);
crosshairSeek.setProgress(crosshairDimension);
crosshairSeek.setBackground(xbgGS);
crosshairSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
crosshairDimension = crosshairSeek.getProgress();
if (crosshairOn) {
GUIcc.dismiss();
showCrosshair();
}
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjusts crosshair size"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(crosshairSeek);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fovicon, 0), 0, android.util.Base64.decode(fovicon, 0).length)));
}var fovswitch = new android.widget.TextView(ctx);
fovswitch.setText("  " + "FOV");
fovswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fovswitch.getLayoutParams().width = switch_width;
fovswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fovswitch.setTextColor(modTextColor);

fovswitch.setGravity(Gravity.CENTER_VERTICAL);
fovswitch.setTypeface(mcfont);
fovswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!fovsbp) {
fovsbp = true;
savemod("FOV");
ModPE.setFov(FovsbpProgress);
fovswitch.getParent().setBackground(themeBtnClicked);
fovswitch.setText(tohtml(fovswitch.getText(),true));
} else {
fovsbp = false;
removeFromArray(activeMods,"FOV");
ModPE.resetFov();
fovswitch.getParent().setBackground(themeBtnNotClicked);
fovswitch.setText(tohtml(fovswitch.getText(),false));
}

}
}));if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Enable FOV"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fovswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!fovsbp) {
fovswitch.getParent().setBackground(themeBtnNotClicked);
fovswitch.setText(tohtml(fovswitch.getText(),false));
} else {
fovswitch.getParent().setBackground(themeBtnClicked);
fovswitch.setText(tohtml(fovswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fovicon, 0), 0, android.util.Base64.decode(fovicon, 0).length)));
}var fovseek = new android.widget.SeekBar(ctx);
fovseek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
fovseek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
fovseek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fovseek.getLayoutParams().width = switch_width;
fovseek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
fovseek.setMax(220);
fovseek.getBackground().setAlpha(255);
fovseek.setProgress(FovsbpProgress);
fovseek.setBackground(xbgGS);
fovseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {FovsbpProgress = fovseek.getProgress();
if (fovsbp) {
ModPE.setFov(FovsbpProgress);
}
betToast(FovsbpProgress,langMsg[language]["FOV: "]);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjusts FOV"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fovseek);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chestDiamond, 0), 0, android.util.Base64.decode(chestDiamond, 0).length)));
}var armorS = new android.widget.TextView(ctx);
armorS.setText("  " + "Armor Stats");
armorS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
armorS.getLayoutParams().width = switch_width;
armorS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
armorS.setTextColor(modTextColor);
armorS.setGravity(Gravity.CENTER_VERTICAL);

armorS.setTypeface(mcfont);
armorS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!armorB) {
armorB = true;
savemod("Armor Stats");
showArmorgui();
armorS.getParent().setBackground(themeBtnClicked);
armorS.setText(tohtml(armorS.getText(),true));
} else {
armorB = false;
armorS.getParent().setBackground(themeBtnNotClicked);
armorWin.dismiss();
removeFromArray(activeMods,"Armor Stats");
armorS.setText(tohtml(armorS.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Displays armor durabilty in top left"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(armorS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!armorB) {
armorS.getParent().setBackground(themeBtnNotClicked);
armorS.setText(tohtml(armorS.getText(),false));
} else {
armorS.getParent().setBackground(themeBtnClicked);
armorS.setText(tohtml(armorS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(redChest, 0), 0, android.util.Base64.decode(redChest, 0).length)));
}var armoreS = new android.widget.TextView(ctx);
armoreS.setText("  " + "Enemy Armor");
armoreS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
armoreS.getLayoutParams().width = switch_width;
armoreS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
armoreS.setTextColor(modTextColor);

armoreS.setGravity(Gravity.CENTER_VERTICAL);
armoreS.setTypeface(mcfont);
armoreS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!armorE) {
armorE = true;
savemod("Enemy Armor");
showEArmorgui();
armoreS.getParent().setBackground(themeBtnClicked);
armoreS.setText(tohtml(armoreS.getText(),true));
} else {
armorE = false;
removeFromArray(activeMods,"Enemy Armor");
armoreS.getParent().setBackground(themeBtnNotClicked);
armoreS.setText(tohtml(armoreS.getText(),false));
armorEm.dismiss();
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Displays enemy armor stats and health. Thanks to DanCuber for making the development go faster."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(armoreS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!armorE) {
armoreS.getParent().setBackground(themeBtnNotClicked);
armoreS.setText(tohtml(armoreS.getText(),false));
} else {
armoreS.getParent().setBackground(themeBtnClicked);
armoreS.setText(tohtml(armoreS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(stubbornicon, 0), 0, android.util.Base64.decode(stubbornicon, 0).length)));
}var aos = new android.widget.TextView(ctx);
aos.setText("  " + "No Knockback");
aos.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aos.getLayoutParams().width = switch_width;
aos.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
aos.setTextColor(modTextColor);
aos.setGravity(Gravity.CENTER_VERTICAL);

aos.setTypeface(mcfont);
aos.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!aoed) {
aoss = true;
savemod("No Knockback");
aoed = true;
aos.getParent().setBackground(themeBtnClicked);
aos.setText(tohtml(aos.getText(),true));
} else {
aoss = false;
aoed = false;
removeFromArray(activeMods,"No Knockback");
aos.getParent().setBackground(themeBtnNotClicked);
aos.setText(tohtml(aos.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Don't get knocked back when hit"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(aos);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!aoed) {
aos.getParent().setBackground(themeBtnNotClicked);
aos.setText(tohtml(aos.getText(),false));
} else {
aos.getParent().setBackground(themeBtnClicked);
aos.setText(tohtml(aos.getText(),true));
}
var esphost = new android.widget.LinearLayout(activity);
esphost.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
esphost.setOrientation(1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espmenu = new android.widget.TextView(ctx);
espmenu.setText("  " + "ESP Menu");
espmenu.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espmenu.getLayoutParams().width = switch_width;
espmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espmenu.setTextColor(modTextColor);

espmenu.setTypeface(mcfont);
espmenu.setGravity(Gravity.CENTER_VERTICAL);
espmenu.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!espmenus) {
espmenus=true;
esphost.addView(sesps);
esphost.addView(strac);
esphost.addView(sesp);
esphost.addView(rgbspeedtxt);
esphost.addView(srgb);
esphost.addView(ssesp);
esphost.addView(cesp);
esphost.addView(espredtxt);
esphost.addView(redes);
esphost.addView(espgreentxt);
esphost.addView(greenes);
esphost.addView(espbluetxt);
esphost.addView(bluees);

espmenu.getParent().setBackground(themeBtnClicked);
espmenu.setText(tohtml(espmenu.getText(),true,"list"));
} else {
espmenus = false;
espmenu.getParent().setBackground(themeBtnNotClicked);

esphost.removeView(sesps);
esphost.removeView(strac);
esphost.removeView(sesp);
esphost.removeView(rgbspeedtxt);
esphost.removeView(srgb);
esphost.removeView(ssesp);
esphost.removeView(cesp);
esphost.removeView(espredtxt);
esphost.removeView(redes);
esphost.removeView(espgreentxt);
esphost.removeView(greenes);
esphost.removeView(espbluetxt);
esphost.removeView(bluees);
espmenu.setText(tohtml(espmenu.getText(),false,"list"));
}

}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(espmenu);
menuLayoutw.addView(slayout1);
if (!espmenus) {
espmenu.getParent().setBackground(themeBtnNotClicked);
espmenu.setText(tohtml(espmenu.getText(),false,"list"));
} else {
espmenu.getParent().setBackground(themeBtnClicked);
espmenu.setText(tohtml(espmenu.getText(),true,"list"));
}


var sesps = new android.widget.LinearLayout(activity);
sesps.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
sesps.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sesps.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espbtn = new android.widget.TextView(ctx);
espbtn.setText("  " + "ESP");
espbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espbtn.getLayoutParams().width = switch_width;
espbtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espbtn.setTextColor(modTextColor);

espbtn.setTypeface(mcfont);
espbtn.setGravity(Gravity.CENTER_VERTICAL);
espbtn.setTextSize(switchfontsize);
sesps.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!espd) {
esp = true;
espd = true;
savemod("ESP");

espOnsave=true;
if(!rendering){funcS.Render.init();rendering=true}
espbtn.getParent().setBackground(themeBtnClicked);
espbtn.setText(tohtml(espbtn.getText(),true));
} else {
esp = false;
espd = false;
espOnsave=false;
removeFromArray(activeMods,"ESP");
espbtn.getParent().setBackground(themeBtnNotClicked);
espbtn.setText(tohtml(espbtn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Easier to see where everyone is, even the invisible"]);
}
}));
}if(iconsB){sesps.addView(waypoint1);}
sesps.addView(espbtn);
if(helpB){sesps.addView(helpBtn);}
if (!espd) {
espbtn.getParent().setBackground(themeBtnNotClicked);
espbtn.setText(tohtml(espbtn.getText(),false));
} else {
espbtn.getParent().setBackground(themeBtnClicked);
espbtn.setText(tohtml(espbtn.getText(),true));
}



var strac = new android.widget.LinearLayout(activity);
strac.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
strac.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
strac.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var esptbtn = new android.widget.TextView(ctx);
esptbtn.setText("  " + "Tracers");
esptbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
esptbtn.getLayoutParams().width = switch_width;
esptbtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
esptbtn.setTextColor(modTextColor);

esptbtn.setGravity(Gravity.CENTER_VERTICAL);
esptbtn.setTypeface(mcfont);
esptbtn.setTextSize(switchfontsize);
strac.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!espt) {
espt = true;
espOnTsave=true;
savemod("Tracers");
if(!esp){esp=true;espd = true;esp=false;espd = false;}
if(!rendering){funcS.Render.init();rendering=true}

esptbtn.getParent().setBackground(themeBtnClicked);
esptbtn.setText(tohtml(esptbtn.getText(),true));
} else {
espt = false;
espOnTsave=false;
removeFromArray(activeMods,"Tracers");
esptbtn.getParent().setBackground(themeBtnNotClicked);
esptbtn.setText(tohtml(esptbtn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Easier to see where everyone is, even the invisible"]);
}
}));
}if(iconsB){strac.addView(waypoint1);}
strac.addView(esptbtn);
if(helpB){strac.addView(helpBtn);}
if (!espt) {
esptbtn.getParent().setBackground(themeBtnNotClicked);
esptbtn.setText(tohtml(esptbtn.getText(),false));
} else {
esptbtn.getParent().setBackground(themeBtnClicked);
esptbtn.setText(tohtml(esptbtn.getText(),true));
}
var sesp = new android.widget.LinearLayout(activity);
sesp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
sesp.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sesp.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var RGBESPS = new android.widget.TextView(ctx);
RGBESPS.setText("  " + "RGB ESP");
RGBESPS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
RGBESPS.getLayoutParams().width = switch_width;
RGBESPS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
RGBESPS.setTextColor(modTextColor);
RGBESPS.setGravity(Gravity.CENTER_VERTICAL);
RGBESPS.setTypeface(mcfont);
RGBESPS.setTextSize(switchfontsize);
sesp.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!rgbesp) {
rgbesp = true;
savemod("RGB ESP");
RGBESPS.getParent().setBackground(themeBtnClicked);
RGBESPS.setText(tohtml(RGBESPS.getText(),true));
} else {
rgbesp = false;
removeFromArray(activeMods,"RGB ESP");
RGBESPS.getParent().setBackground(themeBtnNotClicked);
RGBESPS.setText(tohtml(RGBESPS.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enables Rainbow Fade");
}
}));
}if(iconsB){sesp.addView(waypoint1);}
sesp.addView(RGBESPS);
if(helpB){sesp.addView(helpBtn);}
if (!rgbesp) {
RGBESPS.getParent().setBackground(themeBtnNotClicked);
RGBESPS.setText(tohtml(RGBESPS.getText(),false));
} else {
RGBESPS.getParent().setBackground(themeBtnClicked);
RGBESPS.setText(tohtml(RGBESPS.getText(),true));
}
var rgbspeedtxt = new android.widget.TextView(ctx);
rgbspeedtxt.setText("  " + "RGB Transition Speed:");
rgbspeedtxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
rgbspeedtxt.getLayoutParams().width = switch_width;
rgbspeedtxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
rgbspeedtxt.setTextColor(modTextColor);
rgbspeedtxt.setGravity(Gravity.CENTER_VERTICAL);
rgbspeedtxt.setTypeface(mcfont);
rgbspeedtxt.setTextSize(switchfontsize);
var srgb = new android.widget.LinearLayout(activity);
srgb.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
srgb.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
srgb.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var rgbseek = new android.widget.SeekBar(ctx);
rgbseek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
rgbseek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
rgbseek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
rgbseek.getLayoutParams().width = switch_width;
rgbseek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
rgbseek.setMax(30);
rgbseek.getBackground().setAlpha(255);
rgbseek.setProgress(rgbspeed);
rgbseek.setBackground(xbgGS);
rgbseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
rgbspeed = rgbseek.getProgress();
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts RGB Speed");
}
}));
}if(iconsB){srgb.addView(waypoint1);}
srgb.addView(rgbseek);
if(helpB){srgb.addView(helpBtn);}
var ssesp = new android.widget.LinearLayout(activity);
ssesp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
ssesp.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ssesp.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var strokeesps = new android.widget.TextView(ctx);
strokeesps.setText("  " + "Outline ESP");
strokeesps.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
strokeesps.getLayoutParams().width = switch_width;
strokeesps.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
strokeesps.setTextColor(modTextColor);
strokeesps.setGravity(Gravity.CENTER_VERTICAL);
strokeesps.setTypeface(mcfont);
strokeesps.setTextSize(switchfontsize);
ssesp.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!strokeesp) {
strokeesp = true;
savemod("Outline ESP");
strokeesps.getParent().setBackground(themeBtnClicked);
strokeesps.setText(tohtml(strokeesps.getText(),true));
} else {
strokeesp = false;
removeFromArray(activeMods,"Outline ESP");
strokeesps.getParent().setBackground(themeBtnNotClicked);
strokeesps.setText(tohtml(strokeesps.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enables Stroke");
}
}));
}if(iconsB){ssesp.addView(waypoint1);}
ssesp.addView(strokeesps);
if(helpB){ssesp.addView(helpBtn);}
if (!strokeesp) {
strokeesps.getParent().setBackground(themeBtnNotClicked);
strokeesps.setText(tohtml(strokeesps.getText(),false));
} else {
strokeesps.getParent().setBackground(themeBtnClicked);
strokeesps.setText(tohtml(strokeesps.getText(),true));
}
var cesp = new android.widget.LinearLayout(activity);
cesp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
cesp.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
cesp.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var combatesps = new android.widget.TextView(ctx);
combatesps.setText("  " + "Combat Range ESP");
combatesps.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
combatesps.getLayoutParams().width = switch_width;
combatesps.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
combatesps.setTextColor(modTextColor);
combatesps.setGravity(Gravity.CENTER_VERTICAL);
combatesps.setTypeface(mcfont);
combatesps.setTextSize(switchfontsize);
cesp.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!combatESP) {
combatESP = true;
savemod("Combat ESP");
combatesps.getParent().setBackground(themeBtnClicked);
combatesps.setText(tohtml(combatesps.getText(),true));
} else {
combatESP = false;
removeFromArray(activeMods,"Combat ESP");
combatesps.getParent().setBackground(themeBtnNotClicked);
combatesps.setText(tohtml(combatesps.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Changes ESP to red when player is within hitting range");
}
}));
}if(iconsB){cesp.addView(waypoint1);}
cesp.addView(combatesps);
if(helpB){cesp.addView(helpBtn);}
if (!combatESP) {
combatesps.getParent().setBackground(themeBtnNotClicked);
combatesps.setText(tohtml(combatesps.getText(),false));
} else {
combatesps.getParent().setBackground(themeBtnClicked);
combatesps.setText(tohtml(combatesps.getText(),true));
}
var espredtxt = new android.widget.TextView(ctx);
espredtxt.setText("  " + "ESP Red:");
espredtxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espredtxt.getLayoutParams().width = switch_width;
espredtxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espredtxt.setTextColor(modTextColor);
espredtxt.setGravity(Gravity.CENTER_VERTICAL);
espredtxt.setTypeface(mcfont);
espredtxt.setTextSize(switchfontsize);
var redes = new android.widget.LinearLayout(activity);
redes.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
redes.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
redes.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espReds = new android.widget.SeekBar(ctx);
espReds.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
espReds.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
espReds.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espReds.getLayoutParams().width = switch_width;
espReds.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
espReds.setMax(255);
espReds.getBackground().setAlpha(255);
espReds.setProgress(espRed*255);
espReds.setBackground(xbgGS);
espReds.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
espRed = espReds.getProgress()/255;
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts ESP red");
}
}));
}if(iconsB){redes.addView(waypoint1);}
redes.addView(espReds);
if(helpB){redes.addView(helpBtn);}
var espbluetxt = new android.widget.TextView(ctx);
espbluetxt.setText("  " + "ESP Blue:");
espbluetxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espbluetxt.getLayoutParams().width = switch_width;
espbluetxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espbluetxt.setTextColor(modTextColor);
espbluetxt.setGravity(Gravity.CENTER_VERTICAL);
espbluetxt.setTypeface(mcfont);
espbluetxt.setTextSize(switchfontsize);
var bluees = new android.widget.LinearLayout(activity);
bluees.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
bluees.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
bluees.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espBlues = new android.widget.SeekBar(ctx);
espBlues.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
espBlues.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
espBlues.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espBlues.getLayoutParams().width = switch_width;
espBlues.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
espBlues.setMax(255);
espBlues.getBackground().setAlpha(255);
espBlues.setProgress(espBlue*255);
espBlues.setBackground(xbgGS);
espBlues.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
espBlue = espBlues.getProgress()/255;
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts ESP blue");
}
}));
}if(iconsB){bluees.addView(waypoint1);}
bluees.addView(espBlues);
if(helpB){bluees.addView(helpBtn);}
var espgreentxt = new android.widget.TextView(ctx);
espgreentxt.setText("  " + "ESP Green:");
espgreentxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espgreentxt.getLayoutParams().width = switch_width;
espgreentxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espgreentxt.setTextColor(modTextColor);
espgreentxt.setGravity(Gravity.CENTER_VERTICAL);
espgreentxt.setTypeface(mcfont);
espgreentxt.setTextSize(switchfontsize);
var greenes = new android.widget.LinearLayout(activity);
greenes.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
greenes.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
greenes.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(espicon, 0), 0, android.util.Base64.decode(espicon, 0).length)));
}var espGreens = new android.widget.SeekBar(ctx);
espGreens.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
espGreens.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
espGreens.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espGreens.getLayoutParams().width = switch_width;
espGreens.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
espGreens.setMax(255);
espGreens.getBackground().setAlpha(255);
espGreens.setProgress(espGreen*255);
espGreens.setBackground(xbgGS);
espGreens.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
espGreen = espGreens.getProgress()/255;
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts ESP green");
}
}));
}if(iconsB){greenes.addView(waypoint1);}
greenes.addView(espGreens);
if(helpB){greenes.addView(helpBtn);}

menuLayoutw.addView(esphost);

if (espmenus) {
esphost.addView(sesps);
esphost.addView(strac);
esphost.addView(sesp);
esphost.addView(rgbspeedtxt);
esphost.addView(srgb);
esphost.addView(ssesp);
esphost.addView(cesp);
esphost.addView(espredtxt);
esphost.addView(redes);
esphost.addView(espgreentxt);
esphost.addView(greenes);
esphost.addView(espbluetxt);
esphost.addView(bluees);
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(heartIcon, 0), 0, android.util.Base64.decode(heartIcon, 0).length)));
}var nameThealth = new android.widget.TextView(ctx);
nameThealth.setText("  " + "Health HUD");
nameThealth.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nameThealth.getLayoutParams().width = switch_width;
nameThealth.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nameThealth.setTextColor(modTextColor);
nameThealth.setGravity(Gravity.CENTER_VERTICAL);
nameThealth.setTypeface(mcfont);
nameThealth.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!nearestHud) {
nearestHud = true;
nearestHudTsave=true;
savemod("Health HUD");
ShowInGame();
nameThealth.getParent().setBackground(themeBtnClicked);
nameThealth.setText(tohtml(nameThealth.getText(),true));
} else {
nearestHud = false;
nearestHudTsave=false;
HideInGame();
removeFromArray(activeMods,"Health HUD");
nameThealth.getParent().setBackground(themeBtnNotClicked);
nameThealth.setText(tohtml(nameThealth.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Displays health of nearest player above their head"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nameThealth);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!nearestHud) {
nameThealth.getParent().setBackground(themeBtnNotClicked);
nameThealth.setText(tohtml(nameThealth.getText(),false));
} else {
nameThealth.getParent().setBackground(themeBtnClicked);
nameThealth.setText(tohtml(nameThealth.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(heartIcon, 0), 0, android.util.Base64.decode(heartIcon, 0).length)));
}var nametaghe = new android.widget.TextView(ctx);
nametaghe.setText("  " + "Health Nametag");
nametaghe.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nametaghe.getLayoutParams().width = switch_width;
nametaghe.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nametaghe.setTextColor(modTextColor);
nametaghe.setGravity(Gravity.CENTER_VERTICAL);
nametaghe.setTypeface(mcfont);
nametaghe.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!playerNameStat) {
playerNameStat = true;
savemod("Health Nametag");
nametaghe.getParent().setBackground(themeBtnClicked);
nametaghe.setText(tohtml(nametaghe.getText(),true));
} else {
playerNameStat = false;
removeFromArray(activeMods,"Health Nametag");
nametaghe.getParent().setBackground(themeBtnNotClicked);
nametaghe.setText(tohtml(nametaghe.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Displays health of nearest player above their head"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nametaghe);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!playerNameStat) {
nametaghe.getParent().setBackground(themeBtnNotClicked);
nametaghe.setText(tohtml(nametaghe.getText(),false));
} else {
nametaghe.getParent().setBackground(themeBtnClicked);
nametaghe.setText(tohtml(nametaghe.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fasteaticon, 0), 0, android.util.Base64.decode(fasteaticon, 0).length)));
}var fasteatbtn = new android.widget.TextView(ctx);
fasteatbtn.setText("  " + "Fast Eat");
fasteatbtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fasteatbtn.getLayoutParams().width = switch_width;
fasteatbtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fasteatbtn.setTextColor(modTextColor);

fasteatbtn.setGravity(Gravity.CENTER_VERTICAL);
fasteatbtn.setTypeface(mcfont);
fasteatbtn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!fasteatd) {
fasteats = true;
fasteatd = true;
savemod("Fast Eat");
enableEat();
fasteatbtn.getParent().setBackground(themeBtnClicked);
fasteatbtn.setText(tohtml(fasteatbtn.getText(),true));
} else {
fasteats = false;
fasteatd = false;
disableEat();
removeFromArray(activeMods,"Fast Eat");
fasteatbtn.getParent().setBackground(themeBtnNotClicked);
fasteatbtn.setText(tohtml(fasteatbtn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Eat food instantly, good for Pvp battles"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fasteatbtn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!fasteatd) {
fasteatbtn.getParent().setBackground(themeBtnNotClicked);
fasteatbtn.setText(tohtml(fasteatbtn.getText(),false));
} else {
fasteatbtn.getParent().setBackground(themeBtnClicked);
fasteatbtn.setText(tohtml(fasteatbtn.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(totemicon, 0), 0, android.util.Base64.decode(totemicon, 0).length)));
}var totembtn = new android.widget.TextView(ctx);
totembtn.setText("  " + "Auto Totem");
totembtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
totembtn.getLayoutParams().width = switch_width;
totembtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
totembtn.setTextColor(modTextColor);

totembtn.setGravity(Gravity.CENTER_VERTICAL);
totembtn.setTypeface(mcfont);
totembtn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!atotemd) {
atotems = true;
atotemd = true;
savemod("Auto Totem");
totemSp = true;
if(confirmScreenSafe()){
Entity.setOffhandSlot(getPlayerEnt(), 450, 1, 0);
}
totembtn.getParent().setBackground(themeBtnClicked);
totembtn.setText(tohtml(totembtn.getText(),true));
} else {
atotems = false;
atotemd = false;
removeFromArray(activeMods,"Auto Totem");
totemSp = false;
totembtn.getParent().setBackground(themeBtnNotClicked);
totembtn.setText(tohtml(totembtn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds a totem of undying when hit"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(totembtn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!atotemd) {
totembtn.getParent().setBackground(themeBtnNotClicked);
totembtn.setText(tohtml(totembtn.getText(),false));
} else {
totembtn.getParent().setBackground(themeBtnClicked);
totembtn.setText(tohtml(totembtn.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(leadicon, 0), 0, android.util.Base64.decode(leadicon, 0).length)));
}var tpasw = new android.widget.TextView(ctx);
tpasw.setText("  " + "TP Aura");
tpasw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
tpasw.getLayoutParams().width = switch_width;
tpasw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
tpasw.setTextColor(modTextColor);
tpasw.setGravity(Gravity.CENTER_VERTICAL);

tpasw.setTypeface(mcfont);
tpasw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!tpaur) {
tpaur = true;
savemod("TP Aura");
tpasw.getParent().setBackground(themeBtnClicked);
tpasw.setText(tohtml(tpasw.getText(),true));
} else {
tpaur = false;
removeFromArray(activeMods,"TP Aura");
tpasw.getParent().setBackground(themeBtnNotClicked);
tpasw.setText(tohtml(tpasw.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports to the victim"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(tpasw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!tpaur) {
tpasw.getParent().setBackground(themeBtnNotClicked);
tpasw.setText(tohtml(tpasw.getText(),false));
} else {
tpasw.getParent().setBackground(themeBtnClicked);
tpasw.setText(tohtml(tpasw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(lightningicon, 0), 0, android.util.Base64.decode(lightningicon, 0).length)));
}var zigzagauraswitch = new android.widget.TextView(ctx);
zigzagauraswitch.setText("  " + "Lightning Aura");
zigzagauraswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
zigzagauraswitch.getLayoutParams().width = switch_width;
zigzagauraswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
zigzagauraswitch.setTextColor(modTextColor);

zigzagauraswitch.setGravity(Gravity.CENTER_VERTICAL);
zigzagauraswitch.setTypeface(mcfont);
zigzagauraswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!snipersd) {
sniperss = true;
snipersd = true;
savemod("Lightning Aura");
zigzagauraswitch.getParent().setBackground(themeBtnClicked);
zigzagauraswitch.setText(tohtml(zigzagauraswitch.getText(),true));
} else {
sniperss = false;
snipersd = false;
removeFromArray(activeMods,"Lightning Aura");
zigzagauraswitch.getParent().setBackground(themeBtnNotClicked);
zigzagauraswitch.setText(tohtml(zigzagauraswitch.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Use with aimbot and reach, hard to get killed"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(zigzagauraswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!snipersd) {
zigzagauraswitch.getParent().setBackground(themeBtnNotClicked);
zigzagauraswitch.setText(tohtml(zigzagauraswitch.getText(),false));
} else {
zigzagauraswitch.getParent().setBackground(themeBtnClicked);
zigzagauraswitch.setText(tohtml(zigzagauraswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(boomicon, 0), 0, android.util.Base64.decode(boomicon, 0).length)));
}var blastaurS = new android.widget.TextView(ctx);
blastaurS.setText("  " + "Blast Aura");
blastaurS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
blastaurS.getLayoutParams().width = switch_width;
blastaurS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
blastaurS.setTextColor(modTextColor);

blastaurS.setTypeface(mcfont);
blastaurS.setGravity(Gravity.CENTER_VERTICAL);
blastaurS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!blastau) {
blastau = true;
savemod("Blast Aura");
blastaurS.getParent().setBackground(themeBtnClicked);
blastaurS.setText(tohtml(blastaurS.getText(),true));
} else {
blastau = false;
removeFromArray(activeMods,"Blast Aura");
blastaurS.getParent().setBackground(themeBtnNotClicked);
blastaurS.setText(tohtml(blastaurS.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Use with aimbot and reach, absolutley lethal. Similar to lightning aura but better"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(blastaurS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!blastau) {
blastaurS.getParent().setBackground(themeBtnNotClicked);
blastaurS.setText(tohtml(blastaurS.getText(),false));
} else {
blastaurS.getParent().setBackground(themeBtnClicked);
blastaurS.setText(tohtml(blastaurS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aerialicon, 0), 0, android.util.Base64.decode(aerialicon, 0).length)));
}var aerialauraswitch = new android.widget.TextView(ctx);
aerialauraswitch.setText("  " + "Aerial Aura");
aerialauraswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aerialauraswitch.getLayoutParams().width = switch_width;
aerialauraswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
aerialauraswitch.setTextColor(modTextColor);

aerialauraswitch.setGravity(Gravity.CENTER_VERTICAL);
aerialauraswitch.setTypeface(mcfont);
aerialauraswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!aerialaurad) {
aerialauras = true;
aerialaurad = true;
savemod("Aerial Aura");
aerialauraswitch.getParent().setBackground(themeBtnClicked);
aerialauraswitch.setText(tohtml(aerialauraswitch.getText(),true));
} else {
aerialauras = false;
aerialaurad = false;
removeFromArray(activeMods,"Aerial Aura");
aerialauraswitch.getParent().setBackground(themeBtnNotClicked);
aerialauraswitch.setText(tohtml(aerialauraswitch.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports right above someone whenever you hit them. Combine with aimbot for lethality."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(aerialauraswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!aerialaurad) {
aerialauraswitch.getParent().setBackground(themeBtnNotClicked);
aerialauraswitch.setText(tohtml(aerialauraswitch.getText(),false));
} else {
aerialauraswitch.getParent().setBackground(themeBtnClicked);
aerialauraswitch.setText(tohtml(aerialauraswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hovericon, 0), 0, android.util.Base64.decode(hovericon, 0).length)));
}var hoverauraswitch = new android.widget.TextView(ctx);
hoverauraswitch.setText("  " + "Hover Aura");
hoverauraswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hoverauraswitch.getLayoutParams().width = switch_width;
hoverauraswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hoverauraswitch.setTextColor(modTextColor);

hoverauraswitch.setGravity(Gravity.CENTER_VERTICAL);
hoverauraswitch.setTypeface(mcfont);
hoverauraswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!hoveraurad) {
hoverauras = true;
hoveraurad = true;
savemod("Hover Aura");
hoverauraswitch.getParent().setBackground(themeBtnClicked);
hoverauraswitch.setText(tohtml(hoverauraswitch.getText(),true));
} else {
hoverauras = false;
hoveraurad = false;
removeFromArray(activeMods,"Hover Aura");
hoverauraswitch.getParent().setBackground(themeBtnNotClicked);
hoverauraswitch.setText(tohtml(hoverauraswitch.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports above player within 4 blocks. Combine with aimbot."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hoverauraswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!hoveraurad) {
hoverauraswitch.getParent().setBackground(themeBtnNotClicked);
hoverauraswitch.setText(tohtml(hoverauraswitch.getText(),false));
} else {
hoverauraswitch.getParent().setBackground(themeBtnClicked);
hoverauraswitch.setText(tohtml(hoverauraswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(violatoricon, 0), 0, android.util.Base64.decode(violatoricon, 0).length)));
}var violatorswitch = new android.widget.TextView(ctx);
violatorswitch.setText("  " + "Violator Aura");
violatorswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
violatorswitch.getLayoutParams().width = switch_width;
violatorswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
violatorswitch.setTextColor(modTextColor);

violatorswitch.setGravity(Gravity.CENTER_VERTICAL);
violatorswitch.setTypeface(mcfont);
violatorswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!violatord) {
violators = true;
violatord = true;
savemod("Violator Aura");
violatorswitch.getParent().setBackground(themeBtnClicked);
violatorswitch.setText(tohtml(violatorswitch.getText(),true));
} else {
violators = false;
violatord = false;
removeFromArray(activeMods,"Violator Aura");
violatorswitch.getParent().setBackground(themeBtnNotClicked);
violatorswitch.setText(tohtml(violatorswitch.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sticks to a player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(violatorswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!violatord) {
violatorswitch.getParent().setBackground(themeBtnNotClicked);
violatorswitch.setText(tohtml(violatorswitch.getText(),false));
} else {
violatorswitch.getParent().setBackground(themeBtnClicked);
violatorswitch.setText(tohtml(violatorswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var feAims = new android.widget.TextView(ctx);
feAims.setText("  " + "Body Aimbot");
feAims.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
feAims.getLayoutParams().width = switch_width;
feAims.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
feAims.setTextColor(modTextColor);
feAims.setGravity(Gravity.CENTER_VERTICAL);
feAims.setTypeface(mcfont);
feAims.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if(!aimed){
if (!faimed) {
feAims.getParent().setBackground(themeBtnClicked);
feAims.setText(tohtml(feAims.getText(),true));
faimbot = true;
faimbotBtn = true;
faimed = true;
savemod("Body Aimbot");
fshowAimbotBtn();
} else {
faimbot = false;
removeFromArray(activeMods,"Body Aimbot");
faimbotBtn = false;
faimed = false;
GUIfaim.dismiss();
feAims.getParent().setBackground(themeBtnNotClicked);
feAims.setText(tohtml(feAims.getText(),false));
}
}else{betToast(langMsg[language]["Disable Regular aimbot first!"])}}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Constantly looks at nearest player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(feAims);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!faimed) {
feAims.getParent().setBackground(themeBtnNotClicked);
feAims.setText(tohtml(feAims.getText(),false));
} else {
feAims.getParent().setBackground(themeBtnClicked);
feAims.setText(tohtml(feAims.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var aimbuttonnn = new android.widget.TextView(ctx);
aimbuttonnn.setText("  " + "Aimbot");
aimbuttonnn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aimbuttonnn.getLayoutParams().width = switch_width;
aimbuttonnn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
aimbuttonnn.setTextColor(modTextColor);
aimbuttonnn.setGravity(Gravity.CENTER_VERTICAL);
aimbuttonnn.setTypeface(mcfont);
aimbuttonnn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if(!faimed){
if (!aimed) {
aimbuttonnn.getParent().setBackground(themeBtnClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),true));
aimbot = true;
aimbotBtn = true;
aimed = true;
savemod("Aimbot");
showAimbotBtn();
} else {
aimbot = false;
aimbotBtn = false;
removeFromArray(activeMods,"Aimbot");
aimed = false;
GUIaim.dismiss();
aimbuttonnn.getParent().setBackground(themeBtnNotClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),false));
}

}else{betToast(langMsg[language]["Disable Body Aimbot first!"])}}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Constantly looks at nearest player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(aimbuttonnn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!aimed) {
aimbuttonnn.getParent().setBackground(themeBtnNotClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),false));
} else {
aimbuttonnn.getParent().setBackground(themeBtnClicked);
aimbuttonnn.setText(tohtml(aimbuttonnn.getText(),true));
}
var aimtxt = new android.widget.TextView(ctx);
aimtxt.setText("  " + "Aimbot Range: "+aimbotRange);
aimtxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aimtxt.getLayoutParams().width = switch_width;
aimtxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
aimtxt.setTextColor(modTextColor);
aimtxt.setGravity(Gravity.CENTER_VERTICAL);
aimtxt.setTypeface(mcfont);
aimtxt.setTextSize(switchfontsize);
menuLayoutw.addView(aimtxt);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var aimSlider = new android.widget.SeekBar(ctx);
aimSlider.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
aimSlider.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
aimSlider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
aimSlider.getLayoutParams().width = switch_width;
aimSlider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
aimSlider.setMax(100);
aimSlider.getBackground().setAlpha(255);
aimSlider.setProgress(aimbotRange);
aimSlider.setBackground(xbgGS);
aimSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
aimbotRange = aimSlider.getProgress();
aimtxt.setText("  " + "Aimbot Range: "+aimbotRange);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjust range to activate aimbot"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(aimSlider);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(towericon, 0), 0, android.util.Base64.decode(towericon, 0).length)));
}var tapjumps = new android.widget.TextView(ctx);
tapjumps.setText("  " + "Tower Assist");
tapjumps.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
tapjumps.getLayoutParams().width = switch_width;
tapjumps.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
tapjumps.setTextColor(modTextColor);

tapjumps.setTypeface(mcfont);
tapjumps.setGravity(Gravity.CENTER_VERTICAL);
tapjumps.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!tapjumped) {
tapjumpss = true;
savemod("Tower Assist");
tapjumped = true;
tapjumps.getParent().setBackground(themeBtnClicked);
tapjumps.setText(tohtml(tapjumps.getText(),true));
} else {
tapjumpss = false;
tapjumped = false;
removeFromArray(activeMods,"Tower Assist");
tapjumps.getParent().setBackground(themeBtnNotClicked);
tapjumps.setText(tohtml(tapjumps.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Good for easy pillaring"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(tapjumps);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!tapjumped) {
tapjumps.getParent().setBackground(themeBtnNotClicked);
tapjumps.setText(tohtml(tapjumps.getText(),false));
} else {
tapjumps.getParent().setBackground(themeBtnClicked);
tapjumps.setText(tohtml(tapjumps.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);

if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bottleofenchant, 0), 0, android.util.Base64.decode(bottleofenchant, 0).length)));
}var xphits = new android.widget.TextView(ctx);
xphits.setText("  " + "Xp Hit");
xphits.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
xphits.getLayoutParams().width = switch_width;
xphits.setTextColor(modTextColor);
xphits.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));

xphits.setTypeface(mcfont);
xphits.setGravity(Gravity.CENTER_VERTICAL);
xphits.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!xphited) {
xphitss = true;
xphited = true;
savemod("XP Hit");
betToast(langMsg[language]["Get XP by hitting mobs"]);
xphits.getParent().setBackground(themeBtnClicked);
xphits.setText(tohtml(xphits.getText(),true));
} else {
xphitss = false;
xphited = false;
removeFromArray(activeMods,"XP Hit");
xphits.getParent().setBackground(themeBtnNotClicked);
xphits.setText(tohtml(xphits.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Get XP when you hit someone"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(xphits);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!xphited) {
xphits.getParent().setBackground(themeBtnNotClicked);
xphits.setText(tohtml(xphits.getText(),false));
} else {
xphits.getParent().setBackground(themeBtnClicked);
xphits.setText(tohtml(xphits.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(turnicon, 0), 0, android.util.Base64.decode(turnicon, 0).length)));
}var quickturn = new android.widget.TextView(ctx);
quickturn.setText("  " + "Quick Turn 180");
quickturn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
quickturn.getLayoutParams().width = switch_width;
quickturn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
quickturn.setTextColor(modTextColor);

quickturn.setTypeface(mcfont);
quickturn.setGravity(Gravity.CENTER_VERTICAL);
quickturn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!quickturns) {
quickturns = true;
quickturnd = true;
savemod("Quick Turn");
show180Btn();
quickturn.getParent().setBackground(themeBtnClicked);
quickturn.setText(tohtml(quickturn.getText(),true));
} else {
quickturns = false;
quickturnd = false;
GUIh.dismiss();
removeFromArray(activeMods,"Quick Turn");
quickturn.getParent().setBackground(themeBtnNotClicked);
quickturn.setText(tohtml(quickturn.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adds button to quickly turn around"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(quickturn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!quickturns) {
quickturn.getParent().setBackground(themeBtnNotClicked);
quickturn.setText(tohtml(quickturn.getText(),false));
} else {
quickturn.getParent().setBackground(themeBtnClicked);
quickturn.setText(tohtml(quickturn.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(avoidicon, 0), 0, android.util.Base64.decode(avoidicon, 0).length)));
}var avoidplayer = new android.widget.TextView(ctx);
avoidplayer.setText("  " + "Untouchable");
avoidplayer.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
avoidplayer.getLayoutParams().width = switch_width;
avoidplayer.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
avoidplayer.setTextColor(modTextColor);

avoidplayer.setGravity(Gravity.CENTER_VERTICAL);
avoidplayer.setTypeface(mcfont);
avoidplayer.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!avoidplayers) {
avoidplayers = true;
savemod("Untouchable");
avoidplayer.getParent().setBackground(themeBtnClicked);
avoidplayer.setText(tohtml(avoidplayer.getText(),true));
} else {
avoidplayers = false;
removeFromArray(activeMods,"Untouchable");
avoidplayer.getParent().setBackground(themeBtnNotClicked);
avoidplayer.setText(tohtml(avoidplayer.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports away when anyone is near. Impossible to kill"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(avoidplayer);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!avoidplayers) {
avoidplayer.getParent().setBackground(themeBtnNotClicked);
avoidplayer.setText(tohtml(avoidplayer.getText(),false));
} else {
avoidplayer.getParent().setBackground(themeBtnClicked);
avoidplayer.setText(tohtml(avoidplayer.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(avoidicon, 0), 0, android.util.Base64.decode(avoidicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Untouchable Tune");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setGravity(Gravity.CENTER_VERTICAL);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
avoidTune();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjust how far you teleport away from a player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

function avoidTune() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tpLayout = new android.widget.LinearLayout(ctx);
var etX = new android.widget.EditText(ctx);
var etY = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);
var etR = new android.widget.EditText(ctx);
var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" X:");
var txtY = android.widget.TextView(ctx);
txtY.setTextSize(12);
txtY.setText(" Y:");
var txtZ = android.widget.TextView(ctx);
txtZ.setTextSize(12);
txtZ.setText(" Z:");
var txtR = android.widget.TextView(ctx);
txtR.setTextSize(12);
txtR.setText(" Range:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Save");
etX.setInputType(number);
etY.setInputType(number);
etZ.setInputType(number);
etX.setText("0");
etY.setText("0");
etR.setText("0");
etZ.setText("0");
etX.setHint("Teleport this far from your X");
etY.setHint("Teleport this far from your Y");
etZ.setHint("Teleport this far from your Z");
etR.setHint("How close someone needs to be to trigger");
var tpDialog = new android.app.Dialog(ctx);
tpDialog.setContentView(tpLayout);
tpDialog.setTitle("Untouchable Tune");
tpLayout.setGravity(android.view.Gravity.CENTER);
tpLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tpLayout.addView(txtX);
tpLayout.addView(etX);
tpLayout.addView(txtY);
tpLayout.addView(etY);
tpLayout.addView(txtZ);
tpLayout.addView(etZ);
tpLayout.addView(txtR);
tpLayout.addView(etR);
tpLayout.addView(tpBtn);
tpLayout.addView(cancelBtn);
tpDialog.show();
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
avoidX = parseInt(etX.getText());
avoidY = parseInt(etY.getText());
avoidZ = parseInt(etZ.getText());
avoidRange = parseInt(etR.getText());
tpDialog.dismiss();

}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
tpDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(avoidicon, 0), 0, android.util.Base64.decode(avoidicon, 0).length)));
}var avoidSlider = new android.widget.SeekBar(ctx);
avoidSlider.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
avoidSlider.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
avoidSlider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
avoidSlider.getLayoutParams().width = switch_width;
avoidSlider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
avoidSlider.setMax(40);
avoidSlider.getBackground().setAlpha(255);
avoidSlider.setProgress(avoidRange);
avoidSlider.setBackground(xbgGS);
avoidSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
avoidRange = avoidSlider.getProgress();
betToast(langMsg[language]["Range: "] + avoidRange);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Quickly adjust how close players can get near you while using Untouchable"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(avoidSlider);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);




var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var healthleavebtn = new android.widget.TextView(ctx);
healthleavebtn.setText("  " + "Auto Leave");
healthleavebtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
healthleavebtn.getLayoutParams().width = switch_width;
healthleavebtn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
healthleavebtn.setTextColor(modTextColor);
healthleavebtn.setGravity(Gravity.CENTER_VERTICAL);
healthleavebtn.setTypeface(mcfont);
healthleavebtn.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!autolog) {
healthleavebtn.getParent().setBackground(themeBtnClicked);
healthleavebtn.setText(tohtml(healthleavebtn.getText(),true));
autolog = true;
savemod("Auto Log");
} else {
autolog = false;
removeFromArray(activeMods,"Auto Log");
healthleavebtn.getParent().setBackground(themeBtnNotClicked);
healthleavebtn.setText(tohtml(healthleavebtn.getText(),false));
}}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Quits Minecraft when health reaches defined minimum");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(healthleavebtn);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!autolog) {
healthleavebtn.getParent().setBackground(themeBtnNotClicked);
healthleavebtn.setText(tohtml(healthleavebtn.getText(),false));
} else {
healthleavebtn.getParent().setBackground(themeBtnClicked);
healthleavebtn.setText(tohtml(healthleavebtn.getText(),true));
}
var healthtxt = new android.widget.TextView(ctx);
healthtxt.setText("  " + "Auto Leave Health Min: "+healthmin);
healthtxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
healthtxt.getLayoutParams().width = switch_width;
healthtxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
healthtxt.setTextColor(modTextColor);
healthtxt.setGravity(Gravity.CENTER_VERTICAL);
healthtxt.setTypeface(mcfont);
healthtxt.setTextSize(switchfontsize);
menuLayoutw.addView(healthtxt);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var healthdefine = new android.widget.SeekBar(ctx);
healthdefine.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
healthdefine.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
healthdefine.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
healthdefine.getLayoutParams().width = switch_width;
healthdefine.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
healthdefine.setMax(19);
healthdefine.getBackground().setAlpha(255);
healthdefine.setProgress(healthmin);
healthdefine.setBackground(xbgGS);
healthdefine.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
healthmin = healthdefine.getProgress()+1;
healthtxt.setText("  " + "Auto Leave Health Min: "+healthmin);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjust range to activate aimbot"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(healthdefine);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

















var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Hitboxes"]);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextSize(titleSize);
button.setBackground(title);
button.setTextColor(modTextColor);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayoutw.addView(button);
var hitboxbox = new android.widget.LinearLayout(activity);
hitboxbox.setBackground(themeBtnNotClicked);
hitboxbox.setOrientation(1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxplusicon, 0), 0, android.util.Base64.decode(bighitboxplusicon, 0).length)));
}var walks = new android.widget.TextView(ctx);
walks.setText("  " + "Reach");
walks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
walks.getLayoutParams().width = switch_width;
walks.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
walks.setTextColor(modTextColor);
walks.setTypeface(mcfont);
walks.setTextSize(switchfontsize);
walks.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!walked) {
walkss = true;
savemod("Reach");
walked = true;
walks.getParent().setBackground(themeBtnClicked);
walks.setText(tohtml(walks.getText(),true));
} else {
walkss = false;
walked = false;
removeFromArray(activeMods,"Reach");
resetBoxes();
walks.getParent().setBackground(themeBtnNotClicked);
walks.setText(tohtml(walks.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets players hitbox to large once you hit them"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(walks);
if(helpB){slayout1.addView(helpBtn);}
hitboxbox.addView(slayout1);
if (!walked) {
walks.getParent().setBackground(themeBtnNotClicked);
walks.setText(tohtml(walks.getText(),false));
} else {
walks.getParent().setBackground(themeBtnClicked);
walks.setText(tohtml(walks.getText(),true));
}
var distancetxt = new android.widget.TextView(ctx);
distancetxt.setText("  " + "Reach Distance: "+reachDistance);
distancetxt.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
distancetxt.getLayoutParams().width = switch_width;
distancetxt.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
distancetxt.setTextColor(modTextColor);
distancetxt.setGravity(Gravity.CENTER_VERTICAL);
distancetxt.setTypeface(mcfont);
distancetxt.setTextSize(switchfontsize);
hitboxbox.addView(distancetxt);
var spaceholder = new android.widget.Button(ctx);spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));spaceholder.getLayoutParams().height = icon_dimensions*.01;spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));hitboxbox.addView(spaceholder);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxplusicon, 0), 0, android.util.Base64.decode(bighitboxplusicon, 0).length)));
}var reachDistanceSlider = new android.widget.SeekBar(ctx);
reachDistanceSlider.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
reachDistanceSlider.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
reachDistanceSlider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
reachDistanceSlider.getLayoutParams().width = switch_width;
reachDistanceSlider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
reachDistanceSlider.setMax(30);
reachDistanceSlider.getBackground().setAlpha(255);
reachDistanceSlider.setProgress(reachDistance);
reachDistanceSlider.setBackground(xbgGS);
reachDistanceSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
reachDistance = reachDistanceSlider.getProgress();
betToast(langMsg[language]["Distance: "] + reachDistance);
distancetxt.setText("  " + "Reach Distance: "+reachDistance);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Adjust how large their hitbox is - How far away you can hit someone from."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(reachDistanceSlider);
if(helpB){slayout1.addView(helpBtn);}
hitboxbox.addView(slayout1);var spaceholder = new android.widget.Button(ctx);spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));spaceholder.getLayoutParams().height = icon_dimensions*.01;spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));hitboxbox.addView(spaceholder);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxplusicon, 0), 0, android.util.Base64.decode(bighitboxplusicon, 0).length)));
}var autoReach = new android.widget.TextView(ctx);
autoReach.setText("  " + "Auto Reach");
autoReach.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
autoReach.getLayoutParams().width = switch_width;
autoReach.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
autoReach.setTextColor(modTextColor);
autoReach.setGravity(Gravity.CENTER_VERTICAL);

autoReach.setTypeface(mcfont);
autoReach.setTextSize(switchfontsize);
autoReach.getBackground().setAlpha(255);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!autoReachd) {
autoReachs = true;
autoReachd = true;
savemod("Auto Reach");
autoReach.getParent().setBackground(themeBtnClicked);
autoReach.setText(tohtml(autoReach.getText(),true));
} else {
autoReachs = false;
autoReachd = false;
resetBoxes();
removeFromArray(activeMods,"Auto Reach");
autoReach.getParent().setBackground(themeBtnNotClicked);
autoReach.setText(tohtml(autoReach.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Automatically increases nearest players hitbox"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(autoReach);
if(helpB){slayout1.addView(helpBtn);}
hitboxbox.addView(slayout1);
if (!autoReachd) {
autoReach.getParent().setBackground(themeBtnNotClicked);
autoReach.setText(tohtml(autoReach.getText(),false));
} else {
autoReach.getParent().setBackground(themeBtnClicked);
autoReach.setText(tohtml(autoReach.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bighitboxplusicon, 0), 0, android.util.Base64.decode(bighitboxplusicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Reset Hitboxes");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {savemod("Reset Hitboxes");resetBoxes();if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Resets nearest player's hitbox size"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
hitboxbox.addView(slayout1);
var button = new android.widget.Button(ctx);
button.setText("");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().height = 15;
button.getBackground().setAlpha(0);
hitboxbox.addView(button);
menuLayoutw.addView(hitboxbox);
if(compactView){changeGUI2 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI2 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}
if(animations){changeGUI2.setAnimationStyle(android.R.style.Animation_InputMethod);}

changeGUI2.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI2.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI2.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI2.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI2.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}
if(compactView){
changeGUI2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed2=true;
}
}
}))
};
/*Waypoints*/
function openMenu3() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Waypoints"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayoutw.addView(button);
var button7 = new android.widget.Button(ctx);
button7.setText("Add Waypoint");
button7.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button7.setTextColor(android.graphics.Color.YELLOW);
button7.getBackground().setAlpha(130);
button7.setTextSize(btntextsize);
button7.setBackground(xbgAW);
button7.setTypeface(mcfont);
button7.setTextSize(switchfontsize+3);
button7.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Add Waypoint");
AddNewWaypoint(parseInt(Player.getX()),parseInt(Player.getY()),parseInt(Player.getZ()));
closeEverything();
}
}));
menuLayoutw.addView(button7);
for(var i=0;i<objectLength(waypoints_W);i++){
if(!waypoints_W[i].removed){
if(CreateButton(i).getParent()!=null)
CreateButton(i).getParent().removeView(CreateButton(i));
menuLayoutw.addView(CreateButton(i));
}
}
if(compactView){changeGUI3 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI3 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}if(animations){changeGUI3.setAnimationStyle(android.R.style.Animation_InputMethod);}

changeGUI3.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI3.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI3.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI3.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI3.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI3.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI3.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI3.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed3=true;
}
}
}))
};
/*Potions*/
function openMenu4() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Potions Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language][" Tip: Potions can only be enabled in-game. \nTip 2: Antidote spam clears negative effects."]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(milkbucketicon, 0), 0, android.util.Base64.decode(milkbucketicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Remove All Effects");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
savemod("Remove All Effects");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
if (canPreset) {
Entity.removeAllEffects(getPlayerEnt());
betToast(langMsg[language]["Removed all effects"]);
ims = false;
hjjs = false;
hjs = false;
gps = false;
miningfs = false;
effectb = false;
effectn = false;
effectSat=false;
effectAbs=false;
effectHealth=false;
effectWither=false;
effectPois=false;
effectWeak=false;
effectHunger=false;
effectWater=false;
effectFireRes=false;
effectDmgRes=false;
effectHarm=false;
effectHeal=false;
effectStrgth=false;
effectSlow=false;
effectSwift=false;
}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bottleofenchant, 0), 0, android.util.Base64.decode(bottleofenchant, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Add Experience");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width-icon_dimensions;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Add XP");
Player.addExp(100000000);
betToast(langMsg[language]["Added experience"]);
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(milkbucketicon, 0), 0, android.util.Base64.decode(milkbucketicon, 0).length)));
}var effectClearS = new android.widget.TextView(ctx);
effectClearS.setText("  " + "Antidote");
effectClearS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
effectClearS.getLayoutParams().width = switch_width;
effectClearS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
effectClearS.setTextColor(modTextColor);
effectClearS.setTypeface(mcfont);effectClearS.setGravity(Gravity.CENTER_VERTICAL);
effectClearS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectRemove) {
effectRemove = true;
savemod("Antidote");
effectClearS.getParent().setBackground(themeBtnClicked);
effectClearS.setText(tohtml(effectClearS.getText(),true));
} else {
effectRemove = false;
removeFromArray(activeMods,"Antidote");
effectClearS.getParent().setBackground(themeBtnNotClicked);
effectClearS.setText(tohtml(effectClearS.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(effectClearS);
menuLayoutw.addView(slayout1);
if (!effectRemove) {
effectClearS.getParent().setBackground(themeBtnNotClicked);
effectClearS.setText(tohtml(effectClearS.getText(),false));} else {
effectClearS.getParent().setBackground(themeBtnClicked);
effectClearS.setText(tohtml(effectClearS.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(invisicon, 0), 0, android.util.Base64.decode(invisicon, 0).length)));
}var effectAddS = new android.widget.TextView(ctx);
effectAddS.setText("  " + "Spam Enabled Effects");
effectAddS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
effectAddS.getLayoutParams().width = switch_width;
effectAddS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
effectAddS.setTextColor(modTextColor);
effectAddS.setTypeface(mcfont);effectAddS.setGravity(Gravity.CENTER_VERTICAL);
effectAddS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectAdd) {
effectAdd = true;
savemod("Spam Effects");
effectAddS.getParent().setBackground(themeBtnClicked);
effectAddS.setText(tohtml(effectAddS.getText(),true));
} else {
effectAdd = false;
removeFromArray(activeMods,"Spam Effects");
effectAddS.getParent().setBackground(themeBtnNotClicked);
effectAddS.setText(tohtml(effectAddS.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(effectAddS);
menuLayoutw.addView(slayout1);
if (!effectAdd) {
effectAddS.getParent().setBackground(themeBtnNotClicked);
effectAddS.setText(tohtml(effectAddS.getText(),false));} else {
effectAddS.getParent().setBackground(themeBtnClicked);
effectAddS.setText(tohtml(effectAddS.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newnightvisionicon, 0), 0, android.util.Base64.decode(newnightvisionicon, 0).length)));
}var gp = new android.widget.TextView(ctx);
gp.setText("  " + "Night Vision");
gp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
gp.getLayoutParams().width = switch_width-icon_dimensions;
gp.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
gp.setTextColor(modTextColor);
gp.setTypeface(mcfont);gp.setGravity(Gravity.CENTER_VERTICAL);
gp.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!gped) {
savemod("Night Vision");
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, nivd, niva, false, false);
gps = true;
gped = true;
betToast(langMsg[language]["Enabled Nightvision"]);
gp.getParent().setBackground(themeBtnClicked);
gp.setText(tohtml(gp.getText(),true));
} else {
gps = false;
gped = false;
removeFromArray(activeMods,"Night Vision");
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
gp.getParent().setBackground(themeBtnNotClicked);
gp.setText(tohtml(gp.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(gp);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Night Vision",niva,nivd,gps);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!gps) {
gp.getParent().setBackground(themeBtnNotClicked);
gp.setText(tohtml(gp.getText(),false));} else {
gp.getParent().setBackground(themeBtnClicked);
gp.setText(tohtml(gp.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newhasteicon, 0), 0, android.util.Base64.decode(newhasteicon, 0).length)));
}var im = new android.widget.TextView(ctx);
im.setText("  " + "Haste");
im.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
im.getLayoutParams().width = switch_width-icon_dimensions;
im.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
im.setTextColor(modTextColor);
im.setTypeface(mcfont);im.setGravity(Gravity.CENTER_VERTICAL);
im.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!ims) {
savemod("Haste");
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, hastd, hasta, false, false);
ims = true;
betToast(langMsg[language]["Enabled InstaMine"]);
im.getParent().setBackground(themeBtnClicked);
im.setText(tohtml(im.getText(),true));
} else {
ims = false;
removeFromArray(activeMods,"Haste");
Entity.removeEffect(getPlayerEnt(), MobEffect.digSpeed);
im.getParent().setBackground(themeBtnNotClicked);
im.setText(tohtml(im.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(im);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Haste",hasta,hastd,ims);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!ims) {
im.getParent().setBackground(themeBtnNotClicked);
im.setText(tohtml(im.getText(),false));} else {
im.getParent().setBackground(themeBtnClicked);
im.setText(tohtml(im.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(miningfatigueicon, 0), 0, android.util.Base64.decode(miningfatigueicon, 0).length)));
}var Fatigueswitch = new android.widget.TextView(ctx);
Fatigueswitch.setText("  " + "Mining Fatigue");
Fatigueswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
Fatigueswitch.getLayoutParams().width = switch_width-icon_dimensions;
Fatigueswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
Fatigueswitch.setTextColor(modTextColor);
Fatigueswitch.setTypeface(mcfont);Fatigueswitch.setGravity(Gravity.CENTER_VERTICAL);
Fatigueswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!miningfs) {
Entity.addEffect(Player.getEntity(), MobEffect.digSlowdown, mind, mina, false, false);
miningfs = true;
savemod("Mining Fatigue");
betToast(langMsg[language]["Enabled Mining Fatigue"]);
Fatigueswitch.getParent().setBackground(themeBtnClicked);
Fatigueswitch.setText(tohtml(Fatigueswitch.getText(),true));
} else {
miningfs = false;
removeFromArray(activeMods,"Mining Fatigue");
Entity.removeEffect(getPlayerEnt(), MobEffect.digSlowdown);
Fatigueswitch.getParent().setBackground(themeBtnNotClicked);
Fatigueswitch.setText(tohtml(Fatigueswitch.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(Fatigueswitch);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Mining Fatigue",mina,mind,miningfs);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!miningfs) {
Fatigueswitch.getParent().setBackground(themeBtnNotClicked);
Fatigueswitch.setText(tohtml(Fatigueswitch.getText(),false));} else {
Fatigueswitch.getParent().setBackground(themeBtnClicked);
Fatigueswitch.setText(tohtml(Fatigueswitch.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(leveffect, 0), 0, android.util.Base64.decode(leveffect, 0).length)));
}var levswi = new android.widget.TextView(ctx);
levswi.setText("  " + "Levitation");
levswi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
levswi.getLayoutParams().width = switch_width-icon_dimensions;
levswi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
levswi.setTextColor(modTextColor);
levswi.setTypeface(mcfont);levswi.setGravity(Gravity.CENTER_VERTICAL);
levswi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!levs) {
Entity.addEffect(Player.getEntity(), MobEffect.levitation, levd, leva, false, false);
levs = true;
savemod("Levitation");
betToast("Enabled Levitation");
levswi.getParent().setBackground(themeBtnClicked);
levswi.setText(tohtml(levswi.getText(),true));
} else {
levs = false;
removeFromArray(activeMods,"Levitation");
Entity.removeEffect(getPlayerEnt(), MobEffect.levitation);
levswi.getParent().setBackground(themeBtnNotClicked);
levswi.setText(tohtml(levswi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(levswi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Levitation",leva,levd,levs);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!levs) {
levswi.getParent().setBackground(themeBtnNotClicked);
levswi.setText(tohtml(levswi.getText(),false));} else {
levswi.getParent().setBackground(themeBtnClicked);
levswi.setText(tohtml(levswi.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newjumpicon, 0), 0, android.util.Base64.decode(newjumpicon, 0).length)));
}var hj = new android.widget.TextView(ctx);
hj.setText("  " + "Jump Boost");
hj.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hj.getLayoutParams().width = switch_width-icon_dimensions;
hj.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hj.setTextColor(modTextColor);
hj.setTypeface(mcfont);hj.setGravity(Gravity.CENTER_VERTICAL);
hj.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!hjs) {
savemod("Jump Boost");
Entity.addEffect(Player.getEntity(), MobEffect.jump, jumpd, jumpa, false, false);
hjs = true;
ModPE.showTipMessage(ChatColor.RED + "Enabled High Jump");
hj.getParent().setBackground(themeBtnClicked);
hj.setText(tohtml(hj.getText(),true));
} else {
hjs = false;
removeFromArray(activeMods,"Jump Boost");
Entity.removeEffect(getPlayerEnt(), MobEffect.jump);
hj.getParent().setBackground(themeBtnNotClicked);
hj.setText(tohtml(hj.getText(),false));}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hj);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Jump Boost",jumpa,jumpd,hjs);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!hjs) {
hj.getParent().setBackground(themeBtnNotClicked);
hj.setText(tohtml(hj.getText(),false));} else {
hj.getParent().setBackground(themeBtnClicked);
hj.setText(tohtml(hj.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(nauseaicon, 0), 0, android.util.Base64.decode(nauseaicon, 0).length)));
}var Nauseaswitch = new android.widget.TextView(ctx);
Nauseaswitch.setText("  " + "Nausea");
Nauseaswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
Nauseaswitch.getLayoutParams().width = switch_width-icon_dimensions;
Nauseaswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
Nauseaswitch.setTextColor(modTextColor);
Nauseaswitch.setTypeface(mcfont);Nauseaswitch.setGravity(Gravity.CENTER_VERTICAL);
Nauseaswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectn) {
Entity.addEffect(Player.getEntity(), MobEffect.confusion, nausd, nausa, false, false);
effectn = true;
savemod("Nausea");
ModPE.showTipMessage(ChatColor.RED + "Why");
Nauseaswitch.getParent().setBackground(themeBtnClicked);
Nauseaswitch.setText(tohtml(Nauseaswitch.getText(),true));
} else {
effectn = false;
removeFromArray(activeMods,"Nausea");
Entity.removeEffect(getPlayerEnt(), MobEffect.confusion);
Nauseaswitch.getParent().setBackground(themeBtnNotClicked);
Nauseaswitch.setText(tohtml(Nauseaswitch.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(Nauseaswitch);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Nausea",nausa,nausd,effectn);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectn) {
Nauseaswitch.getParent().setBackground(themeBtnNotClicked);
Nauseaswitch.setText(tohtml(Nauseaswitch.getText(),false));} else {
Nauseaswitch.getParent().setBackground(themeBtnClicked);
Nauseaswitch.setText(tohtml(Nauseaswitch.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(blindnessicon, 0), 0, android.util.Base64.decode(blindnessicon, 0).length)));
}var Blindnessswitch = new android.widget.TextView(ctx);
Blindnessswitch.setText("  " + "Blindness");
Blindnessswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
Blindnessswitch.getLayoutParams().width = switch_width-icon_dimensions;
Blindnessswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
Blindnessswitch.setTextColor(modTextColor);
Blindnessswitch.setTypeface(mcfont);Blindnessswitch.setGravity(Gravity.CENTER_VERTICAL);
Blindnessswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectb) {
Entity.addEffect(Player.getEntity(), MobEffect.blindness, blindd, blinda, false, false);
effectb = true;
savemod("Blindness");
ModPE.showTipMessage(ChatColor.RED + "Why");
Blindnessswitch.getParent().setBackground(themeBtnClicked);
Blindnessswitch.setText(tohtml(Blindnessswitch.getText(),true));
} else {
effectb = false;
removeFromArray(activeMods,"Blindness");
Entity.removeEffect(getPlayerEnt(), MobEffect.blindness);
Blindnessswitch.getParent().setBackground(themeBtnNotClicked);
Blindnessswitch.setText(tohtml(Blindnessswitch.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(Blindnessswitch);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Blindness",blinda,blindd,effectb);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectb) {
Blindnessswitch.getParent().setBackground(themeBtnNotClicked);
Blindnessswitch.setText(tohtml(Blindnessswitch.getText(),false));} else {
Blindnessswitch.getParent().setBackground(themeBtnClicked);
Blindnessswitch.setText(tohtml(Blindnessswitch.getText(),true));}


var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["LAN Only Potions"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize-2);
button.setBackground(title);button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["Tip: These potions only work on LAN worlds, not realms. Maybe some will work on servers."]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(healicon, 0), 0, android.util.Base64.decode(healicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Heal");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Heal");
Entity.addEffect(Player.getEntity(), MobEffect.heal, 999999, 2000, false, false);
betToast(langMsg[language]["Healed"]);
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(invisicon, 0), 0, android.util.Base64.decode(invisicon, 0).length)));
}var invisSwitch = new android.widget.TextView(ctx);
invisSwitch.setText("  " + "Invisibility");
invisSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
invisSwitch.getLayoutParams().width = switch_width-icon_dimensions;
invisSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
invisSwitch.setTextColor(modTextColor);
invisSwitch.setTypeface(mcfont);
invisSwitch.setTextSize(switchfontsize);invisSwitch.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectIn) {
savemod("Invisibility");
Entity.addEffect(Player.getEntity(), MobEffect.invisibility, invisd, invisa, false, false);
effectIn = true;
invisSwitch.getParent().setBackground(themeBtnClicked);
invisSwitch.setText(tohtml(invisSwitch.getText(),true));
} else {
effectIn = false;
removeFromArray(activeMods,"Invisibility");
Entity.removeEffect(getPlayerEnt(), MobEffect.invisibility);
invisSwitch.getParent().setBackground(themeBtnNotClicked);
invisSwitch.setText(tohtml(invisSwitch.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(invisSwitch);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Invisibility",invisa,invisd,effectIn);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectIn) {
invisSwitch.getParent().setBackground(themeBtnNotClicked);
invisSwitch.setText(tohtml(invisSwitch.getText(),false));} else {
invisSwitch.getParent().setBackground(themeBtnClicked);
invisSwitch.setText(tohtml(invisSwitch.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(absorpicon, 0), 0, android.util.Base64.decode(absorpicon, 0).length)));
}var absSwit = new android.widget.TextView(ctx);
absSwit.setText("  " + "Absorption");
absSwit.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
absSwit.getLayoutParams().width = switch_width-icon_dimensions;
absSwit.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
absSwit.setTextColor(modTextColor);
absSwit.setTypeface(mcfont);absSwit.setGravity(Gravity.CENTER_VERTICAL);
absSwit.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectAbs) {
savemod("Absorption");
Entity.addEffect(Player.getEntity(), MobEffect.absorption, sbsod, absoa, false, false);
effectAbs = true;

absSwit.getParent().setBackground(themeBtnClicked);
absSwit.setText(tohtml(absSwit.getText(),true));
} else {
effectAbs = false;
removeFromArray(activeMods,"Absorption");
Entity.removeEffect(getPlayerEnt(), MobEffect.absorption);
absSwit.getParent().setBackground(themeBtnNotClicked);
absSwit.setText(tohtml(absSwit.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(absSwit);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Absorption",absoa,sbsod,effectAbs);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectAbs) {
absSwit.getParent().setBackground(themeBtnNotClicked);
absSwit.setText(tohtml(absSwit.getText(),false));} else {
absSwit.getParent().setBackground(themeBtnClicked);
absSwit.setText(tohtml(absSwit.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(healthicon, 0), 0, android.util.Base64.decode(healthicon, 0).length)));
}var healthBSwi = new android.widget.TextView(ctx);
healthBSwi.setText("  " + "Health Boost");
healthBSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
healthBSwi.getLayoutParams().width = switch_width-icon_dimensions;
healthBSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
healthBSwi.setTextColor(modTextColor);
healthBSwi.setTypeface(mcfont);healthBSwi.setGravity(Gravity.CENTER_VERTICAL);
healthBSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectHealth) {
Entity.addEffect(Player.getEntity(), MobEffect.healthBoost, healbod, healboa, false, false);
effectHealth = true;
savemod("Health Boost");
healthBSwi.getParent().setBackground(themeBtnClicked);
healthBSwi.setText(tohtml(healthBSwi.getText(),true));
} else {
effectHealth = false;
removeFromArray(activeMods,"Health Boost");
Entity.removeEffect(getPlayerEnt(), MobEffect.healthBoost);
healthBSwi.getParent().setBackground(themeBtnNotClicked);
healthBSwi.setText(tohtml(healthBSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(healthBSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Health Boost",healboa,healbod,effectHealth);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectHealth) {
healthBSwi.getParent().setBackground(themeBtnNotClicked);
healthBSwi.setText(tohtml(healthBSwi.getText(),false));} else {
healthBSwi.getParent().setBackground(themeBtnClicked);
healthBSwi.setText(tohtml(healthBSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(withericon, 0), 0, android.util.Base64.decode(withericon, 0).length)));
}var witherSwi = new android.widget.TextView(ctx);
witherSwi.setText("  " + "Wither");
witherSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
witherSwi.getLayoutParams().width = switch_width-icon_dimensions;
witherSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
witherSwi.setTextColor(modTextColor);
witherSwi.setTypeface(mcfont);witherSwi.setGravity(Gravity.CENTER_VERTICAL);
witherSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectWither) {
Entity.addEffect(Player.getEntity(), MobEffect.wither, witherd, withera, false, false);
effectWither = true;
savemod("Wither");
witherSwi.getParent().setBackground(themeBtnClicked);
witherSwi.setText(tohtml(witherSwi.getText(),true));
} else {
effectWither = false;
removeFromArray(activeMods,"Wither");
Entity.removeEffect(getPlayerEnt(), MobEffect.wither);
witherSwi.getParent().setBackground(themeBtnNotClicked);
witherSwi.setText(tohtml(witherSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(witherSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Wither",withera,witherd,effectWither);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectWither) {
witherSwi.getParent().setBackground(themeBtnNotClicked);
witherSwi.setText(tohtml(witherSwi.getText(),false));} else {
witherSwi.getParent().setBackground(themeBtnClicked);
witherSwi.setText(tohtml(witherSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(poisonicon, 0), 0, android.util.Base64.decode(poisonicon, 0).length)));
}var poisonSwi = new android.widget.TextView(ctx);
poisonSwi.setText("  " + "Poison");
poisonSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
poisonSwi.getLayoutParams().width = switch_width-icon_dimensions;
poisonSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
poisonSwi.setTextColor(modTextColor);
poisonSwi.setTypeface(mcfont);poisonSwi.setGravity(Gravity.CENTER_VERTICAL);
poisonSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectPois) {
Entity.addEffect(Player.getEntity(), MobEffect.poison, poisond, poisona, false, false);
effectPois = true;
savemod("Poison");
poisonSwi.getParent().setBackground(themeBtnClicked);
poisonSwi.setText(tohtml(poisonSwi.getText(),true));
} else {
effectPois = false;
removeFromArray(activeMods,"Poison");
Entity.removeEffect(getPlayerEnt(), MobEffect.poison);
poisonSwi.getParent().setBackground(themeBtnNotClicked);
poisonSwi.setText(tohtml(poisonSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(poisonSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Poison",poisona,poisond,effectPois);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectPois) {
poisonSwi.getParent().setBackground(themeBtnNotClicked);
poisonSwi.setText(tohtml(poisonSwi.getText(),false));} else {
poisonSwi.getParent().setBackground(themeBtnClicked);
poisonSwi.setText(tohtml(poisonSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(weaknicon, 0), 0, android.util.Base64.decode(weaknicon, 0).length)));
}var weakSwi = new android.widget.TextView(ctx);
weakSwi.setText("  " + "Weakness");
weakSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
weakSwi.getLayoutParams().width = switch_width-icon_dimensions;
weakSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
weakSwi.setTextColor(modTextColor);
weakSwi.setTypeface(mcfont);weakSwi.setGravity(Gravity.CENTER_VERTICAL);
weakSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectWeak) {
Entity.addEffect(Player.getEntity(), MobEffect.weakness, weakd, weaka, false, false);
effectWeak = true;
savemod("Weakness");
weakSwi.getParent().setBackground(themeBtnClicked);
weakSwi.setText(tohtml(weakSwi.getText(),true));
} else {
effectWeak = false;
removeFromArray(activeMods,"Weakness");
Entity.removeEffect(getPlayerEnt(), MobEffect.weakness);
weakSwi.getParent().setBackground(themeBtnNotClicked);
weakSwi.setText(tohtml(weakSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(weakSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Weakness",weaka,weakd,effectWeak);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectWeak) {
weakSwi.getParent().setBackground(themeBtnNotClicked);
weakSwi.setText(tohtml(weakSwi.getText(),false));} else {
weakSwi.getParent().setBackground(themeBtnClicked);
weakSwi.setText(tohtml(weakSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hungericon, 0), 0, android.util.Base64.decode(hungericon, 0).length)));
}var hungerSwi = new android.widget.TextView(ctx);
hungerSwi.setText("  " + "Hunger");
hungerSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hungerSwi.getLayoutParams().width = switch_width-icon_dimensions;
hungerSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hungerSwi.setTextColor(modTextColor);
hungerSwi.setTypeface(mcfont);hungerSwi.setGravity(Gravity.CENTER_VERTICAL);
hungerSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectHunger) {
Entity.addEffect(Player.getEntity(), MobEffect.hunger, hungerd, hungera, false, false);
effectHunger = true;
savemod("Hunger");
hungerSwi.getParent().setBackground(themeBtnClicked);
hungerSwi.setText(tohtml(hungerSwi.getText(),true));
} else {
effectHunger = false;
removeFromArray(activeMods,"Hunger");
Entity.removeEffect(getPlayerEnt(), MobEffect.hunger);
hungerSwi.getParent().setBackground(themeBtnNotClicked);
hungerSwi.setText(tohtml(hungerSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hungerSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Hunger",hungera,hungerd,effectHunger);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectHunger) {
hungerSwi.getParent().setBackground(themeBtnNotClicked);
hungerSwi.setText(tohtml(hungerSwi.getText(),false));} else {
hungerSwi.getParent().setBackground(themeBtnClicked);
hungerSwi.setText(tohtml(hungerSwi.getText(),true));}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(waterbreicon, 0), 0, android.util.Base64.decode(waterbreicon, 0).length)));
}var waterbreSwi = new android.widget.TextView(ctx);
waterbreSwi.setText("  " + "Water Breathing");
waterbreSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
waterbreSwi.getLayoutParams().width = switch_width-icon_dimensions;
waterbreSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
waterbreSwi.setTextColor(modTextColor);
waterbreSwi.setTypeface(mcfont);waterbreSwi.setGravity(Gravity.CENTER_VERTICAL);
waterbreSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectWater) {
Entity.addEffect(Player.getEntity(), MobEffect.waterBreathing, waterbd, waterba, false, false);
effectWater = true;
savemod("Water Breathing");
waterbreSwi.getParent().setBackground(themeBtnClicked);
waterbreSwi.setText(tohtml(waterbreSwi.getText(),true));
} else {
effectWater = false;
removeFromArray(activeMods,"Water Breathing");
Entity.removeEffect(getPlayerEnt(), MobEffect.waterBreathing);
waterbreSwi.getParent().setBackground(themeBtnNotClicked);
waterbreSwi.setText(tohtml(waterbreSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(waterbreSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Water Breathing",waterba,waterbd,effectWater);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectWater) {
waterbreSwi.getParent().setBackground(themeBtnNotClicked);
waterbreSwi.setText(tohtml(waterbreSwi.getText(),false));} else {
waterbreSwi.getParent().setBackground(themeBtnClicked);
waterbreSwi.setText(tohtml(waterbreSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fireresicon, 0), 0, android.util.Base64.decode(fireresicon, 0).length)));
}var fireresSwi = new android.widget.TextView(ctx);
fireresSwi.setText("  " + "Fire Resistance");
fireresSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fireresSwi.getLayoutParams().width = switch_width-icon_dimensions;
fireresSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fireresSwi.setTextColor(modTextColor);
fireresSwi.setTypeface(mcfont);fireresSwi.setGravity(Gravity.CENTER_VERTICAL);
fireresSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectFireRes) {
Entity.addEffect(Player.getEntity(), MobEffect.fireResistance, fresd, fresa, false, false);
effectFireRes = true;
savemod("Fire Resistance");
fireresSwi.getParent().setBackground(themeBtnClicked);
fireresSwi.setText(tohtml(fireresSwi.getText(),true));
} else {
effectFireRes = false;
removeFromArray(activeMods,"Fire Resistance");
Entity.removeEffect(getPlayerEnt(), MobEffect.fireResistance);
fireresSwi.getParent().setBackground(themeBtnNotClicked);
fireresSwi.setText(tohtml(fireresSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fireresSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Fire Resistance",fresa,fresd,effectFireRes);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectFireRes) {
fireresSwi.getParent().setBackground(themeBtnNotClicked);
fireresSwi.setText(tohtml(fireresSwi.getText(),false));} else {
fireresSwi.getParent().setBackground(themeBtnClicked);
fireresSwi.setText(tohtml(fireresSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(resicon, 0), 0, android.util.Base64.decode(resicon, 0).length)));
}var damageresSwi = new android.widget.TextView(ctx);
damageresSwi.setText("  " + "Resistance");
damageresSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
damageresSwi.getLayoutParams().width = switch_width-icon_dimensions;
damageresSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
damageresSwi.setTextColor(modTextColor);
damageresSwi.setTypeface(mcfont);damageresSwi.setGravity(Gravity.CENTER_VERTICAL);
damageresSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectDmgRes) {
Entity.addEffect(Player.getEntity(), MobEffect.damageResistance, resd, resa, false, false);
effectDmgRes = true;
savemod("Resistance");
damageresSwi.getParent().setBackground(themeBtnClicked);
damageresSwi.setText(tohtml(damageresSwi.getText(),true));
} else {
effectDmgRes = false;
removeFromArray(activeMods,"Resistance");
Entity.removeEffect(getPlayerEnt(), MobEffect.damageResistance);
damageresSwi.getParent().setBackground(themeBtnNotClicked);
damageresSwi.setText(tohtml(damageresSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(damageresSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Resistance",resa,resd,effectDmgRes);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectDmgRes) {
damageresSwi.getParent().setBackground(themeBtnNotClicked);
damageresSwi.setText(tohtml(damageresSwi.getText(),false));} else {
damageresSwi.getParent().setBackground(themeBtnClicked);
damageresSwi.setText(tohtml(damageresSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(strngthicon, 0), 0, android.util.Base64.decode(strngthicon, 0).length)));
}var strengSwi = new android.widget.TextView(ctx);
strengSwi.setText("  " + "Strength");
strengSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
strengSwi.getLayoutParams().width = switch_width-icon_dimensions;
strengSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
strengSwi.setTextColor(modTextColor);
strengSwi.setTypeface(mcfont);strengSwi.setGravity(Gravity.CENTER_VERTICAL);
strengSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectStrgth) {
Entity.addEffect(Player.getEntity(), MobEffect.damageBoost, strengthd, strengta, false, false);
effectStrgth = true;
savemod("Strength");
strengSwi.getParent().setBackground(themeBtnClicked);
strengSwi.setText(tohtml(strengSwi.getText(),true));
} else {
effectStrgth = false;
removeFromArray(activeMods,"Strength");
Entity.removeEffect(getPlayerEnt(), MobEffect.damageBoost);
strengSwi.getParent().setBackground(themeBtnNotClicked);
strengSwi.setText(tohtml(strengSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(strengSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Strength",strengta,strengthd,effectStrgth);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectStrgth) {
strengSwi.getParent().setBackground(themeBtnNotClicked);
strengSwi.setText(tohtml(strengSwi.getText(),false));} else {
strengSwi.getParent().setBackground(themeBtnClicked);
strengSwi.setText(tohtml(strengSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(slownesicon, 0), 0, android.util.Base64.decode(slownesicon, 0).length)));
}var slowSwi = new android.widget.TextView(ctx);
slowSwi.setText("  " + "Slowness");
slowSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
slowSwi.getLayoutParams().width = switch_width-icon_dimensions;
slowSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slowSwi.setTextColor(modTextColor);
slowSwi.setTypeface(mcfont);slowSwi.setGravity(Gravity.CENTER_VERTICAL);
slowSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectSlow) {
Entity.addEffect(Player.getEntity(), MobEffect.movementSlowdown, slowd, slowa, false, false);
effectSlow = true;
savemod("Slowness");
slowSwi.getParent().setBackground(themeBtnClicked);
slowSwi.setText(tohtml(slowSwi.getText(),true));
} else {
effectSlow = false;
removeFromArray(activeMods,"Slowness");
Entity.removeEffect(getPlayerEnt(), MobEffect.movementSlowdown);
slowSwi.getParent().setBackground(themeBtnNotClicked);
slowSwi.setText(tohtml(slowSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(slowSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;
editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Slowness",slowa,slowd,effectSlow);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectSlow) {
slowSwi.getParent().setBackground(themeBtnNotClicked);
slowSwi.setText(tohtml(slowSwi.getText(),false));} else {
slowSwi.getParent().setBackground(themeBtnClicked);
slowSwi.setText(tohtml(slowSwi.getText(),true));}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(swifticon, 0), 0, android.util.Base64.decode(swifticon, 0).length)));
}var swiftSwi = new android.widget.TextView(ctx);
swiftSwi.setText("  " + "Swiftness");
swiftSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
swiftSwi.getLayoutParams().width = switch_width-icon_dimensions;
swiftSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
swiftSwi.setTextColor(modTextColor);
swiftSwi.setTypeface(mcfont);swiftSwi.setGravity(Gravity.CENTER_VERTICAL);
swiftSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (!effectSwift) {
Entity.addEffect(Player.getEntity(), MobEffect.movementSpeed, swiftd, swifta, false, false);
effectSwift = true;
savemod("Swiftness");
swiftSwi.getParent().setBackground(themeBtnClicked);
swiftSwi.setText(tohtml(swiftSwi.getText(),true));
} else {
effectSwift = false;
removeFromArray(activeMods,"Swiftness");
Entity.removeEffect(getPlayerEnt(), MobEffect.movementSpeed);
swiftSwi.getParent().setBackground(themeBtnNotClicked);
swiftSwi.setText(tohtml(swiftSwi.getText(),false));
}
}else{betToast(langMsg[language]["Effects can only be applied in-game!"]);}}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(swiftSwi);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;

editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
poteditor("Swiftness",swifta,swiftd,effectSwift);
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);
if (!effectSwift) {
swiftSwi.getParent().setBackground(themeBtnNotClicked);
swiftSwi.setText(tohtml(swiftSwi.getText(),false));} else {
swiftSwi.getParent().setBackground(themeBtnClicked);
swiftSwi.setText(tohtml(swiftSwi.getText(),true));}


if(compactView){changeGUI4 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI4 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}if(animations){changeGUI4.setAnimationStyle(android.R.style.Animation_InputMethod);}

changeGUI4.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI4.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI4.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI4.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI4.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI4.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI4.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI4.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed4=true;
}
}
}))
};
/*Movement*/
function openMenu5() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(6, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Movement Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Tip: For best experience, use online with realms or servers.");
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(jetpackicon, 0), 0, android.util.Base64.decode(jetpackicon, 0).length)));
}var jetpacks = new android.widget.TextView(ctx);
jetpacks.setText("  " + "Jetpack");
jetpacks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
jetpacks.getLayoutParams().width = switch_width;
jetpacks.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
jetpacks.setTextColor(modTextColor);  
jetpacks.setTypeface(mcfont);
jetpacks.setGravity(android.view.Gravity.CENTER_VERTICAL);
jetpacks.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!jetpacked) {
jetpacked = true;
showJP();savemod("Jetpack");
if (!jetpacked) {
jetpacks.getParent().setBackground(themeBtnNotClicked);
jetpacks.setText(tohtml(jetpacks.getText(),false));
} else {
jetpacks.getParent().setBackground(themeBtnClicked);
jetpacks.setText(tohtml(jetpacks.getText(),true));
}
} else {
jetpackss = false;
GUIjp.dismiss();
removeFromArray(activeMods,"Jetpack");
jetpacked = false;
if (!jetpacked) {
jetpacks.getParent().setBackground(themeBtnNotClicked);
jetpacks.setText(tohtml(jetpacks.getText(),false));
} else {
jetpacks.getParent().setBackground(themeBtnClicked);
jetpacks.setText(tohtml(jetpacks.getText(),true));
}
};
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Fly in any direction"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(jetpacks);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!jetpacked) {
jetpacks.getParent().setBackground(themeBtnNotClicked);
jetpacks.setText(tohtml(jetpacks.getText(),false));
} else {
jetpacks.getParent().setBackground(themeBtnClicked);
jetpacks.setText(tohtml(jetpacks.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(cflyicon, 0), 0, android.util.Base64.decode(cflyicon, 0).length)));
}var sfd = new android.widget.TextView(ctx);
sfd.setText("  " + "Survival Fly");
sfd.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
sfd.getLayoutParams().width = switch_width;
sfd.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sfd.setTextColor(modTextColor); 
sfd.setTypeface(mcfont);
sfd.setGravity(android.view.Gravity.CENTER_VERTICAL);
sfd.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!sf) {
savemod("Survival Fly");
Player.setCanFly(1);
Player.isFlying(1);
sf = true;
sfs = true;
betToast(langMsg[language]["Double Tap jump"]);
if (!sfs) {
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
} else {
sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
}
} else {
Player.setCanFly(0);
sf = false;
removeFromArray(activeMods,"Survival Fly");
sfs = false;
if (!sfs) {
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
} else {
sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Fly in survival just like in creative"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(sfd);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!sfs) {
sfd.getParent().setBackground(themeBtnNotClicked);
sfd.setText(tohtml(sfd.getText(),false));
} else {
sfd.getParent().setBackground(themeBtnClicked);
sfd.setText(tohtml(sfd.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(survivalflyicon, 0), 0, android.util.Base64.decode(survivalflyicon, 0).length)));
}var elytraswitch = new android.widget.TextView(ctx);
elytraswitch.setText("  " + "Elytra");
elytraswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
elytraswitch.getLayoutParams().width = switch_width;
elytraswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
elytraswitch.setTextColor(modTextColor); 
elytraswitch.setTypeface(mcfont);
elytraswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
elytraswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!elytrad) {
elytras = true;
elytrad = true;savemod("Elytra");
if (!elytrad) {
elytraswitch.getParent().setBackground(themeBtnNotClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),false));
} else {
elytraswitch.getParent().setBackground(themeBtnClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),true));
}
} else {
elytras = false;
elytrad = false;
removeFromArray(activeMods,"Elytra");
if (!elytrad) {
elytraswitch.getParent().setBackground(themeBtnNotClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),false));
} else {
elytraswitch.getParent().setBackground(themeBtnClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),true));
}
};
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Activated only when you look up and jump"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(elytraswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!elytrad) {
elytraswitch.getParent().setBackground(themeBtnNotClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),false));
} else {
elytraswitch.getParent().setBackground(themeBtnClicked);
elytraswitch.setText(tohtml(elytraswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(survivalflyicon, 0), 0, android.util.Base64.decode(survivalflyicon, 0).length)));
}var espoof = new android.widget.TextView(ctx);
espoof.setText("  " + "Elytra Spoof");
espoof.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
espoof.getLayoutParams().width = switch_width;
espoof.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
espoof.setTextColor(modTextColor); 
espoof.setTypeface(mcfont);
espoof.setGravity(android.view.Gravity.CENTER_VERTICAL);
espoof.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!elytraspoof) {
elytraspoof = true;savemod("Elytra Spoof");
if (!elytraspoof) {
espoof.getParent().setBackground(themeBtnNotClicked);
espoof.setText(tohtml(espoof.getText(),false));
} else {
espoof.getParent().setBackground(themeBtnClicked);
espoof.setText(tohtml(espoof.getText(),true));
}
} else {
elytraspoof = false;
removeFromArray(activeMods,"Elytra Spoof");
if (!elytraspoof) {
espoof.getParent().setBackground(themeBtnNotClicked);
espoof.setText(tohtml(espoof.getText(),false));
} else {
espoof.getParent().setBackground(themeBtnClicked);
espoof.setText(tohtml(espoof.getText(),true));
}
};
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("attaches elytra automatically");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(espoof);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!elytraspoof) {
espoof.getParent().setBackground(themeBtnNotClicked);
espoof.setText(tohtml(espoof.getText(),false));
} else {
espoof.getParent().setBackground(themeBtnClicked);
espoof.setText(tohtml(espoof.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fastfallicon, 0), 0, android.util.Base64.decode(fastfallicon, 0).length)));
}var fastfallswitch = new android.widget.TextView(ctx);
fastfallswitch.setText("  " + "Fast Fall");
fastfallswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fastfallswitch.getLayoutParams().width = switch_width;
fastfallswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fastfallswitch.setTextColor(modTextColor); 
fastfallswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
fastfallswitch.setTypeface(mcfont);
fastfallswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!fastfalld) {
fastfalls = true;
fastfalld = true;savemod("Fast Fall");
if (!fastfalld) {
fastfallswitch.getParent().setBackground(themeBtnNotClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),false));
} else {
fastfallswitch.getParent().setBackground(themeBtnClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),true));
}
} else {
fastfalls = false;
removeFromArray(activeMods,"Fast Fall");
fastfalld = false;
if (!fastfalld) {
fastfallswitch.getParent().setBackground(themeBtnNotClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),false));
} else {
fastfallswitch.getParent().setBackground(themeBtnClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),true));
}
};
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Gravity is increased"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fastfallswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!fastfalld) {
fastfallswitch.getParent().setBackground(themeBtnNotClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),false));
} else {
fastfallswitch.getParent().setBackground(themeBtnClicked);
fastfallswitch.setText(tohtml(fastfallswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(elevateicon, 0), 0, android.util.Base64.decode(elevateicon, 0).length)));
}var elevs = new android.widget.TextView(ctx);
elevs.setText("  " + "Elevator");
elevs.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
elevs.getLayoutParams().width = switch_width;
elevs.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
elevs.setTextColor(modTextColor); 
elevs.setGravity(android.view.Gravity.CENTER_VERTICAL);
elevs.setTypeface(mcfont);
elevs.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!elevating) {
elevating = true;savemod("Elevator");
showElev();
elevs.getParent().setBackground(themeBtnClicked);
elevs.setText(tohtml(elevs.getText(),true));

} else {
elevating = false;
removeFromArray(activeMods,"Elevator");
GUIele.dismiss();
elevs.getParent().setBackground(themeBtnNotClicked);
elevs.setText(tohtml(elevs.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Quickly ascend/descend"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(elevs);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!elevating) {
elevs.getParent().setBackground(themeBtnNotClicked);
elevs.setText(tohtml(elevs.getText(),false));
} else {
elevs.getParent().setBackground(themeBtnClicked);
elevs.setText(tohtml(elevs.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(surfaceicon, 0), 0, android.util.Base64.decode(surfaceicon, 0).length)));
}var surS = new android.widget.TextView(ctx);
surS.setText("  " + "Surface Keybind");
surS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
surS.getLayoutParams().width = switch_width;
surS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
surS.setTextColor(modTextColor); 
surS.setGravity(android.view.Gravity.CENTER_VERTICAL);
surS.setTypeface(mcfont);
surS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!surfacing) {
surfacing = true;
showSurf();savemod("Surface KB");
surS.getParent().setBackground(themeBtnClicked);
surS.setText(tohtml(surS.getText(),true));

} else {
surfacing = false;
removeFromArray(activeMods,"Surface KB");
GUIsur.dismiss();
surS.getParent().setBackground(themeBtnNotClicked);
surS.setText(tohtml(surS.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Quickly ascend/descend to surfaces"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(surS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!surfacing) {
surS.getParent().setBackground(themeBtnNotClicked);
surS.setText(tohtml(surS.getText(),false));
} else {
surS.getParent().setBackground(themeBtnClicked);
surS.setText(tohtml(surS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(spidericon, 0), 0, android.util.Base64.decode(spidericon, 0).length)));
}var spider = new android.widget.TextView(ctx);
spider.setText("  " + "Spider");
spider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
spider.getLayoutParams().width = switch_width;
spider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
spider.setTextColor(modTextColor); 
spider.setGravity(android.view.Gravity.CENTER_VERTICAL);
spider.setTypeface(mcfont);
spider.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!spiderd) {
spiders = true;
spiderd = true;savemod("Spider");
if (!spiderd) {
spider.getParent().setBackground(themeBtnNotClicked);
spider.setText(tohtml(spider.getText(),false));
} else {
spider.getParent().setBackground(themeBtnClicked);
spider.setText(tohtml(spider.getText(),true));
}
} else {
spiders = false;
removeFromArray(activeMods,"Spider");
spiderd = false;
if (!spiderd) {
spider.getParent().setBackground(themeBtnNotClicked);
spider.setText(tohtml(spider.getText(),false));
} else {
spider.getParent().setBackground(themeBtnClicked);
spider.setText(tohtml(spider.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Climb anything"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(spider);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!spiderd) {
spider.getParent().setBackground(themeBtnNotClicked);
spider.setText(tohtml(spider.getText(),false));
} else {
spider.getParent().setBackground(themeBtnClicked);
spider.setText(tohtml(spider.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(crouchicon, 0), 0, android.util.Base64.decode(crouchicon, 0).length)));
}var crouchTpSwitch = new android.widget.TextView(ctx);
crouchTpSwitch.setText("  " + "Crouch Glide");
crouchTpSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
crouchTpSwitch.getLayoutParams().width = switch_width;
crouchTpSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
crouchTpSwitch.setTextColor(modTextColor); 
crouchTpSwitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
crouchTpSwitch.setTypeface(mcfont);
crouchTpSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!crouchtpss) {
crouchtpss = true;savemod("Crouch Glide");
if (!crouchtpss) {
crouchTpSwitch.getParent().setBackground(themeBtnNotClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),false));
} else {
crouchTpSwitch.getParent().setBackground(themeBtnClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),true));
}
} else {
crouchtpss = false;
removeFromArray(activeMods,"Crouch Glide");
if (!crouchtpss) {
crouchTpSwitch.getParent().setBackground(themeBtnNotClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),false));
} else {
crouchTpSwitch.getParent().setBackground(themeBtnClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Crouch and glide to anywhere"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(crouchTpSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!crouchtpss) {
crouchTpSwitch.getParent().setBackground(themeBtnNotClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),false));
} else {
crouchTpSwitch.getParent().setBackground(themeBtnClicked);
crouchTpSwitch.setText(tohtml(crouchTpSwitch.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(airjumpicon, 0), 0, android.util.Base64.decode(airjumpicon, 0).length)));
}var autoairjumpSwitch = new android.widget.TextView(ctx);
autoairjumpSwitch.setText("  " + "Air Jump");
autoairjumpSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
autoairjumpSwitch.getLayoutParams().width = switch_width;
autoairjumpSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
autoairjumpSwitch.setTextColor(modTextColor); 
autoairjumpSwitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
autoairjumpSwitch.setTypeface(mcfont);
autoairjumpSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!airjumps) {
airjumps = true;savemod("Air Jump");
showJumpBtn();
if (!airjumps) {
autoairjumpSwitch.getParent().setBackground(themeBtnNotClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),false));
} else {
autoairjumpSwitch.getParent().setBackground(themeBtnClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),true));
}
} else {
airjumps = false;
GUIjump.dismiss();
removeFromArray(activeMods,"Air Jump");
if (!airjumps) {
autoairjumpSwitch.getParent().setBackground(themeBtnNotClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),false));
} else {
autoairjumpSwitch.getParent().setBackground(themeBtnClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Jump in the air"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(autoairjumpSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!airjumps) {
autoairjumpSwitch.getParent().setBackground(themeBtnNotClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),false));
} else {
autoairjumpSwitch.getParent().setBackground(themeBtnClicked);
autoairjumpSwitch.setText(tohtml(autoairjumpSwitch.getText(),true));
}
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(stepicon, 0), 0, android.util.Base64.decode(stepicon, 0).length)));
}var stepSwitch = new android.widget.TextView(ctx);
stepSwitch.setText("  " + "Step");
stepSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
stepSwitch.getLayoutParams().width = switch_width;
stepSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
stepSwitch.setTextColor(modTextColor); 
stepSwitch.setTypeface(mcfont);
stepSwitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
stepSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!stepss) {
stepss = true;savemod("Step");
if (!stepss) {
stepSwitch.getParent().setBackground(themeBtnNotClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),false));
} else {
stepSwitch.getParent().setBackground(themeBtnClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),true));
}
} else {
stepss = false;
removeFromArray(activeMods,"Step");
if (!stepss) {
stepSwitch.getParent().setBackground(themeBtnNotClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),false));
} else {
stepSwitch.getParent().setBackground(themeBtnClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Step over anything, similar to Spider"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(stepSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!stepss) {
stepSwitch.getParent().setBackground(themeBtnNotClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),false));
} else {
stepSwitch.getParent().setBackground(themeBtnClicked);
stepSwitch.setText(tohtml(stepSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(camicon, 0), 0, android.util.Base64.decode(camicon, 0).length)));
}var freecamS = new android.widget.TextView(ctx);
freecamS.setText("  " + "Free Cam");
freecamS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
freecamS.getLayoutParams().width = switch_width;
freecamS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
freecamS.setTextColor(modTextColor); 
freecamS.setGravity(android.view.Gravity.CENTER_VERTICAL);
freecamS.setTypeface(mcfont);
freecamS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!freecamSon) {
freecamSon = true;
enableCam();savemod("Freecam");
freeX=Player.getX();
freeY=Player.getY();
freeZ=Player.getZ();
if(!rendering){funcS.Render.init();rendering=true}
if (!freecamSon) {
freecamS.getParent().setBackground(themeBtnNotClicked);
freecamS.setText(tohtml(freecamS.getText(),false));
} else {
freecamS.getParent().setBackground(themeBtnClicked);
freecamS.setText(tohtml(freecamS.getText(),true));
}
} else {
freecamSon = false;
disableCam();
removeFromArray(activeMods,"Freecam");
if (!freecamSon) {
freecamS.getParent().setBackground(themeBtnNotClicked);
freecamS.setText(tohtml(freecamS.getText(),false));
} else {
freecamS.getParent().setBackground(themeBtnClicked);
freecamS.setText(tohtml(freecamS.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Fly around without player moving. Permission to use by TimmYCode."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(freecamS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!freecamSon) {
freecamS.getParent().setBackground(themeBtnNotClicked);
freecamS.setText(tohtml(freecamS.getText(),false));
} else {
freecamS.getParent().setBackground(themeBtnClicked);
freecamS.setText(tohtml(freecamS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(longjumpicon, 0), 0, android.util.Base64.decode(longjumpicon, 0).length)));
}var longjumpswitch = new android.widget.TextView(ctx);
longjumpswitch.setText("  " + "Long Jump");
longjumpswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
longjumpswitch.getLayoutParams().width = switch_width;
longjumpswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
longjumpswitch.setTextColor(modTextColor); 
longjumpswitch.setTypeface(mcfont);
longjumpswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
longjumpswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!longjumpd) {
longjumps = true;savemod("Long Jump");
longjumpd = true;
if (!longjumpd) {
longjumpswitch.getParent().setBackground(themeBtnNotClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),false));
} else {
longjumpswitch.getParent().setBackground(themeBtnClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),true));
}
} else {
longjumps = false;
removeFromArray(activeMods,"Long Jump");
longjumpd = false;
if (!longjumpd) {
longjumpswitch.getParent().setBackground(themeBtnNotClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),false));
} else {
longjumpswitch.getParent().setBackground(themeBtnClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Jump far"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(longjumpswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!longjumpd) {
longjumpswitch.getParent().setBackground(themeBtnNotClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),false));
} else {
longjumpswitch.getParent().setBackground(themeBtnClicked);
longjumpswitch.setText(tohtml(longjumpswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(jumprunicon, 0), 0, android.util.Base64.decode(jumprunicon, 0).length)));
}var jumpsprintswitch = new android.widget.TextView(ctx);
jumpsprintswitch.setText("  " + "B-Hop");
jumpsprintswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
jumpsprintswitch.getLayoutParams().width = switch_width;
jumpsprintswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
jumpsprintswitch.setTextColor(modTextColor); 
jumpsprintswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
jumpsprintswitch.setTypeface(mcfont);
jumpsprintswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!jumpsprintd) {
jumpsprints = true;
jumpsprintd = true;savemod("B-Hop");
if (!jumpsprintd) {
jumpsprintswitch.getParent().setBackground(themeBtnNotClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),false));
} else {
jumpsprintswitch.getParent().setBackground(themeBtnClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),true));
}
} else {
jumpsprints = false;
removeFromArray(activeMods,"B-Hop");
jumpsprintd = false;
if (!jumpsprintd) {
jumpsprintswitch.getParent().setBackground(themeBtnNotClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),false));
} else {
jumpsprintswitch.getParent().setBackground(themeBtnClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sprint and jumping at the same time"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(jumpsprintswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!jumpsprintd) {
jumpsprintswitch.getParent().setBackground(themeBtnNotClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),false));
} else {
jumpsprintswitch.getParent().setBackground(themeBtnClicked);
jumpsprintswitch.setText(tohtml(jumpsprintswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(boosticon, 0), 0, android.util.Base64.decode(boosticon, 0).length)));
}var booKbS = new android.widget.TextView(ctx);
booKbS.setText("  " + "Boost KB");
booKbS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
booKbS.getLayoutParams().width = switch_width;
booKbS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
booKbS.setTextColor(modTextColor); 
booKbS.setGravity(android.view.Gravity.CENTER_VERTICAL);
booKbS.setTypeface(mcfont);
booKbS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!boostKBBo) {
boostKBBo=true;
showBoost();savemod("Boost KB");
if (!boostKBBo) {
booKbS.getParent().setBackground(themeBtnNotClicked);
booKbS.setText(tohtml(booKbS.getText(),false));
} else {
booKbS.getParent().setBackground(themeBtnClicked);
booKbS.setText(tohtml(booKbS.getText(),true));
}
} else {
boostKBBo = false;
removeFromArray(activeMods,"Boost KB");
GUIboost.dismiss();
if (!boostKBBo) {
booKbS.getParent().setBackground(themeBtnNotClicked);
booKbS.setText(tohtml(booKbS.getText(),false));
} else {
booKbS.getParent().setBackground(themeBtnClicked);
booKbS.setText(tohtml(booKbS.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Boost forward"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(booKbS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!boostKBBo) {
booKbS.getParent().setBackground(themeBtnNotClicked);
booKbS.setText(tohtml(booKbS.getText(),false));
} else {
booKbS.getParent().setBackground(themeBtnClicked);
booKbS.setText(tohtml(booKbS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(mgcicon, 0), 0, android.util.Base64.decode(mgcicon, 0).length)));
}var mgcS = new android.widget.TextView(ctx);
mgcS.setText("  " + "Magic Carpet");
mgcS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
mgcS.getLayoutParams().width = switch_width;
mgcS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
mgcS.setTextColor(modTextColor); 
mgcS.setTypeface(mcfont);
mgcS.setGravity(android.view.Gravity.CENTER_VERTICAL);
mgcS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!magiccarpetParent) {
magiccarpetParent = true;
magiccarpets=true;savemod("Magic Carpet");
showMGCBtn();
if (!magiccarpetParent) {
mgcS.getParent().setBackground(themeBtnNotClicked);
mgcS.setText(tohtml(mgcS.getText(),false));
} else {
mgcS.getParent().setBackground(themeBtnClicked);
mgcS.setText(tohtml(mgcS.getText(),true));
}
} else {
magiccarpetParent = false;
removeFromArray(activeMods,"Magic Carpet");
GUImgc.dismiss();magiccarpets=false;
if (!magiccarpetParent) {
mgcS.getParent().setBackground(themeBtnNotClicked);
mgcS.setText(tohtml(mgcS.getText(),false));
} else {
mgcS.getParent().setBackground(themeBtnClicked);
mgcS.setText(tohtml(mgcS.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Walk around on a carpet"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(mgcS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!magiccarpetParent) {
mgcS.getParent().setBackground(themeBtnNotClicked);
mgcS.setText(tohtml(mgcS.getText(),false));
} else {
mgcS.getParent().setBackground(themeBtnClicked);
mgcS.setText(tohtml(mgcS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(autobridgeicon, 0), 0, android.util.Base64.decode(autobridgeicon, 0).length)));
}var autoBridges = new android.widget.TextView(ctx);
autoBridges.setText("  " + "Scaffold");
autoBridges.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
autoBridges.getLayoutParams().width = switch_width;
autoBridges.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
autoBridges.setTextColor(modTextColor); 
autoBridges.setGravity(android.view.Gravity.CENTER_VERTICAL);
autoBridges.setTypeface(mcfont);
autoBridges.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!autoBridged) {
autoBridgess = true;
autoBridged = true;savemod("Scaffold");
showScafBtn();
if (!autoBridged) {
autoBridges.getParent().setBackground(themeBtnNotClicked);
autoBridges.setText(tohtml(autoBridges.getText(),false));
} else {
autoBridges.getParent().setBackground(themeBtnClicked);
autoBridges.setText(tohtml(autoBridges.getText(),true));
}
} else {
autoBridgess = false;
autoBridged = false;
GUIscaf.dismiss();
removeFromArray(activeMods,"Scaffold");
if (!autoBridged) {
autoBridges.getParent().setBackground(themeBtnNotClicked);
autoBridges.setText(tohtml(autoBridges.getText(),false));
} else {
autoBridges.getParent().setBackground(themeBtnClicked);
autoBridges.setText(tohtml(autoBridges.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Builds a bridge underneath you."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(autoBridges);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!autoBridged) {
autoBridges.getParent().setBackground(themeBtnNotClicked);
autoBridges.setText(tohtml(autoBridges.getText(),false));
} else {
autoBridges.getParent().setBackground(themeBtnClicked);
autoBridges.setText(tohtml(autoBridges.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(autobridgeicon, 0), 0, android.util.Base64.decode(autobridgeicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText(' Scaffold ID');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
bridgePopup();savemod("Scaffold ID");
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Change Auto Bridge block"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bridgeicon, 0), 0, android.util.Base64.decode(bridgeicon, 0).length)));
}var fastbridgesw = new android.widget.TextView(ctx);
fastbridgesw.setText("  " + "Quick Bridge");
fastbridgesw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fastbridgesw.getLayoutParams().width = switch_width;
fastbridgesw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fastbridgesw.setTextColor(modTextColor); 
fastbridgesw.setTypeface(mcfont);
fastbridgesw.setGravity(android.view.Gravity.CENTER_VERTICAL);
fastbridgesw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!fastbridger) {
fastbridger = true;savemod("Quick Bridge");
if (!fastbridger) {
fastbridgesw.getParent().setBackground(themeBtnNotClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),false));
} else {
fastbridgesw.getParent().setBackground(themeBtnClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),true));
}
} else {
fastbridger = false;
removeFromArray(activeMods,"Quick Bridge");
if (!fastbridger) {
fastbridgesw.getParent().setBackground(themeBtnNotClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),false));
} else {
fastbridgesw.getParent().setBackground(themeBtnClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Quickly build bridges or pillars."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fastbridgesw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!fastbridger) {
fastbridgesw.getParent().setBackground(themeBtnNotClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),false));
} else {
fastbridgesw.getParent().setBackground(themeBtnClicked);
fastbridgesw.setText(tohtml(fastbridgesw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(jesusicon, 0), 0, android.util.Base64.decode(jesusicon, 0).length)));
}var jesus = new android.widget.TextView(ctx);
jesus.setText("  " + "Jesus");
jesus.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
jesus.getLayoutParams().width = switch_width;
jesus.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
jesus.setTextColor(modTextColor); 
jesus.setGravity(android.view.Gravity.CENTER_VERTICAL);
jesus.setTypeface(mcfont);
jesus.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!jesused) {
jesuss = true;
jesused = true;savemod("Jesus");
if (!jesused) {
jesus.getParent().setBackground(themeBtnNotClicked);
jesus.setText(tohtml(jesus.getText(),false));
} else {
jesus.getParent().setBackground(themeBtnClicked);
jesus.setText(tohtml(jesus.getText(),true));
}
} else {
jesuss = false;
removeFromArray(activeMods,"Jesus");
jesused = false;
if (!jesused) {
jesus.getParent().setBackground(themeBtnNotClicked);
jesus.setText(tohtml(jesus.getText(),false));
} else {
jesus.getParent().setBackground(themeBtnClicked);
jesus.setText(tohtml(jesus.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Walk on water"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(jesus);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!jesused) {
jesus.getParent().setBackground(themeBtnNotClicked);
jesus.setText(tohtml(jesus.getText(),false));
} else {
jesus.getParent().setBackground(themeBtnClicked);
jesus.setText(tohtml(jesus.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(smoothjesusicon, 0), 0, android.util.Base64.decode(smoothjesusicon, 0).length)));
}var smoothjesus = new android.widget.TextView(ctx);
smoothjesus.setText("  " + "Smooth Jesus");
smoothjesus.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
smoothjesus.getLayoutParams().width = switch_width;
smoothjesus.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
smoothjesus.setTextColor(modTextColor); 
smoothjesus.setGravity(android.view.Gravity.CENTER_VERTICAL);
smoothjesus.setTypeface(mcfont);
smoothjesus.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!smoothjesusd) {
smoothjesuss = true;savemod("Smooth Jesus");
smoothjesusd = true;
smoothjesus.getParent().setBackground(themeBtnClicked);
smoothjesus.setText(tohtml(smoothjesus.getText(),true));
} else {
smoothjesuss = false;
removeFromArray(activeMods,"Smooth Jesus");
smoothjesusd = false;
smoothjesus.getParent().setBackground(themeBtnNotClicked);
smoothjesus.setText(tohtml(smoothjesus.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Walk on water smoother, sometimes hard to exit water unlike other Jesus hack"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(smoothjesus);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!smoothjesusd) {
smoothjesus.getParent().setBackground(themeBtnNotClicked);
smoothjesus.setText(tohtml(smoothjesus.getText(),false));
} else {
smoothjesus.getParent().setBackground(themeBtnClicked);
smoothjesus.setText(tohtml(smoothjesus.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(jetskiicon, 0), 0, android.util.Base64.decode(jetskiicon, 0).length)));
}var jetskisswitch = new android.widget.TextView(ctx);
jetskisswitch.setText("  " + "Jet Ski");
jetskisswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
jetskisswitch.getLayoutParams().width = switch_width;
jetskisswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
jetskisswitch.setTextColor(modTextColor); 
jetskisswitch.setTypeface(mcfont);
jetskisswitch.setTextSize(switchfontsize);
jetskisswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!jetskisd) {
jetskiss = true;
jetskisd = true;savemod("Jet Ski");
if (!jetskisd) {
jetskisswitch.getParent().setBackground(themeBtnNotClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),false));
} else {
jetskisswitch.getParent().setBackground(themeBtnClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),true));
}
} else {
jetskiss = false;
removeFromArray(activeMods,"Jet Ski");
jetskisd = false;
if (!jetskisd) {
jetskisswitch.getParent().setBackground(themeBtnNotClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),false));
} else {
jetskisswitch.getParent().setBackground(themeBtnClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Walk on water and go fast"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(jetskisswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!jetskisd) {
jetskisswitch.getParent().setBackground(themeBtnNotClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),false));
} else {
jetskisswitch.getParent().setBackground(themeBtnClicked);
jetskisswitch.setText(tohtml(jetskisswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(portalicon, 0), 0, android.util.Base64.decode(portalicon, 0).length)));
}var taptpswitch = new android.widget.TextView(ctx);
taptpswitch.setText("  " + "Tap TP");
taptpswitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
taptpswitch.getLayoutParams().width = switch_width;
taptpswitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
taptpswitch.setTextColor(modTextColor); 
taptpswitch.setGravity(android.view.Gravity.CENTER_VERTICAL);
taptpswitch.setTypeface(mcfont);
taptpswitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!taptpswitchd) {
taptpswitchs = true;
taptpswitchd = true;savemod("Tap TP");
if (!taptpswitchd) {
taptpswitch.getParent().setBackground(themeBtnNotClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),false));
} else {
taptpswitch.getParent().setBackground(themeBtnClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),true));
}
} else {
taptpswitchs = false;
removeFromArray(activeMods,"Tap TP");
taptpswitchd = false;
if (!taptpswitchd) {
taptpswitch.getParent().setBackground(themeBtnNotClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),false));
} else {
taptpswitch.getParent().setBackground(themeBtnClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleport anywhere you look"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(taptpswitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!taptpswitchd) {
taptpswitch.getParent().setBackground(themeBtnNotClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),false));
} else {
taptpswitch.getParent().setBackground(themeBtnClicked);
taptpswitch.setText(tohtml(taptpswitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(booticon, 0), 0, android.util.Base64.decode(booticon, 0).length)));
}var potion = new android.widget.TextView(ctx);
potion.setText("  " + "No Fall Damage");
potion.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
potion.getLayoutParams().width = switch_width;
potion.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
potion.setTextColor(modTextColor); 
potion.setTypeface(mcfont);
potion.setGravity(android.view.Gravity.CENTER_VERTICAL);
potion.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!potioned) {
potions = true;
potioned = true;savemod("No Fall Damage");
if (!potioned) {
potion.getParent().setBackground(themeBtnNotClicked);
potion.setText(tohtml(potion.getText(),false));
} else {
potion.getParent().setBackground(themeBtnClicked);
potion.setText(tohtml(potion.getText(),true));
}
} else {
potions = false;
removeFromArray(activeMods,"No Fall Damage");
potioned = false;
if (!potioned) {
potion.getParent().setBackground(themeBtnNotClicked);
potion.setText(tohtml(potion.getText(),false));
} else {
potion.getParent().setBackground(themeBtnClicked);
potion.setText(tohtml(potion.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Can't take fall damage"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(potion);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!potioned) {
potion.getParent().setBackground(themeBtnNotClicked);
potion.setText(tohtml(potion.getText(),false));
} else {
potion.getParent().setBackground(themeBtnClicked);
potion.setText(tohtml(potion.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(phaseicon, 0), 0, android.util.Base64.decode(phaseicon, 0).length)));
}var phaseBlock = new android.widget.TextView(ctx);
phaseBlock.setText("  " + "Phase");
phaseBlock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
phaseBlock.getLayoutParams().width = switch_width;
phaseBlock.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
phaseBlock.setTextColor(modTextColor); 
phaseBlock.setTypeface(mcfont);
phaseBlock.setGravity(android.view.Gravity.CENTER_VERTICAL);
phaseBlock.setTextSize(switchfontsize);
phaseBlock.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!phaseBlocksd) {
phaseBlockss = true;
phaseBlocksd = true;savemod("Phase");
if (!phaseBlocksd) {
phaseBlock.getParent().setBackground(themeBtnNotClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),false));
} else {
phaseBlock.getParent().setBackground(themeBtnClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),true));
}
} else {
phaseBlockss = false;
phaseBlocksd = false;
removeFromArray(activeMods,"Phase");
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
if (!phaseBlocksd) {
phaseBlock.getParent().setBackground(themeBtnNotClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),false));
} else {
phaseBlock.getParent().setBackground(themeBtnClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Crouch and glide through any block"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(phaseBlock);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!phaseBlocksd) {
phaseBlock.getParent().setBackground(themeBtnNotClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),false));
} else {
phaseBlock.getParent().setBackground(themeBtnClicked);
phaseBlock.setText(tohtml(phaseBlock.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(clipicon, 0), 0, android.util.Base64.decode(clipicon, 0).length)));
}var clipBlock = new android.widget.TextView(ctx);
clipBlock.setText("  " + "Noclip");
clipBlock.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
clipBlock.getLayoutParams().width = switch_width;
clipBlock.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
clipBlock.setTextColor(modTextColor); 
clipBlock.setTypeface(mcfont);
clipBlock.setGravity(android.view.Gravity.CENTER_VERTICAL);
clipBlock.setTextSize(switchfontsize);
clipBlock.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!clipsBls) {
clipsBls = true;
showNoclip();savemod("Noclip");
if (!clipsBls) {
clipBlock.getParent().setBackground(themeBtnNotClicked);
clipBlock.setText(tohtml(clipBlock.getText(),false));
} else {
clipBlock.getParent().setBackground(themeBtnClicked);
clipBlock.setText(tohtml(clipBlock.getText(),true));
}
} else {
clipsBls = false;
clipBtn = false;
GUIclip.dismiss();
removeFromArray(activeMods,"Noclip");
Entity.setCollisionSize(Player.getEntity(), 0.6, 1.8);
if (!clipsBls) {
clipBlock.getParent().setBackground(themeBtnNotClicked);
clipBlock.setText(tohtml(clipBlock.getText(),false));
} else {
clipBlock.getParent().setBackground(themeBtnClicked);
clipBlock.setText(tohtml(clipBlock.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Go through any block"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(clipBlock);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!clipsBls) {
clipBlock.getParent().setBackground(themeBtnNotClicked);
clipBlock.setText(tohtml(clipBlock.getText(),false));
} else {
clipBlock.getParent().setBackground(themeBtnClicked);
clipBlock.setText(tohtml(clipBlock.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(clipicon, 0), 0, android.util.Base64.decode(clipicon, 0).length)));
}var clip2 = new android.widget.TextView(ctx);
clip2.setText("  " + "NoClip w/o blocks");
clip2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
clip2.getLayoutParams().width = switch_width;
clip2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
clip2.setTextColor(modTextColor); 
clip2.setTypeface(mcfont);
clip2.setTextSize(switchfontsize);
clip2.setGravity(android.view.Gravity.CENTER_VERTICAL);
clip2.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!noclip2s) {
noclip2s = true;
enableClip();savemod("Noclip w/o Blocks");
Player.setFlying(true);
alertPopup("XRAY","Disable and reenable SMOOTH LIGHTING in settings","OKAY");
if (!noclip2s) {
clip2.getParent().setBackground(themeBtnNotClicked);
clip2.setText(tohtml(clip2.getText(),false));
} else {
clip2.getParent().setBackground(themeBtnClicked);
clip2.setText(tohtml(clip2.getText(),true));
}
} else {
noclip2s = false;
removeFromArray(activeMods,"Noclip w/o Blocks");
disableClip();
alertPopup("XRAY","Disable and reenable SMOOTH LIGHTING in settings","OKAY");
if (!noclip2s) {
clip2.getParent().setBackground(themeBtnNotClicked);
clip2.setText(tohtml(clip2.getText(),false));
} else {
clip2.getParent().setBackground(themeBtnClicked);
clip2.setText(tohtml(clip2.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Go through blocks - Much more dangerous than the original NoClip"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(clip2);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!noclip2s) {
clip2.getParent().setBackground(themeBtnNotClicked);
clip2.setText(tohtml(clip2.getText(),false));
} else {
clip2.getParent().setBackground(themeBtnClicked);
clip2.setText(tohtml(clip2.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(laddericon, 0), 0, android.util.Base64.decode(laddericon, 0).length)));
}var betterlad = new android.widget.TextView(ctx);
betterlad.setText("  " + "Fast Ladders");
betterlad.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
betterlad.getLayoutParams().width = switch_width;
betterlad.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
betterlad.setTextColor(modTextColor);
betterlad.setTypeface(mcfont);
betterlad.setTextSize(switchfontsize);
betterlad.getBackground().setAlpha(130);
betterlad.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!betterladsd) {
betterladss = true;
betterladsd = true;savemod("Fast Ladders");
if (!betterladsd) {
betterlad.getParent().setBackground(themeBtnNotClicked);
betterlad.setText(tohtml(betterlad.getText(),false));
} else {
betterlad.getParent().setBackground(themeBtnClicked);
betterlad.setText(tohtml(betterlad.getText(),true));
}
} else {
betterladss = false;
removeFromArray(activeMods,"Fast Ladders");
betterladsd = false;
if (!betterladsd) {
betterlad.getParent().setBackground(themeBtnNotClicked);
betterlad.setText(tohtml(betterlad.getText(),false));
} else {
betterlad.getParent().setBackground(themeBtnClicked);
betterlad.setText(tohtml(betterlad.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Climb ladders super fast"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(betterlad);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!betterladsd) {
betterlad.getParent().setBackground(themeBtnNotClicked);
betterlad.setText(tohtml(betterlad.getText(),false));
} else {
betterlad.getParent().setBackground(themeBtnClicked);
betterlad.setText(tohtml(betterlad.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(paintingicon, 0), 0, android.util.Base64.decode(paintingicon, 0).length)));
}var achnksw = new android.widget.TextView(ctx);
achnksw.setText("  " + "AntiCrashChunk");
achnksw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
achnksw.getLayoutParams().width = switch_width;
achnksw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
achnksw.setTextColor(modTextColor); 
achnksw.setTypeface(mcfont);
achnksw.setTextSize(switchfontsize);
achnksw.setGravity(android.view.Gravity.CENTER_VERTICAL);
achnksw.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!acrashchnks) {
acrashchnks = true;
savemod("Anti Crash Chunk");
achnksw.getParent().setBackground(themeBtnClicked);
achnksw.setText(tohtml(achnksw.getText(),true));
} else {
acrashchnks = false;
removeFromArray(activeMods,"Anti Crash Chunk");
achnksw.getParent().setBackground(themeBtnNotClicked);
achnksw.setText(tohtml(achnksw.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enable before entering a world with crash chunks to be teleported away instead of crashing");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(achnksw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!acrashchnks) {
achnksw.getParent().setBackground(themeBtnNotClicked);
achnksw.setText(tohtml(achnksw.getText(),false));
} else {
achnksw.getParent().setBackground(themeBtnClicked);
achnksw.setText(tohtml(achnksw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(leadicon, 0), 0, android.util.Base64.decode(leadicon, 0).length)));
}var pfSw = new android.widget.TextView(ctx);
pfSw.setText("  " + "Player Follower");
pfSw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
pfSw.getLayoutParams().width = switch_width;
pfSw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
pfSw.setTextColor(modTextColor); 
pfSw.setGravity(android.view.Gravity.CENTER_VERTICAL);
pfSw.setTypeface(mcfont);
pfSw.setTextSize(switchfontsize);
pfSw.getBackground().setAlpha(130);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!pfsd) {
pfss = true;savemod("Player Follower");
pfsd = true;
pfSw.getParent().setBackground(themeBtnClicked);
pfSw.setText(tohtml(pfSw.getText(),true));
} else {
pfss = false;
removeFromArray(activeMods,"Player Follower");
pfsd = false;
pfSw.getParent().setBackground(themeBtnNotClicked);
pfSw.setText(tohtml(pfSw.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets your coordinates 150 blocks above the nearest player, they can't see you from below."]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(pfSw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!pfsd) {
pfSw.getParent().setBackground(themeBtnNotClicked);
pfSw.setText(tohtml(pfSw.getText(),false));
} else {
pfSw.getParent().setBackground(themeBtnClicked);
pfSw.setText(tohtml(pfSw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(leadicon, 0), 0, android.util.Base64.decode(leadicon, 0).length)));
}var disseek = new android.widget.SeekBar(ctx);
disseek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
disseek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
disseek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
disseek.getLayoutParams().width = switch_width;
disseek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
disseek.setMax(220);
disseek.getBackground().setAlpha(255);
disseek.setProgress(dispro);
disseek.setBackground(xbgGS);
disseek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {dispro = disseek.getProgress();
betToast("Distance: " + dispro);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts range to follow people vertically");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(disseek);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(launchicon, 0), 0, android.util.Base64.decode(launchicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Launch");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Launch");
setVelY(Player.getEntity(), 8)
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Launches you into the sky"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(reviveicon, 0), 0, android.util.Base64.decode(reviveicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  TP to Deathpoint");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("TP to Deathpoint");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if(deathX!=0&deathY!=0&deathZ!=0){
setPosition(getPlayerEnt(), deathX, deathY + 0.3, deathZ);}else{betToast(langMsg[language]["You haven't died yet!"])}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Teleports to where you died");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(teleporticon, 0), 0, android.util.Base64.decode(teleporticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  TP to Nearest");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("TP to Nearest");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
var ent = getNearestEntity(1000);
if(Entity.getX(ent)!=0&Entity.getY(ent)!=-2&Entity.getZ(ent)!=-1){
setPosition(getPlayerEnt(), Entity.getX(ent), Entity.getY(ent) + 0.3, Entity.getZ(ent) - 0.2);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports to the nearest person within range"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(teleporticon, 0), 0, android.util.Base64.decode(teleporticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Player Teleports");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Player Teleports");
openTeleportList();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleports to the nearest person within range"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(teleporticon, 0), 0, android.util.Base64.decode(teleporticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Teleport");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Teleport");
closeEverything();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
teleportation();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Teleport anywhere"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(gamespeedicon, 0), 0, android.util.Base64.decode(gamespeedicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Default Gamespeed");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
gamespeedset = 20;
savemod("Default Gamespeed");
ModPE.setGameSpeed(gamespeedset);
betToast(langMsg[language]["Speed: Default"]);
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Resets gamespeed");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(gamespeedicon, 0), 0, android.util.Base64.decode(gamespeedicon, 0).length)));
}var gamespeed = new android.widget.SeekBar(ctx);
gamespeed.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
gamespeed.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
gamespeed.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
gamespeed.getLayoutParams().width = switch_width;
gamespeed.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
gamespeed.setMax(120);
gamespeed.getBackground().setAlpha(130);
gamespeed.setProgress(gamespeedset);
gamespeed.setBackground(xbgGS);
gamespeed.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
gamespeedset = gamespeed.getProgress();
ModPE.setGameSpeed(gamespeedset);
betToast(langMsg[language]["Speed: "] + gamespeedset);
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts gamespeed to move fast");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(gamespeed);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var addX = false;
var addZ = false;
var subtractX = false;
var subtractZ = false;
var way = "x+";
var thous = 1000;
var currentX = 0;
var currentZ = 0;
var goalX = 0;
var goalZ = 0;
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Quick TP"]);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextSize(titleSize);
button.setBackground(title);
button.setTextColor(modTextColor);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var hitboxbox = new android.widget.LinearLayout(activity);
hitboxbox.setBackground(themeBtnNotClicked);
hitboxbox.setOrientation(1);
var button = new android.widget.Button(ctx);
button.setText("X: +1k");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = list_width / tpQuickwidth;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(qpof);
button.getBackground().setAlpha(70);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())+1000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("+10k");
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = list_width / tpQuickwidth;
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setTextSize(btntextsize);
button2.setBackground(qpof);
button2.getBackground().setAlpha(70);
button2.setTypeface(mcfont);
button2.setTextSize(switchfontsize);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())+10000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));
var button3 = new android.widget.Button(ctx);
button3.setText("+100k");
button3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button3.getLayoutParams().width = list_width / tpQuickwidth;
button3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button3.setTextColor(modTextColor);
button3.setTextSize(btntextsize);
button3.setBackground(qpof);
button3.getBackground().setAlpha(70);
button3.setTypeface(mcfont);
button3.setTextSize(switchfontsize);
button3.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())+100000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));

slayout1.addView(button);
slayout1.addView(button2);
slayout1.addView(button3);
hitboxbox.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var button = new android.widget.Button(ctx);
button.setText("X: -1k");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = list_width / tpQuickwidth;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(qpof);
button.getBackground().setAlpha(70);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())-1000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("-10k");
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = list_width / tpQuickwidth;
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setTextSize(btntextsize);
button2.setBackground(qpof);
button2.getBackground().setAlpha(70);
button2.setTypeface(mcfont);
button2.setTextSize(switchfontsize);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())-10000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));
var button3 = new android.widget.Button(ctx);
button3.setText("-100k");
button3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button3.getLayoutParams().width = list_width / tpQuickwidth;
button3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button3.setTextColor(modTextColor);
button3.setTextSize(btntextsize);
button3.setBackground(qpof);
button3.getBackground().setAlpha(70);
button3.setTypeface(mcfont);
button3.setTextSize(switchfontsize);
button3.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt())-100000, Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt()));
}
}));

slayout1.addView(button);
slayout1.addView(button2);
slayout1.addView(button3);
hitboxbox.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var button = new android.widget.Button(ctx);
button.setText("Z: +1k");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = list_width / tpQuickwidth;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(qpof);
button.getBackground().setAlpha(70);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())+1000);
}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("+10k");
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = list_width / tpQuickwidth;
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setTextSize(btntextsize);
button2.setBackground(qpof);
button2.getBackground().setAlpha(70);
button2.setTypeface(mcfont);
button2.setTextSize(switchfontsize);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())+10000);
}
}));
var button3 = new android.widget.Button(ctx);
button3.setText("+100k");
button3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button3.getLayoutParams().width = list_width / tpQuickwidth;
button3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button3.setTextColor(modTextColor);
button3.setTextSize(btntextsize);
button3.setBackground(qpof);
button3.getBackground().setAlpha(70);
button3.setTypeface(mcfont);
button3.setTextSize(switchfontsize);
button3.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())+100000);
}
}));

slayout1.addView(button);
slayout1.addView(button2);
slayout1.addView(button3);
hitboxbox.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var button = new android.widget.Button(ctx);
button.setText("Z: -1k");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().width = list_width / tpQuickwidth;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(qpof);
button.getBackground().setAlpha(70);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())-1000);
}
}));
var button2 = new android.widget.Button(ctx);
button2.setText("-10k");
button2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button2.getLayoutParams().width = list_width / tpQuickwidth;
button2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button2.setTextColor(modTextColor);
button2.setTextSize(btntextsize);
button2.setBackground(qpof);
button2.getBackground().setAlpha(70);
button2.setTypeface(mcfont);
button2.setTextSize(switchfontsize);
button2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())-10000);
}
}));
var button3 = new android.widget.Button(ctx);
button3.setText("-100k");
button3.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button3.getLayoutParams().width = list_width / tpQuickwidth;
button3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button3.setTextColor(modTextColor);
button3.setTextSize(btntextsize);
button3.setBackground(qpof);
button3.getBackground().setAlpha(70);
button3.setTypeface(mcfont);
button3.setTextSize(switchfontsize);
button3.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPosition(getPlayerEnt(), Entity.getX(getPlayerEnt()), Entity.getY(getPlayerEnt()), Entity.getZ(getPlayerEnt())-100000);
}
}));

slayout1.addView(button);
slayout1.addView(button2);
slayout1.addView(button3);
hitboxbox.addView(slayout1);
menuLayoutw.addView(hitboxbox);


if(compactView){changeGUI5 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI5 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}if(animations){changeGUI5.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI5.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI5.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI5.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI5.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI5.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI5.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI5.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI5.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed5=true;
}
}
}))
};
/*Misc*/
function openMenu6() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Misc Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
button.setBackground(title);
menuLayoutw.addView(button);

function showStopRideBtn() {
if(!stoprideshowing){
stoprideshowing=true;
let moving7 = false;
let dx7 = 0;
let dy7 = 0;
let mPosX7 = 100;
let mPosY7 = 0;
ctx.runOnUiThread(new Runnable({
run: function() {
try {
var layout = new LinearLayout(ctx);

layout.setOrientation(1);
var button = new Button(ctx);
button.setText("Go Back");
button.setTextSize(13);
button.setTextColor(modTextColor);
button.setBackground(of);
/*  button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(scope, 0) , 0, android.util.Base64.decode(scope, 0).length)));
button.setBackground(of);*/

button.getBackground().setAlpha(130);
button.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg){
ModPE.setCamera(getPlayerEnt());
taptoseed = false;
GUIri.dismiss();
stoprideshowing=false;
}
}));
button.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function () {
ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
.vibrate(60);
moving7 = true;
return true;
}
}));
button.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function (view, motionEvent) {
try {
if(!moving7) return false;
switch(motionEvent.getAction()) {
case android.view.MotionEvent.ACTION_DOWN:
dx7 = mPosX7 - motionEvent.getRawX();
dy7 = mPosY7 - motionEvent.getRawY();
break;
case android.view.MotionEvent.ACTION_MOVE:
mPosX7 = (motionEvent.getRawX() + dx7);
mPosY7 = (motionEvent.getRawY() + dy7);
GUIri.update(mPosX7, mPosY7, -1, -1);
break;
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
moving7 = false;
break;
}
} catch(e) {
}
return true;
}
}));

layout.addView(button);

GUIri = new PopupWindow(layout, RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
GUIri.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIri.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, 0, 470);

} catch (err) {
Toast.makeText(ctx, "An error occured: " + err+' #' + err['lineNumber'], 1).show();
}
}
}))
}
};
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(spamicon, 0), 0, android.util.Base64.decode(spamicon, 0).length)));
}var safe = new android.widget.TextView(ctx);
safe.setText("  " + "Spam");
safe.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
safe.getLayoutParams().width = switch_width;
safe.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
safe.setTextColor(modTextColor);
safe.setGravity(Gravity.CENTER_VERTICAL);
safe.setTypeface(mcfont);
safe.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!safed) {
safes = true;
safed = true;savemod("Spam");
if (!safed) {
safe.getParent().setBackground(themeBtnNotClicked);
safe.setText(tohtml(safe.getText(),false));
} else {
safe.getParent().setBackground(themeBtnClicked);
safe.setText(tohtml(safe.getText(),true));
}
} else {
safes = false;
removeFromArray(activeMods,"Spam");
safed = false;
if (!safed) {
safe.getParent().setBackground(themeBtnNotClicked);
safe.setText(tohtml(safe.getText(),false));
} else {
safe.getParent().setBackground(themeBtnClicked);
safe.setText(tohtml(safe.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sends hundreds of messages to the server at once"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(safe);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!safed) {
safe.getParent().setBackground(themeBtnNotClicked);
safe.setText(tohtml(safe.getText(),false));
} else {
safe.getParent().setBackground(themeBtnClicked);
safe.setText(tohtml(safe.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(spamicon, 0), 0, android.util.Base64.decode(spamicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Custom Spam');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
spamPopup();savemod("Custom Spam");
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Edit message to spam"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(spamicon, 0), 0, android.util.Base64.decode(spamicon, 0).length)));
}var antispS = new android.widget.TextView(ctx);
antispS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
antispS.getLayoutParams().width = switch_width;
antispS.setText("  " + "Anti Spam");
antispS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
antispS.setTextColor(modTextColor);
antispS.setGravity(Gravity.CENTER_VERTICAL);
antispS.setTypeface(mcfont);
antispS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!antispammer) {
antispammer = true;savemod("Anti Spam");
antispS.getParent().setBackground(themeBtnClicked);
antispS.setText(tohtml(antispS.getText(),true));
} else {
antispammer = false;
removeFromArray(activeMods,"Anti Spam");
antispS.getParent().setBackground(themeBtnNotClicked);
antispS.setText(tohtml(antispS.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Prevents spam/duplicated messages from being shown"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(antispS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!antispammer) {
antispS.getParent().setBackground(themeBtnNotClicked);
antispS.setText(tohtml(antispS.getText(),false));
} else {
antispS.getParent().setBackground(themeBtnClicked);
antispS.setText(tohtml(antispS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(worldicon, 0), 0, android.util.Base64.decode(worldicon, 0).length)));
}var ctla = new android.widget.TextView(ctx);
ctla.setText("  " + "Chat Translator");
ctla.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
ctla.getLayoutParams().width = switch_width-icon_dimensions;
ctla.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
ctla.setTextColor(modTextColor);
ctla.setTypeface(mcfont);
ctla.setTextSize(switchfontsize);
ctla.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!chatTranslator) {
chatTranslator=true;openTranslator();savemod("Chat Translator");
if (!chatTranslator) {
ctla.getParent().setBackground(themeBtnNotClicked);
ctla.setText(tohtml(ctla.getText(),false));
} else {
ctla.getParent().setBackground(themeBtnClicked);
ctla.setText(tohtml(ctla.getText(),true));
}
} else {
ctx.runOnUiThread(
new java.lang.Runnable(
{
run:function(){
try{
removeFromArray(activeMods,"Chat Translator");
chatTranslator=false;translateWindow.dismiss();
}
catch(err){}}}));
if (!chatTranslator) {
ctla.getParent().setBackground(themeBtnNotClicked);
ctla.setText(tohtml(ctla.getText(),false));
} else {
ctla.getParent().setBackground(themeBtnClicked);
ctla.setText(tohtml(ctla.getText(),true));
}
}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(ctla);
var editPot = new android.widget.ImageView(ctx);
editPot.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
editPot.getLayoutParams().width = icon_dimensions;
editPot.getLayoutParams().height = icon_dimensions;

editPot.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(wrenchicon, 0), 0, android.util.Base64.decode(wrenchicon, 0).length)));
editPot.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
chatlangedit();
}
}));
slayout1.addView(editPot);
menuLayoutw.addView(slayout1);if (!chatTranslator) {
ctla.getParent().setBackground(themeBtnNotClicked);
ctla.setText(tohtml(ctla.getText(),false));
} else {
ctla.getParent().setBackground(themeBtnClicked);
ctla.setText(tohtml(ctla.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(ironicon, 0), 0, android.util.Base64.decode(ironicon, 0).length)));
}var fiSw = new android.widget.TextView(ctx);
fiSw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
fiSw.getLayoutParams().width = switch_width;
fiSw.setText("  " + "Foil Items");
fiSw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
fiSw.setTextColor(modTextColor);
fiSw.setTypeface(mcfont);
fiSw.setGravity(Gravity.CENTER_VERTICAL);
fiSw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!foilits) {
foilits = true;savemod("Foil Items");
foilitems();
if(fasteatd){enableEat();}else{disableEat();}
fiSw.getParent().setBackground(themeBtnClicked);
fiSw.setText(tohtml(fiSw.getText(),true));
} else {
foilits = false;
unfoilitems();
removeFromArray(activeMods,"Foil Items");
if(fasteatd){enableEat();}else{disableEat();}
fiSw.getParent().setBackground(themeBtnNotClicked);
fiSw.setText(tohtml(fiSw.getText(),false));
}

}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Makes items look enchanted");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(fiSw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!foilits) {
fiSw.getParent().setBackground(themeBtnNotClicked);
fiSw.setText(tohtml(fiSw.getText(),false));
} else {
fiSw.getParent().setBackground(themeBtnClicked);
fiSw.setText(tohtml(fiSw.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(stackicon, 0), 0, android.util.Base64.decode(stackicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Stackable Items');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
stackitems();savemod("Stackable Items");
alertPopup("Warning!","Some stacked items can disappear upon relogging","Okay");
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Makes items like swords stackable");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(cringeicon, 0), 0, android.util.Base64.decode(cringeicon, 0).length)));
}var codetalker = new android.widget.TextView(ctx);
codetalker.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
codetalker.getLayoutParams().width = switch_width;
codetalker.setText("  " + "Tricky Chat");
codetalker.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
codetalker.setTextColor(modTextColor);
codetalker.setTypeface(mcfont);
codetalker.setGravity(Gravity.CENTER_VERTICAL);
codetalker.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!codetalkered&&!instinctChat) {
codetalkers = true;savemod("Tricky Chat");
codetalkered = true;
if (!codetalkered) {
codetalker.getParent().setBackground(themeBtnNotClicked);
codetalker.setText(tohtml(codetalker.getText(),false));
} else {
codetalker.getParent().setBackground(themeBtnClicked);
codetalker.setText(tohtml(codetalker.getText(),true));
}
} else {
codetalkers = false;
removeFromArray(activeMods,"Tricky Chat");
codetalkered = false;
if (!codetalkered) {
codetalker.getParent().setBackground(themeBtnNotClicked);
codetalker.setText(tohtml(codetalker.getText(),false));
} else {
codetalker.getParent().setBackground(themeBtnClicked);
codetalker.setText(tohtml(codetalker.getText(),true));
}
}
if(instinctChat){
betToast(langMsg[language]["Disable Medium Encryption first"]);
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Makes messages trickier to read, but still readable"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(codetalker);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!codetalkered) {
codetalker.getParent().setBackground(themeBtnNotClicked);
codetalker.setText(tohtml(codetalker.getText(),false));
} else {
codetalker.getParent().setBackground(themeBtnClicked);
codetalker.setText(tohtml(codetalker.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(encrypticon, 0), 0, android.util.Base64.decode(encrypticon, 0).length)));
}var instincsW = new android.widget.TextView(ctx);
instincsW.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
instincsW.getLayoutParams().width = switch_width;
instincsW.setText("  " + "Encrypt Chat");
instincsW.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
instincsW.setTextColor(modTextColor);
instincsW.setTypeface(mcfont);
instincsW.setGravity(Gravity.CENTER_VERTICAL);
instincsW.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!instinctChat&&!codetalkered) {
instinctChat = true;
instincsW.getParent().setBackground(themeBtnClicked);
instincsW.setText(tohtml(instincsW.getText(),true));
savemod("Chat Encryption");
} else {
instinctChat = false;
removeFromArray(activeMods,"Chat Encryption");
instincsW.getParent().setBackground(themeBtnNotClicked);
instincsW.setText(tohtml(instincsW.getText(),false));
}
if(codetalkered){
betToast(langMsg[language]["Disable Lite Encryption first"]);
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Only people using Instinct can read your messages"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(instincsW);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!instinctChat) {
instincsW.getParent().setBackground(themeBtnNotClicked);
instincsW.setText(tohtml(instincsW.getText(),false));
} else {
instincsW.getParent().setBackground(themeBtnClicked);
instincsW.setText(tohtml(instincsW.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hideicon, 0), 0, android.util.Base64.decode(hideicon, 0).length)));
}var hidmes = new android.widget.TextView(ctx);
hidmes.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hidmes.getLayoutParams().width = switch_width;
hidmes.setText("  " + "Hide Menu");
hidmes.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hidmes.setTextColor(modTextColor);
hidmes.setGravity(Gravity.CENTER_VERTICAL);
hidmes.setTypeface(mcfont);
hidmes.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!hiddenMenu) {
hiddenMenu = true;savemod("Hide Menu");
GUI.dismiss();
betToast("Crouch and select first hotbar slot to open menu");
betToast("Crouch and select first hotbar slot to open menu");
if (!hiddenMenu) {
hidmes.getParent().setBackground(themeBtnNotClicked);
hidmes.setText(tohtml(hidmes.getText(),false));
} else {
hidmes.getParent().setBackground(themeBtnClicked);
hidmes.setText(tohtml(hidmes.getText(),true));
}
} else {
hiddenMenu = false;
showMenuBtn();
if (!hiddenMenu) {
hidmes.getParent().setBackground(themeBtnNotClicked);
hidmes.setText(tohtml(hidmes.getText(),false));
} else {
hidmes.getParent().setBackground(themeBtnClicked);
hidmes.setText(tohtml(hidmes.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Crouch and select first hotbar slot to open menu"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hidmes);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!hiddenMenu) {
hidmes.getParent().setBackground(themeBtnNotClicked);
hidmes.setText(tohtml(hidmes.getText(),false));
} else {
hidmes.getParent().setBackground(themeBtnClicked);
hidmes.setText(tohtml(hidmes.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(mobheadicon, 0), 0, android.util.Base64.decode(mobheadicon, 0).length)));
}var noffsw = new android.widget.TextView(ctx);
noffsw.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
noffsw.getLayoutParams().width = switch_width;
noffsw.setText("  " + "No Offhand");
noffsw.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
noffsw.setTextColor(modTextColor);
noffsw.setGravity(Gravity.CENTER_VERTICAL);
noffsw.setTypeface(mcfont);
noffsw.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!nOffs) {
nOffs = true;savemod("No Offhand");
noffsw.getParent().setBackground(themeBtnClicked);
noffsw.setText(tohtml(noffsw.getText(),true));
} else {
nOffs = false;
removeFromArray(activeMods,"No Offhand");
noffsw.getParent().setBackground(themeBtnNotClicked);
noffsw.setText(tohtml(noffsw.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enable before entering world where you crash from having a player head in the offhand. Doesn't work for single player worlds");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(noffsw);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!nOffs) {
noffsw.getParent().setBackground(themeBtnNotClicked);
noffsw.setText(tohtml(noffsw.getText(),false));
} else {
noffsw.getParent().setBackground(themeBtnClicked);
noffsw.setText(tohtml(noffsw.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(enchanticon, 0), 0, android.util.Base64.decode(enchanticon, 0).length)));
}var spaenc = new android.widget.TextView(ctx);
spaenc.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
spaenc.getLayoutParams().width = switch_width;
spaenc.setText("  " + "32k Spam");
spaenc.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
spaenc.setTextColor(modTextColor);
spaenc.setGravity(Gravity.CENTER_VERTICAL);
spaenc.setTypeface(mcfont);
spaenc.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!spam2) {
spam2 = true;savemod("32k Spammer");
spaenc.getParent().setBackground(themeBtnClicked);
spaenc.setText(tohtml(spaenc.getText(),true));
} else {
spam2 = false;
removeFromArray(activeMods,"32k Spammer");
spaenc.getParent().setBackground(themeBtnNotClicked);
spaenc.setText(tohtml(spaenc.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Enable before entering world where you crash from having a player head in the offhand. Doesn't work for single player worlds");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(spaenc);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!spam2) {
spaenc.getParent().setBackground(themeBtnNotClicked);
spaenc.setText(tohtml(spaenc.getText(),false));
} else {
spaenc.getParent().setBackground(themeBtnClicked);
spaenc.setText(tohtml(spaenc.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(afkicon, 0), 0, android.util.Base64.decode(afkicon, 0).length)));
}var afks = new android.widget.TextView(ctx);
afks.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
afks.getLayoutParams().width = switch_width;
afks.setText("  " + "AFK");
afks.setTextColor(modTextColor);
afks.setTypeface(mcfont);
afks.setGravity(Gravity.CENTER_VERTICAL);
afks.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!afked) {
afkss = true;
ctx.getWindow().addFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
afked = true;savemod("AFK");
if (!afked) {
afks.getParent().setBackground(themeBtnNotClicked);
afks.setText(tohtml(afks.getText(),false));
} else {
afks.getParent().setBackground(themeBtnClicked);
afks.setText(tohtml(afks.getText(),true));
}
} else {
afkss = false;
ctx.getWindow().clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
afked = false;
removeFromArray(activeMods,"AFK");
if (!afked) {
afks.getParent().setBackground(themeBtnNotClicked);
afks.setText(tohtml(afks.getText(),false));
} else {
afks.getParent().setBackground(themeBtnClicked);
afks.setText(tohtml(afks.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Never get booted for AFK'ing"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(afks);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!afked) {
afks.getParent().setBackground(themeBtnNotClicked);
afks.setText(tohtml(afks.getText(),false));
} else {
afks.getParent().setBackground(themeBtnClicked);
afks.setText(tohtml(afks.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bedrockicon, 0), 0, android.util.Base64.decode(bedrockicon, 0).length)));
}var bedrockswit = new android.widget.TextView(ctx);
bedrockswit.setText("  " + "Break Bedrock");
bedrockswit.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
bedrockswit.getLayoutParams().width = switch_width;
bedrockswit.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
bedrockswit.setTextColor(modTextColor);
bedrockswit.setTypeface(mcfont); 
bedrockswit.setGravity(Gravity.CENTER_VERTICAL);
bedrockswit.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!bedrocke) {
bedrocke = true;savemod("Break Bedrock");
if (!bedrocke) {
bedrockswit.getParent().setBackground(themeBtnNotClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),false));
} else {
bedrockswit.getParent().setBackground(themeBtnClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),true));
}
} else {
bedrocke = false;
removeFromArray(activeMods,"Break Bedrock");
Block.setDestroyTime(7, -10);
Block.setDestroyTime(137, -10);
Block.setDestroyTime(188, -10);
Block.setDestroyTime(189, -10);
Block.setDestroyTime(209, -10);
Block.setDestroyTime(90, -10);
Block.setDestroyTime(119, -10);
Block.setDestroyTime(120, -10);
Block.setDestroyTime(-161, -10);
if (!bedrocke) {
bedrockswit.getParent().setBackground(themeBtnNotClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),false));
} else {
bedrockswit.getParent().setBackground(themeBtnClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Can break bedrock"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(bedrockswit);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!bedrocke) {
bedrockswit.getParent().setBackground(themeBtnNotClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),false));
} else {
bedrockswit.getParent().setBackground(themeBtnClicked);
bedrockswit.setText(tohtml(bedrockswit.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newhasteicon, 0), 0, android.util.Base64.decode(newhasteicon, 0).length)));
}var hastbs = new android.widget.TextView(ctx);
hastbs.setText("  " + "Haste Bypass");
hastbs.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hastbs.getLayoutParams().width = switch_width;
hastbs.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hastbs.setTextColor(modTextColor); 
hastbs.setGravity(Gravity.CENTER_VERTICAL);
hastbs.setTypeface(mcfont);
hastbs.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!hbS) {
hbS = true;
hasteBypass();
hastbs.getParent().setBackground(themeBtnClicked);
hastbs.setText(tohtml(hastbs.getText(),true));
savemod("Haste Bypass");
} else {
hbS = false;
resetHaste();
removeFromArray(activeMods,"Haste Bypass");
hastbs.getParent().setBackground(themeBtnNotClicked);
hastbs.setText(tohtml(hastbs.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets break time to .1, mine most blocks quickly"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hastbs);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!hbS) {
hastbs.getParent().setBackground(themeBtnNotClicked);
hastbs.setText(tohtml(hastbs.getText(),false));
} else {
hastbs.getParent().setBackground(themeBtnClicked);
hastbs.setText(tohtml(hastbs.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(swifticon, 0), 0, android.util.Base64.decode(swifticon, 0).length)));
}var sppedS = new android.widget.TextView(ctx);
sppedS.setText("  " + "Speed Bypass");
sppedS.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
sppedS.getLayoutParams().width = switch_width;
sppedS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
sppedS.setTextColor(modTextColor); 
sppedS.setTypeface(mcfont);
sppedS.setGravity(Gravity.CENTER_VERTICAL);
sppedS.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!sbS) {
sbS = true;
speedBypass();
sppedS.getParent().setBackground(themeBtnClicked);
sppedS.setText(tohtml(sppedS.getText(),true));
savemod("Speed Bypass");
} else {
sbS = false;
resetSpeed();
removeFromArray(activeMods,"Speed Bypass");
sppedS.getParent().setBackground(themeBtnNotClicked);
sppedS.setText(tohtml(sppedS.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets friction to .1"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(sppedS);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!sbS) {
sppedS.getParent().setBackground(themeBtnNotClicked);
sppedS.setText(tohtml(sppedS.getText(),false));
} else {
sppedS.getParent().setBackground(themeBtnClicked);
sppedS.setText(tohtml(sppedS.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newnightvisionicon, 0), 0, android.util.Base64.decode(newnightvisionicon, 0).length)));
}var nvBs = new android.widget.TextView(ctx);
nvBs.setText("  " + "Night Vision Bypass");
nvBs.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
nvBs.getLayoutParams().width = switch_width;
nvBs.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
nvBs.setTextColor(modTextColor); 
nvBs.setGravity(Gravity.CENTER_VERTICAL);
nvBs.setTypeface(mcfont);
nvBs.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!nvS) {
nvS = true;
nightVisionBypass();
nvBs.getParent().setBackground(themeBtnClicked);
nvBs.setText(tohtml(nvBs.getText(),true));
savemod("Night Vision Bypass");
} else {
nvS = false;
resetNV();
removeFromArray(activeMods,"Night Vision Bypass");
nvBs.getParent().setBackground(themeBtnNotClicked);
nvBs.setText(tohtml(nvBs.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Makes all blocks bright"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(nvBs);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!nvS) {
nvBs.getParent().setBackground(themeBtnNotClicked);
nvBs.setText(tohtml(nvBs.getText(),false));
} else {
nvBs.getParent().setBackground(themeBtnClicked);
nvBs.setText(tohtml(nvBs.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(buffzom, 0), 0, android.util.Base64.decode(buffzom, 0).length)));
}var zomSwi = new android.widget.TextView(ctx);
zomSwi.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
zomSwi.getLayoutParams().width = switch_width;
zomSwi.setText("  " + "Zombie Mode");
zomSwi.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
zomSwi.setTextColor(modTextColor); 
zomSwi.setGravity(Gravity.CENTER_VERTICAL);
zomSwi.setTypeface(mcfont);
zomSwi.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!zomS) {
if(Server.getAddress()!=null){
zomS = true;
savemod("Zombie Mode");
openOverlayBlood();
zomSwi.getParent().setBackground(themeBtnClicked);
zomSwi.setText(tohtml(zomSwi.getText(),true));
betToast("Walk around whilst dead, can't do anything but drop items around players, no breaking or hitting. Works only for realms");
}else{betToast("Only works on realms!");}
} else if(zomS){
zomS = false;
overlayBlood.dismiss();
removeFromArray(activeMods,"Zombie Mode");
zomSwi.getParent().setBackground(themeBtnNotClicked);
zomSwi.setText(tohtml(zomSwi.getText(),false));
Player.setHealth(0);
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Walk around whilst dead, can't do anything but drop items around players, no breaking or hitting. Works only for realms");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(zomSwi);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!zomS) {
zomSwi.getParent().setBackground(themeBtnNotClicked);
zomSwi.setText(tohtml(zomSwi.getText(),false));
} else {
zomSwi.getParent().setBackground(themeBtnClicked);
zomSwi.setText(tohtml(zomSwi.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(nearesticon, 0), 0, android.util.Base64.decode(nearesticon, 0).length)));
}var radius = new android.widget.TextView(ctx);
radius.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
radius.getLayoutParams().width = switch_width;
radius.setText("  " + "Nearest Player");
radius.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
radius.setTextColor(modTextColor);
radius.setGravity(Gravity.CENTER_VERTICAL); 
radius.setTypeface(mcfont);
radius.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!radiused) {
radiuss = true;
radiused = true;
savemod("Nearest Player");
if (!radiused) {
radius.getParent().setBackground(themeBtnNotClicked);
radius.setText(tohtml(radius.getText(),false));
} else {
radius.getParent().setBackground(themeBtnClicked);
radius.setText(tohtml(radius.getText(),true));
}
} else {
radiuss = false;
removeFromArray(activeMods,"Nearest Player");
radiused = false;
if (!radiused) {
radius.getParent().setBackground(themeBtnNotClicked);
radius.setText(tohtml(radius.getText(),false));
} else {
radius.getParent().setBackground(themeBtnClicked);
radius.setText(tohtml(radius.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows who the nearest player is"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(radius);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!radiused) {
radius.getParent().setBackground(themeBtnNotClicked);
radius.setText(tohtml(radius.getText(),false));
} else {
radius.getParent().setBackground(themeBtnClicked);
radius.setText(tohtml(radius.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(colorchaticon, 0), 0, android.util.Base64.decode(colorchaticon, 0).length)));
}var colormychat = new android.widget.TextView(ctx);
colormychat.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
colormychat.getLayoutParams().width = switch_width;
colormychat.setText("  " + "Color Chat");
colormychat.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
colormychat.setTextColor(modTextColor); 
colormychat.setTypeface(mcfont);
colormychat.setGravity(Gravity.CENTER_VERTICAL);
colormychat.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!colormychatd) {
colormychatss = true;
colormychatd = true;
chatcolor = "§b";
savemod("Color Chat");
if (colorPicker == false) {
openColorSelect();
colorPicker = true;
}
if (!colormychatd) {
colormychat.getParent().setBackground(themeBtnNotClicked);
colormychat.setText(tohtml(colormychat.getText(),false));
} else {
colormychat.getParent().setBackground(themeBtnClicked);
colormychat.setText(tohtml(colormychat.getText(),true));
}
} else if (colormychatd == true) {
colormychatss = false;
colormychatd = false;
GUIs.dismiss;
removeFromArray(activeMods,"Color Chat");
closeColor();
colorPicker = false;
if (!colormychatd) {
colormychat.getParent().setBackground(themeBtnNotClicked);
colormychat.setText(tohtml(colormychat.getText(),false));
} else {
colormychat.getParent().setBackground(themeBtnClicked);
colormychat.setText(tohtml(colormychat.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Colors your messages"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(colormychat);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!colormychatd) {
colormychat.getParent().setBackground(themeBtnNotClicked);
colormychat.setText(tohtml(colormychat.getText(),false));
} else {
colormychat.getParent().setBackground(themeBtnClicked);
colormychat.setText(tohtml(colormychat.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(particleIcon, 0), 0, android.util.Base64.decode(particleIcon, 0).length)));
}var partSwit = new android.widget.TextView(ctx);
partSwit.setText("  " + "Hit Particles");
partSwit.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
partSwit.getLayoutParams().width = switch_width;
partSwit.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
partSwit.setTextColor(modTextColor); 
partSwit.setGravity(Gravity.CENTER_VERTICAL);
partSwit.setTypeface(mcfont);
partSwit.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!tapPart) {
tapPart = true;
savemod("Hit Particles");
if (!tapPart) {
partSwit.getParent().setBackground(themeBtnNotClicked);
partSwit.setText(tohtml(partSwit.getText(),false));
} else {
partSwit.getParent().setBackground(themeBtnClicked);
partSwit.setText(tohtml(partSwit.getText(),true));
}
} else {
tapPart = false;
removeFromArray(activeMods,"Hit Particles");
if (!tapPart) {
partSwit.getParent().setBackground(themeBtnNotClicked);
partSwit.setText(tohtml(partSwit.getText(),false));
} else {
partSwit.getParent().setBackground(themeBtnClicked);
partSwit.setText(tohtml(partSwit.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Particle effects when someone is hit"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(partSwit);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!tapPart) {
partSwit.getParent().setBackground(themeBtnNotClicked);
partSwit.setText(tohtml(partSwit.getText(),false));
} else {
partSwit.getParent().setBackground(themeBtnClicked);
partSwit.setText(tohtml(partSwit.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(hudicon, 0), 0, android.util.Base64.decode(hudicon, 0).length)));
}var hudSwitch = new android.widget.TextView(ctx);
hudSwitch.setText("  " + "Data");
hudSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
hudSwitch.getLayoutParams().width = switch_width;
hudSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
hudSwitch.setTextColor(modTextColor); 
hudSwitch.setGravity(Gravity.CENTER_VERTICAL);
hudSwitch.setTypeface(mcfont);
hudSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!hudd) {
huds = true;
hudd = true;
savemod("Data");
if (!hudd) {
hudSwitch.getParent().setBackground(themeBtnNotClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),false));
} else {
hudSwitch.getParent().setBackground(themeBtnClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),true));
}
} else {
huds = false;
hudd = false;
removeFromArray(activeMods,"Data");
if (!hudd) {
hudSwitch.getParent().setBackground(themeBtnNotClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),false));
} else {
hudSwitch.getParent().setBackground(themeBtnClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Valuable information on your screen, like block ID's"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(hudSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!hudd) {
hudSwitch.getParent().setBackground(themeBtnNotClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),false));
} else {
hudSwitch.getParent().setBackground(themeBtnClicked);
hudSwitch.setText(tohtml(hudSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(saddleicon, 0), 0, android.util.Base64.decode(saddleicon, 0).length)));
}var tapRiderSwitch = new android.widget.TextView(ctx);
tapRiderSwitch.setText("  " + "Tap Ride");
tapRiderSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
tapRiderSwitch.getLayoutParams().width = switch_width;
tapRiderSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
tapRiderSwitch.setTextColor(modTextColor); 
tapRiderSwitch.setTypeface(mcfont);
tapRiderSwitch.setGravity(Gravity.CENTER_VERTICAL);
tapRiderSwitch.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!tapRiderd) {
tapRider = true;savemod("Tap Ride");
tapRiderd = true;
if (!tapRiderd) {
tapRiderSwitch.getParent().setBackground(themeBtnNotClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),false));
} else {
tapRiderSwitch.getParent().setBackground(themeBtnClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),true));
}
} else {
tapRider = false;
removeFromArray(activeMods,"Tap Ride");
tapRiderd = false;
if (!tapRiderd) {
tapRiderSwitch.getParent().setBackground(themeBtnNotClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),false));
} else {
tapRiderSwitch.getParent().setBackground(themeBtnClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Ride anything you touch"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(tapRiderSwitch);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!tapRiderd) {
tapRiderSwitch.getParent().setBackground(themeBtnNotClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),false));
} else {
tapRiderSwitch.getParent().setBackground(themeBtnClicked);
tapRiderSwitch.setText(tohtml(tapRiderSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(saddleicon, 0), 0, android.util.Base64.decode(saddleicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Ride Nearest");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Ride Nearest");
rideAnimal(getPlayerEnt(), getNearestPlayer(90));
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Ride the nearest player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondchest, 0), 0, android.util.Base64.decode(diamondchest, 0).length)));
}var chestesp = new android.widget.TextView(ctx);
chestesp.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chestesp.getLayoutParams().width = switch_width;
chestesp.setText("  " + "Block ESP");
chestesp.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
chestesp.setTextColor(modTextColor); 
chestesp.setGravity(Gravity.CENTER_VERTICAL);
chestesp.setTypeface(mcfont);
chestesp.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
espBlocks.length = 0;
checkX = ["."];
checkZ = ["."];
if (!blockEspTracer) {
blockEspTracer = true;
espOnBsave=true;savemod("Block ESP");
createBlockPool();
cpuClock();
poolc = java.util.concurrent.Executors.newScheduledThreadPool(1);
poolc.setKeepAliveTime(1, java.util.concurrent.TimeUnit.MILLISECONDS);
poolc.allowCoreThreadTimeOut(false);
poolc.setCorePoolSize(3);
if(!rendering){funcS.Render.init();rendering=true}
if (!blockEspTracer) {
chestesp.getParent().setBackground(themeBtnNotClicked);
chestesp.setText(tohtml(chestesp.getText(),false));
} else {
chestesp.getParent().setBackground(themeBtnClicked);
chestesp.setText(tohtml(chestesp.getText(),true));
}
} else {
blockEspTracer = false;
espOnBsave=false;
removeFromArray(activeMods,"Block ESP");
if (!blockEspTracer) {
chestesp.getParent().setBackground(themeBtnNotClicked);
chestesp.setText(tohtml(chestesp.getText(),false));
} else {
chestesp.getParent().setBackground(themeBtnClicked);
chestesp.setText(tohtml(chestesp.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(chestesp);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!blockEspTracer) {
chestesp.getParent().setBackground(themeBtnNotClicked);
chestesp.setText(tohtml(chestesp.getText(),false));
} else {
chestesp.getParent().setBackground(themeBtnClicked);
chestesp.setText(tohtml(chestesp.getText(),true));
}var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondchest, 0), 0, android.util.Base64.decode(diamondchest, 0).length)));
}var chestesptra = new android.widget.TextView(ctx);
chestesptra.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chestesptra.getLayoutParams().width = switch_width;
chestesptra.setText("  " + "Block ESP Tracers");
chestesptra.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
chestesptra.setTextColor(modTextColor); 
chestesptra.setGravity(Gravity.CENTER_VERTICAL);
chestesptra.setTypeface(mcfont);
chestesptra.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!blockesptracers) {
blockesptracers = true;
savemod("Block ESP Tracers");
if (!blockesptracers) {
chestesptra.getParent().setBackground(themeBtnNotClicked);
chestesptra.setText(tohtml(chestesptra.getText(),false));
} else {
chestesptra.getParent().setBackground(themeBtnClicked);
chestesptra.setText(tohtml(chestesptra.getText(),true));
}
} else {
blockesptracers = false;
removeFromArray(activeMods,"Block ESP Tracers");
if (!blockesptracers) {
chestesptra.getParent().setBackground(themeBtnNotClicked);
chestesptra.setText(tohtml(chestesptra.getText(),false));
} else {
chestesptra.getParent().setBackground(themeBtnClicked);
chestesptra.setText(tohtml(chestesptra.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows where blocks are, ESP for blocks. Change ID to find blocks other than Chests"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(chestesptra);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!blockesptracers) {
chestesptra.getParent().setBackground(themeBtnNotClicked);
chestesptra.setText(tohtml(chestesptra.getText(),false));
} else {
chestesptra.getParent().setBackground(themeBtnClicked);
chestesptra.setText(tohtml(chestesptra.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(diamondchest, 0), 0, android.util.Base64.decode(diamondchest, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Change ESP ID');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
espPopup();
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Change what block to show on ESP"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(debugicon, 0), 0, android.util.Base64.decode(debugicon, 0).length)));
}var debugUic = new android.widget.TextView(ctx);
debugUic.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
debugUic.getLayoutParams().width = switch_width;
debugUic.setText("  " + "Debug Ui");
debugUic.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
debugUic.setTextColor(modTextColor); 
debugUic.setGravity(Gravity.CENTER_VERTICAL);
debugUic.setTypeface(mcfont);
debugUic.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!debugUicd) {
debugUicd = true;savemod("Debug UI");
ModPE.setUiRenderDebug(true);
if (!debugUicd) {
debugUic.getParent().setBackground(themeBtnNotClicked);
debugUic.setText(tohtml(debugUic.getText(),false));
} else {
debugUic.getParent().setBackground(themeBtnClicked);
debugUic.setText(tohtml(debugUic.getText(),true));
}
} else {
debugUicd = false;
ModPE.setUiRenderDebug(false);
removeFromArray(activeMods,"Debug UI");
if (!debugUicd) {
debugUic.getParent().setBackground(themeBtnNotClicked);
debugUic.setText(tohtml(debugUic.getText(),false));
} else {
debugUic.getParent().setBackground(themeBtnClicked);
debugUic.setText(tohtml(debugUic.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows ui elements"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(debugUic);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!debugUicd) {
debugUic.getParent().setBackground(themeBtnNotClicked);
debugUic.setText(tohtml(debugUic.getText(),false));
} else {
debugUic.getParent().setBackground(themeBtnClicked);
debugUic.setText(tohtml(debugUic.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chlogicon, 0), 0, android.util.Base64.decode(chlogicon, 0).length)));
}var chatlink = new android.widget.TextView(ctx);
chatlink.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chatlink.getLayoutParams().width = switch_width;
chatlink.setText("  " + "Open Chat Links");
chatlink.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
chatlink.setTextColor(modTextColor); 
chatlink.setGravity(Gravity.CENTER_VERTICAL);
chatlink.setTypeface(mcfont);
chatlink.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!chatlinks) {
chatlinks = true;savemod("Chat Links");
chatlink.getParent().setBackground(themeBtnClicked);
chatlink.setText(tohtml(chatlink.getText(),true));
} else {
chatlinks = false;
removeFromArray(activeMods,"Chat Links");
chatlink.getParent().setBackground(themeBtnNotClicked);
chatlink.setText(tohtml(chatlink.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Open links received in chat in a popup window"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(chatlink);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!chatlinks) {
chatlink.getParent().setBackground(themeBtnNotClicked);
chatlink.setText(tohtml(chatlink.getText(),false));
} else {
chatlink.getParent().setBackground(themeBtnClicked);
chatlink.setText(tohtml(chatlink.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chlogicon, 0), 0, android.util.Base64.decode(chlogicon, 0).length)));
}var chlogs = new android.widget.TextView(ctx);
chlogs.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
chlogs.getLayoutParams().width = switch_width;
chlogs.setText("  " + "Chat Log");
chlogs.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
chlogs.setTextColor(modTextColor); 
chlogs.setGravity(Gravity.CENTER_VERTICAL);
chlogs.setTypeface(mcfont);
chlogs.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!chlog) {
chlog = true;savemod("Chat Log");
chlogs.getParent().setBackground(themeBtnClicked);
chlogs.setText(tohtml(chlogs.getText(),true));
} else {
chlog = false;
removeFromArray(activeMods,"Chat Log");
chlogs.getParent().setBackground(themeBtnNotClicked);
chlogs.setText(tohtml(chlogs.getText(),false));
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Chat log is always logging chat"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(chlogs);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!chlog) {
chlogs.getParent().setBackground(themeBtnNotClicked);
chlogs.setText(tohtml(chlogs.getText(),false));
} else {
chlogs.getParent().setBackground(themeBtnClicked);
chlogs.setText(tohtml(chlogs.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chlogicon, 0), 0, android.util.Base64.decode(chlogicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Open Log");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {savemod("Open Log");
betToast("Please Wait, Loading...");
loadLog();
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setMessage(chatLogtxt);
var dialog = alert.create();
dialog.show();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(chlogicon, 0), 0, android.util.Base64.decode(chlogicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Delete Log");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Delete Log");
deleteLog();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(taptoseeicon, 0), 0, android.util.Base64.decode(taptoseeicon, 0).length)));
}var taptosee = new android.widget.TextView(ctx);
taptosee.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
taptosee.getLayoutParams().width = switch_width;
taptosee.setText("  " + "Victim-Eyes");
taptosee.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
taptosee.setTextColor(modTextColor); 
taptosee.setTypeface(mcfont);
taptosee.setGravity(Gravity.CENTER_VERTICAL);
taptosee.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if (!taptoseed) {
taptoseed = true;
showStopRideBtn();savemod("Victim Eyes");
if (!taptoseed) {
taptosee.getParent().setBackground(themeBtnNotClicked);
taptosee.setText(tohtml(taptosee.getText(),false));
} else {
taptosee.getParent().setBackground(themeBtnClicked);
taptosee.setText(tohtml(taptosee.getText(),true));
}
} else {
taptoseed = false;
removeFromArray(activeMods,"Victim Eyes");
GUIri.dismiss();
if (!taptoseed) {
taptosee.getParent().setBackground(themeBtnNotClicked);
taptosee.setText(tohtml(taptosee.getText(),false));
} else {
taptosee.getParent().setBackground(themeBtnClicked);
taptosee.setText(tohtml(taptosee.getText(),true));
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Sets camera to the eyes of the victim, crashes if the victim moves too far from the player"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(taptosee);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);if (!taptoseed) {
taptosee.getParent().setBackground(themeBtnNotClicked);
taptosee.setText(tohtml(taptosee.getText(),false));
} else {
taptosee.getParent().setBackground(themeBtnClicked);
taptosee.setText(tohtml(taptosee.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(taptoseeicon, 0), 0, android.util.Base64.decode(taptoseeicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Spy Cam");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
ModPE.setCamera(getNearestPlayer(900));
try{Entity.setRenderType(getNearestPlayer(900), EntityRenderType.pig);}catch(e){betToast(e)}
preventDefault();
showStopRideBtn();savemod("Spy Cam");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["See what the nearest person sees"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(serversicon, 0), 0, android.util.Base64.decode(serversicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Servers');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Servers");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (serverSelect) {
GUIse.dismiss();
serverSelect = false;
}
if (!serverSelect) {
openServerSelect();
serverSelect = true
}
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["List of servers to join"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
//menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(ipicon, 0), 0, android.util.Base64.decode(ipicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  IP Address');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("IP Address");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
betToast(Server.getAddress()+" : "+Server.getPort(),"IP/Port: ");
betToast(Server.getAddress()+" : "+Server.getPort(),"IP/Port ");
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Shows the server's IP address"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(sneakchaticon, 0), 0, android.util.Base64.decode(sneakchaticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText('  Sneak Chat');
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setTextSize(btntextsize);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setGravity(android.view.Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
chatPopup();savemod("Sneak Chat");
closeEverything();
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Chat while crouching"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if(compactView){changeGUI6 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI6 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}if(animations){changeGUI6.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI6.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI6.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI6.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI6.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI6.getBackground().setAlpha(themeAlpha);

if(allRight){
changeGUI6.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI6.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI6.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed6=true;
}
}
}))
};
/*settings*/
function openMenu8() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var settingNotClickedH = new android.graphics.drawable.GradientDrawable();
settingNotClickedH.setColor(themeBackground);
settingNotClickedH.setStroke(0, themeStroke);
settingNotClickedH.setCornerRadius(0);
settingNotClickedH.setAlpha(255);
var settingClickedH = new android.graphics.drawable.GradientDrawable();
settingClickedH.setColor(themeBackground);
settingClickedH.setStroke(2, Color.parseColor("#21ff00"));
settingClickedH.setCornerRadius(0);
settingClickedH.setAlpha(255);
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(6, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Settings"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
menuLayoutw.addView(button);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(removeicon, 0), 0, android.util.Base64.decode(removeicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Wipe Data");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
function confirmDataDelete() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
addWBtn.setText("Delete");
addWBtn.setTypeface(mcfont);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
addWDialog.setTitle("Delete All Data");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
deleteData();
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmDataDelete();savemod("Wipe Data");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(worldicon, 0), 0, android.util.Base64.decode(worldicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Language");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
showLangList();savemod("Language");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(scripticon, 0), 0, android.util.Base64.decode(scripticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Custom Script");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL);
button.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
try{runScript();savemod("Custom Script");}catch(e){betToast(e+e.lineNumber)}
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(logicon, 0), 0, android.util.Base64.decode(logicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Changelog");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setTitle("Instinct Update Changelog");
alert.setMessage("\nVersion: " + publicVer + "\nCurrent Version Installed: " + versionP + "\n" + chnglog + "");
var dialog = alert.create();
dialog.show();savemod("Changelog");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(updateicon, 0), 0, android.util.Base64.decode(updateicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Download Instinct");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
updatemeths();
savemod("Download Instinct");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(teamicon, 0), 0, android.util.Base64.decode(teamicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Credits");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
openCredits();savemod("Credits");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  FAQ / Help");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
var alert = new android.app.AlertDialog.Builder(ctx);
alert.setTitle("Instinct FAQ/Help");
alert.setMessage(FAQ);
var dialog = alert.create();
dialog.show();savemod("FAQ");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(ipicon, 0), 0, android.util.Base64.decode(ipicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Website");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + siteUrl + "  ");
addWDialog.setTitle("Open Website");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse(siteUrl));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();savemod("Website");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(realmicon, 0), 0, android.util.Base64.decode(realmicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Our Server");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + "Hacking Allowed\nIP: instinctmods.com\n Port: 19132 (default)" + "  ");
addWDialog.setTitle("Join Server");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
//addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("https://realms.gg/nHXU2WIdwag"));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();savemod("JoinRealm");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(discordicon, 0), 0, android.util.Base64.decode(discordicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Join Discord");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Join Discord");
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + "https://discord.gg/HP6xYrj" + "  ");
addWDialog.setTitle("Open Invite");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("https://discord.gg/HP6xYrj"));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(paypalicon, 0), 0, android.util.Base64.decode(paypalicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Donate");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Donate");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var addWLayout = new android.widget.LinearLayout(ctx);
var addWBtn = new android.widget.Button(ctx);
var infoBox = new android.widget.TextView(ctx);
addWBtn.setText("Open");
addWBtn.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
var addWDialog = new android.app.Dialog(ctx);
addWDialog.setContentView(addWLayout);
infoBox.setText("  " + "https://www.paypal.me/instinctshark/5" + "  ");
addWDialog.setTitle("Open Website");
addWLayout.setGravity(android.view.Gravity.CENTER);
addWLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
addWLayout.addView(infoBox);
addWLayout.addView(addWBtn);
addWDialog.show();
addWBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
addWDialog.dismiss();
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://paypal.me/instinctshark/5"));
ctx.startActivity(downloadSi);
}
})
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Tip: Donators can email v7thSharkv@gmail.com a copy of their receipt with their ingame name to activate a selection of mods, or send me a message in Discord.");
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(switchfontsize);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
//menuLayoutw.addView(infoBox);

var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["You are a donator and chose:"]);
infoBox.setTextColor(android.graphics.Color.YELLOW);
infoBox.setTextSize(switchfontsize);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
if(contains(donators,Player.getName(getPlayerEnt()))){
menuLayoutw.addView(infoBox);
}

var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["- Particle Effect"]);
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(switchfontsize);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
if(contains(particleEffect,Player.getName(getPlayerEnt()))){
menuLayoutw.addView(infoBox);
}

if(containsCus(Player.getName(getPlayerEnt()))){
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["- Custom Name: "]+customNameC[currentSelect]);
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
}

var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["- Immunity"]);
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(switchfontsize);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
if(contains(immunity,Player.getName(getPlayerEnt()))){
menuLayoutw.addView(infoBox);
}
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(paypalicon, 0), 0, android.util.Base64.decode(paypalicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Donator Mods");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Donator Mods");
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
alertPopup("Incentives","Here are some things donators can get in USD.\n\n1: Custom Name - \nDisplayed to other Instinct users ingame. Minimum $1.00\n\n2: Particle Effect -\nShows the purple portal effect over your head to other Instinct users. Minimum $1.00\n\n3: Immortality -\nOther Instinct users can't hit your body, acts as a Friend to everyone. Works wherever Reach does. Minimum $7.00","Cool!");
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(bedrockicon, 0), 0, android.util.Base64.decode(bedrockicon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Old ID List");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {savemod("Old ID List");
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {oldIdPopup();
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fonticon, 0), 0, android.util.Base64.decode(fonticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  GUI Settings");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("GUI Settings");
function confirmWebsite() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {choosefont();
} catch (err) {
print("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
confirmWebsite();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(fonticon, 0), 0, android.util.Base64.decode(fonticon, 0).length)));
}var button = new android.widget.TextView(ctx);
button.setText("  Tab Disabler");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switch_width;
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setTextSize(btntextsize);
button.setBackground(themeBtnNotClicked);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setGravity(Gravity.CENTER_VERTICAL);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
savemod("Tab Disabler");
tabdisable();
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
}
}));
if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(filtericon, 0), 0, android.util.Base64.decode(filtericon, 0).length)));
}var filterSW = new android.widget.TextView(ctx);
filterSW.setText("  " + "Filter");
filterSW.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
filterSW.getLayoutParams().width = switch_width;
filterSW.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
filterSW.setTextColor(modTextColor);
filterSW.setTypeface(mcfont);
filterSW.setGravity(Gravity.CENTER_VERTICAL);
filterSW.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (!filterOn) {
filterOn = true;
showFil();savemod("Filter");
if (!filterOn) {
filterSW.getParent().setBackground(themeBtnNotClicked);
filterSW.setText(tohtml(filterSW.getText(),false));
/*filterSW.setThumbResource(android['R']['drawable']['presence_busy']);*/
} else {
filterSW.getParent().setBackground(themeBtnClicked);
/*filterSW.setThumbResource(android['R']['drawable']['presence_online']);*/
filterSW.setText(tohtml(filterSW.getText(),true));
}
} else {
GUIfil.dismiss();
filterOn = false;
if (!filterOn) {
filterSW.getParent().setBackground(themeBtnNotClicked);
filterSW.setText(tohtml(filterSW.getText(),false));
/*filterSW.setThumbResource(android['R']['drawable']['presence_busy']);*/
} else {
filterSW.getParent().setBackground(themeBtnClicked);
filterSW.setText(tohtml(filterSW.getText(),true));
/*filterSW.setThumbResource(android['R']['drawable']['presence_online']);*/
}
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast(langMsg[language]["Applies filter to screen"]);
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(filterSW);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
if (!filterOn) {
filterSW.getParent().setBackground(themeBtnNotClicked);
/*filterSW.setThumbResource(android['R']['drawable']['presence_busy']);*/
filterSW.setText(tohtml(filterSW.getText(),false));
} else {
filterSW.getParent().setBackground(themeBtnClicked);
/*filterSW.setThumbResource(android['R']['drawable']['presence_online']);*/
filterSW.setText(tohtml(filterSW.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(filtericon, 0), 0, android.util.Base64.decode(filtericon, 0).length)));
}var filterSc = new android.widget.SeekBar(ctx);
filterSc.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
filterSc.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
filterSc.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
filterSc.getLayoutParams().width = switch_width;
filterSc.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
filterSc.setMax(7);
filterSc.getBackground().setAlpha(255);
filterSc.setProgress(filterHueN);
filterSc.setBackground(xbgGS);
filterSc.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
filterHueN = Math.floor(filterSc.getProgress());
if(filterHueN==0){
filterHue = android.graphics.Color.TRANSPARENT;
betToast(langMsg[language]["Dim"]);
}
if(filterHueN==1){
filterHue = android.graphics.Color.YELLOW;
betToast(langMsg[language]["Yellow"]);
}
if(filterHueN==2){
filterHue = android.graphics.Color.RED;
betToast(langMsg[language]["Red"]);
}
if(filterHueN==3){
filterHue = android.graphics.Color.GREEN;
betToast(langMsg[language]["Vivid"]);
}
if(filterHueN==4){
filterHue = android.graphics.Color.BLUE;
betToast(langMsg[language]["Cool"]);
}
if(filterHueN==5){
filterHue = android.graphics.Color.WHITE;
betToast(langMsg[language]["White"]);
}
if(filterHueN==6){
filterHue = android.graphics.Color.MAGENTA;
betToast("Romantic");
}
if(filterHueN==7){
filterHue = android.graphics.Color.CYAN;
betToast("Cyan");
}
if (filterOn) {
GUIfil.dismiss();
showFil();
}
}
});
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Adjusts filter hue");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(filterSc);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Use Old TMI GUI");
button.setChecked(oldTMI);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!oldTMI) {
oldTMI = true;savemod("Use Old TMI");
} else {
oldTMI = false;
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Mute Update Notification");
button.setChecked(muteUpdate);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!muteUpdate) {
muteUpdate = true;savemod("Mute Update");
} else {
muteUpdate = false;
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Use DigMinecraft ID Site");
button.setChecked(digurl);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!digurl) {
digurl=true;savemod("Use DigMinecraft");
idurl="https://www.digminecraft.com/lists/item_id_list_pe.php";
} else {
digurl=false;
idurl="http://instinctmods.com/idlist.html";
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Chat Log Always On");
button.setChecked(chlogAlways);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!chlogAlways) {
chlogAlways = true;savemod("Chat Log Always On");
chlog=true;
} else {
chlogAlways = false;
saveTheme();
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("PVP Menu Left");
button.setChecked(sleekLeft);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!sleekLeft) {
sleekLeft = true;savemod("PVP Menu Left");
} else {
sleekLeft = false;
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Use GIF Background");
button.setChecked(useGIF);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!useGIF) {
closeEverything();
gifedit();
} else {
useGIF = false;
if(backOpen){try{guiBackgroundGif.dismiss();backOpen=false;} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}}
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Menu on Right");
button.setChecked(allRight);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if(!compactView){
if (!allRight) {
allRight = true;savemod("Menu on Right");
} else {
allRight = false;
}
saveTheme();
closeEverything();
}else{betToast("Disable Horizontal Tabs First");}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Vibrations");
button.setChecked(vibrations);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!vibrations) {
vibrations = true;
} else {
vibrations = false;
savemod("Vibrations Off");
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Mod Status List");
button.setChecked(displayActiveMods);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!displayActiveMods) {
displayActiveMods = true;
showActiveMods();
} else {
displayActiveMods = false;
activeModWin.dismiss();
savemod("List Off");
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(animations){var animationOp=false}else{var animationOp=true}
var button = new CheckBox(ctx);
button.setText("Disable Animations");
button.setChecked(animationOp);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!animations) {
animations = true;savemod("Disable Animations");
} else {
animations = false;
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(iconsB){var iconsOp=false}else{var iconsOp=true}
var button = new CheckBox(ctx);
button.setText("Disable Icons");
button.setChecked(iconsOp);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!iconsB) {
iconsB = true;savemod("Disable Icons");
if(helpB){
wayNameWidth = list_width-(icon_dimensions*4);
list_width = list_width_var*density;
}else{
list_width = list_width_var*density-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}	
} else {
iconsB = false;
if(!helpB){
list_width = (list_width_var*density)-(icon_dimensions*2);
wayNameWidth = list_width-(icon_dimensions*4);
}else{
list_width = (list_width_var*density)-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(helpB){var helpOp=false}else{var helpOp=true}
var button = new CheckBox(ctx);
button.setText("Disable Help");
button.setChecked(helpOp);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!helpB) {
helpB = true;savemod("Disable Help");
if(iconsB){
wayNameWidth = list_width-(icon_dimensions*4);
list_width = list_width_var*density;
}else{
list_width = list_width_var*density-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}	
} else {
helpB = false;savemod("Enable Help");
if(!iconsB){
list_width = (list_width_var*density)-(icon_dimensions*2);
wayNameWidth = list_width-(icon_dimensions*4);
}else{
list_width = (list_width_var*density)-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(iconsB){var iconsOp=false}else{var iconsOp=true}
var button = new CheckBox(ctx);
button.setText("Menu Gradient");
button.setChecked(showGradient);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
savemod("Menu Gradient");
if (!showGradient) {
showGradient = true;

} else {
showGradient = false;

}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}if(iconsB){var iconsOp=false}else{var iconsOp=true}
var button = new CheckBox(ctx);
button.setText("Show Donator Particles");
button.setChecked(showParticles);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if(contains(particleEffect,Player.getName(getPlayerEnt()))){
if (!showParticles) {
showParticles = true;
} else {
showParticles = false;
}
}else{
if(contains(donators,Player.getName(getPlayerEnt()))){
betToast("Player "+Player.getName(getPlayerEnt())+" is a donator but has not opted for particle effects");
}else{
betToast("Player "+Player.getName(getPlayerEnt())+" is not a donator, cannot display effect");}
}
saveTheme();
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Horizontal Tabs");
button.setChecked(compactView);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if(!allRight){
if (!compactView) {
compactView = true;savemod("Compact View");
} else {
compactView = false;
}
saveTheme();
closeEverything();
}else{betToast("Disable Menu On Right First");}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
menuLayoutw.addView(slayout1);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Theme"]);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextSize(titleSize);
button.setBackground(title);
button.setTextColor(modTextColor);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
menuLayoutw.addView(button);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Menu Opacity:");
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER_VERTICAL);
infoBox.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
slayout1.addView(infoBox);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var opacitySlider = new android.widget.SeekBar(ctx);
opacitySlider.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
opacitySlider.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
opacitySlider.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
opacitySlider.getLayoutParams().width = switch_width;
opacitySlider.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
opacitySlider.setMax(255);
opacitySlider.getBackground().setAlpha(255);
opacitySlider.setProgress(themeAlpha);
opacitySlider.setBackground(xbgGS);
opacitySlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
themeAlpha = opacitySlider.getProgress();
changeGUI8.getBackground().setAlpha(themeAlpha);
}
});
slayout1.addView(opacitySlider);
menuLayoutw.addView(slayout1);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeXmasSwitch = new android.widget.TextView(ctx);
themeXmasSwitch.setText("  " + "Holidays");
themeXmasSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeXmasSwitch.getLayoutParams().width = switch_width;
themeXmasSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeXmasSwitch.setTextColor(modTextColor);
themeXmasSwitch.setTypeface(mcfont);
themeXmasSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeXmasSwitch.setTextSize(switchfontsize);
themeXmasSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Holiday Theme");
if (!themedXmas) {
themedXmas = true;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedPurple = false;
themedBlack = false;
themedOrange = false;
themeBtn = "xmas";
closeEverything();
if (!themedXmas) {
themeXmasSwitch.getParent().setBackground(themeBtnNotClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),false));
} else {
themeXmasSwitch.getParent().setBackground(themeBtnClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedPurple = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedXmas) {
themeXmasSwitch.getParent().setBackground(themeBtnNotClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),false));
} else {
themeXmasSwitch.getParent().setBackground(themeBtnClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeXmasSwitch);
menuLayoutw.addView(slayout1);
if (!themedXmas) {
themeXmasSwitch.getParent().setBackground(themeBtnNotClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),false));
} else {
themeXmasSwitch.getParent().setBackground(themeBtnClicked);
themeXmasSwitch.setText(tohtml(themeXmasSwitch.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(offhandicon, 0), 0, android.util.Base64.decode(offhandicon, 0).length)));
}var button = new CheckBox(ctx);
button.setText("Make it Snow!");
button.setChecked(snowIt);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
button.setTextSize(btntextsize-1);
button.setTypeface(mcfont);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.setBackground(themeBtnNotClicked);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!snowIt) {
snowIt = true;savemod("Make it Snow");
} else {
snowIt = false;removeFromArray(activeMods,"Make it Snow");
}
}
}));
slayout1.addView(button);
menuLayoutw.addView(slayout1);


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeOrangeSwitch = new android.widget.TextView(ctx);
themeOrangeSwitch.setText("  " + "Orange");
themeOrangeSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeOrangeSwitch.getLayoutParams().width = switch_width;
themeOrangeSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeOrangeSwitch.setTextColor(modTextColor);
themeOrangeSwitch.setTypeface(mcfont);
themeOrangeSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeOrangeSwitch.setTextSize(switchfontsize);
themeOrangeSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Orange Theme");
if (!themedOrange) {
themedOrange = true;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedPurple = false;
themedBlack = false;
themedXmas = false;
themeBtn = "orange";
closeEverything();
if (!themedOrange) {
themeOrangeSwitch.getParent().setBackground(themeBtnNotClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),false));
} else {
themeOrangeSwitch.getParent().setBackground(themeBtnClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedPurple = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedOrange) {
themeOrangeSwitch.getParent().setBackground(themeBtnNotClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),false));
} else {
themeOrangeSwitch.getParent().setBackground(themeBtnClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeOrangeSwitch);
menuLayoutw.addView(slayout1);
if (!themedOrange) {
themeOrangeSwitch.getParent().setBackground(themeBtnNotClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),false));
} else {
themeOrangeSwitch.getParent().setBackground(themeBtnClicked);
themeOrangeSwitch.setText(tohtml(themeOrangeSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeWhiteSwitch = new android.widget.TextView(ctx);
themeWhiteSwitch.setText("  " + langMsg[language]["White"]);
themeWhiteSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeWhiteSwitch.getLayoutParams().width = switch_width;
themeWhiteSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeWhiteSwitch.setTextColor(modTextColor);
themeWhiteSwitch.setTypeface(mcfont);
themeWhiteSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeWhiteSwitch.setTextSize(switchfontsize);
themeWhiteSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("White Theme");
if (!themedWhite) {
themedOrange = false;
themedWhite = true;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedPurple = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "white";
closeEverything();
if (!themedWhite) {
themeWhiteSwitch.getParent().setBackground(themeBtnNotClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),false));
} else {
themeWhiteSwitch.getParent().setBackground(themeBtnClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedPurple = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedWhite) {
themeWhiteSwitch.getParent().setBackground(themeBtnNotClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),false));
} else {
themeWhiteSwitch.getParent().setBackground(themeBtnClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeWhiteSwitch);
menuLayoutw.addView(slayout1);
if (!themedWhite) {
themeWhiteSwitch.getParent().setBackground(themeBtnNotClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),false));
} else {
themeWhiteSwitch.getParent().setBackground(themeBtnClicked);
themeWhiteSwitch.setText(tohtml(themeWhiteSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeRedSwitch = new android.widget.TextView(ctx);
themeRedSwitch.setText("  " + "Red");
themeRedSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeRedSwitch.getLayoutParams().width = switch_width;
themeRedSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeRedSwitch.setTextColor(modTextColor);
themeRedSwitch.setTypeface(mcfont);
themeRedSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeRedSwitch.setTextSize(switchfontsize);
themeRedSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){savemod("Red Theme");
if (!themedRed) {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedPurple = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
closeEverything();
if (!themedRed) {
themeRedSwitch.getParent().setBackground(themeBtnNotClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),false));
} else {
themeRedSwitch.getParent().setBackground(themeBtnClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedPurple = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedRed) {
themeRedSwitch.getParent().setBackground(themeBtnNotClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),false));
} else {
themeRedSwitch.getParent().setBackground(themeBtnClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeRedSwitch);
menuLayoutw.addView(slayout1);
if (!themedRed) {
themeRedSwitch.getParent().setBackground(themeBtnNotClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),false));
} else {
themeRedSwitch.getParent().setBackground(themeBtnClicked);
themeRedSwitch.setText(tohtml(themeRedSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeGreenSwitch = new android.widget.TextView(ctx);
themeGreenSwitch.setText("  " + "Green");
themeGreenSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeGreenSwitch.getLayoutParams().width = switch_width;
themeGreenSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeGreenSwitch.setTextColor(modTextColor);
themeGreenSwitch.setTypeface(mcfont);
themeGreenSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeGreenSwitch.setTextSize(switchfontsize);
themeGreenSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Green Theme");
if (!themedGreen) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = true;
themedMagenta = false;
themedPurple = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "green";
closeEverything();
if (!themedGreen) {
themeGreenSwitch.getParent().setBackground(themeBtnNotClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),false));
} else {
themeGreenSwitch.getParent().setBackground(themeBtnClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedPurple = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedGreen) {
themeGreenSwitch.getParent().setBackground(themeBtnNotClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),false));
} else {
themeGreenSwitch.getParent().setBackground(themeBtnClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeGreenSwitch);
menuLayoutw.addView(slayout1);
if (!themedGreen) {
themeGreenSwitch.getParent().setBackground(themeBtnNotClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),false));
} else {
themeGreenSwitch.getParent().setBackground(themeBtnClicked);
themeGreenSwitch.setText(tohtml(themeGreenSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeBlackSwitch = new android.widget.TextView(ctx);
themeBlackSwitch.setText("  " + "Amoled");
themeBlackSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeBlackSwitch.getLayoutParams().width = switch_width;
themeBlackSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeBlackSwitch.setTextColor(modTextColor);
themeBlackSwitch.setTypeface(mcfont);
themeBlackSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeBlackSwitch.setTextSize(switchfontsize);
themeBlackSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
	blackColorChoose();



}
}));
slayout1.addView(themeBlackSwitch);
menuLayoutw.addView(slayout1);
if (!themedBlack) {
themeBlackSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),false));
} else {
themeBlackSwitch.getParent().setBackground(themeBtnClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),true));
}


function blackColorChoose() {
	if(!borderChooser){borderChooser=true;
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setAlpha(themeAlpha);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(1, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText("Amoled Border Color");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
menuLayout.addView(button);

var rgbHolder = new android.widget.Button(ctx);
rgbHolder.setText("RGB");
rgbHolder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(amoledBorderRGB));
rgbHolder.setTextColor(Color.parseColor("#53fcfc"));
rgbHolder.getBackground().setAlpha(130);
rgbHolder.setTextSize(btntextsize);
menuLayout.addView(rgbHolder);


var redTitle = new android.widget.Button(ctx);
redTitle.setText(langMsg[language]["Red"]);
redTitle.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#ff5454")));
redTitle.setTextColor(Color.parseColor("#ff5454"));
redTitle.getBackground().setAlpha(130);
redTitle.setTextSize(btntextsize);
menuLayout.addView(redTitle);

var redSeek = new android.widget.SeekBar(ctx);
redSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
redSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
redSeek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
redSeek.getLayoutParams().height = icon_dimensions;
redSeek.setMax(255);
redSeek.setProgress(amoledRed*255);
redSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#ff5454")));
redSeek.getBackground().setAlpha(130);
redSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
amoledRed = redSeek.getProgress()/255;
amoledBorderRGB = android.graphics.Color.rgb(amoledRed, amoledGreen, amoledBlue);
rgbHolder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(amoledBorderRGB));
}
});
menuLayout.addView(redSeek);


var greenTitle = new android.widget.Button(ctx);
greenTitle.setText("Green");
greenTitle.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#53fc53")));
greenTitle.setTextColor(Color.parseColor("#53fc53"));
greenTitle.getBackground().setAlpha(130);
greenTitle.setTextSize(btntextsize);
menuLayout.addView(greenTitle);

var greenSeek = new android.widget.SeekBar(ctx);
greenSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
greenSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
greenSeek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
greenSeek.getLayoutParams().height = icon_dimensions;
greenSeek.setMax(255);
greenSeek.setProgress(amoledGreen*255);
greenSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#53fc53")));
greenSeek.getBackground().setAlpha(130);
greenSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
amoledGreen = greenSeek.getProgress()/255;
amoledBorderRGB = android.graphics.Color.rgb(amoledRed, amoledGreen, amoledBlue);
rgbHolder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(amoledBorderRGB));
}
});
menuLayout.addView(greenSeek);


var blueTitle = new android.widget.Button(ctx);
blueTitle.setText("Blue");
blueTitle.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#5353fc")));
blueTitle.setTextColor(Color.parseColor("#5353fc"));
blueTitle.getBackground().setAlpha(130);
blueTitle.setTextSize(btntextsize);
menuLayout.addView(blueTitle);

var blueSeek = new android.widget.SeekBar(ctx);
blueSeek.getThumb().setColorFilter(seekThumbTheme, PorterDuff.Mode.SRC_IN);
blueSeek.getProgressDrawable().setColorFilter(seekProgressTheme, PorterDuff.Mode.SRC_IN);
blueSeek.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
blueSeek.getLayoutParams().height = icon_dimensions;
blueSeek.setMax(255);
blueSeek.setProgress(amoledBlue*255);
blueSeek.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(Color.parseColor("#5353fc")));
blueSeek.getBackground().setAlpha(130);
blueSeek.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener() {
onProgressChanged: function(viewarg) {
amoledBlue = blueSeek.getProgress()/255;
amoledBorderRGB = android.graphics.Color.rgb(amoledRed, amoledGreen, amoledBlue);
rgbHolder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(amoledBorderRGB));
}
});
menuLayout.addView(blueSeek);









var button = new android.widget.Button(ctx);
button.setText("Exit");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
	themeStrokeBlack = amoledBorderRGB;
	finalizeBlack();
guiAm.dismiss();
}
}));
menuLayout.addView(button);
guiAm = new PopupWindow(menuLayout1, tab_width*3, ctx.getWindowManager().getDefaultDisplay().getHeight());
if(animations){guiAm.setAnimationStyle(android.R.style.Animation_Toast);}
guiAm.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
guiAm.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +(left_width+list_width), 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
}else{
		guiAm.dismiss();borderChooser=false}
};


function finalizeBlack(){
	showGradient = false;
	themeFinish();savemod("Amoled Theme");
themedOrange = false;
themedWhite = false;
themedRed = false;
themedPurple = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = true;
themedXmas = false;
themeBtn = "black";
closeEverything();
if (!themedBlack) {
themeBlackSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),false));
} else {
themeBlackSwitch.getParent().setBackground(themeBtnClicked);
themeBlackSwitch.setText(tohtml(themeBlackSwitch.getText(),true));
}


}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeBlueSwitch = new android.widget.TextView(ctx);
themeBlueSwitch.setText("  " + "Blue");
themeBlueSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeBlueSwitch.getLayoutParams().width = switch_width;
themeBlueSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeBlueSwitch.setTextColor(modTextColor);
themeBlueSwitch.setTypeface(mcfont);
themeBlueSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeBlueSwitch.setTextSize(switchfontsize);
themeBlueSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Blue Theme");
if (!themedBlue) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = true;
themedPurple = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "blue";
closeEverything();
if (!themedBlue) {
themeBlueSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),false));
} else {
themeBlueSwitch.getParent().setBackground(themeBtnClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedPurple = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedBlue) {
themeBlueSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),false));
} else {
themeBlueSwitch.getParent().setBackground(themeBtnClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeBlueSwitch);
menuLayoutw.addView(slayout1);
if (!themedBlue) {
themeBlueSwitch.getParent().setBackground(themeBtnNotClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),false));
} else {
themeBlueSwitch.getParent().setBackground(themeBtnClicked);
themeBlueSwitch.setText(tohtml(themeBlueSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeDarkSwitch = new android.widget.TextView(ctx);
themeDarkSwitch.setText("  " + "Dark");
themeDarkSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeDarkSwitch.getLayoutParams().width = switch_width;
themeDarkSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeDarkSwitch.setTextColor(modTextColor);
themeDarkSwitch.setTypeface(mcfont);
themeDarkSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeDarkSwitch.setTextSize(switchfontsize);
themeDarkSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Dark Theme");
if (!themedDark) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = true;
themedGreen = false;
themedPurple = false;
themedMagenta = false;
themedBlack = false;
themedDark = true;
themedXmas = false;
themeBtn = "dark";
closeEverything();
if (!themedDark) {
themeDarkSwitch.getParent().setBackground(themeBtnNotClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),false));
} else {
themeDarkSwitch.getParent().setBackground(themeBtnClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedPurple = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themeBtn = "red";
if (!themedDark) {
themeDarkSwitch.getParent().setBackground(themeBtnNotClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),false));
} else {
themeDarkSwitch.getParent().setBackground(themeBtnClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeDarkSwitch);
menuLayoutw.addView(slayout1);
if (!themedDark) {
themeDarkSwitch.getParent().setBackground(themeBtnNotClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),false));
} else {
themeDarkSwitch.getParent().setBackground(themeBtnClicked);
themeDarkSwitch.setText(tohtml(themeDarkSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themeMagentaSwitch = new android.widget.TextView(ctx);
themeMagentaSwitch.setText("  " + "Magenta");
themeMagentaSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themeMagentaSwitch.getLayoutParams().width = switch_width;
themeMagentaSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themeMagentaSwitch.setTextColor(modTextColor);
themeMagentaSwitch.setTypeface(mcfont);
themeMagentaSwitch.setGravity(Gravity.CENTER_VERTICAL);
themeMagentaSwitch.setTextSize(switchfontsize);
themeMagentaSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Magenta Theme");
if (!themedMagenta) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = true;
themedDark = false;
themedBlack = false;
themedXmas = false;
themedPurple = false;
themeBtn = "magenta";
closeEverything();
if (!themedMagenta) {
themeMagentaSwitch.getParent().setBackground(themeBtnNotClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),false));
} else {
themeMagentaSwitch.getParent().setBackground(themeBtnClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedPurple = false;
themedMagenta = false;
themedBlack = false;
themedDark = false;
themedXmas = false;
themeBtn = "red";
if (!themedMagenta) {
themeMagentaSwitch.getParent().setBackground(themeBtnNotClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),false));
} else {
themeMagentaSwitch.getParent().setBackground(themeBtnClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themeMagentaSwitch);
menuLayoutw.addView(slayout1);
if (!themedMagenta) {
themeMagentaSwitch.getParent().setBackground(themeBtnNotClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),false));
} else {
themeMagentaSwitch.getParent().setBackground(themeBtnClicked);
themeMagentaSwitch.setText(tohtml(themeMagentaSwitch.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
var themePurpleSwitch = new android.widget.TextView(ctx);
themePurpleSwitch.setText("  " + "Purple");
themePurpleSwitch.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
themePurpleSwitch.getLayoutParams().width = switch_width;
themePurpleSwitch.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
themePurpleSwitch.setTextColor(modTextColor);
themePurpleSwitch.setTypeface(mcfont);
themePurpleSwitch.setGravity(Gravity.CENTER_VERTICAL);
themePurpleSwitch.setTextSize(switchfontsize);
themePurpleSwitch.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
themeFinish();savemod("Magenta Theme");
if (!themedPurple) {
themedOrange = false;
themedWhite = false;
themedRed = false;
themedBlue = false;
themedGreen = false;
themedMagenta = false;
themedDark = false;
themedBlack = false;
themedXmas = false;
themedPurple = true;
themeBtn = "purple";
closeEverything();
if (!themedPurple) {
themePurpleSwitch.getParent().setBackground(themeBtnNotClicked);
themePurpleSwitch.setText(tohtml(themePurpleSwitch.getText(),false));
} else {
themePurpleSwitch.getParent().setBackground(themeBtnClicked);
themePurpleSwitch.setText(tohtml(themePurpleSwitch.getText(),true));
}
} else {
themedOrange = false;
themedWhite = false;
themedRed = true;
themedBlue = false;
themedGreen = false;
themedPurple = false;
themedMagenta = false;
themedBlack = false;
themedDark = false;
themedXmas = false;
themeBtn = "red";
if (!themedPurple) {
themePurpleSwitch.getParent().setBackground(themeBtnNotClicked);
themePurpleSwitch.setText(tohtml(themePurpleSwitch.getText(),false));
} else {
themePurpleSwitch.getParent().setBackground(themeBtnClicked);
themePurpleSwitch.setText(tohtml(themePurpleSwitch.getText(),true));
}
}
}
}));
slayout1.addView(themePurpleSwitch);
menuLayoutw.addView(slayout1);
if (!themedPurple) {
themePurpleSwitch.getParent().setBackground(themeBtnNotClicked);
themePurpleSwitch.setText(tohtml(themePurpleSwitch.getText(),false));
} else {
themePurpleSwitch.getParent().setBackground(themeBtnClicked);
themePurpleSwitch.setText(tohtml(themePurpleSwitch.getText(),true));
}


if(compactView){changeGUI8 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI8 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}if(animations){changeGUI8.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI8.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI8.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI8.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI8.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI8.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI8.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI8.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI8.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed8=true;
}
}
}))
};
/*Presets*/
function openMenu9() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var settingNotClickedH = new android.graphics.drawable.GradientDrawable();
settingNotClickedH.setColor(themeBackground);
settingNotClickedH.setStroke(0, themeStroke);
settingNotClickedH.setCornerRadius(0);
settingNotClickedH.setAlpha(255);
var settingClickedH = new android.graphics.drawable.GradientDrawable();
settingClickedH.setColor(themeBackground);
settingClickedH.setStroke(2, Color.parseColor("#21ff00"));
settingClickedH.setCornerRadius(0);
settingClickedH.setAlpha(255);
var hitboxboxui = new android.graphics.drawable.GradientDrawable();
hitboxboxui.setColor(themeBackground);
hitboxboxui.setStroke(6, themeStroke);
hitboxboxui.setCornerRadius(0);
hitboxboxui.setAlpha(255);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Presets"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setBackground(title);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTypeface(mcfont);
menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["Tip: Only one preset can be enabled at once. Presets enable certain mods in the client."]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var button = new android.widget.Button(ctx);
button.setText("");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
button.getLayoutParams().height = 40;
button.getBackground().setAlpha(0);
menuLayoutw.addView(button);
var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(booticon, 0), 0, android.util.Base64.decode(booticon, 0).length)));
}var startpres = new android.widget.TextView(ctx);
startpres.setText("  " + "Starter");
startpres.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
startpres.getLayoutParams().width = switch_width;
startpres.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
startpres.setTextColor(modTextColor);
startpres.setTypeface(mcfont);
startpres.setGravity(Gravity.CENTER_VERTICAL);
startpres.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (pvpd == false&&!minerd) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (!starterd) {
savemod("Starter Preset");
starters = true;
starterd = true;
rides = true;
rided = true;
potions = true;
potioned = true;
xphitss = true;
xphited = true;
sf = true;
sfs = true;
farbot = true;
fared = true;
showHairBtn();
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
gps = true;
gped = true;
Player.setCanFly(1);
Player.isFlying(1);
esp = true;
} else {
starters = false;
starterd = false;
gps = false;
gped = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
farbot = false;
GUIcc.dismiss();
fared = false;
rides = false;
rided = false;
potions = false;
potioned = false;
xphitss = false;
xphited = false;
sf = false;
sfs = false;
Player.setCanFly(0);
esp = false;
}
if (!starterd) {
startpres.getParent().setBackground(themeBtnNotClicked);
startpres.setText(tohtml(startpres.getText(),false));
} else {
startpres.getParent().setBackground(themeBtnClicked);
startpres.setText(tohtml(startpres.getText(),true));
}
} else {
betToast("Disable other preset")
}
} else {
betToast("Must be in a world to activate")
}
}
})); if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Basic modules");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(startpres);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Mob Reach, No Fall Damage, XP Hit, Survival Fly, Crosshair, Night Vision\n");
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
if (!starterd) {
startpres.getParent().setBackground(themeBtnNotClicked);
startpres.setText(tohtml(startpres.getText(),false));
} else {
startpres.getParent().setBackground(themeBtnClicked);
startpres.setText(tohtml(startpres.getText(),true));
}

var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(aimboticon, 0), 0, android.util.Base64.decode(aimboticon, 0).length)));
}var pvpres = new android.widget.TextView(ctx);
pvpres.setText("  " + "PVP");
pvpres.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
pvpres.getLayoutParams().width = switch_width;
pvpres.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
pvpres.setTextColor(modTextColor);
pvpres.setTypeface(mcfont);
pvpres.setGravity(Gravity.CENTER_VERTICAL);
pvpres.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (starterd == false&&minerd==false) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (!pvpd) {
savemod("PVP Preset");
pvps = true;
pvpd = true;
showHairBtn();
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
esp = true;
espd = true;
espOnsave=true;
if(!rendering){funcS.Render.init();rendering=true}
gps = true;
gped = true;
xphitss = true;
xphited = true;
walkss = true;
walked = true;
aimbot = true;
aimbotBtn = true;
aimed = true;
showAimbotBtn();
aoss = true;
aoed = true;
} else {
pvps = false;
pvpd = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
esp = false;
espd = false;
espOnsave=false;
xphitss = false;
xphited = false;
mcpss = false;
gps = false;
gped = false;
GUIcc.dismiss();
mcped = false;
walkss = false;
walked = false;
aimbot = false;
aimbotBtn = false;
aimed = false;
GUIaim.dismiss();
aoss = false;
aoed = false;
}
if (!pvpd) {
pvpres.getParent().setBackground(themeBtnNotClicked);
pvpres.setText(tohtml(pvpres.getText(),false));
} else {
pvpres.getParent().setBackground(themeBtnClicked);
pvpres.setText(tohtml(pvpres.getText(),true));
}

} else {
betToast("Disable other preset")
}
} else {
betToast("Must be in a world to activate")
}
}
}));
if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Basic modules for PVP");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(pvpres);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("ESP, Crosshair, Night Vision, XP Hit, Reach, Aimbot, No Knockback\n");
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
if (!pvpd) {
pvpres.getParent().setBackground(themeBtnNotClicked);
pvpres.setText(tohtml(pvpres.getText(),false));
} else {
pvpres.getParent().setBackground(themeBtnClicked);
pvpres.setText(tohtml(pvpres.getText(),true));
}


var slayout1 = new android.widget.LinearLayout(activity);
slayout1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
slayout1.getLayoutParams().height = icon_dimensions+modPadT+modPadB;
var spaceholder = new android.widget.Button(ctx);
spaceholder.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
spaceholder.getLayoutParams().width = gap_width;spaceholder.getLayoutParams().height = icon_dimensions;
spaceholder.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
slayout1.addView(spaceholder);
if(iconsB){var waypoint1 = new android.widget.ImageView(ctx);
layoutParams=new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
layoutParams.gravity=Gravity.CENTER;
waypoint1.setLayoutParams(layoutParams);
waypoint1.getLayoutParams().width = icon_dimensions;
waypoint1.getLayoutParams().height = icon_dimensions;
waypoint1.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(newhasteicon, 0), 0, android.util.Base64.decode(newhasteicon, 0).length)));
}var minerpres = new android.widget.TextView(ctx);
minerpres.setText("  " + "Miner");
minerpres.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
minerpres.getLayoutParams().width = switch_width;
minerpres.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
minerpres.setTextColor(modTextColor);
minerpres.setGravity(Gravity.CENTER_VERTICAL);
minerpres.setTypeface(mcfont);
minerpres.setTextSize(switchfontsize);
slayout1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if (getPlayerX() != 0 &getPlayerZ() != 0) {
canPreset = true;
}
if (canPreset) {
if (pvpd == false&&starterd==false) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if (!minerd) {
minerd = true;
coordds = true;
savemod("Miner Preset");
showCgui();
gps = true;
gped = true;
Entity.addEffect(Player.getEntity(), MobEffect.digSpeed, 999999, 200, false, false);
ims = true;
bedrocke = true;
potions = true;
potioned = true;
betterladss = true;
betterladsd = true;
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 999999, 200, false, false);
} else {
minerd = false;
coordds = false;
windowDis.dismiss();
gps = false;
gped = false;
ims = false;
bedrocke = false;
potions = false;
potioned = false;
betterladss = false;
betterladsd = false;
Entity.removeEffect(getPlayerEnt(), MobEffect.digSpeed);
Entity.removeEffect(getPlayerEnt(), MobEffect.nightVision);
}
if (!minerd) {
minerpres.getParent().setBackground(themeBtnNotClicked);
minerpres.setText(tohtml(minerpres.getText(),false));
} else {
minerpres.getParent().setBackground(themeBtnClicked);
minerpres.setText(tohtml(minerpres.getText(),true));
}
} else {
betToast("Disable other preset")
}
} else {
betToast("Must be in a world to activate")
}
}
})); if(helpB){var helpBtn = new android.widget.ImageView(ctx);

helpBtn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
helpBtn.getLayoutParams().width = help_width;
helpBtn.getLayoutParams().height = help_width;
helpBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(questionicon, 0), 0, android.util.Base64.decode(questionicon, 0).length)));
helpBtn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
betToast("Everything for mining");
}
}));
}if(iconsB){slayout1.addView(waypoint1);}
slayout1.addView(minerpres);
if(helpB){slayout1.addView(helpBtn);}
menuLayoutw.addView(slayout1);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText("Coordinates, Night Vision, Haste, Break Bedrock, No Fall Damage, Fast Ladders\n");
infoBox.setTextColor(Color.parseColor("#00FFFF"));
infoBox.setTextSize(7);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
if (!minerd) {
minerpres.getParent().setBackground(themeBtnNotClicked);
minerpres.setText(tohtml(minerpres.getText(),false));
} else {
minerpres.getParent().setBackground(themeBtnClicked);
minerpres.setText(tohtml(minerpres.getText(),true));
}



if(compactView){changeGUI9 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI9 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}if(animations){changeGUI9.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI9.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI9.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI9.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI9.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI9.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI9.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI9.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI9.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed9=true;
}
}
}))
};
/*Friends*/
function openMenu10() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
if(useGIF){
if(!backOpen){openBackground();backOpen=true;}
}
var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
var button = new android.widget.TextView(ctx);
button.setText(langMsg[language]["Friends"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(modTextColor);
button.getBackground().setAlpha(130);
button.setTextSize(titleSize);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setBackground(title);
button.setTypeface(mcfont);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));

menuLayoutw.addView(button);
var infoBox = new android.widget.TextView(ctx);
infoBox.setText(langMsg[language]["Tip: These players aren't targetted by Aimbot, and can't be hit.\nThere will be a blank friend, and can only be deleted once a new friend is added"]);
infoBox.setTextColor(modTextColor);
infoBox.setTextSize(8);
infoBox.setTypeface(mcfont);
infoBox.setGravity(Gravity.CENTER);
menuLayoutw.addView(infoBox);
var button7 = new android.widget.Button(ctx);
button7.setText("Add Friend");
button7.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button7.setTextColor(android.graphics.Color.YELLOW);
button7.getBackground().setAlpha(130);
button7.setTextSize(btntextsize);
button7.setBackground(xbgAW);
button7.setTypeface(mcfont);
button7.setTextSize(switchfontsize+4);
button7.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
AddNewFriend();savemod("Add Friend");
closeEverything();
}
}));
menuLayoutw.addView(button7);
for(var i=0;i<objectLength(friends_L);i++){
if(!friends_L[i].removed){
if(CreateButtonF(i).getParent()!=null)
CreateButtonF(i).getParent().removeView(CreateButtonF(i));
menuLayoutw.addView(CreateButtonF(i));
}}

if(compactView){changeGUI10 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));
}else{
changeGUI10 = new PopupWindow(menuLayout1, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());
}if(animations){changeGUI10.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI10.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI10.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI10.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI10.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI10.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI10.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI10.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI10.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}

} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed10=true;
}
}
}))
};
/*Discord*/
function openMenu11() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
setStyle();
savemod("Show Discord");
if(compactView){changeGUI11 = new PopupWindow(webViewDi, list_width,ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));}else{
changeGUI11 = new PopupWindow(webViewDi, list_width,ctx.getWindowManager().getDefaultDisplay().getHeight());
}
if(animations){changeGUI11.setAnimationStyle(android.R.style.Animation_InputMethod);}
changeGUI11.setBackgroundDrawable(new ColorDrawable(themeBackground));
if(themedXmas){changeGUI11.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(christmasBack, 0), 0, android.util.Base64.decode(christmasBack, 0).length)));}else{changeGUI11.setBackgroundDrawable(new ColorDrawable(themeBackground));}
if(showGradient){changeGUI11.setBackgroundDrawable(new android.graphics.drawable.GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation.LEFT_RIGHT , [themeBackground, themeForeground, themeStroke]));}
changeGUI11.getBackground().setAlpha(themeAlpha);
if(allRight){
changeGUI11.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
changeGUI11.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){changeGUI11.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
menuFailed11=true;
}
}
}))
};
function loadidlist(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
webidli = new android.webkit.WebView(ctx);
if(webidli.getParent()==null){
webidli = new android.webkit.WebView(ctx);
webidli.getSettings().setJavaScriptEnabled(true);
webidli.setWebChromeClient(new android.webkit.WebChromeClient());
webidli.setWebViewClient(new android.webkit.WebViewClient());
webidli.loadUrl(idurl);
webidli.setBackgroundColor(Color.TRANSPARENT);
}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};loadidlist();

function loadDiscord(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
webViewDi = new android.webkit.WebView(ctx);
webViewDi.getSettings().setJavaScriptEnabled(true);
webViewDi.getSettings().setLoadsImagesAutomatically(true);
webViewDi.getSettings().setAllowUniversalAccessFromFileURLs(true);
webViewDi.getSettings().setDomStorageEnabled(true);
webViewDi.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
webViewDi.setWebChromeClient(new android.webkit.WebChromeClient());
webViewDi.setWebViewClient(new android.webkit.WebViewClient());
webViewDi.getSettings().setAppCacheEnabled(false);
webViewDi.clearCache(true)
webViewDi.loadUrl("http://instinctmods.com/discord.html");
webViewDi.setBackgroundColor(Color.TRANSPARENT);
webViewDi.setFocusable(true);
webViewDi.setFocusableInTouchMode(true);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};loadDiscord();
function setStyle(){
var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);
if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
}
function lockaxis(axi){
if(axi=="x"){
setVelX(getPlayerEnt(), 0);
}
if(axi=="y"){
setVelY(getPlayerEnt(), 0);
}
if(axi=="z"){
setVelY(getPlayerEnt(), 0);
}
}
function blockbuilder() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var button = new android.widget.Button(ctx);
button.setText("ESP");
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(15);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
var telebtn = new android.graphics.drawable.GradientDrawable();
telebtn.setStroke(1, themeStroke);
telebtn.setCornerRadius(120);
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var verticallay = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
var etId = new android.widget.EditText(ctx);
var etAmount = new android.widget.EditText(ctx);
var etDamage = new android.widget.EditText(ctx);
var oldbox = new android.widget.TextView(ctx);
oldbox.setText(tmiList);
oldbox.setTextColor(modTextColor);
var infoBox = android.widget.TextView(ctx);
infoBox.setTextSize(12);
infoBox.setText("Select structure and tap ground with stick");
infoBox.setBackground(xbg2);
infoBox.setTextColor(android.graphics.Color.WHITE);
var menuScroll = new android.widget.ScrollView(ctx);
var txtId = android.widget.TextView(ctx);
txtId.setTextSize(12);
txtId.setTextColor(android.graphics.Color.WHITE);
txtId.setText(langMsg[language][" ID:"]);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Save");
addBtn.setBackground(telebtn);
addBtn.setTypeface(mcfont);
addBtn.setTextColor(android.graphics.Color.GREEN);
var deviceWarn = new android.widget.TextView(ctx);
deviceWarn.setGravity(Gravity.CENTER);
deviceWarn.setBackground(xbg2);
deviceWarn.setTextSize(8);
deviceWarn.setTextColor(android.graphics.Color.WHITE);
etId.setInputType(number);
etAmount.setInputType(number);
etDamage.setInputType(number);
etId.setText("54");
etId.setHint("ID");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiMainHor.setOrientation(android.widget.LinearLayout.HORIZONTAL);
etId.setTextSize(14);
etId.setTypeface(mcfont);
etId.setBackground(xbg2);
etId.setTextColor(android.graphics.Color.WHITE);

var checkList = new android.widget.LinearLayout(ctx);
checkList.setOrientation(android.widget.LinearLayout.VERTICAL);
checkList.addView(infoBox);
/*Checkboxes*/
var btn_Stronghold = new CheckBox(ctx);
btn_Stronghold.setText("Stronghold");
btn_Stronghold.setChecked(build_Stronghold);
btn_Stronghold.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Stronghold.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Stronghold.setTextSize(btntextsize-1); 
btn_Stronghold.setTypeface(mcfont); 
btn_Stronghold.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Stronghold.setTextColor(android.graphics.Color.WHITE); 
btn_Stronghold.setBackground(xbg2);
btn_Stronghold.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
if(build_Stronghold){build_Stronghold=false}else{build_Stronghold=true}
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Stronghold);


var btn_Blacksmith = new CheckBox(ctx);
btn_Blacksmith.setText("Blacksmith");
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Blacksmith.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Blacksmith.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions;
btn_Blacksmith.setTextSize(btntextsize-1); 
btn_Blacksmith.setTypeface(mcfont); 
btn_Blacksmith.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Blacksmith.setTextColor(android.graphics.Color.WHITE); 
btn_Blacksmith.setBackground(xbg2);
btn_Blacksmith.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
if(build_Blacksmith){build_Blacksmith=false}else{build_Blacksmith=true}
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Blacksmith);

var btn_Big_Vlg_House = new CheckBox(ctx);
btn_Big_Vlg_House.setText("Village House Big");
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Big_Vlg_House.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Big_Vlg_House.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Big_Vlg_House.setTextSize(btntextsize-1); 
btn_Big_Vlg_House.setTypeface(mcfont); 
btn_Big_Vlg_House.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Big_Vlg_House.setTextColor(android.graphics.Color.WHITE); 
btn_Big_Vlg_House.setBackground(xbg2);
btn_Big_Vlg_House.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
if(build_Village_House_Big){build_Village_House_Big=false}else{build_Village_House_Big=true}
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Big_Vlg_House);

var btn_Small_Vlg_House_1 = new CheckBox(ctx);
btn_Small_Vlg_House_1.setText("Village House Small 1");
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Small_Vlg_House_1.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Small_Vlg_House_1.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Small_Vlg_House_1.setTextSize(btntextsize-1); 
btn_Small_Vlg_House_1.setTypeface(mcfont); 
btn_Small_Vlg_House_1.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Small_Vlg_House_1.setTextColor(android.graphics.Color.WHITE); 
btn_Small_Vlg_House_1.setBackground(xbg2);
btn_Small_Vlg_House_1.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
if(build_Village_House_Small_1){build_Village_House_Small_1=false}else{build_Village_House_Small_1=true}
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Small_Vlg_House_1);

var btn_Small_Vlg_House_2 = new CheckBox(ctx);
btn_Small_Vlg_House_2.setText("Village House Small 2");
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Small_Vlg_House_2.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Small_Vlg_House_2.setTextSize(btntextsize-1); 
btn_Small_Vlg_House_2.setTypeface(mcfont); 
btn_Small_Vlg_House_2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Small_Vlg_House_2.setTextColor(android.graphics.Color.WHITE); 
btn_Small_Vlg_House_2.setBackground(xbg2);
btn_Small_Vlg_House_2.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
if(build_Village_House_Small_2){build_Village_House_Small_2=false}else{build_Village_House_Small_2=true}
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Small_Vlg_House_2);

var btn_Church = new CheckBox(ctx);
btn_Church.setText("Church");
btn_Church.setChecked(build_Church);
btn_Church.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Church.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Church.setTextSize(btntextsize-1); 
btn_Church.setTypeface(mcfont); 
btn_Church.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Church.setTextColor(android.graphics.Color.WHITE); 
btn_Church.setBackground(xbg2);
btn_Church.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
if(build_Church){build_Church=false}else{build_Church=true}
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Church);

var btn_Well = new CheckBox(ctx);
btn_Well.setText("Village Well");
btn_Well.setChecked(build_Village_Well);
btn_Well.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Well.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Well.setTextSize(btntextsize-1); 
btn_Well.setTypeface(mcfont); 
btn_Well.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Well.setTextColor(android.graphics.Color.WHITE); 
btn_Well.setBackground(xbg2);
btn_Well.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
if(build_Village_Well){build_Village_Well=false}else{build_Village_Well=true}
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Well);

var btn_Vlg_Farm_Small = new CheckBox(ctx);
btn_Vlg_Farm_Small.setText("Village Farm Small");
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Vlg_Farm_Small.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Vlg_Farm_Small.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Vlg_Farm_Small.setTextSize(btntextsize-1); 
btn_Vlg_Farm_Small.setTypeface(mcfont); 
btn_Vlg_Farm_Small.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Vlg_Farm_Small.setTextColor(android.graphics.Color.WHITE); 
btn_Vlg_Farm_Small.setBackground(xbg2);
btn_Vlg_Farm_Small.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
if(build_Farm_Small){build_Farm_Small=false}else{build_Farm_Small=true}
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
build_Farm_Big=false;
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Vlg_Farm_Small);

var btn_Vlg_Farm_Big = new CheckBox(ctx);
btn_Vlg_Farm_Big.setText("Village Farm Big");
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Big.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT)); 
btn_Vlg_Farm_Big.getLayoutParams().width = switchWidth + icon_dimensions+icon_dimensions; 
btn_Vlg_Farm_Big.setTextSize(btntextsize-1); 
btn_Vlg_Farm_Big.setTypeface(mcfont); 
btn_Vlg_Farm_Big.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK)); 
btn_Vlg_Farm_Big.setTextColor(android.graphics.Color.WHITE); 
btn_Vlg_Farm_Big.setBackground(xbg2);
btn_Vlg_Farm_Big.setOnClickListener(new View.OnClickListener({onClick: function(view) {
build_Ocean_Monument=false;
build_Stronghold=false;
build_Village_House_Big=false;
build_Blacksmith=false;
build_Church=false;
build_Farm_Small=false;
build_Village_House_Small_1=false;
build_Village_House_Small_2=false;
build_Village_Well=false;
if(build_Farm_Big){build_Farm_Big=false}else{build_Farm_Big=true}
btn_Vlg_Farm_Big.setChecked(build_Farm_Big);
btn_Vlg_Farm_Small.setChecked(build_Farm_Small);
btn_Well.setChecked(build_Village_Well);
btn_Church.setChecked(build_Church);
btn_Small_Vlg_House_2.setChecked(build_Village_House_Small_2);
btn_Small_Vlg_House_1.setChecked(build_Village_House_Small_1);
btn_Big_Vlg_House.setChecked(build_Village_House_Big);
btn_Blacksmith.setChecked(build_Blacksmith);
btn_Stronghold.setChecked(build_Stronghold);
}}));checkList.addView(btn_Vlg_Farm_Big);


menuScroll.addView(checkList);
tmiMainHor.addView(menuScroll);
verticallay.addView(tmiMainHor);
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
espBlock = parseInt(etId.getText());
tmiDialog.dismiss();
}
});
tmiDialog = new PopupWindow(verticallay, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()/2,true);
if(animations){tmiDialog.setAnimationStyle(android.R.style.Animation_Toast);}
tmiDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
tmiDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
if(android.os.Build.VERSION.SDK_INT <= 19){
oldTMI = true;
saveTheme();
betToast("OS Build < 19: Old TMI GUI applied");
}
function Village_Big_House(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+10,x+11,x+11,x+11,x+11,x+11,x+11,x+11,x+11,x+11,x+11,x+11];
var Y=[y,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+3,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+5,y+6,y+0,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+5,y+6,y+0,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+5,y+0,y+3,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+3,y+6,y+3,y+0,y+3,y+3,y+3,y+3,y+3,y+3,y+3];
var Z=[z,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-8,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-8,z+-8,z+-8,z+-7,z+-7,z+-7,z+-7,z+-7,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-8,z+-8,z+-7,z+-6,z+-6,z+-5,z+-4,z+-3,z+-2,z+-1,z+0];
var I=[4,53,4,4,4,4,53,4,4,4,4,5,53,4,4,4,4,17,5,53,4,4,4,4,102,5,5,4,4,4,4,17,5,53,4,4,4,4,5,53,4,4,4,4,53,53,4,4,17,4,53,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,17,4,53,53,4,4,102,4,53,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,102,4,53,53,4,4,102,4,53,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,102,4,53,53,5,4,4,17,4,53,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,17,4,53,4,4,4,4,53,4,4,5,5,53,4,4,5,5,5,5,5,53,5,5,53,5,5,5,5,53,5,5,53,4,4,5,4,53,4,4,17,4,5,53,5,5,53,5,5,53,5,5,5,5,5,53,5,5,5,5,53,5,5,5,4,4,17,4,5,53,4,4,102,4,5,5,53,5,5,53,5,5,53,5,5,53,5,5,5,5,5,5,5,5,5,5,5,5,53,4,4,102,4,5,5,53,4,4,102,4,5,5,53,5,5,53,5,5,53,5,5,53,5,5,53,5,5,53,5,5,53,5,5,5,53,4,4,102,4,5,5,53,4,4,17,4,5,53,5,5,53,5,50,5,53,5,5,53,5,5,53,5,5,53,5,5,53,5,5,53,4,4,17,4,5,53,4,4,4,4,53,4,4,5,5,53,4,64,64,5,53,4,4,5,5,53,4,4,17,5,53,4,4,102,5,53,4,4,17,5,53,4,4,5,5,53,4,4,4,4,53,53,0,53,67,53,53,53,53,53,53,53];
var D=[0,2,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,0,3,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,3,0,0,3,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,2,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,8,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1];
for(n=0;n<756+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Stronghold(x,y,z){
var X=[x,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5];
var Y=[y,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+2,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+2,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+2,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+2,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+1,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+3,y+7,y+0,y+1,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+7,y+0,y+1,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+1,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7];
var Z=[z,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+3,z+3,z+3,z+3,z+3,z+4,z+4,z+4,z+4,z+4,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+9,z+9,z+9,z+9,z+9,z+10,z+10,z+10,z+10,z+10,z+10,z+10,z+10,z+11,z+11,z+11,z+11,z+11,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+12,z+12,z+12,z+12,z+13,z+13,z+13,z+13,z+13,z+13,z+13,z+13,z+14,z+14,z+14,z+14,z+14,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+3,z+4,z+4,z+4,z+4,z+5,z+5,z+5,z+6,z+6,z+6,z+7,z+7,z+7,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+13,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+6,z+6,z+7,z+7,z+8,z+8,z+9,z+9,z+10,z+10,z+11,z+11,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+5,z+5,z+6,z+6,z+7,z+7,z+8,z+8,z+8,z+9,z+9,z+9,z+9,z+10,z+10,z+10,z+10,z+11,z+11,z+11,z+11,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+2,z+2,z+2,z+3,z+3,z+4,z+4,z+5,z+5,z+6,z+6,z+7,z+7,z+8,z+8,z+8,z+9,z+9,z+9,z+9,z+10,z+10,z+10,z+10,z+11,z+11,z+11,z+11,z+12,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+4,z+4,z+4,z+5,z+5,z+6,z+6,z+7,z+7,z+8,z+8,z+9,z+9,z+10,z+10,z+11,z+11,z+12,z+12,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+3,z+4,z+4,z+4,z+4,z+5,z+5,z+5,z+6,z+6,z+6,z+7,z+7,z+7,z+8,z+8,z+8,z+9,z+9,z+9,z+10,z+10,z+10,z+11,z+11,z+11,z+12,z+12,z+12,z+13,z+13,z+13,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+3,z+3,z+3,z+3,z+3,z+3,z+3,z+3,z+4,z+4,z+4,z+4,z+4,z+4,z+4,z+4,z+5,z+5,z+5,z+5,z+5,z+5,z+5,z+5,z+6,z+6,z+6,z+6,z+6,z+6,z+6,z+6,z+7,z+7,z+7,z+7,z+7,z+7,z+7,z+7,z+8,z+8,z+8,z+8,z+8,z+8,z+8,z+8,z+9,z+9,z+9,z+9,z+9,z+9,z+9,z+9,z+10,z+10,z+10,z+10,z+10,z+10,z+10,z+10,z+11,z+11,z+11,z+11,z+11,z+11,z+11,z+11,z+12,z+12,z+12,z+12,z+12,z+12,z+12,z+12,z+13,z+13,z+13,z+13,z+13,z+13,z+13,z+13,z+14,z+14,z+14,z+14,z+14,z+14,z+14,z+14,z+15,z+15,z+15,z+15,z+15,z+15,z+15,z+15];
var I=[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,97,97,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,97,98,98,98,97,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,97,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,11,98,98,97,11,98,98,98,11,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,97,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,97,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,97,98,97,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,120,98,98,98,120,98,98,98,120,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,109,98,97,98,109,97,98,98,98,109,98,98,97,98,98,98,98,98,120,98,97,11,98,98,11,98,98,11,98,98,98,120,98,98,98,97,98,98,98,98,98,101,101,98,98,98,98,101,98,98,98,98,97,98,98,98,97,97,98,98,98,109,98,98,97,109,98,98,98,98,52,98,98,98,98,98,98,98,98,120,98,98,11,98,98,11,98,98,11,98,98,98,120,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,109,98,98,98,109,98,98,97,98,109,98,98,98,98,98,98,98,98,120,98,98,11,98,98,11,98,98,11,98,98,98,120,98,98,97,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,97,98,120,98,98,98,120,98,98,98,120,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,97,98,98,98,98,98,98,98,11,98,98,98,11,98,98,98,11,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,97,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,97,101,101,98,98,98,97,98,98,98,98,98,98,98,98,98,98,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,97,101,101,98,98,98,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98];
var D=[0,0,0,0,1,0,0,0,1,1,1,1,0,2,1,0,2,0,0,1,2,1,0,2,0,2,1,2,0,0,2,0,2,1,1,1,0,0,0,0,0,0,1,0,0,0,2,2,2,2,1,0,1,0,0,2,1,0,0,2,0,0,1,0,2,1,0,2,1,1,2,0,0,2,4,0,0,0,0,1,0,2,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,2,2,2,0,2,0,0,2,0,0,2,2,0,1,1,0,1,2,0,0,2,0,1,2,0,1,0,0,0,0,1,1,0,0,1,1,0,2,0,2,1,2,0,0,0,0,0,0,2,0,1,2,1,2,0,2,2,0,1,1,0,0,0,2,0,0,0,0,0,0,0,1,1,1,2,2,2,2,0,0,0,1,1,1,1,2,0,1,0,0,0,2,0,0,1,0,1,1,1,0,0,2,0,2,2,2,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,2,0,0,2,1,1,2,1,0,2,0,1,2,2,0,0,0,0,0,2,2,2,0,1,0,0,2,0,0,1,0,0,0,0,2,1,0,1,0,1,1,0,0,0,2,1,2,1,0,1,3,1,1,0,3,2,2,2,3,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,2,0,2,2,2,2,1,0,1,2,0,1,3,0,2,2,0,0,0,1,2,0,1,1,0,0,0,0,2,1,0,2,1,0,1,2,2,0,1,0,0,0,0,0,2,0,0,0,1,2,0,0,2,1,0,1,2,2,0,1,1,2,0,2,2,2,0,1,1,1,0,0,1,0,0,2,0,2,0,0,1,0,0,2,1,0,2,1,0,2,0,0,2,2,2,0,1,0,0,0,1,1,2,0,1,0,0,1,0,0,0,1,1,2,0,2,0,1,1,2,1,0,2,0,2,1,0,2,2,0,1,0,0,2,0,0,1,1,0,1,1,1,0,0,0,0,2,1,0,1,0,0,1,2,0,2,1,1,2,1,1,2,1,0,1,0,0,2,0,0,1,0,1,0,1,0,0,1,1,2,2,2,0,0,1,0,1,0,1,2,0,2,2,1,2,4,0,2,1,1,1,0,0,1,2,0,0,5,1,2,2,1,0,2,1,1,1,1,0,2,0,0,0,0,2,0,2,1,0,2,1,1,1,2,1,0,1,0,1,0,1,0,1,2,2,0,0,1,0,3,2,0,0,0,0,0,1,0,1,1,2,2,0,0,0,0,1,2,1,0,1,0,0,1,0,0,0,2,0,2,2,2,0,2,0,0,0,0,1,0,2,1,0,0,0,1,1,0,2,2,0,0,1,1,1,0,0,1,2,1,1,1,0,1,1,2,1,0,0,0,0,1,2,1,1,1,1,0,1,1,1,0,0,1,1,0,2,2,0,2,2,0,0,0,1,2,0,2,0,2,0,0,1,1,1,0,2,0,0,0,0,1,2,1,0,0,0,0,1,1,0,1,1,2,0,0,2,0,1,2,2,0,0,2,2,1,0,0,0,0,0,2,0,0,0,0,2,0,0,2,1,2,1,1,2,0,0,0,2,1,0,1,2,0,0,2,2,0,2,1,0,0,0,2,1,1,2,0,2,0,0,0,0,2,1,1,2,1,2,2,0,1,1,1,2,0,0,0,2,1,2,0,1,1,1,2,0,0,2,1,2,2,1,1,1,0];
for(n=0;n<1408+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Blacksmith(x,y,z){
var X=[x,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-9,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-8,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-7,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0];
var Y=[y,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+4,y+0,y+1,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+4,y+0,y+1,y+2,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+3,y+4,y+0,y+1,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+3,y+4,y+0,y+1,y+3,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+4,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5];
var Z=[z,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+-6,z+-6,z+-6,z+-6,z+-6,z+-6,z+-5,z+-5,z+-5,z+-5,z+-5,z+-5,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0];
var I=[4,4,17,17,17,17,44,4,5,5,5,4,44,4,5,102,5,4,44,4,5,5,5,4,44,4,5,102,5,4,44,4,5,5,5,4,44,4,17,17,17,17,44,4,5,5,5,4,44,4,5,4,4,53,4,4,4,4,4,4,4,4,5,5,5,4,44,4,5,102,5,4,44,4,53,4,4,85,171,4,4,4,4,4,4,4,4,5,5,5,4,44,4,5,5,5,4,44,4,4,4,4,4,4,4,5,5,5,4,4,5,4,4,17,17,17,17,44,4,5,102,5,4,44,4,4,4,4,4,5,5,5,4,4,4,4,4,4,4,44,4,5,5,5,4,44,4,54,4,4,4,4,5,5,5,4,4,4,4,4,4,85,85,85,4,44,4,4,4,4,4,44,4,4,4,4,4,4,4,4,4,4,4,4,61,61,4,4,4,4,4,4,4,44,4,4,4,4,4,44,4,11,4,4,4,4,4,4,4,4,4,4,4,4,4,4,44,4,4,4,4,4,44,4,11,4,4,4,4,4,4,4,4,4,4,4,43,4,4,4,44,4,4,4,4,4,44,4,4,101,4,4,44,4,4,101,4,4,44,4,4,44,4,4,44,4,4,44,4,85,85,85,4,44];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<420+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Church_1(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9,x+9];
var Y=[y,y+0,y+12,y+0,y+0,y+1,y+0,y+0,y+0,y+5,y+10,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+12,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+5,y+10,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+12,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+12,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+5,y+10,y+0,y+1,y+5,y+10,y+0,y+1,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+0,y+2,y+3,y+4,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+2,y+3,y+4,y+5,y+10,y+0,y+1,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+12,y+0,y+1,y+5,y+6,y+7,y+8,y+9,y+10,y+11,y+0,y+1,y+2,y+3,y+4,y+5,y+10,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+6,y+0,y+1,y+5,y+6,y+0,y+1,y+2,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+5,y+6,y+0,y+1,y+2,y+6,y+0,y+1,y+2,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+6,y+0,y+1,y+2,y+6,y+0,y+1,y+2,y+3,y+6,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0];
var Z=[z,z+-2,z+-2,z+-1,z+0,z+0,z+1,z+2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+2,z+2,z+2,z+2,z+2,z+2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+1,z+1,z+1,z+1,z+1,z+1,z+2];
var I=[0,198,0,198,0,67,2,2,3,4,4,3,4,4,4,4,4,4,4,4,4,4,4,3,4,64,64,4,4,4,102,102,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,3,4,4,4,3,4,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,102,102,4,4,102,102,4,4,4,4,3,4,4,4,3,4,4,4,3,4,4,4,4,4,102,102,4,4,102,102,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,3,4,4,4,3,4,4,4,3,4,65,65,65,65,65,65,65,65,65,3,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,102,102,4,4,4,4,3,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,3,4,4,4,4,4,3,4,67,4,3,4,50,4,3,4,67,4,3,4,4,4,4,4,3,4,4,4,102,4,3,4,4,50,4,3,4,67,4,3,4,4,4,3,4,4,4,102,4,3,4,4,4,4,4,3,4,4,67,4,3,4,4,4,3,4,4,67,4,3,4,4,4,4,4,3,2,3,4,4,4,4,4,3,4,4,4,102,4,3,4,4,4,4,4,2];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<650+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Farm_Small(x,y,z){
var X=[x,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-6,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-5,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-4,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-3,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-2,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+-1,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0];
var Y=[y,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0];
var Z=[z,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-8,z+-7,z+-7,z+-6,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+-8,z+-7,z+-6,z+-5,z+-4,z+-3,z+-2,z+-1,z+0];
var I=[17,17,0,17,97,17,98,17,98,17,98,17,98,17,98,17,98,17,98,17,98,3,98,3,98,3,98,3,98,3,98,3,98,3,98,17,98,17,98,3,98,3,98,3,98,3,98,3,98,3,98,3,98,17,98,17,98,9,97,9,98,9,98,9,98,9,98,9,97,9,98,17,98,17,98,3,98,3,98,3,98,3,98,3,98,3,98,3,98,17,98,17,98,3,98,3,98,3,98,3,98,3,98,3,98,3,98,17,98,17,17,17,17,17,17,17,17,17];
var D=[0,0,0,0,2,0,1,0,0,0,1,0,2,0,1,0,1,0,2,0,1,0,2,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,2,0,1,0,1,0,1,0,0,0,2,0,2,0,0,0,2,0,0,0,0,0,2,0,1,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,2,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0];
for(n=0;n<126+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Small_2(x,y,z){
var X=[x,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5];
var Y=[y,y+0,y+0,y+0,y+1,y+2,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+0,y+1,y+2,y+3,y+4,y+0,y+5,y+0,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+5,y+0,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+5,y+0,y+1,y+2,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+5,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3];
var Z=[z,z+-2,z+0,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0];
var I=[0,67,0,4,17,17,17,4,64,64,5,17,4,5,5,5,17,4,17,17,17,4,5,5,5,17,3,17,3,17,4,5,5,5,17,4,5,102,5,17,3,17,3,17,4,5,102,5,17,4,5,5,5,17,3,17,3,85,171,17,4,5,5,5,17,4,17,17,17,0,4,5,5,5,17,4,5,5,5,17,4,17,17,17];
var D=[0,0,0,0,0,0,0,0,2,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<144+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Village_Well(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3];
var Y=[y,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+2,y+3,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+2,y+3,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+2,y+3,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+4,y+-11,y+-10,y+-9,y+-8,y+-7,y+-6,y+-5,y+-4,y+-3,y+-2,y+-1,y+0,y+1,y+2,y+3,y+4];
var Z=[z,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0,z+0];
var I=[4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,85,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,85,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,9,9,9,4,4,9,9,9,9,9,9,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,9,9,9,4,4,9,9,9,9,9,9,9,9,9,9,9,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,85,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,85,85,4];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<256+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Villager_Farm_Big(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+5,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+6,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+7,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8,x+8];
var Y=[y,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+1,y+0,y+0,y+1,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0,y+0];
var Z=[z,z+-12,z+-11,z+-10,z+-9,z+-8,z+-7,z+-6,z+-5,z+-4,z+-3,z+-2,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-11,z+-11,z+-10,z+-10,z+-9,z+-8,z+-8,z+-7,z+-7,z+-6,z+-5,z+-5,z+-4,z+-4,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+-12,z+-12,z+-11,z+-10,z+-9,z+-8,z+-7,z+-6,z+-5,z+-4,z+-3,z+-2,z+-1,z+0];
var I=[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,141,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,59,17,60,141,60,141,9,60,141,60,141,17,17,60,59,60,59,9,60,141,60,141,17,60,141,60,141,9,60,141,60,141,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,3,7,3,0,7,0,0,0,0,7,0,7,5,0,7,5,7,6,0,0,7,5,7,6,0,7,3,0,6,0,7,2,0,0,0,7,6,7,3,0,0,0,3,7,2,0,7,6,7,6,0,0,0,7,2,0,7,4,0,3,0,0,7,4,7,6,0,7,2,7,6,0,7,3,7,6,0,7,6,7,1,0,0,7,2,7,6,0,7,3,7,4,0,7,1,7,4,0,0,0,7,5,0,0,7,3,7,3,0,7,5,7,0,0,0,2,7,5,0,0,3,0,1,0,0,0,4,0,0,0,7,5,7,0,0,0,3,7,5,0,7,3,7,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<234+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

function Villager_Small_1(x,y,z){
var X=[x,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+0,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+1,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+2,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+3,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4,x+4];
var Y=[y,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+3,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+4,y+0,y+4,y+0,y+1,y+2,y+3,y+4,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5,y+0,y+1,y+2,y+3,y+4,y+5];
var Z=[z,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0,z+-4,z+-4,z+-4,z+-4,z+-4,z+-4,z+-3,z+-3,z+-3,z+-3,z+-3,z+-3,z+-2,z+-2,z+-2,z+-2,z+-2,z+-2,z+-1,z+-1,z+-1,z+-1,z+-1,z+-1,z+0,z+0,z+0,z+0,z+0,z+0];
var I=[4,4,4,4,4,17,85,4,5,5,5,17,85,4,5,17,85,4,5,5,5,17,85,4,4,4,4,17,85,4,5,5,5,17,85,4,5,4,50,5,4,5,4,5,5,5,17,85,4,5,102,5,17,85,4,5,4,5,4,5,4,5,102,5,17,85,4,5,5,5,17,85,4,5,4,5,4,65,65,65,65,4,5,5,5,17,85,4,4,4,4,17,85,4,5,5,5,17,85,4,5,102,5,17,85,4,5,5,5,17,85,4,4,4,4,17,85];
var D=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
for(n=0;n<150+1;n++){
setTile(X[n], Y[n], Z[n], I[n], D[n]);
}
}

ModPE.langEdit('thirdPartyWorld.featuredComingSoon', 'pe.brlns.net : 2000\nplay.easecation.net : 19132\nsw.lbsg.net : 19132');
ModPE.langEdit("enchantment.level.32767","GOD");
var context = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
languagesarr = ["Afrikaans","Albanian","Amharic","Arabic","Armenian","Azerbaijani","Basque","Belarusian","Bengali","Bosnian","Bulgarian","Burmese","Catalan","Cebuano","Chichewa","Chinese","Corsican","Croatian","Czech","Danish","Dutch","English","Esperanto","Estonian","Filipino","Finnish","French","Frisian","Galician","Georgian","German","Greek","Gujarati","Haitian Creole","Hausa","Hawaiian","Hebrew","Hindi","Hmong","Hungarian","Icelandic","Igbo","Indonesian","Irish","Italian","Japanese","Javanese","Kannada","Kazakh","Khmer","Korean","Kurdish (Kurmanji)","Kyrgyz","Lao","Latin","Latvian","Lithuanian","Luxembourgish","Macedonian","Malagasy","Malay","Malayalam","Maltese","Maori","Marathi","Mongolian","Nepali","Norwegian (Bokmål)","Pashto","Persian","Polish","Portuguese","Punjabi","Romanian","Russian","Samoan","Scots Gaelic","Serbian","Sesotho","Shona","Sindhi","Sinhala","Slovak","Slovenian","Somali","Spanish","Sundanese","Swahili","Swedish","Tajik","Tamil","Telugu","Thai","Turkish","Ukrainian","Urdu","Uzbek","Vietnamese","Welsh","Xhosa","Yiddish","Yoruba","Zulu"],
langcodes = ["af","sq","am","ar","hy","az","eu","be","bn","bs","bg","my","ca","ceb","ny","zh-CN","co","hr","cs","da","nl","en","eo","et","fil","fi","fr","fy","gl","ka","de","el","gu","ht","ha","haw","iw","hi","hmn","hu","is","ig","id","ga","it","ja","jw","kn","kk","km","ko","ku","ky","lo","la","lv","lt","lb","mk","mg","ms","ml","mt","mi","mr","mn","ne","no","ps","fa","pl","pt-PT","pa","ro","ru","sm","gd","sr","st","sn","sd","si","sk","sl","so","es","su","sw","sv","tg","ta","te","th","tr","uk","ur","uz","vi","cy","xh","yi","yo","zu"],
lansele = 0;

var downloadDir = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/Download");

function deleteExcess(){
if(downloadDir.exists() || downloadDir.isDirectory()){
var list = downloadDir.listFiles();
for(var i = 0; i < list.length; i++){
if(list[i].isFile()) {
if(list[i].getName().endsWith(".js") || list[i].getName().endsWith(".modpkg")){
if(list[i].getName().toLowerCase().includes('instinct')){
var file = java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/Download", list[i].getName());
file.delete();}
}}}
}
}deleteExcess();

function disableOther(){
if(downloadDir.exists() || downloadDir.isDirectory()){
var list = downloadDir.listFiles();
for(var i = 0; i < list.length; i++){
if(list[i].isFile()) {
if(list[i].getName().endsWith(".js") || list[i].getName().endsWith(".modpkg")){
if(list[i].getName().toLowerCase().includes('instinct')){
var file = java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath()+"/Download", list[i].getName());
file.delete();}
}}}
}
}disableOther();

/*
var modpeFolder = ctx.getDir("modscripts", 0);
var modpeFile = new java.io.File(modpeFolder, "Instinct-Unreleased.js");
var update = new java.io.PrintWriter(modpeFile);
update.write(updateMod);
update.flush();
update.close();

try {
net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(modpeFile, false);
net.zhuoweizhang.mcpelauncher.ScriptManager.setEnabled(modpeFile, true);
}
*/

function chatlangedit(){
context.runOnUiThread(function() {
var alert = new android.app.AlertDialog.Builder(context),
spinner = new  android.widget.Spinner(context),
spinnerAdapter = new android.widget.ArrayAdapter(context, android.R.layout.simple_spinner_item, languagesarr);

//define how the dropdown views look
spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

//add the adaper to the spinner
spinner.setAdapter(spinnerAdapter);

//set selected item
spinner.setSelection(lansele);

//listener to do something when the selection changes
spinner.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener({
onItemSelected: function(parent, view, pos, id) {
lansele = pos;
translatelang="googtrans(auto|"+langcodes[pos]+")";
}/* , onNothingSelected: function(parent) {} */
}));

alert.setView(spinner);
alert.setTitle("Translator Language");
alert.setPositiveButton("Ok", function(dialog, whichButton) {
alert.dismiss();
});
alert = alert.show();
});
}

var context = com.mojang.minecraftpe.MainActivity.currentMainActivity.get(),
fontlist = ["Minecraft","Roboto Regular","Roboto Light","Roboto Condensed","Roboto Thin"],
fontsele = 0;
function choosefont(){
context.runOnUiThread(function() {
var alert = new android.app.AlertDialog.Builder(context),
spinner = new  android.widget.Spinner(context),
spinnerAdapter = new android.widget.ArrayAdapter(context, android.R.layout.simple_spinner_item, fontlist);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);

var swtxt = android.widget.TextView(ctx);
swtxt.setTextSize(12);
swtxt.setText(" Switch Font Size:");
switchsize=new android.widget.EditText(activity);
switchsize.setText(switchfontsize.toString());
switchsize.setHint("switch font size");
var bttxt = android.widget.TextView(ctx);
bttxt.setTextSize(12);
bttxt.setText(" Button Font Size:");
btnsize=new android.widget.EditText(activity);
btnsize.setText(btntextsize.toString());
btnsize.setHint("button font size");
var fontsel = android.widget.TextView(ctx);
fontsel.setTextSize(12);
fontsel.setText(" Font:");
menuLayout1.addView(swtxt);
menuLayout1.addView(switchsize);
menuLayout1.addView(bttxt);
menuLayout1.addView(btnsize);
menuLayout1.addView(fontsel);
//define how the dropdown views look
spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

//add the adaper to the spinner
spinner.setAdapter(spinnerAdapter);

//set selected item
spinner.setSelection(fontsele);

//listener to do something when the selection changes
spinner.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener({
onItemSelected: function(parent, view, pos, id) {
fontsele = pos;
}/* , onNothingSelected: function(parent) {} */
}));
menuLayout1.addView(spinner);

var tptxt = android.widget.TextView(ctx);
tptxt.setTextSize(12);
tptxt.setText(" Mod Padding:");
toppadd=new android.widget.EditText(activity);
toppadd.setText((modPadT+modPadB).toString());
toppadd.setHint("mod padding");
toppadd.setInputType(numbers);
menuLayout1.addView(tptxt);
menuLayout1.addView(toppadd);

var menuwi = android.widget.TextView(ctx);
menuwi.setTextSize(12);
menuwi.setText(" Menu Width:");
menet=new android.widget.EditText(activity);
menet.setText((list_width_var).toString());
menet.setHint("menu width");
menet.setInputType(numbers);
menuLayout1.addView(menuwi);
menuLayout1.addView(menet);

var defwi = new android.widget.Button(ctx);
defwi.setText("Default Width");
defwi.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
menet.setText((200).toString());
}
});
menuLayout1.addView(defwi);

menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);

alert.setView(menuLayout);
alert.setTitle("GUI Settings");
alert.setPositiveButton("Ok", function(dialog, whichButton) {
alert.dismiss();
try{
iconcount=2;
btntextsize= parseInt(btnsize.getText());
switchfontsize = parseInt(switchsize.getText());
modPadT= parseInt(toppadd.getText()/2);
modPadB = parseInt(toppadd.getText()/2);
list_width_var = parseInt(menet.getText());
list_width = list_width_var*density;
if(!helpB){iconcount--}
if(!iconsB){iconcount--}
switch_width = ((list_width-(icon_dimensions*iconcount))-gap_width);
wayNameWidth = list_width-(icon_dimensions*4);
if(toppadd.getText()==""){modPadT=0;modPadB=0}
if(fontsele==0){fontid="mc";mcfont = new android.graphics.Typeface.createFromFile(mcfontpath4);}
if(fontsele==1){fontid="ss";mcfont = Typeface.create("sans-serif", Typeface.NORMAL)}
if(fontsele==2){fontid="ssl";mcfont = Typeface.create("sans-serif-light", Typeface.NORMAL)}
if(fontsele==3){fontid="ssc";mcfont = Typeface.create("sans-serif-condensed", Typeface.NORMAL)}
if(fontsele==4){fontid="sst";mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)}
saveTheme();
}catch (err) {
mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL);betToast('Font not supported');
}
});
alert = alert.show();
});
}
function tabdisable(){
context.runOnUiThread(function() {
var alert = new android.app.AlertDialog.Builder(context),
spinner = new  android.widget.Spinner(context),
spinnerAdapter = new android.widget.ArrayAdapter(context, android.R.layout.simple_spinner_item, fontlist);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);

var swtxt = android.widget.TextView(ctx);
swtxt.setTextSize(12);
swtxt.setText(" Choose tabs to disable/enable");
menuLayout1.addView(swtxt);

var button = new CheckBox(ctx);
button.setText("Survival");
button.setChecked(survivaltab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!survivaltab) {
survivaltab = true;
} else {
survivaltab = false; } saveTheme(); } })); menuLayout1.addView(button);
var button = new CheckBox(ctx);
button.setText("PVP Tab");
button.setChecked(pvptab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!pvptab) {
pvptab = true;
} else {
pvptab = false; } saveTheme(); } })); menuLayout1.addView(button);
var button = new CheckBox(ctx);
button.setText("Waypoint Tab");
button.setChecked(waypointtab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!waypointtab) {
waypointtab = true;
} else {
waypointtab = false; } saveTheme(); } })); menuLayout1.addView(button);
var button = new CheckBox(ctx);
button.setText("Friend Tab");
button.setChecked(friendtab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!friendtab) {
friendtab = true;
} else {
friendtab = false; } saveTheme(); } })); menuLayout1.addView(button);
var button = new CheckBox(ctx);
button.setText("Potion Tab");
button.setChecked(potiontab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!potiontab) {
potiontab = true;
} else {
potiontab = false; } saveTheme(); } })); menuLayout1.addView(button);
var button = new CheckBox(ctx);
button.setText("Movement Tab");
button.setChecked(movementtab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!movementtab) {
movementtab = true;
} else {
movementtab = false; } saveTheme(); } })); menuLayout1.addView(button);
var button = new CheckBox(ctx);
button.setText("Discord Tab");
button.setChecked(discordtab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!discordtab) {
discordtab = true;
} else {
discordtab = false; } saveTheme(); } })); menuLayout1.addView(button);
var button = new CheckBox(ctx);
button.setText("Misc Tab");
button.setChecked(misctab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!misctab) {
misctab = true;
} else {
misctab = false; } saveTheme(); } })); menuLayout1.addView(button);
var button = new CheckBox(ctx);
button.setText("Preset Tab");
button.setChecked(presettab); button.setOnClickListener(new View.OnClickListener({ onClick: function(view) {
if (!presettab) {
presettab = true;
} else {
presettab = false; } saveTheme(); } })); menuLayout1.addView(button);



menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);

alert.setView(menuLayout);
alert.setTitle("Tabs");
alert.setPositiveButton("Ok", function(dialog, whichButton) {
alert.dismiss();
try{
saveTheme();
}catch (err) {
}
});
alert = alert.show();
});
}

function newTip(i){
var tipTotal = tipList.length;
curTip = Math.floor(Math.random() * tipList.length-1);
if(curTip==0){curTip=1}
if(curTip==-1){curTip=1}
tipMessage = "Tip "+curTip+"/"+(tipTotal+1)+"\n"+tipList[curTip];
}

function roundPart(part,x,y,z,diameter,size,velX,velY,velZ){
diameter = diameter/2;
if(!velX){velX=0;}
if(!velY){velY=0;}
if(!velZ){velZ=0;}
for(var i=0;i<2*(Math.PI*diameter);i = i + 0.1){
Level.addParticle(part,x+0.5+Math.sin(i)*diameter,y,z+0.5+Math.cos(i)*diameter,velX,velY,velZ,size)
}
}
function openMenuCloseBtn() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
newTip();
if (!sleekMenuOn) {

var sleekUIbtnSet1 = new android.graphics.drawable.GradientDrawable();
sleekUIbtnSet1.setColor(android.graphics.Color.BLACK);
sleekUIbtnSet1.setStroke(3, themeStroke);
sleekUIbtnSet1.setCornerRadius(0);
sleekUIbtnSet1.setAlpha(0);
var discordBack = new android.graphics.drawable.GradientDrawable();
discordBack.setColor(android.graphics.Color.BLACK);
discordBack.setCornerRadius(0);
discordBack.setAlpha(140);
discordBack.setStroke(2, themeStroke);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var closebtnBackground = new android.graphics.drawable.GradientDrawable();
closebtnBackground.setColor(themeStrokeRed);
closebtnBackground.setCornerRadius(0);
closebtnBackground.setAlpha(255);
closebtnBackground.setStroke(2, themeStroke);
var chatbtnBackground = new android.graphics.drawable.GradientDrawable();
chatbtnBackground.setColor(themeStrokeWhite);
chatbtnBackground.setCornerRadius(0);
chatbtnBackground.setAlpha(255);
chatbtnBackground.setStroke(2, themeStroke);
var bgClicked = new android.graphics.drawable.GradientDrawable();
bgClicked.setColor(themeBackground);
bgClicked.setStroke(0, themeStroke);
bgClicked.setCornerRadius(0);
bgClicked.setAlpha(255);
var bgNotClicked = new android.graphics.drawable.GradientDrawable();
bgNotClicked.setColor(themeForeground);
bgNotClicked.setStroke(4, themeStroke);
bgNotClicked.setCornerRadius(5);
var sideMenuStroke = new android.graphics.drawable.GradientDrawable();
sideMenuStroke.setStroke(4, themeStroke);
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setStroke(4, themeStroke);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
menuLayoutw.setBackground(discordBack);
var buttonSurvival = new android.widget.Button(ctx);
buttonSurvival.setText("");
buttonSurvival.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonSurvival.getLayoutParams().height = icon_dimensions*.1;
buttonSurvival.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonSurvival.getBackground().setAlpha(0);
menuLayoutw.addView(buttonSurvival);
var scrollText = new android.widget.TextView(ctx);
scrollText.setText("Client made by " + creator + " - Client Version " + versionP + " - " + modNum + " Modules");
scrollText.setTextSize(switchfontsize);
scrollText.setTextColor(android.graphics.Color.YELLOW);
scrollText.setEllipsize(android.text.TextUtils.TruncateAt.MARQUEE);
scrollText.setMarqueeRepeatLimit(-1);
scrollText.setSingleLine();
scrollText.setTypeface(mcfont);
scrollText.setHorizontallyScrolling(true);
scrollText.setSelected(true);
menuLayoutw.addView(scrollText);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close Menu"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.WHITE);
button.setTextSize(titleSize);
button.setBackground(closebtnBackground);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(closeicon, 0), 0, android.util.Base64.decode(closeicon, 0).length)));
button.getBackground().setAlpha(240);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
closeEverything();
}
}));
menuLayoutw.addView(button);
var showEverythingLayout = new android.widget.LinearLayout(ctx);
var menuScroll2 = new android.widget.ScrollView(ctx);
var menuLayout2 = new android.widget.LinearLayout(ctx);
showEverythingLayout.setOrientation(1);
menuLayout2.setOrientation(1);
menuScroll2.addView(showEverythingLayout);
menuLayout2.addView(menuScroll2);
showEverythingLayout.setOrientation(1);
menuLayout2.setOrientation(1);
var slayout8 = new android.widget.LinearLayout(activity);
slayout8.setOrientation(1);
slayout8.setBackground(sleekUIbtnSet1);
var ToggleButton = android.widget.ToggleButton;
var View = android.view.View;
var button = new TextView(ctx);
button.setText(langMsg[language]["Enable PVP Menu"]);
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if(backOpen){try{guiBackgroundGif.dismiss();backOpen=false;} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}}
if (!showAllMenuStatus) {
closeMenus();
showAllMenu = true;
showSleekMenuOn=false;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
}
} else if (showAllMenuStatus) {
showAllMenu = false;
showSleekMenuOn=true;
menuC.dismiss();
closeMenus();
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true) {
changeGUI8.dismiss();
openMenu8Status = false;
}

if (openMenu9Status == true) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true) {
changeGUI11.dismiss();
openMenu11Status = false;
}

GUIclose.dismiss();
if (colormychatd == true) {
GUIs.dismiss();
}
}
}
}));
slayout8.addView(button);
var button = new TextView(ctx);
button.setText("Simple UI");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {

if(publicVer!="OFFLINE"){	
if(backOpen){try{guiBackgroundGif.dismiss();backOpen=false;} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}}
betToast("Go to settings to revert to default UI");
if (!showAllMenuStatus) {
closeMenus();
showAllMenu = true;
showSleekMenuOn=false;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
if (showHTMLMenu) {
GUIsleek.dismiss();
showHTMLMenu = false;
GUIclose.dismiss();
}
} else if (showAllMenuStatus) {
showAllMenu = false;
showHTMLMenu=true;
sleekMenuOn = false;
showSleekMenuOn=false;
showAllMenu = false;
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
menuC.dismiss();
closeMenus();
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true) {
changeGUI8.dismiss();
openMenu8Status = false;
}

if (openMenu9Status == true) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true) {
changeGUI11.dismiss();
openMenu11Status = false;
}

GUIclose.dismiss();
if (colormychatd == true) {
GUIs.dismiss();
}
}
}else{betToast("Online connection required")}
}
}));
slayout8.addView(button);
var button = new TextView(ctx);
button.setText("Support Instinct for Free");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
supportIns();
supportIns2();
supportclicks=supportclicks+1;
betToast("You've supported Instinct "+supportclicks+" times!");
saveTheme();
}
}));

var button = new TextView(ctx);
button.setText("Chat Room");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
chatroomPopup();
}
}));
var button = new android.widget.Button(ctx);
button.setText(tipMessage);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.WHITE);
button.setBackground(discordBack);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.getBackground().setAlpha(100);
slayout8.addView(button);
menuLayoutw.addView(slayout8);
GUIclose = new PopupWindow(menuLayout1, close_width, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
if(animations){GUIclose.setAnimationStyle(android.R.style.Animation_Toast);}
GUIclose.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
if(allRight){
GUIclose.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.LEFT, 0, 0);
}else{
GUIclose.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.RIGHT, 0, 0);
}

} else {
openMenuCloseBtnSleek();
}
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function discordPopup() {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);

var tmiLayout = new android.widget.LinearLayout(ctx);
var verticallay = new android.widget.LinearLayout(ctx);
var tmiMainHor = new android.widget.LinearLayout(ctx);
tmiMainHor.setBackground(bg);
infoBox = new android.webkit.WebView(ctx);
infoBox.getSettings().setJavaScriptEnabled(true);
infoBox.setWebChromeClient(new android.webkit.WebChromeClient());
infoBox.setWebViewClient(new android.webkit.WebViewClient());
infoBox.loadUrl("https://discordapp.com/invite/DJDwcZ?utm_source=Discord%20Widget&utm_medium=Connect");
var menuScroll = new android.widget.ScrollView(ctx);
menuScroll.addView(infoBox);
tmiMainHor.addView(tmiLayout);
tmiMainHor.addView(menuScroll);
verticallay.addView(tmiMainHor);
disDialog = new PopupWindow(verticallay, ctx.getWindowManager().getDefaultDisplay().getWidth() / 3, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){disDialog.setAnimationStyle(android.R.style.Animation_Toast);}
disDialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
disDialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function resetBoxes(){
var playerArrayName = []; for(var i = 0; i < Server.getAllPlayers().length; i++){ playerArrayName.push([Server.getAllPlayerNames()[i]]); }
playerArrayName.forEach(function(entry, index){ Entity.setCollisionSize(Server.getAllPlayers()[playerArrayName.indexOf(entry)], 0.6, 1.8); }); 
}
function openMenuCloseBtnSleek() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var sleekUIbtnSet1 = new android.graphics.drawable.GradientDrawable();
sleekUIbtnSet1.setColor(themeForeground);
sleekUIbtnSet1.setStroke(3, themeStroke);
sleekUIbtnSet1.setCornerRadius(0);
sleekUIbtnSet1.setAlpha(180);
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(themeBackground);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
var closebtnBackground = new android.graphics.drawable.GradientDrawable();
closebtnBackground.setColor(themeForegroundRed);
closebtnBackground.setCornerRadius(0);
closebtnBackground.setAlpha(255);
closebtnBackground.setStroke(2, themeStroke);
var bgClicked = new android.graphics.drawable.GradientDrawable();
bgClicked.setColor(themeBackground);
bgClicked.setStroke(0, themeStroke);
bgClicked.setCornerRadius(0);
bgClicked.setAlpha(255);
var bgNotClicked = new android.graphics.drawable.GradientDrawable();
bgNotClicked.setColor(themeForeground);
bgNotClicked.setStroke(4, themeStroke);
bgNotClicked.setCornerRadius(5);
var sideMenuStroke = new android.graphics.drawable.GradientDrawable();
sideMenuStroke.setStroke(4, themeStroke);
var sideMenuStrokeSpace = new android.graphics.drawable.GradientDrawable();
sideMenuStrokeSpace.setStroke(4, themeStroke);
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeForeground);
title.setStroke(1, themeStroke);
title.setCornerRadius(0);if(swapForeground){
var title = new android.graphics.drawable.GradientDrawable();
title.setColor(themeStroke);
title.setStroke(1, themeForeground);
title.setCornerRadius(0);
}
var menuLayoutw = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayoutw.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayoutw);
menuLayout1.addView(menuScroll);
menuLayoutw.setBackground(closebtnBackground);
var buttonSurvival = new android.widget.Button(ctx);
buttonSurvival.setText("");
buttonSurvival.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
buttonSurvival.getLayoutParams().height = 10;
buttonSurvival.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
buttonSurvival.getBackground().setAlpha(0);
menuLayoutw.addView(buttonSurvival);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Close"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(android.graphics.Color.WHITE);
button.setTextSize(titleSize);
button.setBackground(closebtnBackground);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(closeicon, 0), 0, android.util.Base64.decode(closeicon, 0).length)));
button.getBackground().setAlpha(240);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
closeEverything();
}
}));
menuLayoutw.addView(button);
var showEverythingLayout = new android.widget.LinearLayout(ctx);
var menuScroll2 = new android.widget.ScrollView(ctx);
var menuLayout2 = new android.widget.LinearLayout(ctx);
showEverythingLayout.setOrientation(1);
menuLayout2.setOrientation(1);
menuScroll2.addView(showEverythingLayout);
menuLayout2.addView(menuScroll2);
showEverythingLayout.setOrientation(1);
menuLayout2.setOrientation(1);
var slayout8 = new android.widget.LinearLayout(activity);
slayout8.setOrientation(1);
slayout8.setBackground(sleekUIbtnSet1);
var ToggleButton = android.widget.ToggleButton;
var View = android.view.View;
var button = new TextView(ctx);
button.setText("Default GUI");
button.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
button.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(pvpicon, 0), 0, android.util.Base64.decode(pvpicon, 0).length)));
button.setTextColor(android.graphics.Color.WHITE);
button.setTypeface(mcfont);
button.setTextSize(switchfontsize);
button.setPadding(0,icon_dimensions*.4,0,icon_dimensions*.4);
button.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
button.setOnClickListener(new View.OnClickListener({
onClick: function(view) {
if (!showAllMenuStatus) {
closeMenus();
showAllMenu = true;
showSleekMenuOn=false;
showAllMenuStatus = true;
showAllMenuStatusOpposite = false;
if (sleekMenuOn) {
GUIsleek.dismiss();
sleekMenuOn = false;
GUIclose.dismiss();
}
} else if (showAllMenuStatus) {
showAllMenu = false;
showSleekMenuOn=true;
menuC.dismiss();
closeMenus();
showAllMenuStatus = false;
showAllMenuStatusOpposite = true;
mopen = false;
if (openMenu1Status == true) {
changeGUI.dismiss();
openMenu1Status = false;
}
if (openMenu2Status == true) {
changeGUI2.dismiss();
openMenu2Status = false;
}
if (openMenu3Status == true) {
changeGUI3.dismiss();
openMenu3Status = false;
}
if (openMenu4Status == true) {
changeGUI4.dismiss();
openMenu4Status = false;
}
if (openMenu5Status == true) {
changeGUI5.dismiss();
openMenu5Status = false;
}
if (openMenu6Status == true) {
changeGUI6.dismiss();
openMenu6Status = false;
}
if (openMenu7Status == true) {
changeGUI7.dismiss();
openMenu7Status = false;
}
if (openMenu8Status == true) {
changeGUI8.dismiss();
openMenu8Status = false;
}

if (openMenu9Status == true) {
changeGUI9.dismiss();
openMenu9Status = false;
}
if (openMenu10Status == true) {
changeGUI10.dismiss();
openMenu10Status = false;
}
if (openMenu11Status == true) {
changeGUI11.dismiss();
openMenu11Status = false;
}

GUIclose.dismiss();
if (colormychatd == true) {
GUIs.dismiss();
}
}
}
}));
slayout8.addView(button);
menuLayoutw.addView(slayout8);
GUIclose = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / closemenuWidth, LayoutParams.WRAP_CONTENT);
if(animations){GUIclose.setAnimationStyle(android.R.style.Animation_Toast);}
GUIclose.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
GUIclose.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.RIGHT, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function confirmSuicide() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var helpLine = android.widget.TextView(ctx);
var txtAmount = android.widget.TextView(ctx);
var txtDamage = android.widget.TextView(ctx);
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Yes");
helpLine.setTextSize(12);
helpLine.setText("Suicide Help Line: 1-800-273-8255");
var confirmSuicideDialog = new android.app.Dialog(ctx);
confirmSuicideDialog.setContentView(tmiLayout);
confirmSuicideDialog.setTitle("Suicide: Are you sure?");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
tmiLayout.addView(helpLine);
confirmSuicideDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Entity.setPositionRelative(getPlayerEnt(), 0, -300, 1);
confirmSuicideDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
confirmSuicideDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
function renamePopup() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var cancelBtn = android.widget.Button(ctx);
cancelBtn.setText("Cancel");
var tmiLayout = new android.widget.LinearLayout(ctx);
var etName = new android.widget.EditText(ctx);
var txtName = android.widget.TextView(ctx);
txtName.setTextSize(12);
txtName.setText(" Name:");
var addBtn = new android.widget.Button(ctx);
addBtn.setText("Rename");
etName.setText("");
etName.setHint("Name");
var tmiDialog = new android.app.Dialog(ctx);
tmiDialog.setContentView(tmiLayout);
tmiDialog.setTitle("Anvil");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiLayout.addView(txtName);
tmiLayout.addView(etName);
tmiLayout.addView(addBtn);
tmiLayout.addView(cancelBtn);
tmiDialog.show();
addBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
Player.setItemCustomName(Player.getSelectedSlotId(), etName.getText());
tmiDialog.dismiss();
}
});
cancelBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
tmiDialog.dismiss();
}
});
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};
function gifedit() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function(viewarg) {
try {
var scriptalert=new android.app.AlertDialog.Builder(activity);
scriptalert.setTitle("Script");
var tmiLayout = new android.widget.LinearLayout(ctx);
var etName = new android.widget.EditText(ctx);
var txtName = android.widget.TextView(ctx);
var txtspace = android.widget.TextView(ctx);
txtName.setTextSize(12);
txtName.setText(" Link:");
var link1 = new android.widget.Button(ctx);
var link2 = new android.widget.Button(ctx);
var link3 = new android.widget.Button(ctx);
link1.setTransformationMethod(null);
link2.setTransformationMethod(null);
link3.setTransformationMethod(null);
link1.setText("Robot");
link2.setText("Rubix");
link3.setText("Moon");
etName.setText(giflink);
etName.setTextSize(7);
etName.setHint("URL to GIF");
tmiLayout.setGravity(android.view.Gravity.CENTER);
tmiLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
tmiLayout.addView(txtName);
tmiLayout.addView(etName);
tmiLayout.addView(link1);
tmiLayout.addView(link2);
tmiLayout.addView(link3);

link1.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
etName.setText(gif1);
}
});
link2.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
etName.setText(gif2);
}
});
link3.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
etName.setText(gif3);
}
});

scriptalert.setPositiveButton("Apply",new android.content.DialogInterface.OnClickListener(){

onClick: function(dialog,whichButton){
if(etName.getText().toString().toLowerCase().includes('http')&&etName.getText().toString().toLowerCase().includes('://')){

if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
giflink=etName.getText();
useGIF=true;
savemod("GIF Background");
loadgif();
}else{betToast("Link does not include 'http://' or 'https://'")}
}
});

scriptalert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
scriptalert.setView(tmiLayout);
scriptalert.show().getWindow().setLayout(fullwidth, fullheight);
} catch (err) {
betToast("An error occured: " + err+' #' + err['lineNumber']);
}
}
}));
};

function loadgif(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
gifback=new android.webkit.WebView(activity);
gifback.getSettings().setJavaScriptEnabled(true);
gifback.getSettings().setUserAgentString("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/20100101 Firefox/4.0");
gifback.loadUrl(giflink);
gifback.getSettings().setUseWideViewPort(true);
gifback.getSettings().setLoadWithOverviewMode(true);
gifback.setBackgroundColor(Color.TRANSPARENT);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
})) 
};
loadgif();
function openBackground() {
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
backOpen=true;

if(compactView){guiBackgroundGif = new PopupWindow(gifback, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight()-(icon_dimensions*tab_height));}
else{guiBackgroundGif = new PopupWindow(gifback, list_width, ctx.getWindowManager().getDefaultDisplay().getHeight());}
if(animations){guiBackgroundGif.setAnimationStyle(android.R.style.Animation_Toast);}
if(allRight){
guiBackgroundGif.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.CENTER, +left_width, 0);
}if(compactView){
guiBackgroundGif.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, 0, 0);
}
if(!compactView&!allRight){guiBackgroundGif.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.CENTER, +left_width, 0);}

guiBackgroundGif.setTouchable(false);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
function draw(newX,newY,newZ,id){
if(checkX.indexOf(parseInt(newX)) == -1 && checkZ.indexOf(parseInt(newZ)) == -1){
espBlocks.push([newX,newY,newZ,id]);
checkX.push(parseInt(newX));
checkZ.push(parseInt(newZ));
betToast("Block Found");
}
}
var checkX = ["."];
var checkZ = ["."];
var poolc;
function cpuClock(){
try{
poolc.schedule(new java.lang.Runnable(function(){
android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
if(confirmScreenSafe()){
if(blockEspTracer){

var x = getPlayerX();
var y = getPlayerY();
var z = getPlayerZ();
var newX;
var newY;
var newZ;
for(var blockX = -20; blockX <= 20; blockX++) {
for(var blockY = -70; blockY <= 30; blockY++) {
for(var blockZ = -20; blockZ <= 20; blockZ++) {
newX = x + blockX;
newY = y + blockY;
newZ = z + blockZ;
if(confirmScreenSafe()){
var selectedTile = getTile(newX, newY, newZ);
if(selectedTile == espBlock||espBlock2!==0&&selectedTile == espBlock2||espBlock3!==0&&selectedTile == espBlock3||espBlock4!==0&&selectedTile == espBlock4||espBlock5!==0&&selectedTile == espBlock5||espBlock6!==0&&selectedTile == espBlock6||espBlock7!==0&&selectedTile == espBlock7||espBlock8!==0&&selectedTile == espBlock8){
draw(newX,newY,newZ,selectedTile);
}
}
}
}
}

}
}
cpuClock();
eval(cpuClock());
}), 1, java.util.concurrent.TimeUnit.NANOSECONDS);
}catch(error){

}
}

function playerStatName(){
var players = Server.getAllPlayers();
players.forEach(function (entry){
if(Entity.getNameTag(entry)!==null){
if(Entity.getNameTag(entry).includes(',')){
if(Entity.getNameTag(entry).split(',')[0]==""&getTile(Entity.getX(entry), Entity.getY(entry) - 2, Entity.getZ(entry))!=0){
setTile(Entity.getX(entry),Entity.getY(entry)-2,Entity.getZ(entry),35,2);
}
var entityOriName = Entity.getNameTag(entry).split(',')[0];
Entity.setNameTag(entry, entityOriName+","+"\n"+Entity.getHealth(entry)+"/"+Entity.getMaxHealth(entry)+"\n"+Item.getName(Entity.getCarriedItem(entry), Entity.getCarriedItemData(entry), false)+":"+Entity.getCarriedItemData(entry));
}else{

Entity.setNameTag(entry, Entity.getNameTag(entry)+","+"\n"+Entity.getHealth(entry)+"/"+Entity.getMaxHealth(entry)+"\n"+Item.getName(Entity.getCarriedItem(entry), Entity.getCarriedItemData(entry), false)+":"+Entity.getCarriedItemData(entry));
}}
})
}






function ascii(id){
if(id=='1'){
Server.sendChat(" o==[]::::::::::::::>");
}
if(id=='2'){
Server.sendChat('(⌐■_■)');
}
if(id=='3'){
Server.sendChat('┌∩┐(◣_◢)┌∩┐');
}
if(id=='4'){
Server.sendChat('♚ ♛ ♜ ♝ ♞ ♟ ♔ ♕ ♖ ♗ ♘ ♙');
}
if(id=='5'){
Server.sendChat('龴ↀ◡ↀ龴');
}
if(id=='6'){
Server.sendChat('✈');
}
if(id=='7'){
Server.sendChat('︻デ═一');
}
if(id=='8'){
Server.sendChat('(⌐■_■)--︻╦╤─ - - -');
}
if(id=='9'){
Server.sendChat('༼ つ ◕_◕ ༽つ ');
}
if(id=='10'){
Server.sendChat('ᶠᶸᶜᵏ♥ᵧₒᵤ');
}
}




function appendServer(name, ip, port) {
var file = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe", "external_servers.txt");
exWr = new FileWriter(file, true);
exWr.append("\n1" + Math.random() + ":" + name + ":" + ip + ":" + port + ":9" + Math.random());
exWr.flush();
};

function deleteData() {
var waypointfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "waypoints.txt");
if (waypointfile.exists()) {
waypointfile.delete();
}
var themesfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "instinctdata6.json");
if (themesfile.exists()) {
themesfile.delete();
}
var wayTxt = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "waypoints2.txt");
if (wayTxt.exists()) {
wayTxt.delete();
}
var friTxt = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "friends_I.txt");
if (friTxt.exists()) {
friTxt.delete();
}
restartClient();
};
function clearInstinctData() {
var themesfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "instinctdata6.json");
if (themesfile.exists()) {
themesfile.delete();
}
restartClient();
};
function saveWay(path2, filename, content) {
try {
java.io.File(path2).mkdirs();
var newFile = new java.io.File(path2, filename);
newFile.createNewFile();
var outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
outWrite.append(content);
outWrite.close();
} catch (err) {
clientMessage(err);
}
};

function loadWayFile(path2, filename) {
var content = "";
if (java.io.File(path2 + filename).exists()) {
var file = new java.io.File(path2 + filename),
fos = new java.io.FileInputStream(file),
str = new java.lang.StringBuilder(),
ch;
while ((ch = fos.read()) != -1) {
str.append(java.lang.Character(ch));
}
content = String(str.toString());
fos.close();
}
return content;
};
function loadTheme(){
var themesfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "instinctdata6.json");
if(themesfile.exists()){
var readed = (new java.io.BufferedReader(new java.io.FileReader(themesfile)));
var data = new java.lang.StringBuilder();
var string;
while((string = readed.readLine()) != null){
data.append(string);
data.append("\n");
}
var json = JSON.parse(data.toString());
var themeId = json.themeId;
themeBtn = json.themeBtn;
sleekLeft = json.sleekLeft;
oldTMI = json.oldTMI;
crosshairDimension = json.crosshairDimension;
FovsbpProgress = json.FovsbpProgress;
aimbotRange = json.aimbotRange;
autoBlockB = json.autoBlockB;
animations = json.animations;
chlogAlways = json.chlogAlways;
helpB = json.helpB;
iconsB = json.iconsB;
allRight = json.allRight;
showGradient = json.showGradient;
fontid = json.font;
themeAlpha = parseInt(json.themeAlpha);
btntextsize = parseInt(json.btntextsize);
switchfontsize = parseInt(json.switchfontsize);
themeStrokeBlack = amoledBorderRGB;
if(json.modPadT!=null&json.modPadT!=undefined){
modPadT = parseInt(json.modPadT);
modPadB = parseInt(json.modPadB);
}else{
modPadT = icon_dimensions/4;
modPadB = icon_dimensions/4;
}
if(json.supportclicks!=null&json.supportclicks!=undefined){
supportclicks = parseInt(json.supportclicks);
}else{
supportclicks = 0;
}
if(json.list_width!=null&json.list_width!=undefined){
list_width_var = parseInt(json.list_width);
list_width = list_width_var*density;
iconcount=2;
if(!helpB){iconcount--}
if(!iconsB){iconcount--}
switch_width = ((list_width-(icon_dimensions*iconcount))-gap_width);
wayNameWidth = list_width-(icon_dimensions*4);
}else{
list_width_var = 200;
list_width = list_width_var*density;
}
if(json.compactView!=null&json.compactView!=undefined){
compactView = json.compactView;
}else{
compactView = false;
}
if(json.vibrations!=null&json.vibrations!=undefined){
vibrations = json.vibrations;
}else{
vibrations = true;
}
if(json.displayActiveMods!=null&json.displayActiveMods!=undefined){
displayActiveMods = json.displayActiveMods;
}else{
displayActiveMods = false;
}
if(json.giflink!=null&json.giflink!=undefined){
giflink = json.giflink;
useGIF = json.useGIF;
}else{
giflink = "no";
useGIF=false;
}
if(json.showParticles!=null&json.showParticles!=undefined){showParticles = json.showParticles;}
if(json.amoledRed!=null&json.amoledRed!=undefined){amoledRed=parseInt(json.amoledRed)/255;}
if(json.amoledGreen!=null&json.amoledGreen!=undefined){amoledGreen=parseInt(json.amoledGreen)/255;}
if(json.amoledBlue!=null&json.amoledBlue!=undefined){amoledBlue=parseInt(json.amoledBlue)/255;}
amoledBorderRGB = android.graphics.Color.rgb(amoledRed, amoledGreen, amoledBlue);
if(json.firstloadsince7!=null&json.firstloadsince7!=undefined){firstloadsince7 = json.firstloadsince7;}
if(json.survivaltab!=null&json.survivaltab!=undefined){
survivaltab = json.survivaltab;
pvptab = json.pvptab;
waypointtab = json.waypointtab;
friendtab = json.friendtab;
potiontab = json.potiontab;
movementtab = json.movementtab;
discordtab = json.discordtab;
misctab = json.misctab;
presettab = json.presettab;
}else{
survivaltab=true;
pvptab=true;
waypointtab=true;
friendtab=true;
potiontab=true;
movementtab=true;
discordtab=true;
misctab=true;
presettab=true;
}
try{
if(fontid=="mc"){mcfont = new android.graphics.Typeface.createFromFile(mcfontpath4);}
if(fontid=="ss"){mcfont = Typeface.create("sans-serif", Typeface.NORMAL)}
if(fontid=="ssl"){mcfont = Typeface.create("sans-serif-light", Typeface.NORMAL)}
if(fontid=="ssc"){mcfont = Typeface.create("sans-serif-condensed", Typeface.NORMAL)}
if(fontid=="sst"){mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)}
}catch (err) {
mcfont = Typeface.create("sans-serif-thin", Typeface.NORMAL)
}
if(oldTMI=="true"){oldTMI=true}
if(oldTMI=="false"){oldTMI=false}
if(displayActiveMods=="true"){displayActiveMods=true}
if(displayActiveMods=="false"){displayActiveMods=false}
if(useGIF=="true"){useGIF=true}
if(useGIF=="false"){useGIF=false}
if(survivaltab=="true"){survivaltab=true}
if(survivaltab=="false"){survivaltab=false}
if(pvptab=="true"){pvptab=true}
if(pvptab=="false"){pvptab=false}
if(waypointtab=="true"){waypointtab=true}
if(waypointtab=="false"){waypointtab=false}
if(friendtab=="true"){friendtab=true}
if(friendtab=="false"){friendtab=false}
if(potiontab=="true"){potiontab=true}
if(potiontab=="false"){potiontab=false}
if(movementtab=="true"){movementtab=true}
if(movementtab=="false"){movementtab=false}
if(discordtab=="true"){discordtab=true}
if(discordtab=="false"){discordtab=false}
if(misctab=="true"){misctab=true}
if(misctab=="false"){misctab=false}
if(presettab=="true"){presettab=true}
if(presettab=="false"){presettab=false}
if(vibrations=="true"){vibrations=true}
if(vibrations=="false"){vibrations=false}
if(compactView=="true"){compactView=true}
if(compactView=="false"){compactView=false}
if(sleekLeft=="true"){sleekLeft=true}
if(sleekLeft=="false"){sleekLeft=false}
if(animations=="false"){animations=false}
if(animations=="true"){animations=true}
if(chlogAlways=="false"){chlogAlways=false}
if(chlogAlways=="true"){chlogAlways=true;chlog=true;}
if(iconsB=="false"){iconsB=false}
if(iconsB=="true"){iconsB=true}
if(helpB=="false"){helpB=false}
if(helpB=="true"){helpB=true}
if(allRight=="false"){allRight=false}
if(allRight=="true"){allRight=true}
if(showGradient=="false"){showGradient=false}
if(showGradient=="true"){showGradient=true}
if(showParticles=="false"){showParticles=false}
if(showParticles=="true"){showParticles=true}
if(firstloadsince7=="false"){firstloadsince7=false;}else{displayActiveMods=false}
} else {
firstloadsince7=false;
var json = '{"themeId":"'+themeId+'","amoledRed":"'+(amoledRed*255)+'","amoledGreen":"'+(amoledGreen*255)+'","amoledBlue":"'+(amoledBlue*255)+'","firstloadsince7":"'+firstloadsince7+'","survivaltab":"'+survivaltab+'","pvptab":"'+pvptab+'","showParticles":"'+showParticles+'","displayActiveMods":"'+displayActiveMods+'","useGIF":"'+useGIF+'","giflink":"'+giflink+'","waypointtab":"'+waypointtab +'","friendtab":"'+friendtab +'","potiontab":"'+potiontab +'","movementtab":"'+movementtab +'","discordtab":"'+discordtab +'","misctab":"'+misctab +'","presettab":"'+presettab+'","supportclicks":"'+supportclicks+'","showGradient":"'+showGradient+'","vibrations":"'+vibrations+'","compactView":"'+compactView+'","list_width":"'+list_width_var+'","font":"'+fontid+'","modPadB":"'+modPadB+'","modPadT":"'+modPadT+'","btntextsize":"'+btntextsize+'","switchfontsize":"'+switchfontsize+'","themeBtn":"'+themeBtn+'","oldTMI":"'+oldTMI+'","sleekLeft":"'+sleekLeft+'","crosshairDimension":"'+crosshairDimension+'","FovsbpProgress":"'+FovsbpProgress+'","aimbotRange":"'+aimbotRange+'","autoBlockB":"'+autoBlockB+'","animations":"'+animations+'","helpB":"'+helpB+'","iconsB":"'+iconsB+'","chlogAlways":"'+chlogAlways+'","allRight":"'+allRight+'","themeAlpha":"'+themeAlpha+'"}';
themesfile.createNewFile();
var themeId = 0;
themeAlpha = 210;
var fos = new java.io.FileOutputStream(themesfile);
fos.write(new java.lang.String(json).getBytes());
}
themeFinish();
}
loadTheme();
if(!iconsB&!helpB){
list_width = (list_width_var*density)-(icon_dimensions*2);
wayNameWidth = list_width-(icon_dimensions*4);
}
if(!iconsB&helpB){
list_width = (list_width_var*density)-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}
if(iconsB&helpB){
wayNameWidth = list_width-(icon_dimensions*4);
list_width = list_width_var*density;
}
if(!helpB&iconsB){
list_width = list_width_var*density-icon_dimensions;
wayNameWidth = list_width-(icon_dimensions*4);
}	

function saveTheme(){
var themesfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "instinctdata6.json");
if (themesfile.exists()) {
themesfile.delete();
}
firstloadsince7=false;
var json = '{"themeId":"'+themeId+'","amoledRed":"'+(amoledRed*255)+'","amoledGreen":"'+(amoledGreen*255)+'","amoledBlue":"'+(amoledBlue*255)+'","firstloadsince7":"'+firstloadsince7+'","survivaltab":"'+survivaltab+'","pvptab":"'+pvptab+'","showParticles":"'+showParticles+'","displayActiveMods":"'+displayActiveMods+'","useGIF":"'+useGIF+'","giflink":"'+giflink+'","waypointtab":"'+waypointtab +'","friendtab":"'+friendtab +'","potiontab":"'+potiontab +'","movementtab":"'+movementtab +'","discordtab":"'+discordtab +'","misctab":"'+misctab +'","presettab":"'+presettab+'","supportclicks":"'+supportclicks+'","showGradient":"'+showGradient+'","vibrations":"'+vibrations+'","compactView":"'+compactView+'","list_width":"'+list_width_var+'","font":"'+fontid+'","modPadB":"'+modPadB+'","modPadT":"'+modPadT+'","btntextsize":"'+btntextsize+'","switchfontsize":"'+switchfontsize+'","themeBtn":"'+themeBtn+'","oldTMI":"'+oldTMI+'","sleekLeft":"'+sleekLeft+'","crosshairDimension":"'+crosshairDimension+'","FovsbpProgress":"'+FovsbpProgress+'","aimbotRange":"'+aimbotRange+'","autoBlockB":"'+autoBlockB+'","animations":"'+animations+'","helpB":"'+helpB+'","iconsB":"'+iconsB+'","chlogAlways":"'+chlogAlways+'","allRight":"'+allRight+'","themeAlpha":"'+themeAlpha+'"}';
themesfile.createNewFile();
var fos = new java.io.FileOutputStream(themesfile);
fos.write(new java.lang.String(json).getBytes());
}

function networkData(data){
if(ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo()!==null){
if(data=="type"){
if(ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo().getType()==0){return "No Connection"}
if(ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo().getType()==1){return "Wifi"}
if(ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo().getType()==2){return "Mobile"}
}
if(data=="reason"){
return ctx.getSystemService(ctx.CONNECTIVITY_SERVICE).getActiveNetworkInfo().EXTRA_REASON
}
}else{return "No Service"}
}
//betToast(networkData("type")+"; "+networkData("reason"));
var X_W,Y_W,Z_W=null; var coords=false; var Xcoorinate=new android.widget.TextView(activity); var Ycoorinate=new android.widget.TextView(activity); var Zcoorinate=new android.widget.TextView(activity); var waypoints_W={}; var currentWaypoint; var lastDeath={x:null,y:null,z:null}; var lang={};lang["English"]={"New Version":"New Version","Currently available version":"Currently available version","Your version":"Your version","Update":"Update","Later":"Later","Close":"Close","Create waypoint":"Create waypoint","Hide coordinates":"Hide coordinates","Show coordinates":"Show coordinates","Latest Death":"Latest Death","Create new waypoint":"Create new waypoint","New Waypoint":"New Waypoint","Ok":"Ok","Cancel":"Cancel","Enter the coordinates":"Enter the coordinates","Error":"Error","Input must be X,Z. Example":"Input must be X,Y,Z. Example","Are you sure? You can't undo this!":"Are you sure? You can't undo this!","Please wait...downloading GUI...":"Please wait...downloading GUI...","Done!":"Done!"}; 


function AddNewWaypoint(cx,cy,cz) {
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var bg = new android.graphics.drawable.GradientDrawable();
bg.setColor(android.graphics.Color.BLACK);
bg.setStroke(4, themeStroke);
bg.setCornerRadius(0);
bg.setAlpha(180);
var xbg2 = new android.graphics.drawable.GradientDrawable();
xbg2.setStroke(0, themeStroke);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
menuScroll.addView(menuLayout);
menuLayout1.addView(menuScroll);
menuLayout.setBackground(bg);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Waypoint"]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.setTextSize(titleSize);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.getBackground().setAlpha(255);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);
var button = new android.widget.Button(ctx);
button.setText(langMsg[language]["Tip: Enter waypoint name and coordinates."]);
button.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
button.setTextColor(themeText);
button.getBackground().setAlpha(130);
button.setTextSize(8);
button.setTypeface(mcfont);
button.setBackground(xbg2);
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {}
}));
menuLayout.addView(button);

var etX = new android.widget.EditText(ctx);
var etC = new android.widget.EditText(ctx);
var etZ = new android.widget.EditText(ctx);

var txtX = android.widget.TextView(ctx);
txtX.setTextSize(12);
txtX.setText(" Name:");
var txtC = android.widget.TextView(ctx);
txtC.setTextSize(12);
txtC.setText(" Coordinates:");
var tpBtn = new android.widget.Button(ctx);
tpBtn.setText("Add");
tpBtn.setBackground(telebtn);
tpBtn.setTypeface(mcfont);
tpBtn.setTextColor(android.graphics.Color.GREEN);
if(Player.getDimension()==0){
etX.setText("[Overworld]");
}if(Player.getDimension()==1){
etX.setText("[Nether]");
}if(Player.getDimension()==2){
etX.setText("[End]");
}
etX.setTextColor(themeText);
etX.setTextSize(14);
etX.setTypeface(mcfont);
etX.setBackground(xbg2);
etC.setText(cx+","+cy+","+cz);
etC.setTextColor(themeText);
etC.setTextSize(14);
etC.setTypeface(mcfont);
etC.setBackground(xbg2);
txtX.setTextColor(themeText);
txtX.setTextSize(11);
txtX.setTypeface(mcfont);
txtX.setBackground(xbg2);
txtC.setTextColor(themeText);
txtC.setTextSize(11);
txtC.setTypeface(mcfont);
txtC.setBackground(xbg2);
menuLayout.addView(txtX);
menuLayout.addView(etX);
menuLayout.addView(txtC);
menuLayout.addView(etC);
menuLayout.addView(tpBtn);
tpBtn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(viewarg) {
if(vibrations){ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE).vibrate(20);}
if(String(etC.getText()).split(",").length==3){
waypoints_W[objectLength(waypoints_W)]={name_W:etX.getText(),x:parseInt(String(etC.getText()).split(",")[0]),y:parseInt(String(etC.getText()).split(",")[1]),z:parseInt(String(etC.getText()).split(",")[2]),removed:false,active:false};
Save();
chatdialog.dismiss();
}
else
betToast("Coordiantes Error, Format as such: "+cx+","+cy+","+cz);


}
});
chatdialog = new PopupWindow(menuLayout1, ctx.getWindowManager().getDefaultDisplay().getWidth() / 4, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.4,true);
if(animations){chatdialog.setAnimationStyle(android.R.style.Animation_Toast);}
chatdialog.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
chatdialog.showAtLocation(ctx.getWindow().getDecorView(), Gravity.CENTER | Gravity.CENTER, 0, 0);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
};
var intent = new android.content.Intent(ctx);
function openGallery(){
var intent = new android.content.Intent(ctx);
intent.setType("image/*");
intent.putExtra("crop", "true");
intent.putExtra("scale", true);
intent.putExtra("outputX", 256);
intent.putExtra("outputY", 256);
intent.putExtra("aspectX", 1);
intent.putExtra("aspectY", 1);
intent.putExtra("return-data", true);
intent.setAction(Intent.ACTION_GET_CONTENT);
ctx.startActivity(Intent.createChooser(intent, "Select Picture"));

}

function Coordinates(nme,cx,cy,cz){
try{
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle(lang[language]["Enter the coordinates"]);
userInput=new android.widget.EditText(activity);
userInput.setText(cx+","+cy+","+cz);
alert.setView(userInput);
alert.setPositiveButton(lang[language]["Ok"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
try{
if(String(userInput.getText()).split(",").length==3){
waypoints_W[objectLength(waypoints_W)]={name_W:nme,x:parseInt(String(userInput.getText()).split(",")[0]),y:parseInt(String(userInput.getText()).split(",")[1]),z:parseInt(String(userInput.getText()).split(",")[2]),removed:false,active:false};
Save();
}
else
Warning(Coordinates(nme,cx,cz),lang[language]["Error"],lang[language]["Input must be X,Z. Example"]+": "+cx+","+cy+","+cz);
}
catch(err){
clientMessage(err);
}
}
});
alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
catch(err){
clientMessage(err);
}
}
function Warning(funct,title,msg){
try{
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle(title);
alert.setMessage(msg);
alert.setPositiveButton(lang[language]["Ok"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
catch(err){
clientMessage(err);
}
}
function CreateButton(w){
try{
	var tpbtn = new android.graphics.drawable.GradientDrawable();
tpbtn.setColor(Color.parseColor("#A3A3A3"));
tpbtn.setStroke(4, themeStroke);
tpbtn.setCornerRadius(0);
	var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var slayout=new android.widget.LinearLayout(activity);
slayout.setOrientation(android.widget.LinearLayout.HORIZONTAL);
var btn=new android.widget.Button(activity);
btn.setText(waypoints_W[w].name_W+"\n["+waypoints_W[w].x+", "+waypoints_W[w].y+", "+waypoints_W[w].z+"]");
if(X_W==waypoints_W[w].x && Y_W==waypoints_W[w].y && Z_W==waypoints_W[w].z)
btn.getBackground().setColorFilter(android.graphics.Color.BLUE,android.graphics.PorterDuff.Mode.MULTIPLY);
btn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btn.getLayoutParams().width = wayNameWidth;
btn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btn.setTextColor(modTextColor);
btn.getBackground().setAlpha(130);
btn.setTextSize(btntextsize);
btn.setBackground(xbgWP);
if(waypoints_W[w].active){btn.setText(waypoints_W[w].name_W+"\n["+waypoints_W[w].x+", "+waypoints_W[w].y+", "+waypoints_W[w].z+"] Active");
btn.setBackground(waypointactive);}
btn.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
if(X_W==waypoints_W[w].x && Y_W==waypoints_W[w].y && Z_W==waypoints_W[w].z){
X_W=null;
Y_W=null;
Z_W=null;
}
else{
currentWaypoint=waypoints_W[w].name_W;
X_W=waypoints_W[w].x;
Y_W=waypoints_W[w].y;
Z_W=waypoints_W[w].z;
}
}
}));
btn.setOnLongClickListener(new android.view.View.OnLongClickListener({
onLongClick: function() {
waypointtracer=true;
funcS.Render.init();
if(btn.getText().endsWith("] Active")){
btn.setText(waypoints_W[w].name_W+"\n["+waypoints_W[w].x+", "+waypoints_W[w].y+", "+waypoints_W[w].z+"]");
btn.setBackground(xbgWP);
waypoints_W[w].active=false;
}else{
btn.setText(waypoints_W[w].name_W+"\n["+waypoints_W[w].x+", "+waypoints_W[w].y+", "+waypoints_W[w].z+"] Active");
btn.setBackground(waypointactive);
waypoints_W[w].active=true;
}
for(var i=0;i<objectLength(waypoints_W);i++){
if(!waypoints_W[i].removed){
if(waypoints_W[i].active){
i=objectLength(waypoints_W)*2;
}else{
if(i==objectLength(waypoints_W)-1){
waypointtracer=false;
}
}
}
}


return true;
}
}));
var changenamme = new android.widget.TextView(ctx);
changenamme.setText("✎");
changenamme.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
changenamme.getLayoutParams().width = icon_dimensions;
changenamme.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
changenamme.setTextColor(android.graphics.Color.YELLOW);
changenamme.setBackground(tpbtn);
changenamme.setTypeface(mcfont);
changenamme.setTextSize(switchfontsize);
changenamme.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
changenamme.getBackground().setAlpha(130);
changenamme.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
renameWay(w);
closeEverything();
}
}));

var TP = new android.widget.TextView(ctx);
TP.setText("TP");
TP.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
TP.getLayoutParams().width = icon_dimensions*2;
TP.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
TP.setTextColor(android.graphics.Color.YELLOW);
TP.setTextSize(btntextsize);
TP.setBackground(tpbtn);
TP.setTypeface(mcfont);
TP.setTextSize(switchfontsize);
TP.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
TP.getBackground().setAlpha(130);
TP.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
Entity.setPosition(getPlayerEnt(), waypoints_W[w].x, waypoints_W[w].y + 2, waypoints_W[w].z);
}
}));
var btn2=new android.widget.TextView(activity);
btn2.setText("X");
btn2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
btn2.getLayoutParams().width = icon_dimensions;
btn2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
btn2.setTextColor(android.graphics.Color.WHITE);
btn2.setTextSize(btntextsize);
btn2.setBackground(xbtn);
btn2.getBackground().setAlpha(130);
btn2.setTypeface(mcfont);
btn2.setGravity(Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL);
btn2.setTextSize(switchfontsize);
btn2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
RemoveWaypoint(w);
}
}));
if(changenamme.getParent()!=null)
changenamme.getParent().removeView(changenamme);
slayout.addView(changenamme);
if(btn.getParent()!=null)
btn.getParent().removeView(btn);
slayout.addView(btn);
if(TP.getParent()!=null)
TP.getParent().removeView(TP);
slayout.addView(TP);
if(btn2.getParent()!=null)
btn2.getParent().removeView(btn2);
slayout.addView(btn2);

function RemoveWaypoint(w){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Confirm Deletion");
alert.setPositiveButton(lang[language]["Ok"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
waypoints_W[w].removed=true;
if(X_W==waypoints_W[w].x && Y_W==waypoints_W[w].y && Z_W==waypoints_W[w].z){

X_W=null;
Y_W=null;
Z_W=null;
}
Save();
slayout.getParent().removeView(slayout);
}
});
alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
}
catch(err){
clientMessage(err);
}
return slayout;
}


function Save(){
try{
var path_W=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
java.io.File(path_W).mkdirs();
var newFile=new java.io.File(path_W,"waypoints2.txt");
newFile.createNewFile();
var outWrite=new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
var k=0;
if(!lastDeath.x && !lastDeath.y && !lastDeath.z){
for(var j=0;j<objectLength(waypoints_W);j++){
if(!waypoints_W[j].removed){
outWrite.append(waypoints_W[j].name_W+"@"+waypoints_W[j].x+"@"+waypoints_W[j].y+"@"+waypoints_W[j].z);
k=j+1;
break;
}
}
}
else
outWrite.append("lastDeath@"+lastDeath.x+"@"+lastDeath.y+"@"+lastDeath.z);
for(var j=k;j<objectLength(waypoints_W);j++){
if(!waypoints_W[j].removed)
outWrite.append("\n"+waypoints_W[j].name_W+"@"+waypoints_W[j].x+"@"+waypoints_W[j].y+"@"+waypoints_W[j].z);
}
outWrite.close();
}
catch(err){
clientMessage(err);
}
}
var custFunctions = {};
function Load(){
var savefile="";
var path_W=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
if(java.io.File(path_W+"waypoints2.txt").exists()){
var file_W=new java.io.File(path_W+"waypoints2.txt");
var fos=new java.io.FileInputStream(file_W);
var str=new java.lang.StringBuilder();
var ch;
while((ch=fos.read())!=-1)
str.append(java.lang.Character(ch));
savefile=String(str.toString());
for(var w=0;w<savefile.split("\n").length;w++){
waypoints_W[objectLength(waypoints_W)]={name_W:savefile.split("\n")[w].split("@")[0],x:parseInt(savefile.split("\n")[w].split("@")[1]),y:parseInt(savefile.split("\n")[w].split("@")[2]),z:parseInt(savefile.split("\n")[w].split("@")[3]),removed:false,active:false};

}

fos.close();
}
}
Load();
function objectLength(obj){
var x=0;
for(var w in obj)
x++;
return x;
}
function loadLog(){
var savefile="";
var path_W=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
if(java.io.File(path_W+"Instinct_ChatLog.txt").exists()){
var file_Ch=new java.io.File(path_W+"Instinct_ChatLog.txt");
var fos=new java.io.FileInputStream(file_Ch);
var str=new java.lang.StringBuilder();
var ch;
while((ch=fos.read())!=-1)
str.append(java.lang.Character(ch));
savefile=String(str.toString());
chatLogtxt=savefile;
fos.close();
}
}
function deleteLog(){
var chatlogfile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/", "Instinct_ChatLog.txt");
if (chatlogfile.exists()) {
chatlogfile.delete();
chatLogtxt="";
}
}
var friends_L={};
function renameWay(w){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Rename "+waypoints_W[w].name_W);
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
userInput=new android.widget.EditText(activity);
userInput.setText("");
menuLayout.addView(userInput);

menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
alert.setView(menuLayout);
alert.setPositiveButton("Ok",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
waypoints_W[w].name_W=userInput.getText();
Save();
closeEverything();
}
});

alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
function updatemeths(){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Choose Update Method");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);


var button1 = new android.widget.Button(ctx);
button1.setText("Automatic Install (Recommended)");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
procCmd("new");
}
}));
//menuLayout1.addView(button1);
var button1 = new android.widget.Button(ctx);
button1.setText("Manual Install (Downloads file, Recommended)");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
downloadUpdate();
betToast("Downloading...");
}
}));
menuLayout1.addView(button1);

var button1 = new android.widget.Button(ctx);
button1.setText("Raw File (Displays raw file to copy and paste)");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/instinct.js"));
if(branchactive=="true"){
downloadSi.setData(android.net.Uri.parse("http://play.instinctmods.com/instinctbranch/instinct_branch.js"));
}
ctx.startActivity(downloadSi);
}
}));
menuLayout1.addView(button1);

var buttonlink = new android.widget.Button(ctx);
buttonlink.setText(Html.fromHtml("<a href='http://www.instinctmods.com'>Manual Download 1: instinctmods.com</a>"));
if(branchactive=="true"){
buttonlink.setText(Html.fromHtml("<a href='http://play.instinctmods.com'>Manual Download 1: instinctmods.com</a>"));
}
buttonlink.setTransformationMethod(null);
buttonlink.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
menuLayout1.addView(buttonlink);

var button1 = new android.widget.Button(ctx);
button1.setText(Html.fromHtml("<font color="+modTextColor+">Manual Download 2: (Opens <a href='instinctmods.com'>instinctmods.com</a>)</font>"));
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com"));
if(branchactive=="true"){
downloadSi.setData(android.net.Uri.parse("http://play.instinctmods.com"));
}
ctx.startActivity(downloadSi);
}
}));
menuLayout1.addView(button1);

menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
alert.setView(menuLayout);
alert.show();
}





function openSong(){
var scriptalert=new android.app.AlertDialog.Builder(activity);
scriptalert.setTitle("Music");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);

var currentSong = new android.widget.Button(ctx);
currentSong.setText("song");
currentSong.setTransformationMethod(null);
currentSong.setTextColor(android.graphics.Color.BLUE);
menuLayout1.addView(currentSong);

var playSong = new android.widget.Button(ctx);
playSong.setText("Play/Next");
playSong.setTransformationMethod(null);
playSong.setTextColor(android.graphics.Color.BLUE);
playSong.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
nextSong();
}
}));
menuLayout1.addView(playSong);

var pauseSong = new android.widget.Button(ctx);
pauseSong.setText("Pause/Resume");
pauseSong.setTransformationMethod(null);
pauseSong.setTextColor(android.graphics.Color.BLUE);
pauseSong.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
toggleMusic();
}
}));
menuLayout1.addView(pauseSong);

var prevSong = new android.widget.Button(ctx);
prevSong.setText("Prev.");
prevSong.setTransformationMethod(null);
prevSong.setTextColor(android.graphics.Color.BLUE);
prevSong.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
previousSong();
}
}));
menuLayout1.addView(prevSong);

menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
scriptalert.setView(menuLayout);

scriptalert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});

scriptalert.show().getWindow().setLayout(fullwidth, fullheight);
}
function buildSchematic(){
for(n=0;n<area_schem;n++){
setTile(X_schem[n], Y_schem[n], Z_schem[n], I_schem[n], D_schem[n]);
}
}
function AddNewFriend(){
var alert=new android.app.AlertDialog.Builder(activity);
alert.setTitle("Add Friend");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
userInput=new android.widget.EditText(activity);
userInput.setText("");
menuLayout.addView(userInput);

function newTPlist(item, index) {
var button1 = new android.widget.Button(ctx);
button1.setText(item);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
userInput.setText(item);
}
}));
menuLayout1.addView(button1);
};
Server.getAllPlayerNames().forEach(newTPlist);
menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
alert.setView(menuLayout);
alert.setPositiveButton("Ok",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
addFriendToList(userInput.getText());
}
});

alert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});
alert.show();
}
function runScript(){
var scriptalert=new android.app.AlertDialog.Builder(activity);
scriptalert.setTitle("Script");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
userInput=new android.widget.EditText(activity);
userInput.setText("");
userInput.setHint("script");
scriptname=new android.widget.EditText(activity);
scriptname.setText("");
scriptname.setHint("name");
menuLayout.addView(scriptname);
menuLayout.addView(userInput);

var cs_dir = new java.io.File(cs_directory);
var cs_list = cs_dir.listFiles();
if(cs_list != null && cs_list.length != 0) {
cs_list.forEach(function(element, index, array) {
if(element.isFile()){
var menuLayout2 = new android.widget.LinearLayout(ctx);
menuLayout2.setOrientation(0);
let currentFileName = element.getName();
let currentText = fileTxt(cs_directory+"/"+currentFileName);
var fileNamewoTxt = currentFileName.split(".txt")[0];
var fileNamewopre = fileNamewoTxt.split("ix_")[1];
var button1 = new android.widget.Button(ctx);
button1.setText(fileNamewopre);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
userInput.setText(currentText);

scriptname.setText(fileNamewopre);
}
}));
var buttonup = new android.widget.Button(ctx);
buttonup.setText("Upload");
buttonup.setTransformationMethod(null);
buttonup.setTextColor(android.graphics.Color.BLUE);
buttonup.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var cs_newFile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getPath()+"/Download",""+fileNamewoTxt+".txt"); 
if(cs_newFile.exists()){
cs_newFile.delete();
}
cs_newFile.createNewFile(); 
var cs_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (cs_newFile)); 
cs_outWrite.append (currentText);
cs_outWrite.close(); 
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html#up"));
ctx.startActivity(downloadSi);
}
}));
var btndele = new android.widget.Button(ctx);
btndele.setText("Delete");
btndele.setTransformationMethod(null);
btndele.setTextColor(android.graphics.Color.RED);
btndele.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var cs_newFile = new java.io.File(cs_dir+"/"+element.getName());
cs_newFile.delete();
try{btndele.getParent().getParent().removeView(menuLayout2);}catch(e){betToast(e)}
userInput.setText("");

scriptname.setText("");
}
}));
var dirtxt = android.widget.TextView(ctx);
dirtxt.setText(cs_directory+"/"+fileNamewoTxt+".txt");
menuLayout2.addView(button1);
if(fileNamewopre!="Demo"){
menuLayout2.addView(buttonup);
menuLayout2.addView(btndele);}
menuLayout2.addView(dirtxt);
menuLayout1.addView(menuLayout2);

}});
}
var cs_dir2 = new java.io.File(android.os.Environment.getExternalStorageDirectory ().getPath ()+"/Download");
var cs_list2 = cs_dir2.listFiles();
if(cs_list2 != null && cs_list2.length != 0) {
cs_list2.forEach(function(element, index, array) {
if(element.isFile()){
let currentFileName = element.getName();
if(currentFileName.startsWith("ix_")){
var menuLayout2 = new android.widget.LinearLayout(ctx);
menuLayout2.setOrientation(0);

let currentText = fileTxt(cs_dir2+"/"+currentFileName);
var fileNamewoTxt = currentFileName.split(".txt")[0];
var fileNamewopre = fileNamewoTxt.split("ix_")[1];
var button1 = new android.widget.Button(ctx);
button1.setText(fileNamewopre);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
userInput.setText(currentText);

scriptname.setText(fileNamewopre);
}
}));
var buttonup = new android.widget.Button(ctx);
buttonup.setText("Upload");
buttonup.setTransformationMethod(null);
buttonup.setTextColor(android.graphics.Color.BLUE);
buttonup.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var cs_newFile2 = new java.io.File(android.os.Environment.getExternalStorageDirectory().getPath()+"/Download",""+fileNamewoTxt+".txt"); 
if(cs_newFile2.exists()){
cs_newFile2.delete();
}
cs_newFile2.createNewFile(); 
var cs_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (cs_newFile2)); 
cs_outWrite.append (currentText);
cs_outWrite.close(); 
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html#up"));
ctx.startActivity(downloadSi);
}
}));
var btndele = new android.widget.Button(ctx);
btndele.setText("Delete");
btndele.setTransformationMethod(null);
btndele.setTextColor(android.graphics.Color.RED);
btndele.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var cs_newFile2 = new java.io.File(cs_dir2+"/"+element.getName());
cs_newFile2.delete();
try{btndele.getParent().getParent().removeView(menuLayout2);}catch(e){betToast(e)}
userInput.setText("");

scriptname.setText("");
}
}));
var dirtxt = android.widget.TextView(ctx);
dirtxt.setText(cs_dir2+"/"+element.getName());
menuLayout2.addView(button1);
if(fileNamewopre!="Demo"){
menuLayout2.addView(buttonup);
menuLayout2.addView(btndele);}
menuLayout2.addView(dirtxt);
menuLayout1.addView(menuLayout2);

}}});
}

var button1 = new android.widget.Button(ctx);
button1.setText("Download Scripts");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html"));
ctx.startActivity(downloadSi);
}
}));menuLayout1.addView(button1);
scriptalert.setPositiveButton("Run / Ok",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){
if(userInput.getText()!=''||userInput.getText()!=''){
var cs_input = userInput.getText();
var cs_defStr = scriptname.getText();
if(String(cs_input).includes("/*"+Player.getName(getPlayerEnt())+"*/")){
cs_script=cs_input;
}else{
cs_script="/*"+Player.getName(getPlayerEnt())+"*/\n\n"+cs_input;}
cs_title="ix_"+cs_defStr;


try{cs_functionarr[cs_defStr]=new Function (cs_input);}catch(e){betToast(e)}
cs_saveFile();
try{cs_functionarr[cs_defStr]()}catch(e){betToast(e)}
}else{betToast('Invalid Name/Script');}
}
});


menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
scriptalert.setView(menuLayout);

scriptalert.setNegativeButton(langMsg[language]["Cancel"],new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){}
});

scriptalert.show().getWindow().setLayout(fullwidth, fullheight);
}
function schematics(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try {
var scriptalert=new android.app.AlertDialog.Builder(activity);
scriptalert.setTitle("Schematics");
var menuLayout = new android.widget.LinearLayout(ctx);
var menuScroll = new android.widget.ScrollView(ctx);
var menuLayout1 = new android.widget.LinearLayout(ctx);
menuLayout.setOrientation(1);
menuLayout1.setOrientation(1);
userInput=new android.widget.EditText(activity);
userInput.setText("");
userInput.setHint("schematic");
scriptname=new android.widget.EditText(activity);
scriptname.setText("");
scriptname.setHint("selected schematic");
menuLayout.addView(scriptname);
//menuLayout.addView(userInput);

var schematic_dir = new java.io.File(schematic_directory);
var schematic_list = schematic_dir.listFiles();
if(schematic_list != null && schematic_list.length != 0) {
schematic_list.forEach(function(element, index, array) {
var menuLayout2 = new android.widget.LinearLayout(ctx);
menuLayout2.setOrientation(0);
let currentFileNameSchem = element.getName();
let currentTextSchem = fileTxt(schematic_directory+"/"+currentFileNameSchem);
var fileNamewoTxt = currentFileNameSchem.split(".txt")[0];
var fileNamewopre = fileNamewoTxt.split("ix_")[1];
var button1 = new android.widget.Button(ctx);
button1.setText(fileNamewopre);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
selectedSchematic = currentTextSchem;
scriptname.setText(fileNamewopre);
}
}));
var buttonup = new android.widget.Button(ctx);
buttonup.setText("Upload");
buttonup.setTransformationMethod(null);
buttonup.setTextColor(android.graphics.Color.BLUE);
buttonup.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var schematic_newFile = new java.io.File(android.os.Environment.getExternalStorageDirectory().getPath()+"/Download/Schematics",""+fileNamewoTxt+".txt"); 
if(schematic_newFile.exists()){
schematic_newFile.delete();
}
schematic_newFile.createNewFile(); 
var schematic_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (schematic_newFile)); 
schematic_outWrite.append (currentTextSchem);
schematic_outWrite.close(); 
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html#up"));
ctx.startActivity(downloadSi);
}
}));
var btndele = new android.widget.Button(ctx);
btndele.setText("Delete");
btndele.setTransformationMethod(null);
btndele.setTextColor(android.graphics.Color.RED);
btndele.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var schematic_newFile = new java.io.File(schematic_dir+"/"+element.getName());
schematic_newFile.delete();
try{btndele.getParent().getParent().removeView(menuLayout2);}catch(e){betToast(e)}
userInput.setText("");

scriptname.setText("");
}
}));
var dirtxt = android.widget.TextView(ctx);
dirtxt.setText(schematic_directory+"/"+fileNamewoTxt+".txt");
menuLayout2.addView(button1);
if(fileNamewopre!="Demo"){
menuLayout2.addView(buttonup);
menuLayout2.addView(btndele);}
menuLayout2.addView(dirtxt);
menuLayout1.addView(menuLayout2);
});
}
var schematic_dir2 = new java.io.File(android.os.Environment.getExternalStorageDirectory ().getPath ()+"/Download");
var schematic_list2 = schematic_dir2.listFiles();
if(schematic_list2 != null && schematic_list2.length != 0) {
schematic_list2.forEach(function(element, index, array) {
let currentFileNameSchem = element.getName();
if(currentFileNameSchem.startsWith("ix_")){
var menuLayout2 = new android.widget.LinearLayout(ctx);
menuLayout2.setOrientation(0);

let currentTextSchem = fileTxt(schematic_dir2+"/"+currentFileNameSchem);
var fileNamewoTxt = currentFileNameSchem.split(".txt")[0];
var fileNamewopre = fileNamewoTxt.split("ix_")[1];
var button1 = new android.widget.Button(ctx);
button1.setText(fileNamewopre);
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
selectedSchematic = currentTextSchem;

scriptname.setText(fileNamewopre);
}
}));
var buttonup = new android.widget.Button(ctx);
buttonup.setText("Upload");
buttonup.setTransformationMethod(null);
buttonup.setTextColor(android.graphics.Color.BLUE);
buttonup.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var schematic_newFile2 = new java.io.File(android.os.Environment.getExternalStorageDirectory().getPath()+"/Download/Schematics",""+fileNamewoTxt+".txt"); 
if(schematic_newFile2.exists()){
schematic_newFile2.delete();
}
schematic_newFile2.createNewFile(); 
var schematic_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (schematic_newFile2)); 
schematic_outWrite.append (currentTextSchem);
schematic_outWrite.close(); 
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html#up"));
ctx.startActivity(downloadSi);
}
}));
var btndele = new android.widget.Button(ctx);
btndele.setText("Delete");
btndele.setTransformationMethod(null);
btndele.setTextColor(android.graphics.Color.RED);
btndele.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var schematic_newFile2 = new java.io.File(schematic_dir2+"/"+element.getName());
schematic_newFile2.delete();
try{btndele.getParent().getParent().removeView(menuLayout2);}catch(e){betToast(e)}
userInput.setText("");

scriptname.setText("");
}
}));
var dirtxt = android.widget.TextView(ctx);
dirtxt.setText(schematic_dir2+"/"+element.getName());
menuLayout2.addView(button1);
if(fileNamewopre!="Demo"){
menuLayout2.addView(buttonup);
menuLayout2.addView(btndele);}
menuLayout2.addView(dirtxt);
menuLayout1.addView(menuLayout2);

}});
}

var button1 = new android.widget.Button(ctx);
button1.setText("Download Schematics");
button1.setTransformationMethod(null);
button1.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var downloadSi = new android.content.Intent(ctx);
downloadSi.setAction(android.content.Intent.ACTION_VIEW);
downloadSi.setData(android.net.Uri.parse("http://instinctmods.com/filedown/Table_Fixed_Column/index.html"));
ctx.startActivity(downloadSi);
}
}));menuLayout1.addView(button1);
scriptalert.setPositiveButton("Close",new android.content.DialogInterface.OnClickListener(){
onClick: function(dialog,whichButton){

}
});


menuScroll.addView(menuLayout1);
menuLayout.addView(menuScroll);
scriptalert.setView(menuLayout);


scriptalert.show().getWindow().setLayout(fullwidth, fullheight);
} catch (error) {
Toast.makeText(ctx, "Template Error: " + error+' #' + error['lineNumber'], 1).show();
}
}
}))
}
function cs_saveFile(cs_directory, filename){
try{	
cs_directory = android.os.Environment.getExternalStorageDirectory().getPath() +"/games/Instinct";  //The file should be saved into the world directory. 
var cs_newFile = new java.io.File(cs_directory,""+cs_title+".txt"); 
var cs_directory = new java.io.File(cs_directory); 
if(!cs_directory.exists()||!cs_directory.isDirectory()){
cs_directory.mkdir();
}
if(cs_newFile.exists()){
cs_newFile.delete();
}
cs_newFile.createNewFile(); 
var cs_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (cs_newFile)); 
cs_outWrite.append (cs_script);
cs_outWrite.close(); 
}catch(e){clientMessage(e+"\n\n"+e.lineNumber)}
}
function schematic_saveFile(schematic_directory, filename){
try{	
schematic_directory = android.os.Environment.getExternalStorageDirectory().getPath() +"/games/Instinct/Schematics";  //The file should be saved into the world directory. 
var schematic_newFile = new java.io.File(schematic_directory,""+schematic_title+".txt"); 
var schematic_directory = new java.io.File(schematic_directory); 
if(!schematic_directory.exists()||!schematic_directory.isDirectory()){
schematic_directory.mkdir();
}
if(schematic_newFile.exists()){
schematic_newFile.delete();
}
schematic_newFile.createNewFile(); 
var schematic_outWrite = new java.io.OutputStreamWriter (new java.io.FileOutputStream (schematic_newFile)); 
schematic_outWrite.append (schematic_script);
schematic_outWrite.close(); 
}catch(e){clientMessage(e+"\n\n"+e.lineNumber)}
}

function installDemo(){
cs_title="ix_Demo";
cs_directory = android.os.Environment.getExternalStorageDirectory().getPath() +"/games/Instinct";  //The file should be saved into the world directory. 
var cs_newFile = new java.io.File(cs_directory,cs_title+".txt"); 
var cs_directory = new java.io.File(cs_directory); 
if(!cs_directory.exists()||!cs_directory.isDirectory()){
cs_directory.mkdir();
cs_script="/*Files await approval before being available to the public to download*/\n\nbetToast('This is Instincts custom script loader');";
try{cs_functionarr[cs_title]=new Function (cs_script);}catch(e){betToast(e+"; "+e.lineNumber)}
cs_newFile.createNewFile(); 
var cs_outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(cs_newFile)); 
cs_outWrite.append(cs_script);
cs_outWrite.close(); 
}
}installDemo();
function installDemoschematic(){
schematic_title="ix_Demo";
schematic_directory = android.os.Environment.getExternalStorageDirectory().getPath() +"/games/Instinct/Schematics";  //The file should be saved into the world directory. 
var schematic_newFile = new java.io.File(schematic_directory,schematic_title+".txt"); 
var schematic_directory = new java.io.File(schematic_directory); 
if(!schematic_directory.exists()||!schematic_directory.isDirectory()){
schematic_directory.mkdir();
schematic_script="/*Files await approval before being available to the public to download*/\n\nbetToast('This is Instincts custom schematic loader');";
try{schematic_functionarr[schematic_title]=new Function (schematic_script);}catch(e){betToast(e+"; "+e.lineNumber)}
schematic_newFile.createNewFile(); 
var schematic_outWrite = new java.io.OutputStreamWriter(new java.io.FileOutputStream(schematic_newFile)); 
schematic_outWrite.append(schematic_script);
schematic_outWrite.close(); 
}
}installDemoschematic();
function fileTxt(filePath) {
var file=new java.io.File(filePath);
var fos=new java.io.FileInputStream(file);
var str=new java.lang.StringBuilder();
var ch;
while((ch=fos.read())!=-1)
str.append(java.lang.Character(ch));
var txt=String(str.toString());
return txt;
}
function cs_loadfiles(){
try{
var cs_dir = new java.io.File(cs_directory);
var cs_list = cs_dir.listFiles();
if(cs_list != null && cs_list.length != 0) {
cs_list.forEach(function(element, index, array) {
let currentFileName = element.getName();
let currentText = fileTxt(cs_directory+"/"+currentFileName);
clientMessage(currentFileName+"\n"+currentText+"\n-------");
});
}
}catch(err){clientMessage(err+"\n\n"+err.lineNumber)}
}
function schematic_loadfiles(){
try{
var schematic_dir = new java.io.File(schematic_directory);
var schematic_list = schematic_dir.listFiles();
if(schematic_list != null && schematic_list.length != 0) {
schematic_list.forEach(function(element, index, array) {
let currentFileName = element.getName();
let currentText = fileTxt(schematic_directory+"/"+currentFileName);
clientMessage(currentFileName+"\n"+currentText+"\n-------");
});
}
}catch(err){clientMessage(err+"\n\n"+err.lineNumber)}
}

function downloadUpdate(){
download_r = new DownloadManager.Request(new Uri.parse("https://raw.githubusercontent.com/7thShark/MCPE/master/instinct.js"));
if(branchactive=="true"){
download_r = new DownloadManager.Request(new Uri.parse("http://play.instinctmods.com/instinctbranch/instinct_branch.js"));
}
download_r.setTitle("Instinct.js");
download_r.setDestinationInExternalPublicDir("/Download","Instinct.js");
download_r.setDescription("Downloading " + "Instinct.js Update");
download_r.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
ctx.getSystemService(ctx.DOWNLOAD_SERVICE).enqueue(download_r);
}
var friendList_ = {
all: new org.json.JSONArray(),
isFriend: function (name) {
var is = false;
if(name == null) return false;
var cname = funcS.Text.clean(name.toString().toLowerCase());
var allString = this.all.toString().toLowerCase();
var nameString = name.toString().toLowerCase();

for(var i = 0; i < this.all.length(); i++) {
if(allString.contains(nameString)) {
is = true;
}
}
return is;
},
loadFromFile: function () {
try {
var file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/", "Instinct_F.dat");
var readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
var data = new java.lang.StringBuilder();
var string;
while((string = readed.readLine()) != null) {
data.append(string);

}
try {
this.all = new org.json.JSONArray(data.toString());
} catch(e) {
}
} catch(e) {
}
},
saveToFile: function () {
var dir = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang");
if(!dir.exists()) dir.mkdir();
var file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/", "Instinct_F.dat");
if(!file.exists()) file.createNewFile();
var stream = new java.io.FileOutputStream(file);
try {
stream.write(this.all.toString().getBytes());
} finally {
stream.close();
}
},
addFriend: function (name) {
this.all.put(name);
this.saveToFile();
},
removeFriend: function (name) {
var tempall = new org.json.JSONArray();
for(var i = 0; i < this.all.length(); i++) {
if(this.all.getString(i).toLowerCase() != name.toString().toLowerCase())
tempall.put(this.all.getString(i));
}
this.all = tempall;
this.saveToFile();
}
};
friendList_.loadFromFile();

function addFriendToList(name){
friends_L[objectLength(friends_L)]={name_F:name,removed:false};
friendList_.addFriend(name);
SaveF();
}
function CreateButtonF(fR){
try{
	var xbtn = new android.graphics.drawable.GradientDrawable();
xbtn.setColor(Color.parseColor("#E31919"));
xbtn.setStroke(4, themeStroke);
xbtn.setCornerRadius(0);
var slayout=new android.widget.LinearLayout(activity);
slayout.setOrientation(android.widget.LinearLayout.HORIZONTAL);
var btn=new android.widget.Button(activity);
btn.setText(friends_L[fR].name_F);
btn.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btn.getLayoutParams().width = wayNameWidth+(icon_dimensions*2);
btn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
btn.setTextColor(modTextColor);
btn.getBackground().setAlpha(130);
btn.setTextSize(btntextsize+3);
btn.setBackground(xbgWP);
btn.setTransformationMethod(null);
var btn2=new android.widget.Button(activity);
btn2.setText("X");
btn2.getBackground().setColorFilter(android.graphics.Color.RED,android.graphics.PorterDuff.Mode.MULTIPLY);
btn2.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
btn2.getLayoutParams().width = icon_dimensions*2;
btn2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.WHITE));
btn2.setTextColor(android.graphics.Color.WHITE);
btn2.setTextSize(btntextsize);
btn2.setBackground(xbtn);
btn2.getBackground().setAlpha(130);
btn2.setTypeface(mcfont);
btn2.setTextSize(switchfontsize);
btn2.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
friends_L[fR].removed=true;
friendList_.removeFriend(friends_L[fR].name_F);
SaveF();friends_L={};LoadF();
slayout.getParent().removeView(slayout);
resetBoxes();
if(wallhacked){Entity['setCollisionSize'](Player['getEntity'](), 0, 0);}

}
}));
if(btn.getParent()!=null)
btn.getParent().removeView(btn);
slayout.addView(btn);
if(btn2.getParent()!=null)
btn2.getParent().removeView(btn2);
slayout.addView(btn2);
}catch(err){
clientMessage(err);
}
return slayout;
}

function SaveF(){
try{
var path_F=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
java.io.File(path_F).mkdirs();
var newFile=new java.io.File(path_F,"friends_I.txt");
newFile.createNewFile();
var outWrite=new java.io.OutputStreamWriter(new java.io.FileOutputStream(newFile));
var k=0;
for(var j=0;j<objectLength(friends_L);j++){
if(!friends_L[j].removed){
outWrite.append(friends_L[j].name_F);
k=j+1;
break;
}
}

for(var j=k;j<objectLength(friends_L);j++){
if(!friends_L[j].removed)
outWrite.append("\n"+friends_L[j].name_F);
}
outWrite.close();
friendList_.saveToFile();
}
catch(err){
clientMessage(err);
}
}
if(friendList_.isFriend("v7thSharkv")==false){
addFriendToList("v7thSharkv");
}
function LoadF(){
var savefile="";
var path_F=android.os.Environment.getExternalStorageDirectory().getPath()+"/games/com.mojang/";
if(java.io.File(path_F+"friends_I.txt").exists()){
var file_W=new java.io.File(path_F+"friends_I.txt");
var fos=new java.io.FileInputStream(file_W);
var str=new java.lang.StringBuilder();
var ch;
while((ch=fos.read())!=-1)
str.append(java.lang.Character(ch));
savefile=String(str.toString());
for(var fR=0;fR<savefile.split("\n").length;fR++){
friends_L[objectLength(friends_L)]={name_F:savefile.split("\n")[fR].split("@")[0],removed:false};

}

fos.close();
}
}
LoadF();
function objectLength(obj){
var x=0;
for(var fR in obj)
x++;
return x;
}


var curVersion = 3.1,
X, Z, YAW, DIMENSION, redraw = false, startMapControl = true, settings = {}, settingsLoaded = false, map_state = false, entities = [], chests = [],
minZoom, absZoom, bmpSrc, bmpSrcCopy, bmpBorder, pathBorder, canvasBmpSrc = new android['graphics'].Canvas(),
canvasBmpSrcCopy = new android['graphics'].Canvas(),
matrixMap = new android['graphics'].Matrix(),
matrixPointer = new android['graphics'].Matrix(),
bmpSrcLock = new java['util']['concurrent'].Semaphore(1, true),
delayChunksArrLock = new java['util']['concurrent'].Semaphore(1, true),
delayChunksArr = [],
poolm, poolTick, scheduledFutureUpdateMap, runnableUpdateMap, context = com['mojang']['minecraftpe']['MainActivity']['currentMainActivity']['get'](),
mapWindow, setWindow, density = context['getResources']()['getDisplayMetrics']()['density'],
displayHeight = (context['getResources']()['getDisplayMetrics']()['widthPixels'] < context['getResources']()['getDisplayMetrics']()['heightPixels']) ? context['getResources']()['getDisplayMetrics']()['widthPixels'] : context['getResources']()['getDisplayMetrics']()['heightPixels'];
(function() {
var _0x18a3x26, _0x18a3x27, _0x18a3x28 = Math['floor'](new Date()['getTime']() / 1000);
_0x18a3x27 = load(android['os']['Environment']['getExternalStorageDirectory']()['getPath']() + '/games/com.mojang/', 'minimap.txt')['split']('\x0A');
for (_0x18a3x26 = 0; _0x18a3x26 < _0x18a3x27['length']; _0x18a3x26 += 1) {
settings[_0x18a3x27[_0x18a3x26]['split'](':')[0]] = parseFloat(_0x18a3x27[_0x18a3x26]['split'](':')[1])
};
if (settings['version'] !== curVersion) {
settings = {
radius: 4,
map_type: 0,
map_zoom: 100,
map_alpha: 70,
show_passive: 1,
show_hostile: 1,
show_player: 1,
show_otherPlayer: 0,
show_chest: 0,
hide_underground_mob: 0,
button_size: 40,
window_rawSize: 35,
window_size: displayHeight * 0.35,
window_rawPosition: 0,
window_gravity: 51,
window_y: 0,
style_border: 0,
style_pointer: 3,
style_shape: 0,
show_info: 1,
show_zoomBtn: 1,
delay: 20,
threadCount: 4,
updateCheck: 1,
updateCheckTime: 0,
updateVersion: curVersion,
version: curVersion
}
};
new java['lang'].Thread(function() {
android['os']['Process']['setThreadPriority'](android['os']['Process'].THREAD_PRIORITY_BACKGROUND);
var _0x18a3x29;
if (Math['floor'](settings['updateCheckTime'] / 86400) < Math['floor'](_0x18a3x28 / 86400) && settings['updateCheck']) {
_0x18a3x29 = parseFloat(loadTxtFromUrl('https://raw.githubusercontent.com/MxGoldo/MCPE-mod-scripts/master/MiniMap_Mod_version'));
if (!isNaN(_0x18a3x29)) {
settings['updateCheckTime'] = _0x18a3x28
};
if (_0x18a3x29 > curVersion) {
settings['updateVersion'] = _0x18a3x29
};
saveSettings()
};
if (settings['updateVersion'] > curVersion && settings['updateCheck']) {
context['runOnUiThread'](function() {
settingsUI(['MiniMap Mod', 'Close', ['keyValue', 'text', 'New version available !<br/>Your version: ' + curVersion['toFixed'](1) + '<br/>Latest version: ' + settings['updateVersion']['toFixed'](1) + '<br/><br/>Download from <a href=http://www.minecraftforum.net/forums/minecraft-pocket-edition/mcpe-mods-tools/2336349>minecraftforum.net</a>', ''],
['checkBox', 'updateCheck', 'Check for updates']
])['show']()
})
}
})['start']();
bmpBorder = drawBorderBmp();
pathBorder = createPath(false, true);
bmpSrc = android['graphics']['Bitmap']['createBitmap'](((settings['radius'] + 1) * 2 + 1) * 16, ((settings['radius'] + 1) * 2 + 1) * 16, android['graphics']['Bitmap']['Config'].ARGB_8888);
bmpSrcCopy = android['graphics']['Bitmap']['createBitmap'](bmpSrc['getWidth'](), bmpSrc['getHeight'](), android['graphics']['Bitmap']['Config'].ARGB_8888);
canvasBmpSrc['setBitmap'](bmpSrc);
canvasBmpSrcCopy['setBitmap'](bmpSrcCopy);
minZoom = settings['window_size'] / (settings['radius'] * 2 * 16);
absZoom = (100 / settings['map_zoom']) * minZoom;
poolTick = java['util']['concurrent']['Executors']['newSingleThreadScheduledExecutor']();
runnableUpdateMap = new java['lang'].Runnable(function() {
try {
android['os']['Process']['setThreadPriority'](android['os']['Process'].THREAD_PRIORITY_BACKGROUND);
var _0x18a3x2a = Player['getX'](),
_0x18a3x2b = Player['getZ'](),
_0x18a3x2c = getYaw(),
_0x18a3x2d, _0x18a3x2e, _0x18a3x2f, _0x18a3x30, _0x18a3x31 = Player['getDimension'](),
_0x18a3x26, _0x18a3x32, _0x18a3x33 = settings['radius'] * 16;
if (_0x18a3x2a !== X || _0x18a3x2b !== Z || _0x18a3x2c !== YAW || redraw || _0x18a3x31 !== DIMENSION) {
redraw = false;
_0x18a3x2d = Math['floor'](_0x18a3x2a / 16) * 16;
_0x18a3x2e = Math['floor'](_0x18a3x2b / 16) * 16;
_0x18a3x2f = Math['floor'](X / 16) * 16;
_0x18a3x30 = Math['floor'](Z / 16) * 16;
if (_0x18a3x2d !== _0x18a3x2f || _0x18a3x2e !== _0x18a3x30 || _0x18a3x31 !== DIMENSION) {
if (Math['abs'](_0x18a3x2d - _0x18a3x2f) <= _0x18a3x33 * 2 && Math['abs'](_0x18a3x2e - _0x18a3x30) <= _0x18a3x33 * 2 && _0x18a3x31 === DIMENSION) {
try {
bmpSrcLock['acquire']();
bmpSrcCopy['eraseColor'](0);
canvasBmpSrcCopy['drawBitmap'](bmpSrc, _0x18a3x2e - _0x18a3x30, _0x18a3x2f - _0x18a3x2d, null);
bmpSrc['eraseColor'](0);
canvasBmpSrc['drawBitmap'](bmpSrcCopy, 0, 0, null)
} finally {
X = _0x18a3x2a;
Z = _0x18a3x2b;
bmpSrcLock['release']()
};
if (_0x18a3x2d > _0x18a3x2f) {
for (_0x18a3x26 = _0x18a3x33 + 16 - (_0x18a3x2d - _0x18a3x2f); _0x18a3x26 <= _0x18a3x33; _0x18a3x26 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e, 0);
for (_0x18a3x32 = 16; _0x18a3x32 <= _0x18a3x33; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e + _0x18a3x32, 0);
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e - _0x18a3x32, 0)
}
}
} else {
if (_0x18a3x2f > _0x18a3x2d) {
for (_0x18a3x26 = _0x18a3x33 + 16 - (_0x18a3x2f - _0x18a3x2d); _0x18a3x26 <= _0x18a3x33; _0x18a3x26 += 16) {
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e, 0);
for (_0x18a3x32 = 16; _0x18a3x32 <= _0x18a3x33; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e + _0x18a3x32, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e - _0x18a3x32, 0)
}
}
}
};
if (_0x18a3x2e > _0x18a3x30) {
for (_0x18a3x26 = _0x18a3x33 + 16 - (_0x18a3x2e - _0x18a3x30); _0x18a3x26 <= _0x18a3x33; _0x18a3x26 += 16) {
scheduleChunk(_0x18a3x2d, _0x18a3x2e + _0x18a3x26, 0);
for (_0x18a3x32 = 16; _0x18a3x32 <= _0x18a3x33; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x32, _0x18a3x2e + _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x32, _0x18a3x2e + _0x18a3x26, 0)
}
}
} else {
if (_0x18a3x30 > _0x18a3x2e) {
for (_0x18a3x26 = _0x18a3x33 + 16 - (_0x18a3x30 - _0x18a3x2e); _0x18a3x26 <= _0x18a3x33; _0x18a3x26 += 16) {
scheduleChunk(_0x18a3x2d, _0x18a3x2e - _0x18a3x26, 0);
for (_0x18a3x32 = 16; _0x18a3x32 <= _0x18a3x33; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x32, _0x18a3x2e - _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x32, _0x18a3x2e - _0x18a3x26, 0)
}
}
}
}
} else {
X = _0x18a3x2a;
Z = _0x18a3x2b;
chests = [];
bmpSrc['eraseColor'](0);
scheduleChunk(_0x18a3x2d, _0x18a3x2e, 0);
for (_0x18a3x26 = 16; _0x18a3x26 <= settings['radius'] * 16; _0x18a3x26 += 16) {
for (_0x18a3x32 = 0; _0x18a3x32 < _0x18a3x26; _0x18a3x32 += 16) {
scheduleChunk(_0x18a3x2d + _0x18a3x32 + 16, _0x18a3x2e + _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d + _0x18a3x32, _0x18a3x2e - _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x32, _0x18a3x2e + _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x32 - 16, _0x18a3x2e - _0x18a3x26, 0);
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e + _0x18a3x32, 0);
scheduleChunk(_0x18a3x2d + _0x18a3x26, _0x18a3x2e - _0x18a3x32 - 16, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e + _0x18a3x32 + 16, 0);
scheduleChunk(_0x18a3x2d - _0x18a3x26, _0x18a3x2e - _0x18a3x32, 0)
}
}
}
} else {
X = _0x18a3x2a;
Z = _0x18a3x2b
};
YAW = _0x18a3x2c;
DIMENSION = _0x18a3x31;
var _0x18a3x34 = absZoom,
_0x18a3x35 = settings['style_pointer'],
_0x18a3x36 = _0x18a3x2a - (settings['window_size'] * 0.5 / _0x18a3x34),
_0x18a3x37 = _0x18a3x2b + (settings['window_size'] * 0.5 / _0x18a3x34);
matrixMap['setTranslate'](settings['window_size'] * 0.5 - (bmpSrc['getWidth']() * 0.5) - 8 + _0x18a3x2b - _0x18a3x2e, settings['window_size'] * 0.5 - (bmpSrc['getHeight']() * 0.5) + 8 - _0x18a3x2a + _0x18a3x2d);
matrixMap['postScale'](_0x18a3x34, _0x18a3x34, settings['window_size'] * 0.5, settings['window_size'] * 0.5);
if (settings['show_info']) {
mapWindow['setInfo']()
};
var _0x18a3x38 = mapView['lockCanvas']();
_0x18a3x38['drawColor'](0, android['graphics']['PorterDuff']['Mode'].CLEAR);
_0x18a3x38['save'](android['graphics']['Canvas'].CLIP_SAVE_FLAG);
_0x18a3x38['clipPath'](pathBorder, android['graphics']['Region']['Op'].REPLACE);
_0x18a3x38['drawBitmap'](bmpSrc, matrixMap, bmpPaint);
if (settings['show_chest']) {
_0x18a3x26 = chests['length'];
while (_0x18a3x26--) {
matrixPointer['setTranslate']((_0x18a3x37 - chests[_0x18a3x26][1]) * _0x18a3x34, (chests[_0x18a3x26][0] - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](pointer[3]['matrix']);
_0x18a3x38['drawBitmap'](pointer[3]['bmp'], matrixPointer, null)
}
};
if (settings['show_passive'] || settings['show_hostile'] || settings['show_otherPlayer']) {
redraw = true;
_0x18a3x26 = entities['length'];
var _0x18a3x39;
while (_0x18a3x26--) {
if (!settings['hide_underground_mob'] || Entity['getY'](entities[_0x18a3x26]) > 60) {
_0x18a3x39 = Entity['getEntityTypeId'](entities[_0x18a3x26]);
if (_0x18a3x35 !== 3) {
if (_0x18a3x39 < 32 && settings['show_passive']) {
matrixPointer['reset']();
if (pointer[_0x18a3x35]['rotate']) {
matrixPointer['postRotate'](Entity['getYaw'](entities[_0x18a3x26]) - 90)
};
matrixPointer['postTranslate']((_0x18a3x37 - Entity['getZ'](entities[_0x18a3x26])) * _0x18a3x34, (Entity['getX'](entities[_0x18a3x26]) - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](pointer[_0x18a3x35]['matrix']);
_0x18a3x38['drawBitmap'](pointer[_0x18a3x35]['bmp'], matrixPointer, pointerPaint.GREEN)
} else {
if (_0x18a3x39 < 63 && _0x18a3x39 >= 32 && settings['show_hostile']) {
matrixPointer['reset']();
if (pointer[_0x18a3x35]['rotate']) {
matrixPointer['postRotate'](Entity['getYaw'](entities[_0x18a3x26]) - 90)
};
matrixPointer['postTranslate']((_0x18a3x37 - Entity['getZ'](entities[_0x18a3x26])) * _0x18a3x34, (Entity['getX'](entities[_0x18a3x26]) - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](pointer[_0x18a3x35]['matrix']);
_0x18a3x38['drawBitmap'](pointer[_0x18a3x35]['bmp'], matrixPointer, pointerPaint.RED)
} else {
if (_0x18a3x39 === 63 && settings['show_otherPlayer']) {
matrixPointer['reset']();
if (pointer[_0x18a3x35]['rotate']) {
matrixPointer['postRotate'](Entity['getYaw'](entities[_0x18a3x26]) - 90)
};
matrixPointer['postTranslate']((_0x18a3x37 - Entity['getZ'](entities[_0x18a3x26])) * _0x18a3x34, (Entity['getX'](entities[_0x18a3x26]) - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](pointer[_0x18a3x35]['matrix']);
_0x18a3x38['drawBitmap'](pointer[_0x18a3x35]['bmp'], matrixPointer, null)
}
}
}
} else {
if ((_0x18a3x39 < 32 && settings['show_passive']) || (_0x18a3x39 < 63 && _0x18a3x39 >= 32 && settings['show_hostile']) || (_0x18a3x39 === 63 && settings['show_otherPlayer'])) {
matrixPointer['reset']();
matrixPointer['postRotate'](Entity['getYaw'](entities[_0x18a3x26]) - 90);
matrixPointer['postTranslate']((_0x18a3x37 - Entity['getZ'](entities[_0x18a3x26])) * _0x18a3x34, (Entity['getX'](entities[_0x18a3x26]) - _0x18a3x36) * _0x18a3x34);
matrixPointer['preConcat'](iconMatrix);
_0x18a3x38['drawBitmap'](heads[_0x18a3x39] || heads[0], matrixPointer, null)
}
}
}
}
};
if (settings['show_player'] && !settings['show_otherPlayer']) {
if (_0x18a3x35 !== 3) {
matrixPointer['reset']();
if (pointer[_0x18a3x35]['rotate']) {
matrixPointer['postRotate'](_0x18a3x2c - 90)
};
matrixPointer['postTranslate'](settings['window_size'] * 0.5, settings['window_size'] * 0.5);
matrixPointer['preConcat'](pointer[_0x18a3x35]['matrix']);
_0x18a3x38['drawBitmap'](pointer[_0x18a3x35]['bmp'], matrixPointer, null)
} else {
matrixPointer['reset']();
matrixPointer['postRotate'](_0x18a3x2c - 90);
matrixPointer['postTranslate'](settings['window_size'] * 0.5, settings['window_size'] * 0.5);
matrixPointer['preConcat'](iconMatrix);
_0x18a3x38['drawBitmap'](heads[63] || heads[0], matrixPointer, null)
}
};
_0x18a3x38['restore']();
if (bmpBorder !== null) {
_0x18a3x38['drawBitmap'](bmpBorder, 0, 0, null)
};
mapView['unlockCanvasAndPost'](_0x18a3x38)
}
} catch (e) {betToast(e+' #' + e['lineNumber'])}
})
}());
var bmpPaint = new android['graphics'].Paint(),
mapView = new android['view'].TextureView(context),
mapWindow = function() {
var _0x18a3x3c = new android['widget'].Button(context),
_0x18a3x3d, _0x18a3x3e, coordBlock = new android['widget'].Button(context),
_0x18a3x40 = new android['widget']['RelativeLayout'].LayoutParams(settings['window_size'], settings['window_size']),
_0x18a3x41 = new android['widget']['RelativeLayout'].LayoutParams(settings['button_size'] * density, settings['button_size'] * density),
_0x18a3x42 = new android['widget']['RelativeLayout'].LayoutParams(settings['button_size'] * density, settings['button_size'] * density),
_0x18a3x43 = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT),
_0x18a3x44 = new android['widget'].RelativeLayout(context),
_0x18a3x45 = new android['widget'].PopupWindow(_0x18a3x44, android['widget']['LinearLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['LinearLayout']['LayoutParams'].WRAP_CONTENT),
_0x18a3x46 = {
set: function() {
if (!setWindow) {
setWindow = settingsUI(['MiniMap Mod Options', 'Ok', ['sectionDivider', 'Graphics'],
['keyValue', 'multipleChoice', 'MiniMap type', 'map_type', ['basic surface (fast)', 'surface', 'cave']],
['keyValue', 'slider', 'Minimap render distance', 'radius', 1, Minecraft.getRenderDistance() + 4, 1, ' chunks'],
['keyValue', 'slider', 'Zoom', 'map_zoom', 10, 100, 1, '%'],
['subScreen', 'Icons and Indicators ', ['Icons and Indicators', 'Ok', ['sectionDivider', 'Entity'],
['keyValue', 'multipleChoice', 'pointer style', 'style_pointer', ['crosshairs', 'arrow', 'minecraft', 'head']],
['checkBox', 'hide_underground_mob', 'hide entities below sea level'],
['checkBox', 'show_player', 'you'],
['checkBox', 'show_passive', 'passive mobs'],
['checkBox', 'show_hostile', 'hostile mobs'],
]],
['sectionDivider', 'View'],
['keyValue', 'multipleChoice', 'Position', 'window_rawPosition', ['top left', 'top left (offset)', 'top right', 'bottom left', 'bottom right'], 'window_gravity', [51, 51, 53, 83, 85], 'window_y', [0, 40 * density, 40 * density, 0, 0]],
['keyValue', 'slider', 'Size', 'window_rawSize', 5, 100, 5, '%'],
['keyValue', 'slider', 'Opacity', 'map_alpha', 20, 100, 1, '%'],
['keyValue', 'slider', 'Button size', 'button_size', 20, 60, 1, 'dp'],
['checkBox', 'show_info', 'Coordinates visible'],
['checkBox', 'show_zoomBtn', 'Zoom Buttons visible'],
['sectionDivider', 'Style'],
['keyValue', 'multipleChoice', 'window shape', 'style_shape', ['square', 'circle']],
['sectionDivider', 'Other'],
['checkBox', 'updateCheck', 'Check for updates ' + (settings['updateVersion'] > curVersion ? '(update available)' : '')],
['subScreen', 'Advanced ', ['Advanced', 'Ok', ['keyValue', 'slider', 'Minimap max frequency', 'delay', 1, 40, 1, ' fps'],
['keyValue', 'slider', 'Threads count', 'threadCount', 1, 12, 1, '']
]],
['subScreen', 'MiniMap Mod info ', ['MiniMap Mod info', 'Ok', ['keyValue', 'text', 'Version ', curVersion['toFixed'](1)],
['keyValue', 'text', 'Made by', 'MxGoldo'],
['keyValue', 'text', '<a href=http://www.minecraftforum.net/forums/minecraft-pocket-edition/mcpe-mods-tools/2336349>minecraftforum.net thread</a>', '']
]]
])['show']()
} else {
setWindow['show']()
}
}
};
bmpPaint['setXfermode'](new android['graphics'].PorterDuffXfermode(android['graphics']['PorterDuff']['Mode'].SRC));
mapView['setId'](1);
mapView['setVisibility'](android['view']['View'].GONE);
mapView['setAlpha'](settings['map_alpha'] / 100);
_0x18a3x40['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_TOP);
mapView['setOnClickListener'](function(_0x18a3x47) {
changeMapState()
});
mapView['setOnLongClickListener'](function(_0x18a3x47) {
_0x18a3x46['set']();
return true
});
_0x18a3x3c.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(android.graphics.BitmapFactory.decodeByteArray(android.util.Base64.decode(mapicon, 0), 0, android.util.Base64.decode(mapicon, 0).length)));
_0x18a3x3c['setVisibility'](android['view']['View'].VISIBLE);
_0x18a3x3c['setLayoutParams'](new android['widget']['LinearLayout'].LayoutParams(settings['button_size'] * density, settings['button_size'] * density));
_0x18a3x3c['setOnClickListener'](function(_0x18a3x47) {
changeMapState()
});
_0x18a3x3c['setOnLongClickListener'](function(_0x18a3x47) {
_0x18a3x46['set']();
return true
});
coordBlock['setId'](2);
coordBlock['setVisibility'](android['view']['View'].GONE);
_0x18a3x43['addRule'](android['widget']['RelativeLayout'].BELOW, 1);
_0x18a3x43['addRule'](android['widget']['RelativeLayout'].ALIGN_LEFT, 1);
_0x18a3x43['addRule'](android['widget']['RelativeLayout'].ALIGN_RIGHT, 1);
coordBlock['setTextSize'](11);
coordBlock.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
coordBlock['setTextColor'](android['graphics']['Color'].YELLOW);
coordBlock.setTypeface(mcfont);
_0x18a3x3e = minecraftButton('-', settings['button_size'], settings['button_size']);
_0x18a3x3e['setId'](3);
_0x18a3x3e['setVisibility'](android['view']['View'].GONE);
_0x18a3x42['addRule'](android['widget']['RelativeLayout'].BELOW, 2);
_0x18a3x3e['setOnClickListener'](function(_0x18a3x47) {
if (settings['map_zoom'] * 1.2 >= 100) {
betToast("minimum zoom reached");
settings['map_zoom'] = 100
} else {
settings['map_zoom'] = Math['round'](settings['map_zoom'] * 1.2)
};
settingsChanged('map_zoom');
saveSettings()
});
_0x18a3x3d = minecraftButton('+', settings['button_size'], settings['button_size']);
_0x18a3x3d['setId'](4);
_0x18a3x3d['setVisibility'](android['view']['View'].GONE);
_0x18a3x41['addRule'](android['widget']['RelativeLayout'].BELOW, 2);
_0x18a3x41['addRule'](android['widget']['RelativeLayout'].RIGHT_OF, 3);
_0x18a3x3d['setOnClickListener'](function(_0x18a3x47) {
if (settings['map_zoom'] * 0.8 <= 10) {
betToast("maximum zoom reached");
settings['map_zoom'] = 10
} else {
settings['map_zoom'] = Math['round'](settings['map_zoom'] * 0.8)
};
settingsChanged('map_zoom');
saveSettings()
});
_0x18a3x44['addView'](_0x18a3x3c);
_0x18a3x44['addView'](mapView, _0x18a3x40);
_0x18a3x44['addView'](_0x18a3x3d, _0x18a3x41);
_0x18a3x44['addView'](_0x18a3x3e, _0x18a3x42);
_0x18a3x44['addView'](coordBlock, _0x18a3x43);
_0x18a3x45['setBackgroundDrawable'](new android['graphics']['drawable'].ColorDrawable(android['graphics']['Color'].TRANSPARENT));
return {
setInfo: function() {
context['runOnUiThread'](function() {
coordBlock['setText'](' Position: ' + Math['floor'](Player['getX']()) + ', ' + Math['floor'](Player['getY']() - 1) + ', ' + Math['floor'](Player['getZ']()))
})
},
resetVisibility: function() {
context['runOnUiThread'](function() {
var _0x18a3x48 = android['view']['View']['VISIBLE'],
_0x18a3x49 = android['view']['View']['GONE'];
if (map_state) {
_0x18a3x3c['setVisibility'](_0x18a3x49);
mapView['setVisibility'](_0x18a3x48);
_0x18a3x3d['setVisibility'](settings['show_zoomBtn'] ? _0x18a3x48 : _0x18a3x49);
_0x18a3x3e['setVisibility'](settings['show_zoomBtn'] ? _0x18a3x48 : _0x18a3x49);
coordBlock['setVisibility'](settings['show_info'] ? _0x18a3x48 : _0x18a3x49)
} else {
_0x18a3x3c['setVisibility'](_0x18a3x48);
mapView['setVisibility'](_0x18a3x49);
_0x18a3x3d['setVisibility'](_0x18a3x49);
_0x18a3x3e['setVisibility'](_0x18a3x49);
coordBlock['setVisibility'](_0x18a3x49)
}
})
},
show: function() {
context['runOnUiThread'](function() {
_0x18a3x45['showAtLocation'](context['getWindow']()['getDecorView'](), settings['window_gravity'], 0, settings['window_y'])
})
},
hide: function() {
context['runOnUiThread'](function() {
_0x18a3x45['dismiss']()
})
}
}
}();

function entityRemovedHook(_0x18a3x4b) {
if (Entity['getEntityTypeId'](_0x18a3x4b) <= 63 && Entity['getEntityTypeId'](_0x18a3x4b) >= 10) {
var _0x18a3x4c = entities['indexOf'](_0x18a3x4b);
if (_0x18a3x4c > -1) {
entities['splice'](_0x18a3x4c, 1)
}
}
};

function entityAddedHook(_0x18a3x4b) {
if (Entity['getEntityTypeId'](_0x18a3x4b) <= 63 && Entity['getEntityTypeId'](_0x18a3x4b) >= 10) {
entities[entities['length']] = _0x18a3x4b
}
};

function minecraftButton(_0x18a3x4f, _0x18a3x50, _0x18a3x51) {
_0x18a3x50 = _0x18a3x50 || 40;
_0x18a3x51 = _0x18a3x51 || 40;
var _0x18a3x52 = new android['widget'].Button(context);
_0x18a3x52['setText'](_0x18a3x4f);
_0x18a3x52['setTextSize'](15);
_0x18a3x52['setTextColor'](android['graphics']['Color'].WHITE);
_0x18a3x52['setBackgroundDrawable'](drawBtnBack(_0x18a3x50 * density, _0x18a3x51 * density));
return _0x18a3x52
};
function minecraftTxtV(_0x18a3x4f, _0x18a3x50, _0x18a3x51) {
_0x18a3x50 = _0x18a3x50 || 40;
_0x18a3x51 = _0x18a3x51 || 40;
var _0x18a3x52 = new android['widget'].TextView(context);
_0x18a3x52['setText'](_0x18a3x4f);
_0x18a3x52['setBackgroundDrawable'](drawBtnBack(_0x18a3x50 * density, _0x18a3x51 * density));
return _0x18a3x52
};
function drawBtnBack(_0x18a3x50, _0x18a3x54) {
var _0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](_0x18a3x50, _0x18a3x54, android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55),
_0x18a3x56 = new android['graphics'].Paint(),
_0x18a3x57;
_0x18a3x56['setColor'](themeForeground);
_0x18a3x56['setMaskFilter'](new android['graphics'].EmbossMaskFilter([1, 1, 1], 0.7, 8, 4 * density));
_0x18a3x38['drawRect'](0, 0, _0x18a3x50, _0x18a3x54, _0x18a3x56);
_0x18a3x57 = new android['graphics']['drawable'].BitmapDrawable(_0x18a3x55);
_0x18a3x57['setAlpha'](204);
return _0x18a3x57
};

function createPool() {
if (poolm != null) {
poolm['shutdownNow']()
};
poolm = java['util']['concurrent']['Executors']['newScheduledThreadPool'](settings['threadCount']);
poolm['setKeepAliveTime'](60, java['util']['concurrent']['TimeUnit'].SECONDS);
poolm['allowCoreThreadTimeOut'](true)
};
function createBlockPool() {
if (poolc != null) {
poolc['shutdownNow']()
};
poolc = java['util']['concurrent']['Executors']['newScheduledThreadPool'](settings['threadCount']);
poolc['setKeepAliveTime'](1, java['util']['concurrent']['TimeUnit'].SECONDS);
poolc['allowCoreThreadTimeOut'](false)
};


function scheduleChunk(_0x18a3x5a, _0x18a3x5b, _0x18a3x5c) {
poolm['schedule'](new java['lang'].Runnable(function() {
try {
android['os']['Process']['setThreadPriority'](android['os']['Process'].THREAD_PRIORITY_BACKGROUND);
if (Math['abs'](Math['floor']((Z - _0x18a3x5b) / 16)) > settings['radius'] || Math['abs'](Math['floor']((X - _0x18a3x5a) / 16)) > settings['radius']) {
return
};
var _0x18a3x32 = 16,
_0x18a3x5d = 16,
_0x18a3x5e = _0x18a3x5a + 16,
_0x18a3x5f = _0x18a3x5b - 1,
_0x18a3x60 = [],
_0x18a3x61 = settings['map_type'];
if (Level['getTile'](_0x18a3x5e - 16, 0, _0x18a3x5f + 16) === 95) {
return
};
if (!chunkLoaded(_0x18a3x5e - 16, _0x18a3x5f + 16)) {
if (map_state) {
scheduleChunk(_0x18a3x5a, _0x18a3x5b, 10)
} else {
delayChunksArrLock['acquire']();
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a, _0x18a3x5b];
delayChunksArrLock['release']()
};
return
};
do {
do {
_0x18a3x60[_0x18a3x60['length']] = mapDot[_0x18a3x61](_0x18a3x5e - _0x18a3x32, _0x18a3x5f + _0x18a3x5d)
} while (_0x18a3x5d -= 1);;
_0x18a3x5d = 16
} while (_0x18a3x32 -= 1);;
if (java['lang']['Thread']['interrupted']()) {
return
};
try {
bmpSrcLock['acquire']();
bmpSrc['setPixels'](_0x18a3x60, 0, 16, ((Math['floor'](Z / 16) + settings['radius'] + 1) * 16) - _0x18a3x5b, _0x18a3x5a - ((Math['floor'](X / 16) - settings['radius'] - 1) * 16), 16, 16)
} finally {
bmpSrcLock['release']()
};
redraw = true
} catch (e) {}
}), _0x18a3x5c, java['util']['concurrent']['TimeUnit'].SECONDS)
};
var pointerPaint = {
RED: (function() {
var _0x18a3x56 = new android['graphics'].Paint();
_0x18a3x56['setColorFilter'](new android['graphics'].LightingColorFilter(android['graphics']['Color'].RED, 0));
return _0x18a3x56
})(),
GREEN: (function() {
var _0x18a3x56 = new android['graphics'].Paint();
_0x18a3x56['setColorFilter'](new android['graphics'].LightingColorFilter(android['graphics']['Color'].GREEN, 0));
return _0x18a3x56
})()
};
var pointer = [new Pointer((function() {
var _0x18a3x56 = new android['graphics'].Paint(),
_0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](displayHeight * 0.1, displayHeight * 0.1, android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55);
_0x18a3x56['setColor'](android['graphics']['Color'].BLACK);
_0x18a3x38['drawLines']([0, displayHeight * 0.05, displayHeight * 0.1, displayHeight * 0.05, displayHeight * 0.05, 0, displayHeight * 0.05, displayHeight * 0.1], _0x18a3x56);
return _0x18a3x55
})(), (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-displayHeight * 0.05, -displayHeight * 0.05);
return _0x18a3x64
})(), false), new Pointer((function() {
var _0x18a3x65 = new android['graphics'].Path(),
_0x18a3x56 = new android['graphics'].Paint(),
_0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](displayHeight * 0.025, displayHeight * 0.025, android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55);
_0x18a3x65['moveTo'](displayHeight * 0.0125, 0);
_0x18a3x65['lineTo'](0, displayHeight * 0.025);
_0x18a3x65['lineTo'](displayHeight * 0.0125, displayHeight * 0.015);
_0x18a3x65['lineTo'](displayHeight * 0.025, displayHeight * 0.025);
_0x18a3x65['close']();
_0x18a3x56['setColor'](android['graphics']['Color'].WHITE);
_0x18a3x38['drawPath'](_0x18a3x65, _0x18a3x56);
_0x18a3x56['setColor'](android['graphics']['Color'].BLACK);
_0x18a3x56['setStyle'](android['graphics']['Paint']['Style'].STROKE);
_0x18a3x38['drawPath'](_0x18a3x65, _0x18a3x56);
return _0x18a3x55
})(), (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-displayHeight * 0.0125, 0);
return _0x18a3x64
})(), true), new Pointer(decodeBmp('iVBORw0KGgoAAAANSUhEUgAAAAUAAAAHCAYAAADAp4fuAAAABHNCSVQICAgIfAhkiAAAAEFJREFUCJltjcENgDAQw0z3HyKj3CjpJOZVIRB+WfEj8OCRdYYkr2AS25rEE2yralsBFz8sgJlh783MAHB9n4HrBiyNJZtxPPDsAAAAAElFTkSuQmCC'), (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-2.5, -4.5);
_0x18a3x64['postScale'](displayHeight * 0.005, displayHeight * 0.005);
return _0x18a3x64
})(), true), new Pointer(decodeBmp('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wUeEiAJpGBAngAAAhBJREFUOMtlk7ty1DAUhj9Zsh17SWZDZnMhYaChCSmYVFSpGIZnoU5LydPQUOxjMEC5TYqFZRg2YVA2Xt8lUchxdpPTSB7p/D7/ReLt2alrjGG1QikBcM7RWtt/36+/+gYF8P7MUlU1si0xagOAyyJ/0DBKUi6LnFGSEscRHz6VHmCtocn7y9N5SRSFPN9LAKiqmv0wQMVRD6qstRSLnJ0gIpRtfzD9veDd+ZjJZMLF+Jwnj1MALIpmkRPKlkCACoKAi8x1bZ7r7uYjrl3BcrlkOp3y9ZfhZeTYUQIr427SGCGWqMYYxt8kUgBCdEAleVFz8vMnWmsmfzb4sfBsjW36KbO8RIVS8uZkAEDbWpQKAJj/E1xdXQFwsNXy6pkkiOI1UcdfapSzhsMko7USVs7bqOT7548AnB5G7G0a4M6ZrAbnLEoEkoPddA25XS4QG47Xx3u9+rcVdw7MbwTWFV6DmdZrAEfDIaOqpqrqtTzshwHEETOt0XnobQylZJSkD/5wP0ijJMUApqoZJSnCSKDxGtiq7TNQVH69nwva0rtnvBu2cT4HIpAkW3cTKGCmNUfD4QNqfhKFbEviwQAhKpRzjpnWPqKDrV6DVT1uRbws8p6azjMcDiWEIJLbTK4zuF72SfSXQiIpgJj5TcZ2vEkYqe7FCgQacfzi6W2OCQCL6Pau27sVAgJjQfqsUZQV/wGmEfCfo9F8YgAAAABJRU5ErkJggg=='), (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-8, -8);
_0x18a3x64['postScale'](displayHeight * 0.0012, displayHeight * 0.0012);
return _0x18a3x64
})(), false)];

function Pointer(_0x18a3x55, _0x18a3x64, _0x18a3x67) {
this['bmp'] = _0x18a3x55;
this['matrix'] = _0x18a3x64;
this['rotate'] = _0x18a3x67
};
var iconMatrix = (function() {
var _0x18a3x64 = new android['graphics'].Matrix();
_0x18a3x64['setTranslate'](-9, -14);
_0x18a3x64['postScale'](displayHeight * 0.0012, displayHeight * 0.0012);
return _0x18a3x64
})();
var arrow = decodeBmp('iVBORw0KGgoAAAANSUhEUgAAABIAAAAXCAYAAAAGAx/kAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH3wkXCBYpv1t1DgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAbUlEQVQ4y+3VQQpDIQxF0fu6MV2aO4uu7HVSoRQ0n99OCl4IjnLITMjza7YpAWit8f6udpQBpRQAxhhbUBlQawWg974FJ+QV8NkClCaSATtwHuGI8N0iwoAF2DbfJIkHP+pABzrQn0G68kNc6QlKrnBddYT83gAAAABJRU5ErkJggg==');
var heads = {
0: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCRYIWPnH7AAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA9klEQVQ4y63TO8rCQBSG4SfeJYWFIEiW4D5s7OzcQHpxDa7HytINuAix89LYBAmIjoUE/mn+JjnN3L6Z8/KdM8lkMgkQQgCtVgu83+9oTJIEtNttkV7N6FQvVfH5fEC32wVpmkbnz+czWtcnqCZ5noNerxdlLooi8uZ2u4HdbtcMQbJerwMMBgNQluUPrfODezweIMsycDqdGvagyrzdbsFisQCz2SzKfDwewX6/B5vNpiEPVqtVgOl0CobDITgcDpFwPp+D8/kMLpdLQwTL5TL8rfP9fv/3wng8jjqyfhWu12v0B0ajUSR4vV6g3+9HfVLt1yb4AgeiVR6weSbNAAAAAElFTkSuQmCC'),
10: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAQYPHjNbAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAZklEQVQ4y2NkgIJbt279ZyABqKmpMTIwMDAwMVAIKDaAEYkN98K/f/+w28bEhKGXei7Y3KhDUiD61l8ZJIHIAmNcuPdtYFxAvVhATsoqampYFd+5dYv6SZkRm+A/pFSJ5l/GwReIAJzkF8KfuHVTAAAAAElFTkSuQmCC'),
11: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAMf7V3OCAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA5klEQVQ4y62SLW7DQBCFPztjKVVPUBxshfkArlmWpbgXKEyVkICCkIaUpDBSQipVKooWRcoFTH0EUx+gYOMEJCt1CgrqfWj37c/7NDPRcHB3AuhJBMDRnQB4flnyU2VZqv1+9wlATEeJJPoPSaLrgSg/yzIAFvMJALd9CUTwutoqY/r0CIBzTvlvixkA7+sP5XcnKIoCgLZtVReapgFgs9LdyPP8khzHYQgiPwf/Vfca+MW3OwLwZQ9/PhiPLjW4SSQwgU9O0xQAY4y6aK0FoKoqAB7MfWCCuq5Vsp8Dr99EfemFITgDfbg54HZ1708AAAAASUVORK5CYII='),
12: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAAr58RpfgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABHklEQVQ4y62SvUrEQBSFvySTH2MwbmXlIlrYWlgs5D0EKxfR0lcQRLsVSztL8XV8BAtTrSKCuJs1k7E401g7t5gLdy73nPnmRu31lQP4fH8DoB5toYh0lgUANrIApCt/W6ke888wi5Umm16KpsgAcIka7GIJQF5XUq7XvAUXyIGJJZXtjVVJNXMYlJPIO/qRQxd3Uq7yMA4iwAFYKxbz2e3fhqpUHgYAqrNzAMqyDOSgvbxxAMYr2fG2UJTrYuE87UgMmL8C0H19B/qFZMNTpgfg/m4GwMXRsSwW2riHp0cATqcn2otQDIz90KaRaB8mBxMAnl9aAIrdEQBN06gvS8Wm74MxMAD0VrMO93f09lx1V+ReeVO5W/pficM4+AVghEWaSP2iTgAAAABJRU5ErkJggg=='),
13: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAIGkC1XiQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABPUlEQVQ4y62SsUrDUBSGv6RN7GoICAmYIUMha3ffQkTcBMFd3ayLg+gT2FX0DXTzCdybUSkSCo1DSpJCQ5M43N7E4BTas9x7zr3c+53/P7BhKABBEJQAZVkCMJ/PqwtFUVT7JEkAMAwDgH6/r3Tl4XQ6bbwcRdG/B2TEcYzjOACoAFmWtUaXtBWB/zoSha4orfJc5J2O6FXrAZAmMQD7J5c1ga7rrQlka5WIrusCsFgsAHi6OQVguRTtnd0/ix9VVRD7Pp7nKepWbJxMJuVoeA6As7crEFfZWoumC98/wsqjizsGg8EWCcIwBODt8RaA4cFh4+L1+wsAx1cPSOsrAulpmzBNszkHs9lMqL4eqo+vTwB6O70msqI0chUgTdPWBJqm1RqMx+Py70jbtl3/oNY65+vplKtlWcqmJvAL4KV5Q1seyu0AAAAASUVORK5CYII='),
14: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCA4dtv3RaQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABAklEQVQ4y7WSoU9CURTGf/eNgmw8QOsLb6MInWiyWSxsOjYpEBzNLAmS1TEC+hdgMIhBTUQ6WuDdwIYN35w0eJfwvIznnMXLl87Z+W3ft3OO4Fuj4atiQ9l8Tmz2zw89BeC6bmRu8U/FdCGl/BPUzj85cwkye7sALJcBAE+9RwUgRLiKme8DkEylt5RgOn0H4Gs+B8C2kxFw7HkA7MTjZhOsbx0EgQJIpTMANCrHEbB+cw+A/zELnS1LmE3QujxXAJ+LBGenJwDsHxwC8NZ/AeD66gLHzQNQa7YNf+JEDsPtO4X1UDtr2U6BiRxs6Q+0c7FY4qhc/RW+u+3Q7equbybBCgRARDqUFxSFAAAAAElFTkSuQmCC'),
15: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCA0M92CiWAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA5klEQVQ4y2NcVx7zn4GBgeH7+68MDAwMDJyC3AzIfHSALs/EQCFgQRfAZTMuQLELBt4AFpifG7bsJkljg48rlVwAi9ebTz4xMDAwMHB0QcycesMHRWG2xhYGBgYGhh9l/xgYGBgYNlTGYY9GBgYGhv/fGRi+/fqNIcbIiamWsdbL4D8DAwODmowMAwMDA8MvBi6Gb79+M7x6dR9FoayMDAMXOyvD/58Qg289eUKjlHjg+DmGX3//Magp8KGI7z1yjYGNmYnBzVKDyukAXcDGWJnh268/DO8+vEURtzBQZOBiY6F+SgQAkglD+wSBimYAAAAASUVORK5CYII='),
16: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAwtohKDRwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAzElEQVQ4y63SL07EUBDH8U9JIRiCgWs8w6aXqOMANeBwGCwXwIFAYNBkXS/RBNMDYGrr1vCnSRH0JbwVK7b9mcn8Mu/NNzOTPTgc4VgGPo3g/PXFfzVNk+Rnj8/gwEzlsXNUzPM8T/yiKMBHdfVHONXNJ7jxnRhPjsAwDIm/qa7BvZ/En0+wbcQtfPU9GG/vdn4wmyCLd7CvlpvBZoqX7fvOB29hBU6nWS1HEDuHEEBZlklhXdegbVuwDhcLE3Rdl3TupzuI2iY6WWoLv5WmMMWCKVO2AAAAAElFTkSuQmCC'),
17: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAwLcB8GugAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA30lEQVQ4y51TOw6CQBB9ECsLDZEQYOmsOJwn8AAWHsDewiPYeQJCKCyIpQmLhkAIFrTauJtd2QXkdTuz8+bNz8AXiyB84w+8stQAgJlonC9XsGyHv12PAACeDwoAqMsCANA2Ff9jqthdj8D1CEjgS0QqmDoHCxZJRHWDBAw0y3v9EoFlO5L0MegoiM9H7LebTvbTYQeaXIYJbneqzabyGeIekHXIO04CX1l/ek3QNhXfA0lBXRZ85kPNGz2F37FOImDBTN0kBbqSzDHZaZYrs/cSsIA4irTBnWsUL26s/QOMaVD4M/hBCgAAAABJRU5ErkJggg=='),
19: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBwN076x3gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA0klEQVQ4y7WTvw5BMRSHv+ISQlKuBIk/YWTwBGaDN/CA3sBgNpgNrEJILJcmIsgl10BFBYv6TT3tl/ac8+sRnVYzAMhIB4CN8gHoD8eCJ33iQvyoiF4UcvGvoH5Zc9YyELo2JxwYB4nYxYjP93C7u3HRqGMpg9cue94agFopa4DzlQIgmZIADEYTYdcFLdfNA3A4HgDY7U8AyHT27QX2eqCUCgCkvNXYbTcMsDeYaI47J/7jgtbrv/Avxmg8ZsW+C9O5B8BssTT2q+UiAPWKa9eFKwzDPzoKq7SSAAAAAElFTkSuQmCC'),
20: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBYPx184eAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABDklEQVQ4y62Rv07CUBSHv0sLFHExJiwyiDHpaIirg4NxZOFJHHwKfQOegA13BgcHq4kO4CoOLBCqCX+KbamX4V4MTZCYtGc553fPub/zJUc4jiNZD0PLSOcf/ayLIPABECIDQIaEYQ4fW8rREADkrKLamM3pEUUShaFWSvthkBLBgX0CwHzsbp8sxOWuzokJxOWpLZMYJCf4eL2XAIfV81ij224C8N55BqB2dRvrv9w1UrrC1B0AcE0FgBt6AHSeHjZ+WM39Gvzl7H37/yNYFf2LEgD1xT7hIkLuqU2fmrB2ViVrGvRNI+UrdNtNCRDMxgBMZh5Tb85bbwTAlzsE4LhksWPlKRbyAJSP7HQIlhjFT+sbTWH0AAAAAElFTkSuQmCC'),
21: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBUEe6CyMwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABNElEQVQ4y52TPWrDQBCFP6/cqhEI4dYHSKFG+ABWKdw7BwiBQO6QKo2bNDlAUrgLKnOBsI3AOYDbIAxpUgun2MzuaB1DyMCi+Xk7q3lvd7KpOQJUc7B7EB/G8bmaAWhWJUUeAEXuloCLHJoKbzo2AP1754uXjwnLu8QDAZiVpzlUg9iydHAbZiUAy+sdAA+vCa11mP7gvlPZ1FoHyNLBN2lfulFTaQKDH88AFBclfzVpJDblH/b8FnPw0dFUcFOH7utFAOl8bKM/0FLF+uuGumaE0dbipXJEOYD4Oq9zk03NsZo7/WOyPr+Ss76MZfS1zNLBLx3/5guRRhMlp+h549nj+OQmrheBTAFvb90S296XvmaE0aaCp6sgl94gV9qf/iO7l9HuQSvY2vAS5bHp59wfAm/fWoh3ZA08iW0AAAAASUVORK5CYII='),
22: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBkk7Hvd9wAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAiklEQVQ4y2NgoBAwwhiXem3/w9h6xYcZ0RXikmei1AUUG8CI7LTLz3/AJTzd5OHs7bsewtm6khwMyF4ZeC+w/HaYAOcUTQxFeIEB4YWiV2/h7G2Rq5G0Gw+CWGB5fLkezlmfFg1nR7eeQYhXI8SR1Q+ShPT8SRY8IX29yUdQA7f6JzhbUmbaIEhIAMXkKewS1cHBAAAAAElFTkSuQmCC'),
32: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAUPprB56gAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABG0lEQVQ4y62TsU7DQBBEn2OHWMEJBRAiKwVFQIiCDilFynwISFT5GUo+hYqClgYJiYY+SEgYkHU4tmxsiomLq3Pb3Gl3b2f2dse7vDlpAOocAHqhB4BJSwCqtc5OECi+21Vi1cjPlha0yK0VuSoPR30A+nEtpErIyZseFHXliEF7OZ5OANjpyhWFYpDnGQC1r7/x4wSANCscMZiMx6qslsiMeqw6cqTGAHAY72k6Zm0hb8+gF6rnh7sXK7BYngl5KOT722crPr8+d8PAmy+1iaP9AwAGfgTA0+OrlXixOAVg9bEC4Ps9c8RgdjVtAJpAG5f/6PcHoV37M9Hco6MQgNL8OZrC1yrVpiENBBvVFb/Y6ttYnSmvLBxp4R/CM1dNZKkXNgAAAABJRU5ErkJggg=='),
33: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAkN5AtXygAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABUklEQVQ4y63TP0iVcRTG8c81/2CKovctwxJBEDRvOEZSbQXR4thSLq5iy4VECFHukn9Cve7u0RDYcJGoJDBQJ8OoQW2wNBwquChqvg6/SXDzPduBB873nPM8qelPozE8/54F16s6QHf0BNy+eBe8SufB3u4BWJ3/AUqcs1LNuUsx3LiVAT//bID2KPSbH7ZBy6NaUPwWCLLRi2QISq90VYKl3AqovxCB1tF28LuiCAq9yyBdmQbVY9UJEZRVlIP4IAW+LqyDLyOL4F/zr0Cy8BccZmIwWRxMiKCr/D643L8GOvM3Qb5vJiiOw4y3n9+A4bkhsF26lZAPppZyMbx+Nxd2fb8TblFYPyVsuBd8cOdl8Mfj4tOEbtBS3wqiqgbwsbB4pnBnPnxhf+M/mFgbT4hgdm8SXHtwFdRlakD/bA9oOmoDz7IDIRvLuyErDxuTITgBE2ldifRSs+UAAAAASUVORK5CYII='),
34: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAYvtvMK4QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA+ElEQVQ4y63QO4oCURCF4c9xaPEFbSqigTvQNRi7GEOhA6FTIzfiNtyBYKShIohvUJzoBjeZxD5RFXWqzk+V5vP5B57PJ6hWq+BwOID7/Q4qlQpoNpvg/X6DH1/qNyQHhcROpwPa7TZ4vV5gvV6Dx+NREEEoBoMBKJfLoNVqgev1Gi0EkuPxWBBBv9+PLp9OJ3C73cB+vwe9Xi9KDvqeoF6vg9lsFg2yLIuSp9NpNJ9MJsUQlBaLxQe63S6o1WpguVxGxvF4DDabDdhutwX9IHw7z/N/javVKupHo1FBBLvdDgyHQ5AkSWRoNBrgcrmANE3B+XwuhuAP0cRYqLWs0nQAAAAASUVORK5CYII='),
35: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAc7tTLv3QAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABDklEQVQ4y63Su0oDYRAF4C8XNUkRRLGSIGiEYFBJoeRdrGx9HVFfwNInsLSKNmJALVSwSSWIwZD7uha7ARPsstP8c4bhP4czJ1Wv7YRwdP8Erg73/K3ROAD9wQCsP76CVnUbpM1Z2fDnZ4q5eNcE7YNdEARjcBwzn22WQEGYjILUqeiriYJ0JgV6/REYDodgIZsFnW4fNF/eE/LgOm7GQeT2zd0jOI/nJ/E7wRfbG1N4fgWtahnkwmmm65nFWXy5X0noCrWdrRDyuVx03/wS+O50wefXN1hdKcbzHsjnFxPyYNIUltdAo3ELKuVSbHOUi4fnN1Cv16OctD8SVhCG4b8Li9nMFA7ivExyM7eCX2nPVFxK67LHAAAAAElFTkSuQmCC'),
36: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAsVxVGtHgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABU0lEQVQ4y63Tv0vUcRzH8cdVV2c/1O8p6qUgDiWCkJGDNAj5BwROLerSUP0BgZDrDbmFg3EiIjXc0tDQckRzXR0ELsGhmHFqni13h5IY1/BZvNnve3zD682T9/P9TuTz+SZ8+LEMRm6Og3eFN87W+vBjkG7vBsm2JLjgnHXp6vUrYPb+C/C6+BKM3bsDSsUS6O3NhMSNVMuA8xMcNf6C/XoVjPeMgWqlBjL9uy2Bf7VjcLG9LR6CRLovakKyuw5eLbwFuY8LIJuYBEOjYSedc3MgFUUxEeRWck2oHv4GX4vfwFG6DJYmngf/mb6QqP4C05/nY7JQO/4DGifBwuj+QfDfnwDPvmTB1NYgeDL7KPQvz8REUK58B59K70FHFC6uZ+cWOO3cBIWBbfDwZ9jB4t5qTAQP7k6Dw/oeqBzshG/ragT/HbdBubIBnpbXQtC1eAj+A9SNWsc6q4V1AAAAAElFTkSuQmCC'),
37: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAoFwf2MOwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABRUlEQVQ4y32Ty27CMBBFz4ydpGxAILGrivo3/Yv+Z7+mrJESwaalJDNdmDxMgMkmdnKP53Etn18fzk20547joQZgtd0Qq8CjiABujrWOe2LZxXAb39sbkYigURCVBLDWOTUNdjGmQIBT3SAqGUALZbleE8orwN3TSedulmJ38btp99nGfvP3W+n+xp+rnWWi817HHpXKaksOuBsThrsjIrNf9ClAwa/Pwym05y7ren8axkzY150BjocaN6d8Hcc4FQsp7erNhnVcWO6Du4XZk7LMB3/E1XaDXYxT3Qwjc/M0e4OffdItdpJ5pPdHjFWghcwsGvRuvSio6NzKtzGIFRbv82+hUJabNVpoAojIuLixssb57EMVCGUglFdNKJO3p5fpVDcALDdrRMG6KzAIGpM4K6HfALKeaKGEQml/052MLzHr1z+EQa7SLRnZJQAAAABJRU5ErkJggg=='),
38: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCA46E/dkAgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAf0lEQVQ4y7WTsQqAMBBDX0U6dOoi+CvOTp39Tj/B2cn/EJxcu9TJoQe1hdZsdxdISDhljAkAWmsAvPd8QfI6KtHnFOReot6BVHznlKLk1TvIpZ5CuxYOdwNwrgqA0QUApm2IiPt8xbwltHGgrLWhpPfUvV0LpYrtWyj9wt8yeAASSTd0D702yQAAAABJRU5ErkJggg=='),
39: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCA8c2OHQvgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAApUlEQVQ4y2NgoBAwVjUV/GdgYGBoq5vAiE0BTB5ZDbIYE6UuoNgAFpizkira4c6a11EJ986b5xwYmpDFBt4L8Fhg+MEFF/z+/TsDAwMDw4cPH+BivLy8GJonTZrEOAi8AGNkZmb+Z2BgYNi0aRNcMiEhAc5esGABnO3j48PAwMDAICLDNRhiIS2z4j8DAwPDr+8vMCS5+GQQCv++x5CfOnXqIIgFABSwMEHtJUHQAAAAAElFTkSuQmCC'),
40: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAgpwROCWgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABJ0lEQVQ4y63Tu0okQRTG8V+P4+iMVxAREdlARBREEQyN9Gl8AU00MTYSfBhxTcRoYdlIYRdNnEAUBS+DOtNjb3C6A03tSr46RdU5/zqXpLawmsH++S+wtbIGpJ3Q9hvIWs9g4/oSHE/NgIpvrqRvfiWDnvoAWP99Cn7mJOlLRN7/+wfsjE/Gw2qtJIIDMtidXwYf/UHy0WqFFrnI1/DjHWje35ZDUD0qdp0ueLg4A4f58Wauhb03NvHJ/j7ByY9ZUM//Wng++nKxsF8rvWB7uqw+qM0uZlAtkKoRofvyCN6fn0BvXv9u3pFJY6CkHJCEx3oDvDWvov6DI9GJlZ7Q63+gMbcUJO12WQRp1D9L0/DcielLsuG4UesPfbiJB0OjMaQ3zXII/gMiIliJjt3yRAAAAABJRU5ErkJggg=='),
41: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCAoohCLQTgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAA30lEQVQ4y6WTsQ2EMBAEx+gDpAtphArcAxk1UBA1kFGAM1dAH4jQFhkf2TLG/tfrV0Iye+hub70o7/1FBudcPItIlQNoQjF9rLW3ZjUOQHnvr/ASPtJaU0JeF5F7g18hIqh93y/+wCuVN8/zrbgsCwDjON74aZriGo8Vwp7DMHAcBwBd17Gu68MfEaFp2/Yhq2RiiXPO0ZznWdwtTE/PeRMRQRljool93380zFqL1ppt2yKn0iSGwNRyUEpiVPBteo6gIirIw5RfXbjSXIUyxly/Tk9V/B/l2u+cGlXjAN472J2vHjgcIgAAAABJRU5ErkJggg=='),
42: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBAAAbqCbwAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAuElEQVQ4y2MUYGD4z8DAwPCBARUIQWkRNPFbUJoFSjMxUAgYOaEugAFuKC0As0EYyngLod5Aub+o5gJeqAu2oEl4o/G3ovF9qeYCGagL7tlCBQ5CaA2o0c+gCj/9g9D/7SG0ymFquYAP6gIJmAg01J9BQ/0LVFgSSvOiGUC5C3jQ0sEXtPQAcxkzTAEbqlModwEDmgs40fICNywzvMFuAMUuYEEXkIX5kQ9CvYPa/BUq/B1KK1PLBQBzxx7wSCywogAAAABJRU5ErkJggg=='),
43: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBUf8cV73wAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABF0lEQVQ4y62SsUoDURBFzxoxRFdQBMNGRNBgIYKF2AYCWu1H2Imd+hX+gq1fYG2phU0QLFSCqCghGzQJAZMYjMqzuGOxdd40d+bOe8zlzgQflbwDCDtvAFBaAaBx9gRAtCmavuFGSfhdB2CMEWO828oAEC6ti7m8TU+2aFSF0VRPSbXvR0FwfoAD2IlF1F+EC1v2opnm/+P+Dk8eRGuWbe8DUA5PAXi4GWhyRe3yYU58b1cKjk48eRAX5cHxnoikJXTvwuVZ4XPHPswL8+BLwaoUTP+mGxc6ROasjovC10LB1pJ42kJmQsl1zZif0Cbr4tpGXz3afbgkpXB0DxYn5UEW7XngtP9coHrmU/UwK6nNr6Fp96TgD68IS+Ryu2FhAAAAAElFTkSuQmCC'),
44: headArrow('iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsQAAALEAGtI711AAAAB3RJTUUH3wkVCBoQ5uJ6gQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAABJUlEQVQ4y62TvU4CQRSFv/2DBWRR/AkkBht7H8NSKxPfwIreyk5fwWegsbGxsyOxsDUWKmY1QUUxmtVddmfGYpfEydKxp7w5Oee7k7nG8VlXAVz2+wCUKw6pBP/17gcAuKoMQGhEAJjMKXvgPwIQBTEASujNk1AC4FRsAOpiIeWzREEEo5fPbOU0cRIIrbnVXgagWnUBaDZWAHi9HhVEMHx+A+CuN5hpuOdh5ryz0ymIYJpxdXMOwOneIQAX6x+acfupCcBB7wSA/aPuNCCvUAhELHMz17JyXmNrd1MB2G6WJRUilqwlevZXA+ySxe9PAkASJoW9ga6x/41MJIurHgClDHt4O8a0TZY2PM1fPIHXriFiiUpPg0imP7PeqmE5+b65Cf4AjI9iM/4hVAEAAAAASUVORK5CYII=')
};

function headArrow(_0x18a3x6c) {
var _0x18a3x6d = decodeBmp(_0x18a3x6c),
_0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](arrow['getWidth'](), arrow['getHeight'](), android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55);
_0x18a3x38['drawBitmap'](arrow, 0, 0, null);
_0x18a3x38['drawBitmap'](_0x18a3x6d, 1, 6, null);
return _0x18a3x55
};

function decodeBmp(_0x18a3x6c) {
_0x18a3x6c = android['util']['Base64']['decode'](_0x18a3x6c, 0);
return android['graphics']['BitmapFactory']['decodeByteArray'](_0x18a3x6c, 0, _0x18a3x6c['length'])
};

function drawBorderBmp() {
var _0x18a3x55 = android['graphics']['Bitmap']['createBitmap'](settings['window_size'], settings['window_size'], android['graphics']['Bitmap']['Config'].ARGB_8888),
_0x18a3x38 = new android['graphics'].Canvas(_0x18a3x55),
_0x18a3x56 = new android['graphics'].Paint();
_0x18a3x56['setMaskFilter'](new android['graphics'].EmbossMaskFilter([1, 1, 0.3], 0.7, 8, 3 * density));
switch (settings['style_border']) {
case 1:
_0x18a3x56['setColor'](android['graphics']['Color']['rgb'](153, 135, 108));
break;
case 2:
_0x18a3x56['setShader'](new android['graphics'].LinearGradient(0, 0, settings['window_size'] * 0.5, settings['window_size'], [android['graphics']['Color']['GREEN'], android['graphics']['Color']['YELLOW'], android['graphics']['Color']['GREEN']], null, android['graphics']['Shader']['TileMode'].REPEAT));
break;
default:
return null
};
_0x18a3x38['drawPath'](createPath(true, true), _0x18a3x56);
return _0x18a3x55
};

function createPath(_0x18a3x71, _0x18a3x72) {
var _0x18a3x65 = new android['graphics'].Path(),
_0x18a3x73 = settings['window_size'];
_0x18a3x65['setFillType'](android['graphics']['Path']['FillType'].EVEN_ODD);
if (settings['style_shape'] === 1) {
if (_0x18a3x72) {
_0x18a3x65['addCircle'](_0x18a3x73 / 2, _0x18a3x73 / 2, _0x18a3x73 / 2 - (7 * density), android['graphics']['Path']['Direction'].CW)
};
if (_0x18a3x71) {
_0x18a3x65['addCircle'](_0x18a3x73 / 2, _0x18a3x73 / 2, _0x18a3x73 / 2, android['graphics']['Path']['Direction'].CW)
};
return _0x18a3x65
} else {
if (_0x18a3x72) {
_0x18a3x65['addRect'](7 * density, 7 * density, _0x18a3x73 - (7 * density), _0x18a3x73 - (7 * density), android['graphics']['Path']['Direction'].CW)
};
if (_0x18a3x71) {
_0x18a3x65['addRect'](0, 0, _0x18a3x73, _0x18a3x73, android['graphics']['Path']['Direction'].CW)
};
return _0x18a3x65
}
};

function chunkLoaded(_0x18a3x32, _0x18a3x5d) {
var _0x18a3x75 = 130;
do {
if (Level['getTile'](_0x18a3x32, 130 - _0x18a3x75, _0x18a3x5d)) {
return true
}
} while (_0x18a3x75 -= 10);;
return false
};
mapDot = [function basicSurfaceMap(_0x18a3x32, _0x18a3x5d) {
var _0x18a3x75 = 130,
_0x18a3x77 = 10,
_0x18a3x78 = {
1: -8487298,
3: -7970749,
4: -8487298,
8: -14000385,
9: -14000385,
10: -637952,
11: -637952,
12: -2370656,
13: -8618884,
17: -10005725,
18: -13534192,
24: -3817840,
48: -10193052,
78: -984069,
79: -5255937,
82: -6314831,
98: -8487298,
99: -7509421,
100: -4774107,
109: -8487298,
110: -9542807,
128: -3817840,
159: -2968927,
161: -8028101,
162: -13293288,
172: -6857405,
174: -5255937,
243: -10797283
};
do {
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)) {
if (_0x18a3x77 === 10) {
_0x18a3x77 = 1;
_0x18a3x75 += 10
} else {
return _0x18a3x78[Level['getTile'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)] || -8540361
}
}
} while (_0x18a3x75 -= _0x18a3x77);;
return 0
}, function minecraftMap(_0x18a3x32, _0x18a3x5d) {
var _0x18a3x7a, _0x18a3x7b, _0x18a3x75 = 130,
_0x18a3x77 = 10,
_0x18a3x7c = android['graphics']['Color'];
do {
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)) {
if (_0x18a3x77 === 10) {
_0x18a3x77 = 1;
_0x18a3x75 += 10
} else {
_0x18a3x7b = Level['getTile'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d);
switch (_0x18a3x7b) {
case 9:
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 19, _0x18a3x5d) === 9) {
return -13882190
};
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 16, _0x18a3x5d) === 9) {
return !(_0x18a3x32 % 2) === !((_0x18a3x5d + 1) % 2) ? -13882190 : -13224231
};
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 14, _0x18a3x5d) === 9) {
return -13224231
};
if (Level['getTile'](_0x18a3x32, _0x18a3x75 - 12, _0x18a3x5d) === 9) {
return !(_0x18a3x32 % 2) === !((_0x18a3x5d + 1) % 2) ? -13224231 : -12632068
};
return -12632068;
case 12:
if (Level['getData'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)) {
_0x18a3x7a = 0xd57d32
} else {
_0x18a3x7a = 0xf4e6a1
};
break;
case 35:
;
case 159:
;
case 171:
_0x18a3x7a = [0xfcf9f2, 0xd57d32, 0xb04bd5, 0x6597d5, 0xe2e232, 0x7dca19, 0xef7da3, 0x4b4b4b, 0x979797, 0x4b7d97, 0x7d3eb0, 0x324bb0, 0x654b32, 0x657d32, 0x973232, 0x191919][Level['getData'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)];
break;
case 5:
;
case 85:
;
case 157:
;
case 158:
_0x18a3x7a = [0x8d7647, 0x7e5430, 0xf4e6a1, 0x956c4c, 0xd57d32, 0x654b32, 0, 0, 0x8d7647, 0x7e5430, 0xf4e6a1, 0x956c4c, 0xd57d32, 0x654b32, 0, 0][Level['getData'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)];
break;
case 43:
;
case 44:
_0x18a3x7a = [0x6f6f6f, 0xf4e6a1, 0x8d7647, 0x6f6f6f, 0x973232, 0x6f6f6f, 0xfcfcfc, 0x6f0200, 0x6f6f6f, 0xf4e6a1, 0x8d7647, 0x6f6f6f, 0x973232, 0x6f6f6f, 0xfcfcfc, 0x6f0200][Level['getData'](_0x18a3x32, _0x18a3x75 - 10, _0x18a3x5d)];
break;
case 54:
chests[chests['length']] = [_0x18a3x32 + 0.5, _0x18a3x5d + 0.5];
default:
_0x18a3x7a = {
2: 0x7db037,
3: 0x956c4c,
6: 0x007b00,
8: 0x3f3ffc,
10: 0xfc0000,
11: 0xfc0000,
17: 0x8d7647,
18: 0x007b00,
19: 0xe2e232,
22: 0x4981fc,
24: 0xf4e6a1,
30: 0xfcfcfc,
31: 0x007b00,
32: 0x8d7647,
37: 0x007b00,
38: 0x007b00,
39: 0x007b00,
40: 0x007b00,
41: 0xf7eb4c,
42: 0xa5a5a5,
45: 0x973232,
46: 0xfc0000,
47: 0x8d7647,
49: 0x191919,
53: 0x8d7647,
54: 0x8d7647,
57: 0x5bd8d2,
59: 0x007b00,
60: 0x956c4c,
78: 0xfcfcfc,
79: 0x9e9efc,
80: 0xfcfcfc,
81: 0x007b00,
82: 0xa2a6b6,
83: 0x007b00,
86: 0xd57d32,
87: 0x6f0200,
91: 0xd57d32,
99: 0x8d7647,
100: 0x973232,
103: 0x7dca19,
104: 0x007b00,
105: 0x007b00,
106: 0x007b00,
107: 0x8d7647,
108: 0x973232,
110: 0x7d3eb0,
111: 0x007b00,
112: 0x6f0200,
113: 0x6f0200,
114: 0x6f0200,
121: 0xf4e6a1,
128: 0xf4e6a1,
133: 0x00d639,
134: 0x7e5430,
135: 0xf4e6a1,
136: 0x956c4c,
141: 0x007b00,
142: 0x007b00,
152: 0xfc0000,
155: 0xfcfcfc,
156: 0xfcfcfc,
161: 0x007b00,
162: 0x8d7647,
163: 0xd57d32,
164: 0x654b32,
170: 0xf7eb4c,
172: 0xd57d32,
174: 0x9e9efc,
175: 0x007b00,
183: 0x7e5430,
184: 0xf4e6a1,
185: 0x956c4c,
187: 0xd57d32,
186: 0x654b32,
243: 0x7e5430,
244: 0x007b00
};
_0x18a3x7a = _0x18a3x7a[_0x18a3x7b] || 0x6f6f6f
};
if (Level['getTile'](_0x18a3x32 - 1, _0x18a3x75 - 9, _0x18a3x5d)) {
return _0x18a3x7c['rgb'](_0x18a3x7c['red'](_0x18a3x7a) * (180 / 255), _0x18a3x7c['green'](_0x18a3x7a) * (180 / 255), _0x18a3x7c['blue'](_0x18a3x7a) * (180 / 255))
};
if (Level['getTile'](_0x18a3x32 - 1, _0x18a3x75 - 10, _0x18a3x5d)) {
return _0x18a3x7c['rgb'](_0x18a3x7c['red'](_0x18a3x7a) * (220 / 255), _0x18a3x7c['green'](_0x18a3x7a) * (220 / 255), _0x18a3x7c['blue'](_0x18a3x7a) * (220 / 255))
};
return _0x18a3x7c['rgb'](_0x18a3x7c['red'](_0x18a3x7a), _0x18a3x7c['green'](_0x18a3x7a), _0x18a3x7c['blue'](_0x18a3x7a))
}
}
} while (_0x18a3x75 -= _0x18a3x77);;
return 0
}, function caveMap(_0x18a3x32, _0x18a3x5d) {
var _0x18a3x7e = 0,
_0x18a3x7b = 1,
_0x18a3x7f, _0x18a3x75 = 96,
_0x18a3x80, _0x18a3x81, _0x18a3x82, _0x18a3x83, _0x18a3x84 = 3;
do {
_0x18a3x7f = Level['getTile'](_0x18a3x32, _0x18a3x75 - 3, _0x18a3x5d);
switch (_0x18a3x7f) {
case 0:
;
case 17:
;
case 18:
;
case 20:
;
case 50:
;
case 64:
;
case 66:
;
case 106:
;
case 127:
;
case 161:
;
case 162:
_0x18a3x7f = 1;
break;
case 8:
;
case 9:
_0x18a3x7f = 0;
if (_0x18a3x7e > 1) {
_0x18a3x81 = _0x18a3x81 || 1;
_0x18a3x82 = _0x18a3x82 || 1;
_0x18a3x83 = _0x18a3x83 || 255;
_0x18a3x7f = 1
};
break;
case 10:
;
case 11:
_0x18a3x7f = 0;
if (_0x18a3x7e > 1) {
_0x18a3x81 = _0x18a3x81 || 255;
_0x18a3x82 = _0x18a3x82 || 1;
_0x18a3x83 = _0x18a3x83 || 1;
_0x18a3x7f = 1
};
break;
case 4:
;
case 48:
_0x18a3x7f = 2;
if (_0x18a3x7e > 2) {
_0x18a3x81 = _0x18a3x81 || 1;
_0x18a3x82 = _0x18a3x82 || 255;
_0x18a3x83 = _0x18a3x83 || 255
};
break;
case 97:
;
case 98:
_0x18a3x7f = 2;
if (_0x18a3x7e > 2) {
_0x18a3x81 = _0x18a3x81 || 255;
_0x18a3x82 = _0x18a3x82 || 1;
_0x18a3x83 = _0x18a3x83 || 255
};
break;
case 54:
chests[chests['length']] = [_0x18a3x32 + 0.5, _0x18a3x5d + 0.5];
default:
_0x18a3x7f = 2
};
if (_0x18a3x7f !== _0x18a3x7b) {
_0x18a3x7e += _0x18a3x7f;
_0x18a3x80 = _0x18a3x75
};
if (_0x18a3x7e === 5) {
_0x18a3x75 += 3;
_0x18a3x84 = 1;
_0x18a3x7e = 6;
_0x18a3x7f = 1
} else {
if (_0x18a3x7e === 8) {
_0x18a3x81 = _0x18a3x81 || 150;
_0x18a3x82 = _0x18a3x82 || 255;
_0x18a3x83 = _0x18a3x83 || 0;
return android['graphics']['Color']['rgb'](_0x18a3x81 * (0.8 * (_0x18a3x80 / 127) + 0.2), _0x18a3x82 * (0.9 * (_0x18a3x80 / 127) + 0.1), _0x18a3x83 * (0.9 * (_0x18a3x80 / 127) + 0.1))
}
};
_0x18a3x7b = _0x18a3x7f
} while (_0x18a3x75 -= _0x18a3x84);;
_0x18a3x80 = _0x18a3x80 || 127;
_0x18a3x81 = 255;
_0x18a3x82 = 255;
_0x18a3x83 = 255;
return android['graphics']['Color']['rgb'](_0x18a3x81 * (0.8 * (_0x18a3x80 / 127) + 0.2), _0x18a3x82 * (0.8 * (_0x18a3x80 / 127) + 0.2), _0x18a3x83 * (0.8 * (_0x18a3x80 / 127) + 0.2))
}];

function checkRenderDistance() {
var _0x18a3x86 = load(android['os']['Environment']['getExternalStorageDirectory']()['getPath']() + '/games/com.mojang/minecraftpe/', 'options.txt')['split']('\x0A'),
_0x18a3x26;
if (_0x18a3x86 != '') {
for (_0x18a3x26 = 0; _0x18a3x26 < _0x18a3x86['length']; _0x18a3x26 += 1) {
_0x18a3x86[_0x18a3x26] = _0x18a3x86[_0x18a3x26]['split'](':');
if (_0x18a3x86[_0x18a3x26][0] === 'gfx_renderdistance_new') {
return Math['round'](parseInt(_0x18a3x86[_0x18a3x26][1], 10) / 16)
}
}
};
return 6
};

function saveSettings() {
var _0x18a3x27 = '',
_0x18a3x88;
for (_0x18a3x88 in settings) {
if (settings['hasOwnProperty'](_0x18a3x88)) {
if (_0x18a3x27 !== '') {
_0x18a3x27 += '\x0A'
};
_0x18a3x27 += _0x18a3x88 + ':' + settings[_0x18a3x88]
}
};
save(android['os']['Environment']['getExternalStorageDirectory']()['getPath']() + '/games/com.mojang/', 'minimap.txt', _0x18a3x27)
};

function changeMapState() {
var _0x18a3x26;
map_state = !map_state;
mapWindow['resetVisibility']();
if (map_state) {
delayChunksArrLock['acquire']();
_0x18a3x26 = delayChunksArr['length'];
while (_0x18a3x26--) {
scheduleChunk(delayChunksArr[_0x18a3x26][0], delayChunksArr[_0x18a3x26][1], 0)
};
delayChunksArr = [];
delayChunksArrLock['release']();
scheduledFutureUpdateMap = poolTick['scheduleWithFixedDelay'](runnableUpdateMap, 1000, Math['round'](1000 / settings['delay']), java['util']['concurrent']['TimeUnit'].MILLISECONDS);
scheduleChunk(Math['floor'](X / 16) * 16, Math['floor'](Z / 16) * 16, 0)
} else {
scheduledFutureUpdateMap['cancel'](false)
}
};

function settingsChanged(_0x18a3x8b) {
switch (_0x18a3x8b) {
case 'radius':
var _0x18a3x26, _0x18a3x8c, _0x18a3x8d = bmpSrc['getWidth'](),
_0x18a3x8e = ((settings['radius'] + 1) * 2 + 1) * 16,
_0x18a3x5a = Math['floor'](X / 16) * 16,
_0x18a3x5b = Math['floor'](Z / 16) * 16;
try {
bmpSrcLock['acquire']();
bmpSrcCopy = android['graphics']['Bitmap']['createBitmap'](_0x18a3x8e, _0x18a3x8e, android['graphics']['Bitmap']['Config'].ARGB_8888);
canvasBmpSrcCopy['setBitmap'](bmpSrcCopy);
canvasBmpSrcCopy['drawBitmap'](bmpSrc, (_0x18a3x8e - _0x18a3x8d) / 2, (_0x18a3x8e - _0x18a3x8d) / 2, null);
bmpSrc = android['graphics']['Bitmap']['createBitmap'](_0x18a3x8e, _0x18a3x8e, android['graphics']['Bitmap']['Config'].ARGB_8888);
canvasBmpSrc['setBitmap'](bmpSrc);
canvasBmpSrc['drawBitmap'](bmpSrcCopy, 0, 0, null)
} finally {
bmpSrcLock['release']()
};
minZoom = settings['window_size'] / (settings['radius'] * 2 * 16);
absZoom = (100 / settings['map_zoom']) * minZoom;
if (_0x18a3x8e > _0x18a3x8d) {
for (_0x18a3x26 = (_0x18a3x8d - 16) / 2; _0x18a3x26 <= settings['radius'] * 16; _0x18a3x26 += 16) {
for (_0x18a3x8c = 0; _0x18a3x8c < _0x18a3x26; _0x18a3x8c += 16) {
if (map_state) {
scheduleChunk(_0x18a3x5a + _0x18a3x8c + 16, _0x18a3x5b + _0x18a3x26, 0);
scheduleChunk(_0x18a3x5a + _0x18a3x8c, _0x18a3x5b - _0x18a3x26, 0);
scheduleChunk(_0x18a3x5a - _0x18a3x8c, _0x18a3x5b + _0x18a3x26, 0);
scheduleChunk(_0x18a3x5a - _0x18a3x8c - 16, _0x18a3x5b - _0x18a3x26, 0);
scheduleChunk(_0x18a3x5a + _0x18a3x26, _0x18a3x5b + _0x18a3x8c, 0);
scheduleChunk(_0x18a3x5a + _0x18a3x26, _0x18a3x5b - _0x18a3x8c - 16, 0);
scheduleChunk(_0x18a3x5a - _0x18a3x26, _0x18a3x5b + _0x18a3x8c + 16, 0);
scheduleChunk(_0x18a3x5a - _0x18a3x26, _0x18a3x5b - _0x18a3x8c, 0)
} else {
delayChunksArrLock['acquire']();
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a + _0x18a3x8c + 16, _0x18a3x5b + _0x18a3x26];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a + _0x18a3x8c, _0x18a3x5b - _0x18a3x26];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a - _0x18a3x8c, _0x18a3x5b + _0x18a3x26];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a - _0x18a3x8c - 16, _0x18a3x5b - _0x18a3x26];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a + _0x18a3x26, _0x18a3x5b + _0x18a3x8c];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a + _0x18a3x26, _0x18a3x5b - _0x18a3x8c - 16];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a - _0x18a3x26, _0x18a3x5b + _0x18a3x8c + 16];
delayChunksArr[delayChunksArr['length']] = [_0x18a3x5a - _0x18a3x26, _0x18a3x5b - _0x18a3x8c];
delayChunksArrLock['release']()
}
}
}
};
redraw = true;
break;
case 'map_type':
if (poolm['getActiveCount']() > 0) {
createPool()
};
X = undefined;
break;
case 'map_zoom':
absZoom = (100 / settings['map_zoom']) * minZoom;
redraw = true;
break;
case 'map_alpha':
mapView['setAlpha'](settings['map_alpha'] / 100);
break;
case 'window_rawSize':
settings['window_size'] = (settings['window_rawSize'] / 100) * displayHeight;
var _0x18a3x8f = mapView['getLayoutParams']();
_0x18a3x8f['height'] = settings['window_size'];
_0x18a3x8f['width'] = settings['window_size'];
mapView['setLayoutParams'](_0x18a3x8f);
redraw = true;
bmpBorder = drawBorderBmp();
if (settings['style_border'] !== 0) {
pathBorder = createPath(false, true)
} else {
pathBorder = createPath(true, false)
};
redraw = true;
minZoom = settings['window_size'] / (settings['radius'] * 2 * 16);
absZoom = (100 / settings['map_zoom']) * minZoom;
break;
case 'window_rawPosition':
mapWindow['hide']();
mapWindow['show']();
break;
case 'style_shape':
if (settings['style_border'] !== 0) {
pathBorder = createPath(false, true)
} else {
pathBorder = createPath(true, false)
};
case 'style_border':
if (settings['style_border'] !== 0) {
pathBorder = createPath(false, true)
} else {
pathBorder = createPath(true, false)
};
bmpBorder = drawBorderBmp();
redraw = true;
break;
case 'style_pointer':
redraw = true;
break;
case 'show_info':
;
case 'show_zoomBtn':
mapWindow['resetVisibility']();
break;
case 'delay':
scheduledFutureUpdateMap['cancel'](false);
scheduledFutureUpdateMap = poolTick['scheduleWithFixedDelay'](runnableUpdateMap, 1000, Math['round'](1000 / settings['delay']), java['util']['concurrent']['TimeUnit'].MILLISECONDS);
break;
case 'threadCount':
poolm['setCorePoolSize'](settings['threadCount']);
break
}
};
if(displayActiveMods){showActiveMods();}
function settingsClosed() {
saveSettings()
};

function settingsUI() {
var _0x18a3x92 = 17,
_0x18a3x93 = 10,
context = com['mojang']['minecraftpe']['MainActivity']['currentMainActivity']['get'](),
_0x18a3x94 = new android['app']['AlertDialog'].Builder(context),
_0x18a3x95 = new android['widget'].ScrollView(context),
_0x18a3x44 = new android['widget'].LinearLayout(context),
_0x18a3x26, _0x18a3x96 = arguments[0]['length'],
_0x18a3x97, _0x18a3x98 = new android['view']['ViewGroup'].LayoutParams(android['view']['ViewGroup']['LayoutParams'].MATCH_PARENT, 2),
_0x18a3x99 = {
checkBox: function(_0x18a3x9a) {
var _0x18a3x9b = new android['widget'].RelativeLayout(context),
_0x18a3x9c = new android['widget'].CheckBox(context),
_0x18a3x9d = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT),
_0x18a3x4f = new android['widget'].TextView(context),
_0x18a3x9e = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT);
_0x18a3x4f['setTextSize'](_0x18a3x92);
_0x18a3x4f['setText'](_0x18a3x9a[2]);
_0x18a3x9c['setId'](1);
_0x18a3x9c['setChecked'](Boolean(settings[_0x18a3x9a[1]]));
_0x18a3x9c['setOnCheckedChangeListener'](function(_0x18a3x9f, _0x18a3xa0) {
if (_0x18a3xa0) {
settings[_0x18a3x9a[1]] = 1
} else {
settings[_0x18a3x9a[1]] = 0
};
settingsChanged(_0x18a3x9a[1])
});
_0x18a3x9d['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_RIGHT);
_0x18a3x9d['addRule'](android['widget']['RelativeLayout'].CENTER_VERTICAL);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_LEFT);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].CENTER_VERTICAL);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].LEFT_OF, 1);
_0x18a3x9b['addView'](_0x18a3x9c, _0x18a3x9d);
_0x18a3x9b['addView'](_0x18a3x4f, _0x18a3x9e);
_0x18a3x9b['setPadding'](_0x18a3x93, _0x18a3x93 * 0.5, _0x18a3x93, _0x18a3x93 * 0.5);
return _0x18a3x9b
},
subScreen: function(_0x18a3x9a) {
var _0x18a3x4f = new android['widget'].TextView(context);
_0x18a3x4f['setTextSize'](_0x18a3x92);
_0x18a3x4f['setText'](_0x18a3x9a[1] + ' >');
_0x18a3x4f['setPadding'](_0x18a3x93, _0x18a3x93, _0x18a3x93, _0x18a3x93);
_0x18a3x4f['setOnClickListener'](function(_0x18a3x47) {
settingsUI(_0x18a3x9a[2])['show']()
});
return _0x18a3x4f
},
sectionDivider: function(_0x18a3x9a) {
var _0x18a3x4f = new android['widget'].TextView(context);
_0x18a3x4f['setTextSize'](_0x18a3x92 * 0.9);
_0x18a3x4f['setText'](_0x18a3x9a[1]);
_0x18a3x4f['setTextColor'](android['graphics']['Color'].WHITE);
_0x18a3x4f['setBackgroundDrawable'](new android['graphics']['drawable'].GradientDrawable(android['graphics']['drawable']['GradientDrawable']['Orientation'].LEFT_RIGHT, [android['graphics']['Color']['rgb'](0, 127, 0), android['graphics']['Color']['rgb'](63, 95, 0), android['graphics']['Color']['rgb'](0, 63, 0)]));
_0x18a3x4f['setPadding'](_0x18a3x93, 0, _0x18a3x93, 0);
return _0x18a3x4f
},
keyValue: function(_0x18a3x9a) {
var _0x18a3x9b = new android['widget'].RelativeLayout(context),
_0x18a3x4f = new android['widget'].TextView(context),
_0x18a3x9e = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT),
_0x18a3xa1 = new android['widget'].TextView(context),
_0x18a3xa2 = new android['widget']['RelativeLayout'].LayoutParams(android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT, android['widget']['RelativeLayout']['LayoutParams'].WRAP_CONTENT);
_0x18a3x4f['setTextSize'](_0x18a3x92);
_0x18a3x4f['setText'](android['text']['Html']['fromHtml'](_0x18a3x9a[2]));
_0x18a3x4f['setMovementMethod'](android['text']['method']['LinkMovementMethod']['getInstance']());
_0x18a3xa1['setTextSize'](_0x18a3x92);
_0x18a3xa1['setTextColor'](android['graphics']['Color']['rgb'](100, 255, 0));
_0x18a3xa1['setId'](1);
switch (_0x18a3x9a[1]) {
case 'multipleChoice':
if (_0x18a3x9a[4]['length'] <= settings[_0x18a3x9a[3]]) {
settings[_0x18a3x9a[3]] = 0
};
_0x18a3xa1['setText'](_0x18a3x9a[4][settings[_0x18a3x9a[3]]]);
_0x18a3xa1['setOnClickListener'](function(_0x18a3x47) {
var _0x18a3x94 = new android['app']['AlertDialog'].Builder(context),
_0x18a3xa3 = new android['widget'].ListView(context),
_0x18a3xa4 = new android['widget'].ArrayAdapter(context, android['R']['layout']['simple_list_item_single_choice'], _0x18a3x9a[4]);
_0x18a3xa3['setAdapter'](_0x18a3xa4);
_0x18a3xa3['setChoiceMode'](android['widget']['ListView'].CHOICE_MODE_SINGLE);
_0x18a3xa3['setItemChecked'](settings[_0x18a3x9a[3]], true);
_0x18a3xa3['setDivider'](new android['graphics']['drawable'].GradientDrawable(android['graphics']['drawable']['GradientDrawable']['Orientation'].LEFT_RIGHT, [android['graphics']['Color']['GREEN'], android['graphics']['Color']['YELLOW'], android['graphics']['Color']['GREEN']]));
_0x18a3xa3['setDividerHeight'](2);
_0x18a3xa3['setPadding'](_0x18a3x93, _0x18a3x93, _0x18a3x93, _0x18a3x93);
_0x18a3xa3['setOnItemClickListener'](function(_0x18a3xa5, _0x18a3xa6, _0x18a3xa7, _0x18a3x39) {
settings[_0x18a3x9a[3]] = _0x18a3xa7;
for (var _0x18a3x26 = 5; _0x18a3x26 < _0x18a3x9a['length']; _0x18a3x26 += 2) {
settings[_0x18a3x9a[_0x18a3x26]] = _0x18a3x9a[_0x18a3x26 + 1][_0x18a3xa7]
};
_0x18a3xa1['setText'](_0x18a3x9a[4][_0x18a3xa7]);
settingsChanged(_0x18a3x9a[3]);
_0x18a3x94['dismiss']()
});
_0x18a3x94['setView'](_0x18a3xa3);
_0x18a3x94['setTitle'](_0x18a3x9a[2]);
_0x18a3x94['setNegativeButton']('Cancel', function(_0x18a3xa8, _0x18a3xa9) {
_0x18a3x94['dismiss']()
});
_0x18a3x94 = _0x18a3x94['show']()
});
break;
case 'slider':
_0x18a3xa1['setText'](settings[_0x18a3x9a[3]] + _0x18a3x9a[7]);
_0x18a3xa1['setOnClickListener'](function(_0x18a3x47) {
var _0x18a3x94 = new android['app']['AlertDialog'].Builder(context),
_0x18a3xaa = new android['widget'].SeekBar(context);
_0x18a3xaa['setMax']((_0x18a3x9a[5] - _0x18a3x9a[4]) / _0x18a3x9a[6]);
_0x18a3xaa['setProgress']((settings[_0x18a3x9a[3]] - _0x18a3x9a[4]) / _0x18a3x9a[6]);
_0x18a3xaa['setOnSeekBarChangeListener'](new android['widget']['SeekBar'].OnSeekBarChangeListener({
onProgressChanged: function(_0x18a3xaa, _0x18a3xab, _0x18a3xac) {
_0x18a3x94['setTitle'](_0x18a3x9a[2] + '  ' + (_0x18a3xab * _0x18a3x9a[6] + _0x18a3x9a[4]) + _0x18a3x9a[7])
}
}));
_0x18a3x94['setView'](_0x18a3xaa);
_0x18a3x94['setTitle'](_0x18a3x9a[2] + '  ' + settings[_0x18a3x9a[3]] + _0x18a3x9a[7]);
_0x18a3x94['setPositiveButton']('Ok', function(_0x18a3xa8, _0x18a3xa9) {
settings[_0x18a3x9a[3]] = _0x18a3xaa['getProgress']() * _0x18a3x9a[6] + _0x18a3x9a[4];
_0x18a3xa1['setText'](settings[_0x18a3x9a[3]] + _0x18a3x9a[7]);
settingsChanged(_0x18a3x9a[3]);
_0x18a3x94['dismiss']()
});
_0x18a3x94['setNegativeButton']('Cancel', function(_0x18a3xa8, _0x18a3xa9) {
_0x18a3x94['dismiss']()
});
_0x18a3x94 = _0x18a3x94['show']()
});
break;
default:
_0x18a3xa1['setText'](String(_0x18a3x9a[3]))
};
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_LEFT);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].CENTER_VERTICAL);
_0x18a3x9e['addRule'](android['widget']['RelativeLayout'].LEFT_OF, 1);
_0x18a3xa2['addRule'](android['widget']['RelativeLayout'].ALIGN_PARENT_RIGHT);
_0x18a3xa2['addRule'](android['widget']['RelativeLayout'].CENTER_VERTICAL);
_0x18a3x9b['addView'](_0x18a3xa1, _0x18a3xa2);
_0x18a3x9b['addView'](_0x18a3x4f, _0x18a3x9e);
_0x18a3x9b['setPadding'](_0x18a3x93, _0x18a3x93, _0x18a3x93, _0x18a3x93);
return _0x18a3x9b
}
};
_0x18a3x93 = _0x18a3x93 * context['getResources']()['getDisplayMetrics']()['density'];
_0x18a3x44['setOrientation'](android['widget']['LinearLayout'].VERTICAL);
_0x18a3x44['setPadding'](_0x18a3x93, 0, _0x18a3x93, 0);
for (_0x18a3x26 = 2; _0x18a3x26 < _0x18a3x96; _0x18a3x26 += 1) {
_0x18a3x44['addView'](_0x18a3x99[arguments[0][_0x18a3x26][0]](arguments[0][_0x18a3x26]));
if (_0x18a3x26 + 1 < _0x18a3x96) {
_0x18a3x97 = new android['view'].View(context);
_0x18a3x97['setBackgroundDrawable'](new android['graphics']['drawable'].GradientDrawable(android['graphics']['drawable']['GradientDrawable']['Orientation'].LEFT_RIGHT, [android['graphics']['Color']['GREEN'], android['graphics']['Color']['YELLOW'], android['graphics']['Color']['GREEN']]));
_0x18a3x44['addView'](_0x18a3x97, _0x18a3x98)
}
};
_0x18a3x95['addView'](_0x18a3x44);
_0x18a3x94['setView'](_0x18a3x95);
_0x18a3x94['setTitle'](arguments[0][0]);
_0x18a3x94['setPositiveButton'](arguments[0][1], function(_0x18a3xa8, _0x18a3xa9) {
settingsClosed()
});
return _0x18a3x94
};

function save(_0x18a3x65, _0x18a3xae, _0x18a3xaf) {
try {
java['io'].File(_0x18a3x65)['mkdirs']();
var _0x18a3xb0 = new java['io'].File(_0x18a3x65, _0x18a3xae);
_0x18a3xb0['createNewFile']();
var _0x18a3xb1 = new java['io'].OutputStreamWriter(new java['io'].FileOutputStream(_0x18a3xb0));
_0x18a3xb1['append'](_0x18a3xaf);
_0x18a3xb1['close']()
} catch (e) {
betToast('save, ' + e + ' (' + e['fileName'] + ' #' + e['lineNumber'] + ')')
}
};

function load(_0x18a3x65, _0x18a3xae) {
var _0x18a3xaf = '';
if (java['io'].File(_0x18a3x65 + _0x18a3xae)['exists']()) {
var _0x18a3xb3 = new java['io'].File(_0x18a3x65 + _0x18a3xae),
_0x18a3xb4 = new java['io'].FileInputStream(_0x18a3xb3),
_0x18a3xb5 = new java['lang'].StringBuilder(),
_0x18a3xb6;
while ((_0x18a3xb6 = _0x18a3xb4['read']()) != -1) {
_0x18a3xb5['append'](java['lang'].Character(_0x18a3xb6))
};
_0x18a3xaf = String(_0x18a3xb5.toString());
_0x18a3xb4['close']()
};
return _0x18a3xaf
};

function loadTxtFromUrl(_0x18a3xb8) {
try {
var _0x18a3xaf = new java['io'].ByteArrayOutputStream();
android['net']['http']['AndroidHttpClient']['newInstance']('userAgent')['execute'](new org['apache']['http']['client']['methods'].HttpGet(_0x18a3xb8))['getEntity']()['writeTo'](_0x18a3xaf);
_0x18a3xaf['close']();
return String(_0x18a3xaf.toString())
} catch (e) {
betToast(e+' #' + e['lineNumber'])
return ''
}
}

/*
Vein Miner Mod
created by wilco365
- Given permission to use, improve, and add the script to Instinct
*/
var blocksVar=[];
var blockIdVar;
var blockDataVar;
var blocksReplaced;
var itemToDropId;
var carriedItem;
var veinMinerEnabled = false;
var nthModTick = 0;

function destroyBlock(x,y,z,side){
//Handle block break
blockIdVar = getTile(x,y,z);
blockDataVar = Level.getData(x,y,z);
blocksReplaced = 0;
if(veinMinerEnabled && testItem(blockIdVar)){
preventDefault();
blocksVar.push([x,y,z]);
}
}

function getMaxItemDamage(item){
if(item.ind(269,270,271)) return 60;
else if(item.ind(273,274,275)) return 132;
else if(item.ind(256,257,258)) return 251;
else if(item.ind(284,285,286)) return 33;
else if(item.ind(277,278,279)) return 1562;
}

function testItem(id){
if(id==3||id==4||id==5||id==12||id==13||id==14||id==15||id==24||id==48||id==49||id==87||id==98||id==155||id==159){
itemToDropId = id;
return true;
}else if(id == 2){
itemToDropId = 3;
return true;
}else if(id == 1){
itemToDropId = 4;
return true;
}else if(id == 16){
itemToDropId = 263;
return true;
}else if(id == 56){
itemToDropId = 264;
return true;
}else if(id == 56){
itemToDropId = 264;
return true;
}
else return false
}

function toggleVeinMiner(){
veinMinerEnabled = !veinMinerEnabled;
}